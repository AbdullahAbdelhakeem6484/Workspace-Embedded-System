
SPI_UART_Activity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000d14  00000000  00000000  00000910  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a38  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 49 04 	call	0x892	; 0x892 <main>
  64:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDir>:
 */
#include"std_type.h"
#include"macros.h"
#include<avr/io.h>
 void DIO_voidSetPinDir(u8 Port,u8 Pin, u8 Dir)
 {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_voidSetPinDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_voidSetPinDir+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6a 83       	std	Y+2, r22	; 0x02
  7e:	4b 83       	std	Y+3, r20	; 0x03
	 switch(Port)
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	3d 83       	std	Y+5, r19	; 0x05
  88:	2c 83       	std	Y+4, r18	; 0x04
  8a:	8c 81       	ldd	r24, Y+4	; 0x04
  8c:	9d 81       	ldd	r25, Y+5	; 0x05
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	91 05       	cpc	r25, r1
  92:	09 f4       	brne	.+2      	; 0x96 <DIO_voidSetPinDir+0x2a>
  94:	43 c0       	rjmp	.+134    	; 0x11c <DIO_voidSetPinDir+0xb0>
  96:	2c 81       	ldd	r18, Y+4	; 0x04
  98:	3d 81       	ldd	r19, Y+5	; 0x05
  9a:	22 30       	cpi	r18, 0x02	; 2
  9c:	31 05       	cpc	r19, r1
  9e:	2c f4       	brge	.+10     	; 0xaa <DIO_voidSetPinDir+0x3e>
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	9d 81       	ldd	r25, Y+5	; 0x05
  a4:	00 97       	sbiw	r24, 0x00	; 0
  a6:	71 f0       	breq	.+28     	; 0xc4 <DIO_voidSetPinDir+0x58>
  a8:	bc c0       	rjmp	.+376    	; 0x222 <DIO_voidSetPinDir+0x1b6>
  aa:	2c 81       	ldd	r18, Y+4	; 0x04
  ac:	3d 81       	ldd	r19, Y+5	; 0x05
  ae:	22 30       	cpi	r18, 0x02	; 2
  b0:	31 05       	cpc	r19, r1
  b2:	09 f4       	brne	.+2      	; 0xb6 <DIO_voidSetPinDir+0x4a>
  b4:	5f c0       	rjmp	.+190    	; 0x174 <DIO_voidSetPinDir+0x108>
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	9d 81       	ldd	r25, Y+5	; 0x05
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	91 05       	cpc	r25, r1
  be:	09 f4       	brne	.+2      	; 0xc2 <DIO_voidSetPinDir+0x56>
  c0:	85 c0       	rjmp	.+266    	; 0x1cc <DIO_voidSetPinDir+0x160>
  c2:	af c0       	rjmp	.+350    	; 0x222 <DIO_voidSetPinDir+0x1b6>
	 {
	 case 0:
		 if(Dir==0)
  c4:	8b 81       	ldd	r24, Y+3	; 0x03
  c6:	88 23       	and	r24, r24
  c8:	a9 f4       	brne	.+42     	; 0xf4 <DIO_voidSetPinDir+0x88>
		 {
			 CLEAR_BIT(DDRA,Pin);
  ca:	aa e3       	ldi	r26, 0x3A	; 58
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	ea e3       	ldi	r30, 0x3A	; 58
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	48 2f       	mov	r20, r24
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	28 2f       	mov	r18, r24
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 2e       	mov	r0, r18
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_voidSetPinDir+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_voidSetPinDir+0x78>
  ec:	80 95       	com	r24
  ee:	84 23       	and	r24, r20
  f0:	8c 93       	st	X, r24
  f2:	97 c0       	rjmp	.+302    	; 0x222 <DIO_voidSetPinDir+0x1b6>
		 }
		 else
		 {
			SET_BIT(DDRA,Pin);
  f4:	aa e3       	ldi	r26, 0x3A	; 58
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	ea e3       	ldi	r30, 0x3A	; 58
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	48 2f       	mov	r20, r24
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	28 2f       	mov	r18, r24
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 2e       	mov	r0, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_voidSetPinDir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_voidSetPinDir+0xa2>
 116:	84 2b       	or	r24, r20
 118:	8c 93       	st	X, r24
 11a:	83 c0       	rjmp	.+262    	; 0x222 <DIO_voidSetPinDir+0x1b6>
		 }
		 break;
	 case 1:
		 if(Dir==0)
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	88 23       	and	r24, r24
 120:	a9 f4       	brne	.+42     	; 0x14c <DIO_voidSetPinDir+0xe0>
		 {
			 CLEAR_BIT(DDRB,Pin);
 122:	a7 e3       	ldi	r26, 0x37	; 55
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e7 e3       	ldi	r30, 0x37	; 55
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	48 2f       	mov	r20, r24
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	28 2f       	mov	r18, r24
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_voidSetPinDir+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_voidSetPinDir+0xd0>
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	8c 93       	st	X, r24
 14a:	6b c0       	rjmp	.+214    	; 0x222 <DIO_voidSetPinDir+0x1b6>
		 }
		 else
		 {
			SET_BIT(DDRB,Pin);
 14c:	a7 e3       	ldi	r26, 0x37	; 55
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	e7 e3       	ldi	r30, 0x37	; 55
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	48 2f       	mov	r20, r24
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_voidSetPinDir+0xfe>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_voidSetPinDir+0xfa>
 16e:	84 2b       	or	r24, r20
 170:	8c 93       	st	X, r24
 172:	57 c0       	rjmp	.+174    	; 0x222 <DIO_voidSetPinDir+0x1b6>
		 }
		 break;
	 case 2:
		 if(Dir==0)
 174:	8b 81       	ldd	r24, Y+3	; 0x03
 176:	88 23       	and	r24, r24
 178:	a9 f4       	brne	.+42     	; 0x1a4 <DIO_voidSetPinDir+0x138>
		 {
			 CLEAR_BIT(DDRC,Pin);
 17a:	a4 e3       	ldi	r26, 0x34	; 52
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	e4 e3       	ldi	r30, 0x34	; 52
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	48 2f       	mov	r20, r24
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	28 2f       	mov	r18, r24
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 2e       	mov	r0, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_voidSetPinDir+0x12c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_voidSetPinDir+0x128>
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	8c 93       	st	X, r24
 1a2:	3f c0       	rjmp	.+126    	; 0x222 <DIO_voidSetPinDir+0x1b6>
		 }
		 else
		 {
			SET_BIT(DDRC,Pin);
 1a4:	a4 e3       	ldi	r26, 0x34	; 52
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	e4 e3       	ldi	r30, 0x34	; 52
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	48 2f       	mov	r20, r24
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_voidSetPinDir+0x156>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_voidSetPinDir+0x152>
 1c6:	84 2b       	or	r24, r20
 1c8:	8c 93       	st	X, r24
 1ca:	2b c0       	rjmp	.+86     	; 0x222 <DIO_voidSetPinDir+0x1b6>
		 }
		 break;
	 case 3:
		 if(Dir==0)
 1cc:	8b 81       	ldd	r24, Y+3	; 0x03
 1ce:	88 23       	and	r24, r24
 1d0:	a9 f4       	brne	.+42     	; 0x1fc <DIO_voidSetPinDir+0x190>
		 {
			 CLEAR_BIT(DDRD,Pin);
 1d2:	a1 e3       	ldi	r26, 0x31	; 49
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e1 e3       	ldi	r30, 0x31	; 49
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	48 2f       	mov	r20, r24
 1de:	8a 81       	ldd	r24, Y+2	; 0x02
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_voidSetPinDir+0x184>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_voidSetPinDir+0x180>
 1f4:	80 95       	com	r24
 1f6:	84 23       	and	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	13 c0       	rjmp	.+38     	; 0x222 <DIO_voidSetPinDir+0x1b6>
		 }
		 else
		 {
			SET_BIT(DDRD,Pin);
 1fc:	a1 e3       	ldi	r26, 0x31	; 49
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e1 e3       	ldi	r30, 0x31	; 49
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_voidSetPinDir+0x1ae>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_voidSetPinDir+0x1aa>
 21e:	84 2b       	or	r24, r20
 220:	8c 93       	st	X, r24
		 }
		 break;
	 }
 }
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	cf 91       	pop	r28
 22e:	df 91       	pop	r29
 230:	08 95       	ret

00000232 <DIO_voidSetPinValue>:
 void DIO_voidSetPinValue(u8 Port,u8 Pin,u8 Value)
 {
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	00 d0       	rcall	.+0      	; 0x238 <DIO_voidSetPinValue+0x6>
 238:	00 d0       	rcall	.+0      	; 0x23a <DIO_voidSetPinValue+0x8>
 23a:	0f 92       	push	r0
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	6a 83       	std	Y+2, r22	; 0x02
 244:	4b 83       	std	Y+3, r20	; 0x03
	 switch(Port)
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	3d 83       	std	Y+5, r19	; 0x05
 24e:	2c 83       	std	Y+4, r18	; 0x04
 250:	8c 81       	ldd	r24, Y+4	; 0x04
 252:	9d 81       	ldd	r25, Y+5	; 0x05
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	91 05       	cpc	r25, r1
 258:	09 f4       	brne	.+2      	; 0x25c <DIO_voidSetPinValue+0x2a>
 25a:	43 c0       	rjmp	.+134    	; 0x2e2 <DIO_voidSetPinValue+0xb0>
 25c:	2c 81       	ldd	r18, Y+4	; 0x04
 25e:	3d 81       	ldd	r19, Y+5	; 0x05
 260:	22 30       	cpi	r18, 0x02	; 2
 262:	31 05       	cpc	r19, r1
 264:	2c f4       	brge	.+10     	; 0x270 <DIO_voidSetPinValue+0x3e>
 266:	8c 81       	ldd	r24, Y+4	; 0x04
 268:	9d 81       	ldd	r25, Y+5	; 0x05
 26a:	00 97       	sbiw	r24, 0x00	; 0
 26c:	71 f0       	breq	.+28     	; 0x28a <DIO_voidSetPinValue+0x58>
 26e:	bc c0       	rjmp	.+376    	; 0x3e8 <DIO_voidSetPinValue+0x1b6>
 270:	2c 81       	ldd	r18, Y+4	; 0x04
 272:	3d 81       	ldd	r19, Y+5	; 0x05
 274:	22 30       	cpi	r18, 0x02	; 2
 276:	31 05       	cpc	r19, r1
 278:	09 f4       	brne	.+2      	; 0x27c <DIO_voidSetPinValue+0x4a>
 27a:	5f c0       	rjmp	.+190    	; 0x33a <DIO_voidSetPinValue+0x108>
 27c:	8c 81       	ldd	r24, Y+4	; 0x04
 27e:	9d 81       	ldd	r25, Y+5	; 0x05
 280:	83 30       	cpi	r24, 0x03	; 3
 282:	91 05       	cpc	r25, r1
 284:	09 f4       	brne	.+2      	; 0x288 <DIO_voidSetPinValue+0x56>
 286:	85 c0       	rjmp	.+266    	; 0x392 <DIO_voidSetPinValue+0x160>
 288:	af c0       	rjmp	.+350    	; 0x3e8 <DIO_voidSetPinValue+0x1b6>
	 {
	 case 0:
		 if(Value==0)
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	88 23       	and	r24, r24
 28e:	a9 f4       	brne	.+42     	; 0x2ba <DIO_voidSetPinValue+0x88>
		 {
			 CLEAR_BIT(PORTA,Pin);
 290:	ab e3       	ldi	r26, 0x3B	; 59
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	eb e3       	ldi	r30, 0x3B	; 59
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	48 2f       	mov	r20, r24
 29c:	8a 81       	ldd	r24, Y+2	; 0x02
 29e:	28 2f       	mov	r18, r24
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 2e       	mov	r0, r18
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_voidSetPinValue+0x7c>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	0a 94       	dec	r0
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_voidSetPinValue+0x78>
 2b2:	80 95       	com	r24
 2b4:	84 23       	and	r24, r20
 2b6:	8c 93       	st	X, r24
 2b8:	97 c0       	rjmp	.+302    	; 0x3e8 <DIO_voidSetPinValue+0x1b6>
		 }
		 else
		 {
			SET_BIT(PORTA,Pin);
 2ba:	ab e3       	ldi	r26, 0x3B	; 59
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	eb e3       	ldi	r30, 0x3B	; 59
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	48 2f       	mov	r20, r24
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 2e       	mov	r0, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_voidSetPinValue+0xa6>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_voidSetPinValue+0xa2>
 2dc:	84 2b       	or	r24, r20
 2de:	8c 93       	st	X, r24
 2e0:	83 c0       	rjmp	.+262    	; 0x3e8 <DIO_voidSetPinValue+0x1b6>
		 }
		 break;
	 case 1:
		 if(Value==0)
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	88 23       	and	r24, r24
 2e6:	a9 f4       	brne	.+42     	; 0x312 <DIO_voidSetPinValue+0xe0>
		 {
			 CLEAR_BIT(PORTB,Pin);
 2e8:	a8 e3       	ldi	r26, 0x38	; 56
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e8 e3       	ldi	r30, 0x38	; 56
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	48 2f       	mov	r20, r24
 2f4:	8a 81       	ldd	r24, Y+2	; 0x02
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 2e       	mov	r0, r18
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_voidSetPinValue+0xd4>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	0a 94       	dec	r0
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_voidSetPinValue+0xd0>
 30a:	80 95       	com	r24
 30c:	84 23       	and	r24, r20
 30e:	8c 93       	st	X, r24
 310:	6b c0       	rjmp	.+214    	; 0x3e8 <DIO_voidSetPinValue+0x1b6>
		 }
		 else
		 {
			SET_BIT(PORTB,Pin);
 312:	a8 e3       	ldi	r26, 0x38	; 56
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	e8 e3       	ldi	r30, 0x38	; 56
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	48 2f       	mov	r20, r24
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 2e       	mov	r0, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_voidSetPinValue+0xfe>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_voidSetPinValue+0xfa>
 334:	84 2b       	or	r24, r20
 336:	8c 93       	st	X, r24
 338:	57 c0       	rjmp	.+174    	; 0x3e8 <DIO_voidSetPinValue+0x1b6>
		 }
		 break;
	 case 2:
		 if(Value==0)
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	88 23       	and	r24, r24
 33e:	a9 f4       	brne	.+42     	; 0x36a <DIO_voidSetPinValue+0x138>
		 {
			 CLEAR_BIT(PORTC,Pin);
 340:	a5 e3       	ldi	r26, 0x35	; 53
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	e5 e3       	ldi	r30, 0x35	; 53
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	48 2f       	mov	r20, r24
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 2e       	mov	r0, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_voidSetPinValue+0x12c>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_voidSetPinValue+0x128>
 362:	80 95       	com	r24
 364:	84 23       	and	r24, r20
 366:	8c 93       	st	X, r24
 368:	3f c0       	rjmp	.+126    	; 0x3e8 <DIO_voidSetPinValue+0x1b6>
		 }
		 else
		 {
			SET_BIT(PORTC,Pin);
 36a:	a5 e3       	ldi	r26, 0x35	; 53
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	e5 e3       	ldi	r30, 0x35	; 53
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	48 2f       	mov	r20, r24
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 2e       	mov	r0, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_voidSetPinValue+0x156>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_voidSetPinValue+0x152>
 38c:	84 2b       	or	r24, r20
 38e:	8c 93       	st	X, r24
 390:	2b c0       	rjmp	.+86     	; 0x3e8 <DIO_voidSetPinValue+0x1b6>
		 }
		 break;
	 case 3:
		 if(Value==0)
 392:	8b 81       	ldd	r24, Y+3	; 0x03
 394:	88 23       	and	r24, r24
 396:	a9 f4       	brne	.+42     	; 0x3c2 <DIO_voidSetPinValue+0x190>
		 {
			 CLEAR_BIT(PORTD,Pin);
 398:	a2 e3       	ldi	r26, 0x32	; 50
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	e2 e3       	ldi	r30, 0x32	; 50
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	48 2f       	mov	r20, r24
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 2e       	mov	r0, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_voidSetPinValue+0x184>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_voidSetPinValue+0x180>
 3ba:	80 95       	com	r24
 3bc:	84 23       	and	r24, r20
 3be:	8c 93       	st	X, r24
 3c0:	13 c0       	rjmp	.+38     	; 0x3e8 <DIO_voidSetPinValue+0x1b6>
		 }
		 else
		 {
			SET_BIT(PORTD,Pin);
 3c2:	a2 e3       	ldi	r26, 0x32	; 50
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	e2 e3       	ldi	r30, 0x32	; 50
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	48 2f       	mov	r20, r24
 3ce:	8a 81       	ldd	r24, Y+2	; 0x02
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 2e       	mov	r0, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_voidSetPinValue+0x1ae>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_voidSetPinValue+0x1aa>
 3e4:	84 2b       	or	r24, r20
 3e6:	8c 93       	st	X, r24
		 }
		 break;
	 }
 }
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	08 95       	ret

000003f8 <DIO_voidTogglePinValue>:
 void DIO_voidTogglePinValue(u8 Port,u8 Pin)
 {
 3f8:	df 93       	push	r29
 3fa:	cf 93       	push	r28
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <DIO_voidTogglePinValue+0x6>
 3fe:	00 d0       	rcall	.+0      	; 0x400 <DIO_voidTogglePinValue+0x8>
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
 404:	89 83       	std	Y+1, r24	; 0x01
 406:	6a 83       	std	Y+2, r22	; 0x02
	 switch(Port)
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	28 2f       	mov	r18, r24
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	3c 83       	std	Y+4, r19	; 0x04
 410:	2b 83       	std	Y+3, r18	; 0x03
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	9c 81       	ldd	r25, Y+4	; 0x04
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	91 05       	cpc	r25, r1
 41a:	49 f1       	breq	.+82     	; 0x46e <DIO_voidTogglePinValue+0x76>
 41c:	2b 81       	ldd	r18, Y+3	; 0x03
 41e:	3c 81       	ldd	r19, Y+4	; 0x04
 420:	22 30       	cpi	r18, 0x02	; 2
 422:	31 05       	cpc	r19, r1
 424:	2c f4       	brge	.+10     	; 0x430 <DIO_voidTogglePinValue+0x38>
 426:	8b 81       	ldd	r24, Y+3	; 0x03
 428:	9c 81       	ldd	r25, Y+4	; 0x04
 42a:	00 97       	sbiw	r24, 0x00	; 0
 42c:	61 f0       	breq	.+24     	; 0x446 <DIO_voidTogglePinValue+0x4e>
 42e:	5a c0       	rjmp	.+180    	; 0x4e4 <DIO_voidTogglePinValue+0xec>
 430:	2b 81       	ldd	r18, Y+3	; 0x03
 432:	3c 81       	ldd	r19, Y+4	; 0x04
 434:	22 30       	cpi	r18, 0x02	; 2
 436:	31 05       	cpc	r19, r1
 438:	71 f1       	breq	.+92     	; 0x496 <DIO_voidTogglePinValue+0x9e>
 43a:	8b 81       	ldd	r24, Y+3	; 0x03
 43c:	9c 81       	ldd	r25, Y+4	; 0x04
 43e:	83 30       	cpi	r24, 0x03	; 3
 440:	91 05       	cpc	r25, r1
 442:	e9 f1       	breq	.+122    	; 0x4be <DIO_voidTogglePinValue+0xc6>
 444:	4f c0       	rjmp	.+158    	; 0x4e4 <DIO_voidTogglePinValue+0xec>
	 {
	 case 0:
		TOGGLE_BIT(PORTA,Pin);
 446:	ab e3       	ldi	r26, 0x3B	; 59
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	eb e3       	ldi	r30, 0x3B	; 59
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	48 2f       	mov	r20, r24
 452:	8a 81       	ldd	r24, Y+2	; 0x02
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 2e       	mov	r0, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_voidTogglePinValue+0x6c>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_voidTogglePinValue+0x68>
 468:	84 27       	eor	r24, r20
 46a:	8c 93       	st	X, r24
 46c:	3b c0       	rjmp	.+118    	; 0x4e4 <DIO_voidTogglePinValue+0xec>
		 break;
	 case 1:
		TOGGLE_BIT(PORTB,Pin);
 46e:	a8 e3       	ldi	r26, 0x38	; 56
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	e8 e3       	ldi	r30, 0x38	; 56
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	48 2f       	mov	r20, r24
 47a:	8a 81       	ldd	r24, Y+2	; 0x02
 47c:	28 2f       	mov	r18, r24
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 2e       	mov	r0, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_voidTogglePinValue+0x94>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_voidTogglePinValue+0x90>
 490:	84 27       	eor	r24, r20
 492:	8c 93       	st	X, r24
 494:	27 c0       	rjmp	.+78     	; 0x4e4 <DIO_voidTogglePinValue+0xec>
		 break;
	 case 2:
		TOGGLE_BIT(PORTC,Pin);
 496:	a5 e3       	ldi	r26, 0x35	; 53
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	e5 e3       	ldi	r30, 0x35	; 53
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	48 2f       	mov	r20, r24
 4a2:	8a 81       	ldd	r24, Y+2	; 0x02
 4a4:	28 2f       	mov	r18, r24
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 2e       	mov	r0, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_voidTogglePinValue+0xbc>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_voidTogglePinValue+0xb8>
 4b8:	84 27       	eor	r24, r20
 4ba:	8c 93       	st	X, r24
 4bc:	13 c0       	rjmp	.+38     	; 0x4e4 <DIO_voidTogglePinValue+0xec>
		break;
	 case 3:
		TOGGLE_BIT(PORTD,Pin);
 4be:	a2 e3       	ldi	r26, 0x32	; 50
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e2 e3       	ldi	r30, 0x32	; 50
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	48 2f       	mov	r20, r24
 4ca:	8a 81       	ldd	r24, Y+2	; 0x02
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 2e       	mov	r0, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_voidTogglePinValue+0xe4>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_voidTogglePinValue+0xe0>
 4e0:	84 27       	eor	r24, r20
 4e2:	8c 93       	st	X, r24
		 break;
	 }
 }
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	cf 91       	pop	r28
 4ee:	df 91       	pop	r29
 4f0:	08 95       	ret

000004f2 <DIO_u8GetPinValue>:
 u8 DIO_u8GetPinValue(u8 Port,u8 Pin)
 {
 4f2:	df 93       	push	r29
 4f4:	cf 93       	push	r28
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <DIO_u8GetPinValue+0x6>
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <DIO_u8GetPinValue+0x8>
 4fa:	00 d0       	rcall	.+0      	; 0x4fc <DIO_u8GetPinValue+0xa>
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
 500:	89 83       	std	Y+1, r24	; 0x01
 502:	6a 83       	std	Y+2, r22	; 0x02
	 switch(Port)
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	28 2f       	mov	r18, r24
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	3d 83       	std	Y+5, r19	; 0x05
 50c:	2c 83       	std	Y+4, r18	; 0x04
 50e:	4c 81       	ldd	r20, Y+4	; 0x04
 510:	5d 81       	ldd	r21, Y+5	; 0x05
 512:	41 30       	cpi	r20, 0x01	; 1
 514:	51 05       	cpc	r21, r1
 516:	49 f1       	breq	.+82     	; 0x56a <DIO_u8GetPinValue+0x78>
 518:	8c 81       	ldd	r24, Y+4	; 0x04
 51a:	9d 81       	ldd	r25, Y+5	; 0x05
 51c:	82 30       	cpi	r24, 0x02	; 2
 51e:	91 05       	cpc	r25, r1
 520:	34 f4       	brge	.+12     	; 0x52e <DIO_u8GetPinValue+0x3c>
 522:	2c 81       	ldd	r18, Y+4	; 0x04
 524:	3d 81       	ldd	r19, Y+5	; 0x05
 526:	21 15       	cp	r18, r1
 528:	31 05       	cpc	r19, r1
 52a:	61 f0       	breq	.+24     	; 0x544 <DIO_u8GetPinValue+0x52>
 52c:	57 c0       	rjmp	.+174    	; 0x5dc <DIO_u8GetPinValue+0xea>
 52e:	4c 81       	ldd	r20, Y+4	; 0x04
 530:	5d 81       	ldd	r21, Y+5	; 0x05
 532:	42 30       	cpi	r20, 0x02	; 2
 534:	51 05       	cpc	r21, r1
 536:	61 f1       	breq	.+88     	; 0x590 <DIO_u8GetPinValue+0x9e>
 538:	8c 81       	ldd	r24, Y+4	; 0x04
 53a:	9d 81       	ldd	r25, Y+5	; 0x05
 53c:	83 30       	cpi	r24, 0x03	; 3
 53e:	91 05       	cpc	r25, r1
 540:	d1 f1       	breq	.+116    	; 0x5b6 <DIO_u8GetPinValue+0xc4>
 542:	4c c0       	rjmp	.+152    	; 0x5dc <DIO_u8GetPinValue+0xea>
	 {
	 case 0 :
		 return GET_BIT(PINA,Pin);
 544:	e9 e3       	ldi	r30, 0x39	; 57
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	28 2f       	mov	r18, r24
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	8a 81       	ldd	r24, Y+2	; 0x02
 550:	88 2f       	mov	r24, r24
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	a9 01       	movw	r20, r18
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_u8GetPinValue+0x6a>
 558:	55 95       	asr	r21
 55a:	47 95       	ror	r20
 55c:	8a 95       	dec	r24
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_u8GetPinValue+0x66>
 560:	ca 01       	movw	r24, r20
 562:	58 2f       	mov	r21, r24
 564:	51 70       	andi	r21, 0x01	; 1
 566:	5b 83       	std	Y+3, r21	; 0x03
 568:	3a c0       	rjmp	.+116    	; 0x5de <DIO_u8GetPinValue+0xec>
		 break;

	 case 1 :
		 return GET_BIT(PINB,Pin);
 56a:	e6 e3       	ldi	r30, 0x36	; 54
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	28 2f       	mov	r18, r24
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	8a 81       	ldd	r24, Y+2	; 0x02
 576:	88 2f       	mov	r24, r24
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	a9 01       	movw	r20, r18
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_u8GetPinValue+0x90>
 57e:	55 95       	asr	r21
 580:	47 95       	ror	r20
 582:	8a 95       	dec	r24
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_u8GetPinValue+0x8c>
 586:	ca 01       	movw	r24, r20
 588:	58 2f       	mov	r21, r24
 58a:	51 70       	andi	r21, 0x01	; 1
 58c:	5b 83       	std	Y+3, r21	; 0x03
 58e:	27 c0       	rjmp	.+78     	; 0x5de <DIO_u8GetPinValue+0xec>
		 break;

	 case 2 :
		 return GET_BIT(PINC,Pin);
 590:	e3 e3       	ldi	r30, 0x33	; 51
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	28 2f       	mov	r18, r24
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	8a 81       	ldd	r24, Y+2	; 0x02
 59c:	88 2f       	mov	r24, r24
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	a9 01       	movw	r20, r18
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_u8GetPinValue+0xb6>
 5a4:	55 95       	asr	r21
 5a6:	47 95       	ror	r20
 5a8:	8a 95       	dec	r24
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_u8GetPinValue+0xb2>
 5ac:	ca 01       	movw	r24, r20
 5ae:	58 2f       	mov	r21, r24
 5b0:	51 70       	andi	r21, 0x01	; 1
 5b2:	5b 83       	std	Y+3, r21	; 0x03
 5b4:	14 c0       	rjmp	.+40     	; 0x5de <DIO_u8GetPinValue+0xec>
		 break;
	 case 3 :
		 return GET_BIT(PIND,Pin);
 5b6:	e0 e3       	ldi	r30, 0x30	; 48
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	28 2f       	mov	r18, r24
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	8a 81       	ldd	r24, Y+2	; 0x02
 5c2:	88 2f       	mov	r24, r24
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	a9 01       	movw	r20, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_u8GetPinValue+0xdc>
 5ca:	55 95       	asr	r21
 5cc:	47 95       	ror	r20
 5ce:	8a 95       	dec	r24
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_u8GetPinValue+0xd8>
 5d2:	ca 01       	movw	r24, r20
 5d4:	58 2f       	mov	r21, r24
 5d6:	51 70       	andi	r21, 0x01	; 1
 5d8:	5b 83       	std	Y+3, r21	; 0x03
 5da:	01 c0       	rjmp	.+2      	; 0x5de <DIO_u8GetPinValue+0xec>
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_u8GetPinValue+0xf0>
break;
 }
 }
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	8e 83       	std	Y+6, r24	; 0x06
 5e2:	8e 81       	ldd	r24, Y+6	; 0x06
 5e4:	26 96       	adiw	r28, 0x06	; 6
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	f8 94       	cli
 5ea:	de bf       	out	0x3e, r29	; 62
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	cd bf       	out	0x3d, r28	; 61
 5f0:	cf 91       	pop	r28
 5f2:	df 91       	pop	r29
 5f4:	08 95       	ret

000005f6 <SPI_voidMasterInit>:
#include "DIO_interface.h"
#include <avr/io.h>

void SPI_voidMasterInit(void)

{
 5f6:	df 93       	push	r29
 5f8:	cf 93       	push	r28
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,6);          //ENABLE
 5fe:	ad e2       	ldi	r26, 0x2D	; 45
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	ed e2       	ldi	r30, 0x2D	; 45
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	80 64       	ori	r24, 0x40	; 64
 60a:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,5);
 60c:	ad e2       	ldi	r26, 0x2D	; 45
 60e:	b0 e0       	ldi	r27, 0x00	; 0
 610:	ed e2       	ldi	r30, 0x2D	; 45
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	8f 7d       	andi	r24, 0xDF	; 223
 618:	8c 93       	st	X, r24
	SET_BIT(SPCR,4);   // MASTER
 61a:	ad e2       	ldi	r26, 0x2D	; 45
 61c:	b0 e0       	ldi	r27, 0x00	; 0
 61e:	ed e2       	ldi	r30, 0x2D	; 45
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	80 61       	ori	r24, 0x10	; 16
 626:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,3);
 628:	ad e2       	ldi	r26, 0x2D	; 45
 62a:	b0 e0       	ldi	r27, 0x00	; 0
 62c:	ed e2       	ldi	r30, 0x2D	; 45
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	80 81       	ld	r24, Z
 632:	87 7f       	andi	r24, 0xF7	; 247
 634:	8c 93       	st	X, r24
	SET_BIT(SPCR,2);
 636:	ad e2       	ldi	r26, 0x2D	; 45
 638:	b0 e0       	ldi	r27, 0x00	; 0
 63a:	ed e2       	ldi	r30, 0x2D	; 45
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	84 60       	ori	r24, 0x04	; 4
 642:	8c 93       	st	X, r24
	// PRESCALER
	SET_BIT(SPCR,1);
 644:	ad e2       	ldi	r26, 0x2D	; 45
 646:	b0 e0       	ldi	r27, 0x00	; 0
 648:	ed e2       	ldi	r30, 0x2D	; 45
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	82 60       	ori	r24, 0x02	; 2
 650:	8c 93       	st	X, r24
	SET_BIT(SPCR,0);
 652:	ad e2       	ldi	r26, 0x2D	; 45
 654:	b0 e0       	ldi	r27, 0x00	; 0
 656:	ed e2       	ldi	r30, 0x2D	; 45
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 81       	ld	r24, Z
 65c:	81 60       	ori	r24, 0x01	; 1
 65e:	8c 93       	st	X, r24
    SET_BIT(SPSR,0);
 660:	ae e2       	ldi	r26, 0x2E	; 46
 662:	b0 e0       	ldi	r27, 0x00	; 0
 664:	ee e2       	ldi	r30, 0x2E	; 46
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	80 81       	ld	r24, Z
 66a:	81 60       	ori	r24, 0x01	; 1
 66c:	8c 93       	st	X, r24
// MASTER PINS
DIO_voidSetPinDir(PORT_B,Pin_4,OUTPUT);
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	64 e0       	ldi	r22, 0x04	; 4
 672:	41 e0       	ldi	r20, 0x01	; 1
 674:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
DIO_voidSetPinDir(PORT_B,Pin_5,OUTPUT);
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	65 e0       	ldi	r22, 0x05	; 5
 67c:	41 e0       	ldi	r20, 0x01	; 1
 67e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
DIO_voidSetPinDir(PORT_B,Pin_7,OUTPUT);
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	67 e0       	ldi	r22, 0x07	; 7
 686:	41 e0       	ldi	r20, 0x01	; 1
 688:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
DIO_voidSetPinDir(PORT_B,Pin_6,INPUT);
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	66 e0       	ldi	r22, 0x06	; 6
 690:	40 e0       	ldi	r20, 0x00	; 0
 692:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
}
 696:	cf 91       	pop	r28
 698:	df 91       	pop	r29
 69a:	08 95       	ret

0000069c <SPI_voidSlaveInit>:
void SPI_voidSlaveInit(void)
{
 69c:	df 93       	push	r29
 69e:	cf 93       	push	r28
 6a0:	cd b7       	in	r28, 0x3d	; 61
 6a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,6);          //ENABLE
 6a4:	ad e2       	ldi	r26, 0x2D	; 45
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	ed e2       	ldi	r30, 0x2D	; 45
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	80 64       	ori	r24, 0x40	; 64
 6b0:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,5);
 6b2:	ad e2       	ldi	r26, 0x2D	; 45
 6b4:	b0 e0       	ldi	r27, 0x00	; 0
 6b6:	ed e2       	ldi	r30, 0x2D	; 45
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	8f 7d       	andi	r24, 0xDF	; 223
 6be:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,4);   // SLAVE
 6c0:	ad e2       	ldi	r26, 0x2D	; 45
 6c2:	b0 e0       	ldi	r27, 0x00	; 0
 6c4:	ed e2       	ldi	r30, 0x2D	; 45
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	8f 7e       	andi	r24, 0xEF	; 239
 6cc:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,3);
 6ce:	ad e2       	ldi	r26, 0x2D	; 45
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	ed e2       	ldi	r30, 0x2D	; 45
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	87 7f       	andi	r24, 0xF7	; 247
 6da:	8c 93       	st	X, r24
	SET_BIT(SPCR,2);
 6dc:	ad e2       	ldi	r26, 0x2D	; 45
 6de:	b0 e0       	ldi	r27, 0x00	; 0
 6e0:	ed e2       	ldi	r30, 0x2D	; 45
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	84 60       	ori	r24, 0x04	; 4
 6e8:	8c 93       	st	X, r24
	// PRESCALER
	SET_BIT(SPCR,1);
 6ea:	ad e2       	ldi	r26, 0x2D	; 45
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	ed e2       	ldi	r30, 0x2D	; 45
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	82 60       	ori	r24, 0x02	; 2
 6f6:	8c 93       	st	X, r24
	SET_BIT(SPCR,0);
 6f8:	ad e2       	ldi	r26, 0x2D	; 45
 6fa:	b0 e0       	ldi	r27, 0x00	; 0
 6fc:	ed e2       	ldi	r30, 0x2D	; 45
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	81 60       	ori	r24, 0x01	; 1
 704:	8c 93       	st	X, r24
    SET_BIT(SPSR,0);
 706:	ae e2       	ldi	r26, 0x2E	; 46
 708:	b0 e0       	ldi	r27, 0x00	; 0
 70a:	ee e2       	ldi	r30, 0x2E	; 46
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	81 60       	ori	r24, 0x01	; 1
 712:	8c 93       	st	X, r24
// SLAVE PINS
DIO_voidSetPinDir(PORT_B,Pin_4,INPUT);
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	64 e0       	ldi	r22, 0x04	; 4
 718:	40 e0       	ldi	r20, 0x00	; 0
 71a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
DIO_voidSetPinValue(PORT_B,Pin_4,HIGH); //INPUT PULL UP
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	64 e0       	ldi	r22, 0x04	; 4
 722:	41 e0       	ldi	r20, 0x01	; 1
 724:	0e 94 19 01 	call	0x232	; 0x232 <DIO_voidSetPinValue>
DIO_voidSetPinDir(PORT_B,Pin_5,INPUT);
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	65 e0       	ldi	r22, 0x05	; 5
 72c:	40 e0       	ldi	r20, 0x00	; 0
 72e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
DIO_voidSetPinDir(PORT_B,Pin_7,INPUT);
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	67 e0       	ldi	r22, 0x07	; 7
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
DIO_voidSetPinDir(PORT_B,Pin_6,OUTPUT);
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	66 e0       	ldi	r22, 0x06	; 6
 740:	41 e0       	ldi	r20, 0x01	; 1
 742:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDir>
}
 746:	cf 91       	pop	r28
 748:	df 91       	pop	r29
 74a:	08 95       	ret

0000074c <SPI_u8Transfer>:
u8 SPI_u8Transfer(u8 byte)
{
 74c:	df 93       	push	r29
 74e:	cf 93       	push	r28
 750:	0f 92       	push	r0
 752:	cd b7       	in	r28, 0x3d	; 61
 754:	de b7       	in	r29, 0x3e	; 62
 756:	89 83       	std	Y+1, r24	; 0x01
	SPDR=byte;
 758:	ef e2       	ldi	r30, 0x2F	; 47
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	89 81       	ldd	r24, Y+1	; 0x01
 75e:	80 83       	st	Z, r24
	while (GET_BIT(SPSR,7)==0);
 760:	ee e2       	ldi	r30, 0x2E	; 46
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	88 23       	and	r24, r24
 768:	dc f7       	brge	.-10     	; 0x760 <SPI_u8Transfer+0x14>
	return SPDR;
 76a:	ef e2       	ldi	r30, 0x2F	; 47
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
}
 770:	0f 90       	pop	r0
 772:	cf 91       	pop	r28
 774:	df 91       	pop	r29
 776:	08 95       	ret

00000778 <SPI_voidSlaveSelect>:

void SPI_voidSlaveSelect(void)
{
 778:	df 93       	push	r29
 77a:	cf 93       	push	r28
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
DIO_voidSetPinValue(PORT_B,Pin_4,LOW);
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	64 e0       	ldi	r22, 0x04	; 4
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	0e 94 19 01 	call	0x232	; 0x232 <DIO_voidSetPinValue>
}
 78a:	cf 91       	pop	r28
 78c:	df 91       	pop	r29
 78e:	08 95       	ret

00000790 <SPI_voidSlaveRelease>:

void SPI_voidSlaveRelease(void)

{
 790:	df 93       	push	r29
 792:	cf 93       	push	r28
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORT_B,Pin_4,HIGH);
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	64 e0       	ldi	r22, 0x04	; 4
 79c:	41 e0       	ldi	r20, 0x01	; 1
 79e:	0e 94 19 01 	call	0x232	; 0x232 <DIO_voidSetPinValue>
}
 7a2:	cf 91       	pop	r28
 7a4:	df 91       	pop	r29
 7a6:	08 95       	ret

000007a8 <UART_voidInit>:
#include<avr/io.h>



void UART_voidInit(void)
{
 7a8:	df 93       	push	r29
 7aa:	cf 93       	push	r28
 7ac:	cd b7       	in	r28, 0x3d	; 61
 7ae:	de b7       	in	r29, 0x3e	; 62
	// ENABLE TX,RX
	SET_BIT(UCSRB,4);
 7b0:	aa e2       	ldi	r26, 0x2A	; 42
 7b2:	b0 e0       	ldi	r27, 0x00	; 0
 7b4:	ea e2       	ldi	r30, 0x2A	; 42
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	80 61       	ori	r24, 0x10	; 16
 7bc:	8c 93       	st	X, r24
	SET_BIT(UCSRB,8);
 7be:	aa e2       	ldi	r26, 0x2A	; 42
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	ea e2       	ldi	r30, 0x2A	; 42
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	8c 93       	st	X, r24

	//SELECT 8-BIT CHARCTER SIZE
	 CLEAR_BIT(UCSRB,2);
 7ca:	aa e2       	ldi	r26, 0x2A	; 42
 7cc:	b0 e0       	ldi	r27, 0x00	; 0
 7ce:	ea e2       	ldi	r30, 0x2A	; 42
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	8b 7f       	andi	r24, 0xFB	; 251
 7d6:	8c 93       	st	X, r24
	 SET_BIT(UCSRC,2);
 7d8:	a0 e4       	ldi	r26, 0x40	; 64
 7da:	b0 e0       	ldi	r27, 0x00	; 0
 7dc:	e0 e4       	ldi	r30, 0x40	; 64
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	80 81       	ld	r24, Z
 7e2:	84 60       	ori	r24, 0x04	; 4
 7e4:	8c 93       	st	X, r24
	 SET_BIT(UCSRC,1);
 7e6:	a0 e4       	ldi	r26, 0x40	; 64
 7e8:	b0 e0       	ldi	r27, 0x00	; 0
 7ea:	e0 e4       	ldi	r30, 0x40	; 64
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	80 81       	ld	r24, Z
 7f0:	82 60       	ori	r24, 0x02	; 2
 7f2:	8c 93       	st	X, r24

	 // SET ASSYNC
	 CLEAR_BIT(UCSRC,6);
 7f4:	a0 e4       	ldi	r26, 0x40	; 64
 7f6:	b0 e0       	ldi	r27, 0x00	; 0
 7f8:	e0 e4       	ldi	r30, 0x40	; 64
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	80 81       	ld	r24, Z
 7fe:	8f 7b       	andi	r24, 0xBF	; 191
 800:	8c 93       	st	X, r24
	 // NO PURITY
	 CLEAR_BIT(UCSRC,4);
 802:	a0 e4       	ldi	r26, 0x40	; 64
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	e0 e4       	ldi	r30, 0x40	; 64
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	8f 7e       	andi	r24, 0xEF	; 239
 80e:	8c 93       	st	X, r24
	 CLEAR_BIT(UCSRC,5);
 810:	a0 e4       	ldi	r26, 0x40	; 64
 812:	b0 e0       	ldi	r27, 0x00	; 0
 814:	e0 e4       	ldi	r30, 0x40	; 64
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	8f 7d       	andi	r24, 0xDF	; 223
 81c:	8c 93       	st	X, r24

	 // 1 STOP BIT
	 CLEAR_BIT(UCSRC,3);
 81e:	a0 e4       	ldi	r26, 0x40	; 64
 820:	b0 e0       	ldi	r27, 0x00	; 0
 822:	e0 e4       	ldi	r30, 0x40	; 64
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	87 7f       	andi	r24, 0xF7	; 247
 82a:	8c 93       	st	X, r24
	 // SET BIT RATE
	 UBRRH=0;
 82c:	e0 e4       	ldi	r30, 0x40	; 64
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	10 82       	st	Z, r1
	 UBRRL=77;
 832:	e9 e2       	ldi	r30, 0x29	; 41
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	8d e4       	ldi	r24, 0x4D	; 77
 838:	80 83       	st	Z, r24
}
 83a:	cf 91       	pop	r28
 83c:	df 91       	pop	r29
 83e:	08 95       	ret

00000840 <UART_voidSendByte>:

void UART_voidSendByte(u8 Byte)
{
 840:	df 93       	push	r29
 842:	cf 93       	push	r28
 844:	0f 92       	push	r0
 846:	cd b7       	in	r28, 0x3d	; 61
 848:	de b7       	in	r29, 0x3e	; 62
 84a:	89 83       	std	Y+1, r24	; 0x01

while (GET_BIT(UCSRA,5)==0);
 84c:	eb e2       	ldi	r30, 0x2B	; 43
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 81       	ld	r24, Z
 852:	82 95       	swap	r24
 854:	86 95       	lsr	r24
 856:	87 70       	andi	r24, 0x07	; 7
 858:	88 2f       	mov	r24, r24
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	81 70       	andi	r24, 0x01	; 1
 85e:	90 70       	andi	r25, 0x00	; 0
 860:	00 97       	sbiw	r24, 0x00	; 0
 862:	a1 f3       	breq	.-24     	; 0x84c <UART_voidSendByte+0xc>
UDR=Byte;
 864:	ec e2       	ldi	r30, 0x2C	; 44
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	89 81       	ldd	r24, Y+1	; 0x01
 86a:	80 83       	st	Z, r24
}
 86c:	0f 90       	pop	r0
 86e:	cf 91       	pop	r28
 870:	df 91       	pop	r29
 872:	08 95       	ret

00000874 <UART_u8RecieveByte>:

u8 UART_u8RecieveByte(void)
{
 874:	df 93       	push	r29
 876:	cf 93       	push	r28
 878:	cd b7       	in	r28, 0x3d	; 61
 87a:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(UCSRA,7)==0);
 87c:	eb e2       	ldi	r30, 0x2B	; 43
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	88 23       	and	r24, r24
 884:	dc f7       	brge	.-10     	; 0x87c <UART_u8RecieveByte+0x8>
	return UDR ;
 886:	ec e2       	ldi	r30, 0x2C	; 44
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	80 81       	ld	r24, Z

}
 88c:	cf 91       	pop	r28
 88e:	df 91       	pop	r29
 890:	08 95       	ret

00000892 <main>:
#include "std_type.h"
#include "macros.h"
#include "SPI_interface.h"
#include "UART_interface.h"
int main (void)
{
 892:	df 93       	push	r29
 894:	cf 93       	push	r28
 896:	0f 92       	push	r0
 898:	cd b7       	in	r28, 0x3d	; 61
 89a:	de b7       	in	r29, 0x3e	; 62
   u8 Received_UART;
   UART_voidInit();
 89c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <UART_voidInit>
    SPI_voidMasterInit();
 8a0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SPI_voidMasterInit>
    SPI_voidSlaveSelect();
 8a4:	0e 94 bc 03 	call	0x778	; 0x778 <SPI_voidSlaveSelect>
    while(1)
    {
    	Received_UART = UART_u8RecieveByte();
 8a8:	0e 94 3a 04 	call	0x874	; 0x874 <UART_u8RecieveByte>
 8ac:	89 83       	std	Y+1, r24	; 0x01

    	SPI_u8Transfer(Received_UART);
 8ae:	89 81       	ldd	r24, Y+1	; 0x01
 8b0:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_u8Transfer>
 8b4:	f9 cf       	rjmp	.-14     	; 0x8a8 <main+0x16>

000008b6 <_exit>:
 8b6:	f8 94       	cli

000008b8 <__stop_program>:
 8b8:	ff cf       	rjmp	.-2      	; 0x8b8 <__stop_program>
