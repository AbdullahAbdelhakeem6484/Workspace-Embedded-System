In archive libcalllc.a:

calc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003d  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000071  2**0
                  ALLOC
  3 .stab         000012d8  00000000  00000000  00000074  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000014ee  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.Key_init 00000016  00000000  00000000  0000283a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.key_scan 00000264  00000000  00000000  00002850  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.port    000000c4  00000000  00000000  00002ab4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.mode_select 0000003c  00000000  00000000  00002b78  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.enb_tri 0000033a  00000000  00000000  00002bb4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.set_port 0000001c  00000000  00000000  00002eee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text.cmd     00000024  00000000  00000000  00002f0a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.lcd_init 00000042  00000000  00000000  00002f2e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.dis_char 00000044  00000000  00000000  00002f70  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.dis_position 0000003e  00000000  00000000  00002fb4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.clr_dis 00000026  00000000  00000000  00002ff2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text.dis_string 0000004a  00000000  00000000  00003018  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text.dis_shift 0000003a  00000000  00000000  00003062  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text.cal_init 00000016  00000000  00000000  0000309c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text.cal_op  0000014c  00000000  00000000  000030b2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text.cal_run 000003ea  00000000  00000000  000031fe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text.calculate 0000003a  00000000  00000000  000035e8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text.main    00000224  00000000  00000000  00003622  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.Key_init:

00000000 <Key_init>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	ea e3       	ldi	r30, 0x3A	; 58
   a:	f0 e0       	ldi	r31, 0x00	; 0
   c:	8f e0       	ldi	r24, 0x0F	; 15
   e:	80 83       	st	Z, r24
  10:	cf 91       	pop	r28
  12:	df 91       	pop	r29
		cal_init();
  14:	08 95       	ret

Disassembly of section .text.key_scan:

00000000 <key_scan>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2d 97       	sbiw	r28, 0x0d	; 13
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
		cal_init();
  14:	1a 82       	std	Y+2, r1	; 0x02
  16:	00 c0       	rjmp	.+0      	; 0x18 <key_scan+0x18>
		
			dis_string(0,0,"When      Come    ;)");
  18:	eb e3       	ldi	r30, 0x3B	; 59
  1a:	f0 e0       	ldi	r31, 0x00	; 0
  1c:	8f ef       	ldi	r24, 0xFF	; 255
  1e:	80 83       	st	Z, r24
  20:	8a 81       	ldd	r24, Y+2	; 0x02
  22:	88 23       	and	r24, r24
  24:	01 f4       	brne	.+0      	; 0x26 <key_scan+0x26>
			dis_string(1,4,"Dreams    True ;)");
  26:	ab e3       	ldi	r26, 0x3B	; 59
  28:	b0 e0       	ldi	r27, 0x00	; 0
  2a:	eb e3       	ldi	r30, 0x3B	; 59
  2c:	f0 e0       	ldi	r31, 0x00	; 0
  2e:	80 81       	ld	r24, Z
  30:	8e 7f       	andi	r24, 0xFE	; 254
  32:	8c 93       	st	X, r24
  34:	8a 81       	ldd	r24, Y+2	; 0x02
  36:	81 30       	cpi	r24, 0x01	; 1
  38:	01 f4       	brne	.+0      	; 0x3a <key_scan+0x3a>
  3a:	ab e3       	ldi	r26, 0x3B	; 59
  3c:	b0 e0       	ldi	r27, 0x00	; 0
  3e:	eb e3       	ldi	r30, 0x3B	; 59
  40:	f0 e0       	ldi	r31, 0x00	; 0
  42:	80 81       	ld	r24, Z
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  44:	8d 7f       	andi	r24, 0xFD	; 253
  46:	8c 93       	st	X, r24
  48:	8a 81       	ldd	r24, Y+2	; 0x02
  4a:	82 30       	cpi	r24, 0x02	; 2
  4c:	01 f4       	brne	.+0      	; 0x4e <key_scan+0x4e>
  4e:	ab e3       	ldi	r26, 0x3B	; 59
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	eb e3       	ldi	r30, 0x3B	; 59
  54:	f0 e0       	ldi	r31, 0x00	; 0
  56:	80 81       	ld	r24, Z
  58:	8b 7f       	andi	r24, 0xFB	; 251
  5a:	8c 93       	st	X, r24
  5c:	8a 81       	ldd	r24, Y+2	; 0x02
  5e:	83 30       	cpi	r24, 0x03	; 3
  60:	01 f4       	brne	.+0      	; 0x62 <key_scan+0x62>
  62:	ab e3       	ldi	r26, 0x3B	; 59
	if (__tmp < 1.0)
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	eb e3       	ldi	r30, 0x3B	; 59
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	80 81       	ld	r24, Z
  6c:	87 7f       	andi	r24, 0xF7	; 247
  6e:	8c 93       	st	X, r24
  70:	e9 e3       	ldi	r30, 0x39	; 57
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	80 81       	ld	r24, Z
  76:	80 7f       	andi	r24, 0xF0	; 240
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	89 81       	ldd	r24, Y+1	; 0x01
		__ticks = 1;
  7c:	80 3f       	cpi	r24, 0xF0	; 240
  7e:	01 f0       	breq	.+0      	; 0x80 <key_scan+0x80>
  80:	e9 e3       	ldi	r30, 0x39	; 57
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
	else if (__tmp > 65535)
  86:	88 2f       	mov	r24, r24
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	80 7f       	andi	r24, 0xF0	; 240
  8c:	90 70       	andi	r25, 0x00	; 0
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	91 05       	cpc	r25, r1
  92:	01 f4       	brne	.+0      	; 0x94 <key_scan+0x94>
  94:	00 c0       	rjmp	.+0      	; 0x96 <key_scan+0x96>
  96:	8a 81       	ldd	r24, Y+2	; 0x02
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	8a 83       	std	Y+2, r24	; 0x02
  9c:	8a 81       	ldd	r24, Y+2	; 0x02
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  9e:	84 30       	cpi	r24, 0x04	; 4
  a0:	00 f4       	brcc	.+0      	; 0xa2 <key_scan+0xa2>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <key_scan+0xa4>
  a4:	8a 81       	ldd	r24, Y+2	; 0x02
  a6:	84 30       	cpi	r24, 0x04	; 4
  a8:	01 f4       	brne	.+0      	; 0xaa <key_scan+0xaa>
  aa:	1d 86       	std	Y+13, r1	; 0x0d
  ac:	00 c0       	rjmp	.+0      	; 0xae <key_scan+0xae>
  ae:	8a 81       	ldd	r24, Y+2	; 0x02
  b0:	28 2f       	mov	r18, r24
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	3c 87       	std	Y+12, r19	; 0x0c
  b6:	2b 87       	std	Y+11, r18	; 0x0b
  b8:	8b 85       	ldd	r24, Y+11	; 0x0b
  ba:	9c 85       	ldd	r25, Y+12	; 0x0c
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	91 05       	cpc	r25, r1
  c0:	01 f4       	brne	.+0      	; 0xc2 <key_scan+0xc2>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <key_scan+0xc4>
  c4:	2b 85       	ldd	r18, Y+11	; 0x0b
  c6:	3c 85       	ldd	r19, Y+12	; 0x0c
  c8:	22 30       	cpi	r18, 0x02	; 2
  ca:	31 05       	cpc	r19, r1
  cc:	04 f4       	brge	.+0      	; 0xce <key_scan+0xce>
  ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	9c 85       	ldd	r25, Y+12	; 0x0c
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	01 f0       	breq	.+0      	; 0xd6 <key_scan+0xd6>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <key_scan+0xd8>
  d8:	2b 85       	ldd	r18, Y+11	; 0x0b
  da:	3c 85       	ldd	r19, Y+12	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  dc:	22 30       	cpi	r18, 0x02	; 2
  de:	31 05       	cpc	r19, r1
  e0:	01 f4       	brne	.+0      	; 0xe2 <key_scan+0xe2>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <key_scan+0xe4>
  e4:	8b 85       	ldd	r24, Y+11	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	9c 85       	ldd	r25, Y+12	; 0x0c
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	91 05       	cpc	r25, r1
  ec:	01 f4       	brne	.+0      	; 0xee <key_scan+0xee>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <key_scan+0xf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <key_scan+0xf2>
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	3a 87       	std	Y+10, r19	; 0x0a
  fa:	29 87       	std	Y+9, r18	; 0x09
  fc:	89 85       	ldd	r24, Y+9	; 0x09
  fe:	9a 85       	ldd	r25, Y+10	; 0x0a
 100:	80 3b       	cpi	r24, 0xB0	; 176
 102:	91 05       	cpc	r25, r1
 104:	01 f0       	breq	.+0      	; 0x106 <key_scan+0x106>
 106:	29 85       	ldd	r18, Y+9	; 0x09
 108:	3a 85       	ldd	r19, Y+10	; 0x0a
 10a:	21 3b       	cpi	r18, 0xB1	; 177
 10c:	31 05       	cpc	r19, r1
 10e:	04 f4       	brge	.+0      	; 0x110 <key_scan+0x110>
 110:	89 85       	ldd	r24, Y+9	; 0x09
 112:	9a 85       	ldd	r25, Y+10	; 0x0a
 114:	80 37       	cpi	r24, 0x70	; 112
 116:	91 05       	cpc	r25, r1
			
			_delay_ms(50);
			
			for (int start = 0;start < 25; ++start)
 118:	01 f0       	breq	.+0      	; 0x11a <key_scan+0x11a>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <key_scan+0x11c>
 11c:	29 85       	ldd	r18, Y+9	; 0x09
 11e:	3a 85       	ldd	r19, Y+10	; 0x0a
 120:	20 3d       	cpi	r18, 0xD0	; 208
 122:	31 05       	cpc	r19, r1
 124:	01 f0       	breq	.+0      	; 0x126 <key_scan+0x126>
 126:	89 85       	ldd	r24, Y+9	; 0x09
 128:	9a 85       	ldd	r25, Y+10	; 0x0a
 12a:	80 3e       	cpi	r24, 0xE0	; 224
 12c:	91 05       	cpc	r25, r1
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 12e:	01 f0       	breq	.+0      	; 0x130 <key_scan+0x130>
 130:	00 c0       	rjmp	.+0      	; 0x132 <key_scan+0x132>
 132:	97 e0       	ldi	r25, 0x07	; 7
 134:	9d 87       	std	Y+13, r25	; 0x0d
 136:	00 c0       	rjmp	.+0      	; 0x138 <key_scan+0x138>
 138:	28 e0       	ldi	r18, 0x08	; 8
 13a:	2d 87       	std	Y+13, r18	; 0x0d
 13c:	00 c0       	rjmp	.+0      	; 0x13e <key_scan+0x13e>
 13e:	39 e0       	ldi	r19, 0x09	; 9
 140:	3d 87       	std	Y+13, r19	; 0x0d
 142:	00 c0       	rjmp	.+0      	; 0x144 <key_scan+0x144>
 144:	8a e0       	ldi	r24, 0x0A	; 10
 146:	8d 87       	std	Y+13, r24	; 0x0d
 148:	00 c0       	rjmp	.+0      	; 0x14a <key_scan+0x14a>
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	28 2f       	mov	r18, r24
	if (__tmp < 1.0)
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	38 87       	std	Y+8, r19	; 0x08
 152:	2f 83       	std	Y+7, r18	; 0x07
 154:	8f 81       	ldd	r24, Y+7	; 0x07
 156:	98 85       	ldd	r25, Y+8	; 0x08
 158:	80 3b       	cpi	r24, 0xB0	; 176
 15a:	91 05       	cpc	r25, r1
 15c:	01 f0       	breq	.+0      	; 0x15e <key_scan+0x15e>
 15e:	2f 81       	ldd	r18, Y+7	; 0x07
 160:	38 85       	ldd	r19, Y+8	; 0x08
 162:	21 3b       	cpi	r18, 0xB1	; 177
 164:	31 05       	cpc	r19, r1
		__ticks = 1;
 166:	04 f4       	brge	.+0      	; 0x168 <key_scan+0x168>
 168:	8f 81       	ldd	r24, Y+7	; 0x07
 16a:	98 85       	ldd	r25, Y+8	; 0x08
 16c:	80 37       	cpi	r24, 0x70	; 112
 16e:	91 05       	cpc	r25, r1
	else if (__tmp > 65535)
 170:	01 f0       	breq	.+0      	; 0x172 <key_scan+0x172>
 172:	00 c0       	rjmp	.+0      	; 0x174 <key_scan+0x174>
 174:	2f 81       	ldd	r18, Y+7	; 0x07
 176:	38 85       	ldd	r19, Y+8	; 0x08
 178:	20 3d       	cpi	r18, 0xD0	; 208
 17a:	31 05       	cpc	r19, r1
 17c:	01 f0       	breq	.+0      	; 0x17e <key_scan+0x17e>
 17e:	8f 81       	ldd	r24, Y+7	; 0x07
 180:	98 85       	ldd	r25, Y+8	; 0x08
 182:	80 3e       	cpi	r24, 0xE0	; 224
 184:	91 05       	cpc	r25, r1
 186:	01 f0       	breq	.+0      	; 0x188 <key_scan+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 188:	00 c0       	rjmp	.+0      	; 0x18a <key_scan+0x18a>
 18a:	94 e0       	ldi	r25, 0x04	; 4
 18c:	9d 87       	std	Y+13, r25	; 0x0d
 18e:	00 c0       	rjmp	.+0      	; 0x190 <key_scan+0x190>
 190:	25 e0       	ldi	r18, 0x05	; 5
 192:	2d 87       	std	Y+13, r18	; 0x0d
 194:	00 c0       	rjmp	.+0      	; 0x196 <key_scan+0x196>
 196:	36 e0       	ldi	r19, 0x06	; 6
 198:	3d 87       	std	Y+13, r19	; 0x0d
 19a:	00 c0       	rjmp	.+0      	; 0x19c <key_scan+0x19c>
 19c:	8b e0       	ldi	r24, 0x0B	; 11
 19e:	8d 87       	std	Y+13, r24	; 0x0d
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <key_scan+0x1a2>
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	3e 83       	std	Y+6, r19	; 0x06
 1aa:	2d 83       	std	Y+5, r18	; 0x05
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	9e 81       	ldd	r25, Y+6	; 0x06
 1b0:	80 3b       	cpi	r24, 0xB0	; 176
 1b2:	91 05       	cpc	r25, r1
 1b4:	01 f0       	breq	.+0      	; 0x1b6 <key_scan+0x1b6>
 1b6:	2d 81       	ldd	r18, Y+5	; 0x05
 1b8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ba:	21 3b       	cpi	r18, 0xB1	; 177
 1bc:	31 05       	cpc	r19, r1
 1be:	04 f4       	brge	.+0      	; 0x1c0 <key_scan+0x1c0>
 1c0:	8d 81       	ldd	r24, Y+5	; 0x05
 1c2:	9e 81       	ldd	r25, Y+6	; 0x06
 1c4:	80 37       	cpi	r24, 0x70	; 112
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c6:	91 05       	cpc	r25, r1
 1c8:	01 f0       	breq	.+0      	; 0x1ca <key_scan+0x1ca>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <key_scan+0x1cc>
 1cc:	2d 81       	ldd	r18, Y+5	; 0x05
 1ce:	3e 81       	ldd	r19, Y+6	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d0:	20 3d       	cpi	r18, 0xD0	; 208
 1d2:	31 05       	cpc	r19, r1
 1d4:	01 f0       	breq	.+0      	; 0x1d6 <key_scan+0x1d6>
 1d6:	8d 81       	ldd	r24, Y+5	; 0x05
 1d8:	9e 81       	ldd	r25, Y+6	; 0x06
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1da:	80 3e       	cpi	r24, 0xE0	; 224
 1dc:	91 05       	cpc	r25, r1
 1de:	01 f4       	brne	.+0      	; 0x1e0 <key_scan+0x1e0>
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	9d 87       	std	Y+13, r25	; 0x0d
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <key_scan+0x1e6>
 1e6:	22 e0       	ldi	r18, 0x02	; 2
 1e8:	2d 87       	std	Y+13, r18	; 0x0d
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <key_scan+0x1ec>
 1ec:	33 e0       	ldi	r19, 0x03	; 3
 1ee:	3d 87       	std	Y+13, r19	; 0x0d
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <key_scan+0x1f2>
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	8d 87       	std	Y+13, r24	; 0x0d
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <key_scan+0x1f8>
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	28 2f       	mov	r18, r24
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	3c 83       	std	Y+4, r19	; 0x04
 200:	2b 83       	std	Y+3, r18	; 0x03
			{
				_delay_ms(5);
				dis_shift('L');
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	9c 81       	ldd	r25, Y+4	; 0x04
 206:	80 3b       	cpi	r24, 0xB0	; 176
			dis_string(0,0,"When      Come    ;)");
			dis_string(1,4,"Dreams    True ;)");
			
			_delay_ms(50);
			
			for (int start = 0;start < 25; ++start)
 208:	91 05       	cpc	r25, r1
 20a:	01 f0       	breq	.+0      	; 0x20c <key_scan+0x20c>
 20c:	2b 81       	ldd	r18, Y+3	; 0x03
 20e:	3c 81       	ldd	r19, Y+4	; 0x04
 210:	21 3b       	cpi	r18, 0xB1	; 177
 212:	31 05       	cpc	r19, r1
 214:	04 f4       	brge	.+0      	; 0x216 <key_scan+0x216>
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	9c 81       	ldd	r25, Y+4	; 0x04
 21a:	80 37       	cpi	r24, 0x70	; 112
 21c:	91 05       	cpc	r25, r1
				dis_shift('L');
			}
		
    	while(1)
    	{
			calculate();
 21e:	01 f0       	breq	.+0      	; 0x220 <key_scan+0x220>
 220:	00 c0       	rjmp	.+0      	; 0x222 <key_scan+0x222>
 222:	2b 81       	ldd	r18, Y+3	; 0x03
 224:	3c 81       	ldd	r19, Y+4	; 0x04
 226:	20 3d       	cpi	r18, 0xD0	; 208
 228:	31 05       	cpc	r19, r1
 22a:	01 f0       	breq	.+0      	; 0x22c <key_scan+0x22c>
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	80 3e       	cpi	r24, 0xE0	; 224
 232:	91 05       	cpc	r25, r1
 234:	01 f4       	brne	.+0      	; 0x236 <key_scan+0x236>
 236:	9f e0       	ldi	r25, 0x0F	; 15
 238:	9d 87       	std	Y+13, r25	; 0x0d
 23a:	00 c0       	rjmp	.+0      	; 0x23c <key_scan+0x23c>
 23c:	20 e3       	ldi	r18, 0x30	; 48
 23e:	2d 87       	std	Y+13, r18	; 0x0d
 240:	00 c0       	rjmp	.+0      	; 0x242 <key_scan+0x242>
 242:	3e e0       	ldi	r19, 0x0E	; 14
 244:	3d 87       	std	Y+13, r19	; 0x0d
 246:	00 c0       	rjmp	.+0      	; 0x248 <key_scan+0x248>
 248:	8d e0       	ldi	r24, 0x0D	; 13
 24a:	8d 87       	std	Y+13, r24	; 0x0d
 24c:	00 c0       	rjmp	.+0      	; 0x24e <key_scan+0x24e>
 24e:	1d 86       	std	Y+13, r1	; 0x0d
 250:	8d 85       	ldd	r24, Y+13	; 0x0d
 252:	2d 96       	adiw	r28, 0x0d	; 13
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	f8 94       	cli
 258:	de bf       	out	0x3e, r29	; 62
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	cd bf       	out	0x3d, r28	; 61
 25e:	cf 91       	pop	r28
 260:	df 91       	pop	r29
 262:	08 95       	ret

Disassembly of section .text.port:

00000000 <port>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
   c:	89 81       	ldd	r24, Y+1	; 0x01
   e:	88 2f       	mov	r24, r24
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	81 70       	andi	r24, 0x01	; 1
		cal_init();
  14:	90 70       	andi	r25, 0x00	; 0
  16:	88 23       	and	r24, r24
		
			dis_string(0,0,"When      Come    ;)");
  18:	01 f0       	breq	.+0      	; 0x1a <port+0x1a>
  1a:	a8 e3       	ldi	r26, 0x38	; 56
  1c:	b0 e0       	ldi	r27, 0x00	; 0
  1e:	e8 e3       	ldi	r30, 0x38	; 56
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	80 81       	ld	r24, Z
  24:	81 60       	ori	r24, 0x01	; 1
			dis_string(1,4,"Dreams    True ;)");
  26:	8c 93       	st	X, r24
  28:	00 c0       	rjmp	.+0      	; 0x2a <port+0x2a>
  2a:	a8 e3       	ldi	r26, 0x38	; 56
  2c:	b0 e0       	ldi	r27, 0x00	; 0
  2e:	e8 e3       	ldi	r30, 0x38	; 56
  30:	f0 e0       	ldi	r31, 0x00	; 0
  32:	80 81       	ld	r24, Z
  34:	8e 7f       	andi	r24, 0xFE	; 254
  36:	8c 93       	st	X, r24
  38:	89 81       	ldd	r24, Y+1	; 0x01
  3a:	88 2f       	mov	r24, r24
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	82 70       	andi	r24, 0x02	; 2
  40:	90 70       	andi	r25, 0x00	; 0
  42:	00 97       	sbiw	r24, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  44:	01 f0       	breq	.+0      	; 0x46 <port+0x46>
  46:	a8 e3       	ldi	r26, 0x38	; 56
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	e8 e3       	ldi	r30, 0x38	; 56
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	82 60       	ori	r24, 0x02	; 2
  52:	8c 93       	st	X, r24
  54:	00 c0       	rjmp	.+0      	; 0x56 <port+0x56>
  56:	a8 e3       	ldi	r26, 0x38	; 56
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	e8 e3       	ldi	r30, 0x38	; 56
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	80 81       	ld	r24, Z
  60:	8d 7f       	andi	r24, 0xFD	; 253
  62:	8c 93       	st	X, r24
	if (__tmp < 1.0)
  64:	89 81       	ldd	r24, Y+1	; 0x01
  66:	88 2f       	mov	r24, r24
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	84 70       	andi	r24, 0x04	; 4
  6c:	90 70       	andi	r25, 0x00	; 0
  6e:	00 97       	sbiw	r24, 0x00	; 0
  70:	01 f0       	breq	.+0      	; 0x72 <port+0x72>
  72:	a8 e3       	ldi	r26, 0x38	; 56
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e8 e3       	ldi	r30, 0x38	; 56
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
		__ticks = 1;
  7c:	84 60       	ori	r24, 0x04	; 4
  7e:	8c 93       	st	X, r24
  80:	00 c0       	rjmp	.+0      	; 0x82 <port+0x82>
  82:	a8 e3       	ldi	r26, 0x38	; 56
  84:	b0 e0       	ldi	r27, 0x00	; 0
	else if (__tmp > 65535)
  86:	e8 e3       	ldi	r30, 0x38	; 56
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8b 7f       	andi	r24, 0xFB	; 251
  8e:	8c 93       	st	X, r24
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	88 2f       	mov	r24, r24
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	88 70       	andi	r24, 0x08	; 8
  98:	90 70       	andi	r25, 0x00	; 0
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	01 f0       	breq	.+0      	; 0x9e <port+0x9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  9e:	a8 e3       	ldi	r26, 0x38	; 56
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e8 e3       	ldi	r30, 0x38	; 56
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	8c 93       	st	X, r24
  ac:	00 c0       	rjmp	.+0      	; 0xae <port+0xae>
  ae:	a8 e3       	ldi	r26, 0x38	; 56
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e8 e3       	ldi	r30, 0x38	; 56
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	87 7f       	andi	r24, 0xF7	; 247
  ba:	8c 93       	st	X, r24
  bc:	0f 90       	pop	r0
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	08 95       	ret

Disassembly of section .text.mode_select:

00000000 <mode_select>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
   c:	89 81       	ldd	r24, Y+1	; 0x01
   e:	88 23       	and	r24, r24
  10:	01 f4       	brne	.+0      	; 0x12 <mode_select+0x12>
  12:	a8 e3       	ldi	r26, 0x38	; 56
		cal_init();
  14:	b0 e0       	ldi	r27, 0x00	; 0
  16:	e8 e3       	ldi	r30, 0x38	; 56
		
			dis_string(0,0,"When      Come    ;)");
  18:	f0 e0       	ldi	r31, 0x00	; 0
  1a:	80 81       	ld	r24, Z
  1c:	8f 7d       	andi	r24, 0xDF	; 223
  1e:	8c 93       	st	X, r24
  20:	89 81       	ldd	r24, Y+1	; 0x01
  22:	81 30       	cpi	r24, 0x01	; 1
  24:	01 f4       	brne	.+0      	; 0x26 <mode_select+0x26>
			dis_string(1,4,"Dreams    True ;)");
  26:	a8 e3       	ldi	r26, 0x38	; 56
  28:	b0 e0       	ldi	r27, 0x00	; 0
  2a:	e8 e3       	ldi	r30, 0x38	; 56
  2c:	f0 e0       	ldi	r31, 0x00	; 0
  2e:	80 81       	ld	r24, Z
  30:	80 62       	ori	r24, 0x20	; 32
  32:	8c 93       	st	X, r24
  34:	0f 90       	pop	r0
  36:	cf 91       	pop	r28
  38:	df 91       	pop	r29
  3a:	08 95       	ret

Disassembly of section .text.enb_tri:

00000000 <enb_tri>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	e0 97       	sbiw	r28, 0x30	; 48
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
		cal_init();
  14:	a8 e3       	ldi	r26, 0x38	; 56
  16:	b0 e0       	ldi	r27, 0x00	; 0
		
			dis_string(0,0,"When      Come    ;)");
  18:	e8 e3       	ldi	r30, 0x38	; 56
  1a:	f0 e0       	ldi	r31, 0x00	; 0
  1c:	80 81       	ld	r24, Z
  1e:	80 61       	ori	r24, 0x10	; 16
  20:	8c 93       	st	X, r24
  22:	80 e0       	ldi	r24, 0x00	; 0
  24:	90 e0       	ldi	r25, 0x00	; 0
			dis_string(1,4,"Dreams    True ;)");
  26:	a8 e4       	ldi	r26, 0x48	; 72
  28:	b2 e4       	ldi	r27, 0x42	; 66
  2a:	8d a7       	std	Y+45, r24	; 0x2d
  2c:	9e a7       	std	Y+46, r25	; 0x2e
  2e:	af a7       	std	Y+47, r26	; 0x2f
  30:	b8 ab       	std	Y+48, r27	; 0x30
  32:	6d a5       	ldd	r22, Y+45	; 0x2d
  34:	7e a5       	ldd	r23, Y+46	; 0x2e
  36:	8f a5       	ldd	r24, Y+47	; 0x2f
  38:	98 a9       	ldd	r25, Y+48	; 0x30
  3a:	20 e0       	ldi	r18, 0x00	; 0
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	40 e8       	ldi	r20, 0x80	; 128
  40:	50 e4       	ldi	r21, 0x40	; 64
  42:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  46:	dc 01       	movw	r26, r24
  48:	cb 01       	movw	r24, r22
  4a:	89 a7       	std	Y+41, r24	; 0x29
  4c:	9a a7       	std	Y+42, r25	; 0x2a
  4e:	ab a7       	std	Y+43, r26	; 0x2b
  50:	bc a7       	std	Y+44, r27	; 0x2c
  52:	69 a5       	ldd	r22, Y+41	; 0x29
  54:	7a a5       	ldd	r23, Y+42	; 0x2a
  56:	8b a5       	ldd	r24, Y+43	; 0x2b
  58:	9c a5       	ldd	r25, Y+44	; 0x2c
  5a:	20 e0       	ldi	r18, 0x00	; 0
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	40 e8       	ldi	r20, 0x80	; 128
  60:	5f e3       	ldi	r21, 0x3F	; 63
  62:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
	if (__tmp < 1.0)
  66:	88 23       	and	r24, r24
  68:	04 f4       	brge	.+0      	; 0x6a <enb_tri+0x6a>
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	88 a7       	std	Y+40, r24	; 0x28
  6e:	00 c0       	rjmp	.+0      	; 0x70 <enb_tri+0x70>
  70:	69 a5       	ldd	r22, Y+41	; 0x29
  72:	7a a5       	ldd	r23, Y+42	; 0x2a
  74:	8b a5       	ldd	r24, Y+43	; 0x2b
  76:	9c a5       	ldd	r25, Y+44	; 0x2c
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	30 e0       	ldi	r19, 0x00	; 0
		__ticks = 1;
  7c:	4f e7       	ldi	r20, 0x7F	; 127
  7e:	53 e4       	ldi	r21, 0x43	; 67
  80:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
  84:	18 16       	cp	r1, r24
	else if (__tmp > 65535)
  86:	04 f0       	brlt	.+0      	; 0x88 <enb_tri+0x88>
  88:	00 c0       	rjmp	.+0      	; 0x8a <enb_tri+0x8a>
  8a:	6d a5       	ldd	r22, Y+45	; 0x2d
  8c:	7e a5       	ldd	r23, Y+46	; 0x2e
  8e:	8f a5       	ldd	r24, Y+47	; 0x2f
  90:	98 a9       	ldd	r25, Y+48	; 0x30
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	4a e7       	ldi	r20, 0x7A	; 122
  98:	54 e4       	ldi	r21, 0x44	; 68
  9a:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  9e:	dc 01       	movw	r26, r24
  a0:	cb 01       	movw	r24, r22
  a2:	8c a3       	std	Y+36, r24	; 0x24
  a4:	9d a3       	std	Y+37, r25	; 0x25
  a6:	ae a3       	std	Y+38, r26	; 0x26
  a8:	bf a3       	std	Y+39, r27	; 0x27
  aa:	6c a1       	ldd	r22, Y+36	; 0x24
  ac:	7d a1       	ldd	r23, Y+37	; 0x25
  ae:	8e a1       	ldd	r24, Y+38	; 0x26
  b0:	9f a1       	ldd	r25, Y+39	; 0x27
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e8       	ldi	r19, 0x80	; 128
  b6:	4b e3       	ldi	r20, 0x3B	; 59
  b8:	55 e4       	ldi	r21, 0x45	; 69
  ba:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
  be:	dc 01       	movw	r26, r24
  c0:	cb 01       	movw	r24, r22
  c2:	88 a3       	std	Y+32, r24	; 0x20
  c4:	99 a3       	std	Y+33, r25	; 0x21
  c6:	aa a3       	std	Y+34, r26	; 0x22
  c8:	bb a3       	std	Y+35, r27	; 0x23
  ca:	68 a1       	ldd	r22, Y+32	; 0x20
  cc:	79 a1       	ldd	r23, Y+33	; 0x21
  ce:	8a a1       	ldd	r24, Y+34	; 0x22
  d0:	9b a1       	ldd	r25, Y+35	; 0x23
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	40 e8       	ldi	r20, 0x80	; 128
  d8:	5f e3       	ldi	r21, 0x3F	; 63
  da:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	88 23       	and	r24, r24
  e0:	04 f4       	brge	.+0      	; 0xe2 <enb_tri+0xe2>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	9f 8f       	std	Y+31, r25	; 0x1f
  e8:	8e 8f       	std	Y+30, r24	; 0x1e
  ea:	00 c0       	rjmp	.+0      	; 0xec <enb_tri+0xec>
  ec:	68 a1       	ldd	r22, Y+32	; 0x20
  ee:	79 a1       	ldd	r23, Y+33	; 0x21
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
  f0:	8a a1       	ldd	r24, Y+34	; 0x22
  f2:	9b a1       	ldd	r25, Y+35	; 0x23
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	3f ef       	ldi	r19, 0xFF	; 255
  f8:	4f e7       	ldi	r20, 0x7F	; 127
  fa:	57 e4       	ldi	r21, 0x47	; 71
  fc:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 100:	18 16       	cp	r1, r24
 102:	04 f4       	brge	.+0      	; 0x104 <enb_tri+0x104>
 104:	6c a1       	ldd	r22, Y+36	; 0x24
 106:	7d a1       	ldd	r23, Y+37	; 0x25
 108:	8e a1       	ldd	r24, Y+38	; 0x26
 10a:	9f a1       	ldd	r25, Y+39	; 0x27
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	40 e2       	ldi	r20, 0x20	; 32
 112:	51 e4       	ldi	r21, 0x41	; 65
 114:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
			
			_delay_ms(50);
			
			for (int start = 0;start < 25; ++start)
 118:	dc 01       	movw	r26, r24
 11a:	cb 01       	movw	r24, r22
 11c:	bc 01       	movw	r22, r24
 11e:	cd 01       	movw	r24, r26
 120:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 124:	dc 01       	movw	r26, r24
 126:	cb 01       	movw	r24, r22
 128:	9f 8f       	std	Y+31, r25	; 0x1f
 12a:	8e 8f       	std	Y+30, r24	; 0x1e
 12c:	00 c0       	rjmp	.+0      	; 0x12e <enb_tri+0x12e>
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 12e:	8c e2       	ldi	r24, 0x2C	; 44
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	9d 8f       	std	Y+29, r25	; 0x1d
 134:	8c 8f       	std	Y+28, r24	; 0x1c
 136:	8c 8d       	ldd	r24, Y+28	; 0x1c
 138:	9d 8d       	ldd	r25, Y+29	; 0x1d
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	01 f4       	brne	.+0      	; 0x13e <enb_tri+0x13e>
 13e:	9d 8f       	std	Y+29, r25	; 0x1d
 140:	8c 8f       	std	Y+28, r24	; 0x1c
 142:	8e 8d       	ldd	r24, Y+30	; 0x1e
 144:	9f 8d       	ldd	r25, Y+31	; 0x1f
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	9f 8f       	std	Y+31, r25	; 0x1f
 14a:	8e 8f       	std	Y+30, r24	; 0x1e
 14c:	8e 8d       	ldd	r24, Y+30	; 0x1e
	if (__tmp < 1.0)
 14e:	9f 8d       	ldd	r25, Y+31	; 0x1f
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	01 f4       	brne	.+0      	; 0x154 <enb_tri+0x154>
 154:	00 c0       	rjmp	.+0      	; 0x156 <enb_tri+0x156>
 156:	68 a1       	ldd	r22, Y+32	; 0x20
 158:	79 a1       	ldd	r23, Y+33	; 0x21
 15a:	8a a1       	ldd	r24, Y+34	; 0x22
 15c:	9b a1       	ldd	r25, Y+35	; 0x23
 15e:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 162:	dc 01       	movw	r26, r24
 164:	cb 01       	movw	r24, r22
		__ticks = 1;
 166:	9f 8f       	std	Y+31, r25	; 0x1f
 168:	8e 8f       	std	Y+30, r24	; 0x1e
 16a:	8e 8d       	ldd	r24, Y+30	; 0x1e
 16c:	9f 8d       	ldd	r25, Y+31	; 0x1f
 16e:	9b 8f       	std	Y+27, r25	; 0x1b
	else if (__tmp > 65535)
 170:	8a 8f       	std	Y+26, r24	; 0x1a
 172:	8a 8d       	ldd	r24, Y+26	; 0x1a
 174:	9b 8d       	ldd	r25, Y+27	; 0x1b
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	01 f4       	brne	.+0      	; 0x17a <enb_tri+0x17a>
 17a:	9b 8f       	std	Y+27, r25	; 0x1b
 17c:	8a 8f       	std	Y+26, r24	; 0x1a
 17e:	00 c0       	rjmp	.+0      	; 0x180 <enb_tri+0x180>
 180:	69 a5       	ldd	r22, Y+41	; 0x29
 182:	7a a5       	ldd	r23, Y+42	; 0x2a
 184:	8b a5       	ldd	r24, Y+43	; 0x2b
 186:	9c a5       	ldd	r25, Y+44	; 0x2c
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 188:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 18c:	dc 01       	movw	r26, r24
 18e:	cb 01       	movw	r24, r22
 190:	88 a7       	std	Y+40, r24	; 0x28
 192:	88 a5       	ldd	r24, Y+40	; 0x28
 194:	89 8f       	std	Y+25, r24	; 0x19
 196:	89 8d       	ldd	r24, Y+25	; 0x19
 198:	8a 95       	dec	r24
 19a:	01 f4       	brne	.+0      	; 0x19c <enb_tri+0x19c>
 19c:	89 8f       	std	Y+25, r24	; 0x19
 19e:	a8 e3       	ldi	r26, 0x38	; 56
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	e8 e3       	ldi	r30, 0x38	; 56
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	8f 7e       	andi	r24, 0xEF	; 239
 1aa:	8c 93       	st	X, r24
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	aa ef       	ldi	r26, 0xFA	; 250
 1b2:	b3 e4       	ldi	r27, 0x43	; 67
 1b4:	8d 8b       	std	Y+21, r24	; 0x15
 1b6:	9e 8b       	std	Y+22, r25	; 0x16
 1b8:	af 8b       	std	Y+23, r26	; 0x17
 1ba:	b8 8f       	std	Y+24, r27	; 0x18
 1bc:	6d 89       	ldd	r22, Y+21	; 0x15
 1be:	7e 89       	ldd	r23, Y+22	; 0x16
 1c0:	8f 89       	ldd	r24, Y+23	; 0x17
 1c2:	98 8d       	ldd	r25, Y+24	; 0x18
 1c4:	20 e0       	ldi	r18, 0x00	; 0
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e8       	ldi	r20, 0x80	; 128
 1ca:	50 e4       	ldi	r21, 0x40	; 64
 1cc:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d0:	dc 01       	movw	r26, r24
 1d2:	cb 01       	movw	r24, r22
 1d4:	89 8b       	std	Y+17, r24	; 0x11
 1d6:	9a 8b       	std	Y+18, r25	; 0x12
 1d8:	ab 8b       	std	Y+19, r26	; 0x13
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1da:	bc 8b       	std	Y+20, r27	; 0x14
 1dc:	69 89       	ldd	r22, Y+17	; 0x11
 1de:	7a 89       	ldd	r23, Y+18	; 0x12
 1e0:	8b 89       	ldd	r24, Y+19	; 0x13
 1e2:	9c 89       	ldd	r25, Y+20	; 0x14
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	40 e8       	ldi	r20, 0x80	; 128
 1ea:	5f e3       	ldi	r21, 0x3F	; 63
 1ec:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 1f0:	88 23       	and	r24, r24
 1f2:	04 f4       	brge	.+0      	; 0x1f4 <enb_tri+0x1f4>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	88 8b       	std	Y+16, r24	; 0x10
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <enb_tri+0x1fa>
 1fa:	69 89       	ldd	r22, Y+17	; 0x11
 1fc:	7a 89       	ldd	r23, Y+18	; 0x12
 1fe:	8b 89       	ldd	r24, Y+19	; 0x13
 200:	9c 89       	ldd	r25, Y+20	; 0x14
			{
				_delay_ms(5);
				dis_shift('L');
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	4f e7       	ldi	r20, 0x7F	; 127
			dis_string(0,0,"When      Come    ;)");
			dis_string(1,4,"Dreams    True ;)");
			
			_delay_ms(50);
			
			for (int start = 0;start < 25; ++start)
 208:	53 e4       	ldi	r21, 0x43	; 67
 20a:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 20e:	18 16       	cp	r1, r24
 210:	04 f0       	brlt	.+0      	; 0x212 <enb_tri+0x212>
 212:	00 c0       	rjmp	.+0      	; 0x214 <enb_tri+0x214>
 214:	6d 89       	ldd	r22, Y+21	; 0x15
 216:	7e 89       	ldd	r23, Y+22	; 0x16
 218:	8f 89       	ldd	r24, Y+23	; 0x17
 21a:	98 8d       	ldd	r25, Y+24	; 0x18
 21c:	20 e0       	ldi	r18, 0x00	; 0
				dis_shift('L');
			}
		
    	while(1)
    	{
			calculate();
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	4a e7       	ldi	r20, 0x7A	; 122
 222:	54 e4       	ldi	r21, 0x44	; 68
 224:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 228:	dc 01       	movw	r26, r24
 22a:	cb 01       	movw	r24, r22
 22c:	8c 87       	std	Y+12, r24	; 0x0c
 22e:	9d 87       	std	Y+13, r25	; 0x0d
 230:	ae 87       	std	Y+14, r26	; 0x0e
 232:	bf 87       	std	Y+15, r27	; 0x0f
 234:	6c 85       	ldd	r22, Y+12	; 0x0c
 236:	7d 85       	ldd	r23, Y+13	; 0x0d
 238:	8e 85       	ldd	r24, Y+14	; 0x0e
 23a:	9f 85       	ldd	r25, Y+15	; 0x0f
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e8       	ldi	r19, 0x80	; 128
 240:	4b e3       	ldi	r20, 0x3B	; 59
 242:	55 e4       	ldi	r21, 0x45	; 69
 244:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 248:	dc 01       	movw	r26, r24
 24a:	cb 01       	movw	r24, r22
 24c:	88 87       	std	Y+8, r24	; 0x08
 24e:	99 87       	std	Y+9, r25	; 0x09
 250:	aa 87       	std	Y+10, r26	; 0x0a
 252:	bb 87       	std	Y+11, r27	; 0x0b
 254:	68 85       	ldd	r22, Y+8	; 0x08
 256:	79 85       	ldd	r23, Y+9	; 0x09
 258:	8a 85       	ldd	r24, Y+10	; 0x0a
 25a:	9b 85       	ldd	r25, Y+11	; 0x0b
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	40 e8       	ldi	r20, 0x80	; 128
 262:	5f e3       	ldi	r21, 0x3F	; 63
 264:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 268:	88 23       	and	r24, r24
 26a:	04 f4       	brge	.+0      	; 0x26c <enb_tri+0x26c>
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	9f 83       	std	Y+7, r25	; 0x07
 272:	8e 83       	std	Y+6, r24	; 0x06
 274:	00 c0       	rjmp	.+0      	; 0x276 <enb_tri+0x276>
 276:	68 85       	ldd	r22, Y+8	; 0x08
 278:	79 85       	ldd	r23, Y+9	; 0x09
 27a:	8a 85       	ldd	r24, Y+10	; 0x0a
 27c:	9b 85       	ldd	r25, Y+11	; 0x0b
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	3f ef       	ldi	r19, 0xFF	; 255
 282:	4f e7       	ldi	r20, 0x7F	; 127
 284:	57 e4       	ldi	r21, 0x47	; 71
 286:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 28a:	18 16       	cp	r1, r24
 28c:	04 f4       	brge	.+0      	; 0x28e <enb_tri+0x28e>
 28e:	6c 85       	ldd	r22, Y+12	; 0x0c
 290:	7d 85       	ldd	r23, Y+13	; 0x0d
 292:	8e 85       	ldd	r24, Y+14	; 0x0e
 294:	9f 85       	ldd	r25, Y+15	; 0x0f
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	40 e2       	ldi	r20, 0x20	; 32
 29c:	51 e4       	ldi	r21, 0x41	; 65
 29e:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 2a2:	dc 01       	movw	r26, r24
 2a4:	cb 01       	movw	r24, r22
 2a6:	bc 01       	movw	r22, r24
 2a8:	cd 01       	movw	r24, r26
 2aa:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 2ae:	dc 01       	movw	r26, r24
 2b0:	cb 01       	movw	r24, r22
 2b2:	9f 83       	std	Y+7, r25	; 0x07
 2b4:	8e 83       	std	Y+6, r24	; 0x06
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <enb_tri+0x2b8>
 2b8:	8c e2       	ldi	r24, 0x2C	; 44
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	9d 83       	std	Y+5, r25	; 0x05
 2be:	8c 83       	std	Y+4, r24	; 0x04
 2c0:	8c 81       	ldd	r24, Y+4	; 0x04
 2c2:	9d 81       	ldd	r25, Y+5	; 0x05
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	01 f4       	brne	.+0      	; 0x2c8 <enb_tri+0x2c8>
 2c8:	9d 83       	std	Y+5, r25	; 0x05
 2ca:	8c 83       	std	Y+4, r24	; 0x04
 2cc:	8e 81       	ldd	r24, Y+6	; 0x06
 2ce:	9f 81       	ldd	r25, Y+7	; 0x07
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	9f 83       	std	Y+7, r25	; 0x07
 2d4:	8e 83       	std	Y+6, r24	; 0x06
 2d6:	8e 81       	ldd	r24, Y+6	; 0x06
 2d8:	9f 81       	ldd	r25, Y+7	; 0x07
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	01 f4       	brne	.+0      	; 0x2de <enb_tri+0x2de>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <enb_tri+0x2e0>
 2e0:	68 85       	ldd	r22, Y+8	; 0x08
 2e2:	79 85       	ldd	r23, Y+9	; 0x09
 2e4:	8a 85       	ldd	r24, Y+10	; 0x0a
 2e6:	9b 85       	ldd	r25, Y+11	; 0x0b
 2e8:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 2ec:	dc 01       	movw	r26, r24
 2ee:	cb 01       	movw	r24, r22
 2f0:	9f 83       	std	Y+7, r25	; 0x07
 2f2:	8e 83       	std	Y+6, r24	; 0x06
 2f4:	8e 81       	ldd	r24, Y+6	; 0x06
 2f6:	9f 81       	ldd	r25, Y+7	; 0x07
 2f8:	9b 83       	std	Y+3, r25	; 0x03
 2fa:	8a 83       	std	Y+2, r24	; 0x02
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	9b 81       	ldd	r25, Y+3	; 0x03
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	01 f4       	brne	.+0      	; 0x304 <enb_tri+0x304>
 304:	9b 83       	std	Y+3, r25	; 0x03
 306:	8a 83       	std	Y+2, r24	; 0x02
 308:	00 c0       	rjmp	.+0      	; 0x30a <enb_tri+0x30a>
 30a:	69 89       	ldd	r22, Y+17	; 0x11
 30c:	7a 89       	ldd	r23, Y+18	; 0x12
 30e:	8b 89       	ldd	r24, Y+19	; 0x13
 310:	9c 89       	ldd	r25, Y+20	; 0x14
 312:	0e 94 00 00 	call	0	; 0x0 <enb_tri>
 316:	dc 01       	movw	r26, r24
 318:	cb 01       	movw	r24, r22
 31a:	88 8b       	std	Y+16, r24	; 0x10
 31c:	88 89       	ldd	r24, Y+16	; 0x10
 31e:	89 83       	std	Y+1, r24	; 0x01
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	8a 95       	dec	r24
 324:	01 f4       	brne	.+0      	; 0x326 <enb_tri+0x326>
 326:	89 83       	std	Y+1, r24	; 0x01
 328:	e0 96       	adiw	r28, 0x30	; 48
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	cf 91       	pop	r28
 336:	df 91       	pop	r29
 338:	08 95       	ret

Disassembly of section .text.set_port:

00000000 <set_port>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	a7 e3       	ldi	r26, 0x37	; 55
   a:	b0 e0       	ldi	r27, 0x00	; 0
   c:	e7 e3       	ldi	r30, 0x37	; 55
   e:	f0 e0       	ldi	r31, 0x00	; 0
  10:	80 81       	ld	r24, Z
  12:	8f 63       	ori	r24, 0x3F	; 63
		cal_init();
  14:	8c 93       	st	X, r24
  16:	cf 91       	pop	r28
		
			dis_string(0,0,"When      Come    ;)");
  18:	df 91       	pop	r29
  1a:	08 95       	ret

Disassembly of section .text.cmd:

00000000 <cmd>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
   c:	80 e0       	ldi	r24, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <cmd>
  12:	89 81       	ldd	r24, Y+1	; 0x01
		cal_init();
  14:	0e 94 00 00 	call	0	; 0x0 <cmd>
		
			dis_string(0,0,"When      Come    ;)");
  18:	0e 94 00 00 	call	0	; 0x0 <cmd>
  1c:	0f 90       	pop	r0
  1e:	cf 91       	pop	r28
  20:	df 91       	pop	r29
  22:	08 95       	ret

Disassembly of section .text.lcd_init:

00000000 <lcd_init>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
   c:	80 e0       	ldi	r24, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
  12:	82 e0       	ldi	r24, 0x02	; 2
		cal_init();
  14:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
		
			dis_string(0,0,"When      Come    ;)");
  18:	82 e0       	ldi	r24, 0x02	; 2
  1a:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
  1e:	88 e0       	ldi	r24, 0x08	; 8
  20:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
  24:	80 e0       	ldi	r24, 0x00	; 0
			dis_string(1,4,"Dreams    True ;)");
  26:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
  2a:	8c e0       	ldi	r24, 0x0C	; 12
  2c:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
  36:	86 e0       	ldi	r24, 0x06	; 6
  38:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
  3c:	cf 91       	pop	r28
  3e:	df 91       	pop	r29
  40:	08 95       	ret

Disassembly of section .text.dis_char:

00000000 <dis_char>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <dis_char+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	8b 83       	std	Y+3, r24	; 0x03
   e:	8b 81       	ldd	r24, Y+3	; 0x03
  10:	80 7f       	andi	r24, 0xF0	; 240
  12:	8a 83       	std	Y+2, r24	; 0x02
		cal_init();
  14:	8b 81       	ldd	r24, Y+3	; 0x03
  16:	8f 70       	andi	r24, 0x0F	; 15
		
			dis_string(0,0,"When      Come    ;)");
  18:	89 83       	std	Y+1, r24	; 0x01
  1a:	81 e0       	ldi	r24, 0x01	; 1
  1c:	0e 94 00 00 	call	0	; 0x0 <dis_char>
  20:	8a 81       	ldd	r24, Y+2	; 0x02
  22:	82 95       	swap	r24
  24:	8f 70       	andi	r24, 0x0F	; 15
			dis_string(1,4,"Dreams    True ;)");
  26:	0e 94 00 00 	call	0	; 0x0 <dis_char>
  2a:	0e 94 00 00 	call	0	; 0x0 <dis_char>
  2e:	89 81       	ldd	r24, Y+1	; 0x01
  30:	0e 94 00 00 	call	0	; 0x0 <dis_char>
  34:	0e 94 00 00 	call	0	; 0x0 <dis_char>
  38:	0f 90       	pop	r0
  3a:	0f 90       	pop	r0
  3c:	0f 90       	pop	r0
  3e:	cf 91       	pop	r28
  40:	df 91       	pop	r29
  42:	08 95       	ret

Disassembly of section .text.dis_position:

00000000 <dis_position>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <dis_position+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
   c:	6a 83       	std	Y+2, r22	; 0x02
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	88 23       	and	r24, r24
  12:	01 f4       	brne	.+0      	; 0x14 <dis_position+0x14>
		cal_init();
  14:	88 e0       	ldi	r24, 0x08	; 8
  16:	0e 94 00 00 	call	0	; 0x0 <dis_position>
		
			dis_string(0,0,"When      Come    ;)");
  1a:	8a 81       	ldd	r24, Y+2	; 0x02
  1c:	0e 94 00 00 	call	0	; 0x0 <dis_position>
  20:	00 c0       	rjmp	.+0      	; 0x22 <dis_position+0x22>
  22:	89 81       	ldd	r24, Y+1	; 0x01
  24:	81 30       	cpi	r24, 0x01	; 1
			dis_string(1,4,"Dreams    True ;)");
  26:	01 f4       	brne	.+0      	; 0x28 <dis_position+0x28>
  28:	8c e0       	ldi	r24, 0x0C	; 12
  2a:	0e 94 00 00 	call	0	; 0x0 <dis_position>
  2e:	8a 81       	ldd	r24, Y+2	; 0x02
  30:	0e 94 00 00 	call	0	; 0x0 <dis_position>
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	cf 91       	pop	r28
  3a:	df 91       	pop	r29
  3c:	08 95       	ret

Disassembly of section .text.clr_dis:

00000000 <clr_dis>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	80 e0       	ldi	r24, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <clr_dis>
   e:	81 e0       	ldi	r24, 0x01	; 1
  10:	0e 94 00 00 	call	0	; 0x0 <clr_dis>
		cal_init();
  14:	80 e0       	ldi	r24, 0x00	; 0
  16:	0e 94 00 00 	call	0	; 0x0 <clr_dis>
		
			dis_string(0,0,"When      Come    ;)");
  1a:	82 e0       	ldi	r24, 0x02	; 2
  1c:	0e 94 00 00 	call	0	; 0x0 <clr_dis>
  20:	cf 91       	pop	r28
  22:	df 91       	pop	r29
  24:	08 95       	ret

Disassembly of section .text.dis_string:

00000000 <dis_string>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <dis_string+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <dis_string+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	6a 83       	std	Y+2, r22	; 0x02
  10:	5c 83       	std	Y+4, r21	; 0x04
  12:	4b 83       	std	Y+3, r20	; 0x03
		cal_init();
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	6a 81       	ldd	r22, Y+2	; 0x02
		
			dis_string(0,0,"When      Come    ;)");
  18:	0e 94 00 00 	call	0	; 0x0 <dis_string>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <dis_string+0x1e>
  1e:	eb 81       	ldd	r30, Y+3	; 0x03
  20:	fc 81       	ldd	r31, Y+4	; 0x04
  22:	80 81       	ld	r24, Z
  24:	0e 94 00 00 	call	0	; 0x0 <dis_string>
			dis_string(1,4,"Dreams    True ;)");
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	9c 81       	ldd	r25, Y+4	; 0x04
  2c:	01 96       	adiw	r24, 0x01	; 1
  2e:	9c 83       	std	Y+4, r25	; 0x04
  30:	8b 83       	std	Y+3, r24	; 0x03
  32:	eb 81       	ldd	r30, Y+3	; 0x03
  34:	fc 81       	ldd	r31, Y+4	; 0x04
  36:	80 81       	ld	r24, Z
  38:	88 23       	and	r24, r24
  3a:	01 f4       	brne	.+0      	; 0x3c <dis_string+0x3c>
  3c:	0f 90       	pop	r0
  3e:	0f 90       	pop	r0
  40:	0f 90       	pop	r0
  42:	0f 90       	pop	r0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  44:	cf 91       	pop	r28
  46:	df 91       	pop	r29
  48:	08 95       	ret

Disassembly of section .text.dis_shift:

00000000 <dis_shift>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
   c:	89 81       	ldd	r24, Y+1	; 0x01
   e:	82 35       	cpi	r24, 0x52	; 82
  10:	01 f4       	brne	.+0      	; 0x12 <dis_shift+0x12>
  12:	81 e0       	ldi	r24, 0x01	; 1
		cal_init();
  14:	0e 94 00 00 	call	0	; 0x0 <dis_shift>
		
			dis_string(0,0,"When      Come    ;)");
  18:	88 e0       	ldi	r24, 0x08	; 8
  1a:	0e 94 00 00 	call	0	; 0x0 <dis_shift>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <dis_shift+0x20>
  20:	89 81       	ldd	r24, Y+1	; 0x01
  22:	8c 34       	cpi	r24, 0x4C	; 76
  24:	01 f4       	brne	.+0      	; 0x26 <dis_shift+0x26>
			dis_string(1,4,"Dreams    True ;)");
  26:	81 e0       	ldi	r24, 0x01	; 1
  28:	0e 94 00 00 	call	0	; 0x0 <dis_shift>
  2c:	8c e0       	ldi	r24, 0x0C	; 12
  2e:	0e 94 00 00 	call	0	; 0x0 <dis_shift>
  32:	0f 90       	pop	r0
  34:	cf 91       	pop	r28
  36:	df 91       	pop	r29
  38:	08 95       	ret

Disassembly of section .text.cal_init:

00000000 <cal_init>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	0e 94 00 00 	call	0	; 0x0 <cal_init>
   c:	0e 94 00 00 	call	0	; 0x0 <cal_init>
  10:	cf 91       	pop	r28
  12:	df 91       	pop	r29
		cal_init();
  14:	08 95       	ret

Disassembly of section .text.cal_op:

00000000 <cal_op>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	80 91 00 00 	lds	r24, 0x0000
   c:	90 91 00 00 	lds	r25, 0x0000
  10:	8d 30       	cpi	r24, 0x0D	; 13
  12:	91 05       	cpc	r25, r1
		cal_init();
  14:	01 f4       	brne	.+0      	; 0x16 <cal_op+0x16>
  16:	10 92 00 00 	sts	0x0000, r1
		
			dis_string(0,0,"When      Come    ;)");
  1a:	10 92 00 00 	sts	0x0000, r1
  1e:	81 e0       	ldi	r24, 0x01	; 1
  20:	90 e0       	ldi	r25, 0x00	; 0
  22:	90 93 00 00 	sts	0x0000, r25
			dis_string(1,4,"Dreams    True ;)");
  26:	80 93 00 00 	sts	0x0000, r24
  2a:	8b e2       	ldi	r24, 0x2B	; 43
  2c:	80 93 00 00 	sts	0x0000, r24
  30:	00 c0       	rjmp	.+0      	; 0x32 <cal_op+0x32>
  32:	80 91 00 00 	lds	r24, 0x0000
  36:	90 91 00 00 	lds	r25, 0x0000
  3a:	8c 30       	cpi	r24, 0x0C	; 12
  3c:	91 05       	cpc	r25, r1
  3e:	01 f4       	brne	.+0      	; 0x40 <cal_op+0x40>
  40:	10 92 00 00 	sts	0x0000, r1
  44:	10 92 00 00 	sts	0x0000, r1
  48:	82 e0       	ldi	r24, 0x02	; 2
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	90 93 00 00 	sts	0x0000, r25
  50:	80 93 00 00 	sts	0x0000, r24
  54:	8d e2       	ldi	r24, 0x2D	; 45
  56:	80 93 00 00 	sts	0x0000, r24
  5a:	00 c0       	rjmp	.+0      	; 0x5c <cal_op+0x5c>
  5c:	80 91 00 00 	lds	r24, 0x0000
  60:	90 91 00 00 	lds	r25, 0x0000
	if (__tmp < 1.0)
  64:	8b 30       	cpi	r24, 0x0B	; 11
  66:	91 05       	cpc	r25, r1
  68:	01 f4       	brne	.+0      	; 0x6a <cal_op+0x6a>
  6a:	10 92 00 00 	sts	0x0000, r1
  6e:	10 92 00 00 	sts	0x0000, r1
  72:	83 e0       	ldi	r24, 0x03	; 3
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	90 93 00 00 	sts	0x0000, r25
  7a:	80 93 00 00 	sts	0x0000, r24
		__ticks = 1;
  7e:	88 e7       	ldi	r24, 0x78	; 120
  80:	80 93 00 00 	sts	0x0000, r24
  84:	00 c0       	rjmp	.+0      	; 0x86 <cal_op+0x86>
	else if (__tmp > 65535)
  86:	80 91 00 00 	lds	r24, 0x0000
  8a:	90 91 00 00 	lds	r25, 0x0000
  8e:	8a 30       	cpi	r24, 0x0A	; 10
  90:	91 05       	cpc	r25, r1
  92:	01 f4       	brne	.+0      	; 0x94 <cal_op+0x94>
  94:	10 92 00 00 	sts	0x0000, r1
  98:	10 92 00 00 	sts	0x0000, r1
  9c:	84 e0       	ldi	r24, 0x04	; 4
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 00 00 	sts	0x0000, r25
  a4:	80 93 00 00 	sts	0x0000, r24
  a8:	8f e2       	ldi	r24, 0x2F	; 47
  aa:	80 93 00 00 	sts	0x0000, r24
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <cal_op+0xb0>
  b0:	80 91 00 00 	lds	r24, 0x0000
  b4:	90 91 00 00 	lds	r25, 0x0000
  b8:	8e 30       	cpi	r24, 0x0E	; 14
  ba:	91 05       	cpc	r25, r1
  bc:	01 f4       	brne	.+0      	; 0xbe <cal_op+0xbe>
  be:	10 92 00 00 	sts	0x0000, r1
  c2:	10 92 00 00 	sts	0x0000, r1
  c6:	85 e0       	ldi	r24, 0x05	; 5
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	90 93 00 00 	sts	0x0000, r25
  ce:	80 93 00 00 	sts	0x0000, r24
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <cal_op+0xd4>
  d4:	80 91 00 00 	lds	r24, 0x0000
  d8:	90 91 00 00 	lds	r25, 0x0000
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  dc:	80 33       	cpi	r24, 0x30	; 48
  de:	91 05       	cpc	r25, r1
  e0:	01 f4       	brne	.+0      	; 0xe2 <cal_op+0xe2>
  e2:	10 92 00 00 	sts	0x0000, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	10 92 00 00 	sts	0x0000, r1
  ea:	00 c0       	rjmp	.+0      	; 0xec <cal_op+0xec>
  ec:	80 91 00 00 	lds	r24, 0x0000
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
  f0:	90 91 00 00 	lds	r25, 0x0000
  f4:	8f 30       	cpi	r24, 0x0F	; 15
  f6:	91 05       	cpc	r25, r1
  f8:	01 f4       	brne	.+0      	; 0xfa <cal_op+0xfa>
  fa:	10 92 00 00 	sts	0x0000, r1
  fe:	10 92 00 00 	sts	0x0000, r1
 102:	10 92 00 00 	sts	0x0000, r1
 106:	10 92 00 00 	sts	0x0000, r1
 10a:	10 92 00 00 	sts	0x0000, r1
 10e:	10 92 00 00 	sts	0x0000, r1
 112:	10 92 00 00 	sts	0x0000, r1
 116:	10 92 00 00 	sts	0x0000, r1
			
			_delay_ms(50);
			
			for (int start = 0;start < 25; ++start)
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	a0 e0       	ldi	r26, 0x00	; 0
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	80 93 00 00 	sts	0x0000, r24
 126:	90 93 00 00 	sts	0x0000, r25
 12a:	a0 93 00 00 	sts	0x0000, r26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 12e:	b0 93 00 00 	sts	0x0000, r27
 132:	10 92 00 00 	sts	0x0000, r1
 136:	10 92 00 00 	sts	0x0000, r1
 13a:	10 92 00 00 	sts	0x0000, r1
 13e:	10 92 00 00 	sts	0x0000, r1
 142:	0e 94 00 00 	call	0	; 0x0 <cal_op>
 146:	cf 91       	pop	r28
 148:	df 91       	pop	r29
 14a:	08 95       	ret

Disassembly of section .text.cal_run:

00000000 <cal_run>:
 */ 

#include "calc.h"

int main(void)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	80 91 00 00 	lds	r24, 0x0000
		cal_init();
  14:	90 91 00 00 	lds	r25, 0x0000
		
			dis_string(0,0,"When      Come    ;)");
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f0       	breq	.+0      	; 0x1c <cal_run+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <cal_run+0x1e>
  1e:	80 91 00 00 	lds	r24, 0x0000
  22:	90 91 00 00 	lds	r25, 0x0000
			dis_string(1,4,"Dreams    True ;)");
  26:	a0 91 00 00 	lds	r26, 0x0000
  2a:	b0 91 00 00 	lds	r27, 0x0000
  2e:	2a e0       	ldi	r18, 0x0A	; 10
  30:	30 e0       	ldi	r19, 0x00	; 0
  32:	40 e0       	ldi	r20, 0x00	; 0
  34:	50 e0       	ldi	r21, 0x00	; 0
  36:	bc 01       	movw	r22, r24
  38:	cd 01       	movw	r24, r26
  3a:	0e 94 00 00 	call	0	; 0x0 <cal_run>
  3e:	9b 01       	movw	r18, r22
  40:	ac 01       	movw	r20, r24
  42:	80 91 00 00 	lds	r24, 0x0000
  46:	90 91 00 00 	lds	r25, 0x0000
  4a:	cc 01       	movw	r24, r24
  4c:	a0 e0       	ldi	r26, 0x00	; 0
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	82 0f       	add	r24, r18
  52:	93 1f       	adc	r25, r19
  54:	a4 1f       	adc	r26, r20
  56:	b5 1f       	adc	r27, r21
  58:	80 93 00 00 	sts	0x0000, r24
  5c:	90 93 00 00 	sts	0x0000, r25
  60:	a0 93 00 00 	sts	0x0000, r26
	if (__tmp < 1.0)
  64:	b0 93 00 00 	sts	0x0000, r27
  68:	20 91 00 00 	lds	r18, 0x0000
  6c:	30 91 00 00 	lds	r19, 0x0000
  70:	40 91 00 00 	lds	r20, 0x0000
  74:	50 91 00 00 	lds	r21, 0x0000
  78:	0d b7       	in	r16, 0x3d	; 61
  7a:	1e b7       	in	r17, 0x3e	; 62
		__ticks = 1;
  7c:	08 50       	subi	r16, 0x08	; 8
  7e:	10 40       	sbci	r17, 0x00	; 0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	f8 94       	cli
  84:	1e bf       	out	0x3e, r17	; 62
	else if (__tmp > 65535)
  86:	0f be       	out	0x3f, r0	; 63
  88:	0d bf       	out	0x3d, r16	; 61
  8a:	ed b7       	in	r30, 0x3d	; 61
  8c:	fe b7       	in	r31, 0x3e	; 62
  8e:	31 96       	adiw	r30, 0x01	; 1
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	91 83       	std	Z+1, r25	; 0x01
  96:	80 83       	st	Z, r24
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	93 83       	std	Z+3, r25	; 0x03
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  9e:	82 83       	std	Z+2, r24	; 0x02
  a0:	24 83       	std	Z+4, r18	; 0x04
  a2:	35 83       	std	Z+5, r19	; 0x05
  a4:	46 83       	std	Z+6, r20	; 0x06
  a6:	57 83       	std	Z+7, r21	; 0x07
  a8:	0e 94 00 00 	call	0	; 0x0 <cal_run>
  ac:	8d b7       	in	r24, 0x3d	; 61
  ae:	9e b7       	in	r25, 0x3e	; 62
  b0:	08 96       	adiw	r24, 0x08	; 8
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	9e bf       	out	0x3e, r25	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	8d bf       	out	0x3d, r24	; 61
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	a9 01       	movw	r20, r18
  c6:	0e 94 00 00 	call	0	; 0x0 <cal_run>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <cal_run+0xcc>
  cc:	80 91 00 00 	lds	r24, 0x0000
  d0:	90 91 00 00 	lds	r25, 0x0000
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	91 05       	cpc	r25, r1
  d8:	01 f0       	breq	.+0      	; 0xda <cal_run+0xda>
  da:	80 91 00 00 	lds	r24, 0x0000
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	90 91 00 00 	lds	r25, 0x0000
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	91 05       	cpc	r25, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	01 f0       	breq	.+0      	; 0xe8 <cal_run+0xe8>
  e8:	80 91 00 00 	lds	r24, 0x0000
  ec:	90 91 00 00 	lds	r25, 0x0000
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	91 05       	cpc	r25, r1
  f4:	01 f0       	breq	.+0      	; 0xf6 <cal_run+0xf6>
  f6:	80 91 00 00 	lds	r24, 0x0000
  fa:	90 91 00 00 	lds	r25, 0x0000
  fe:	84 30       	cpi	r24, 0x04	; 4
 100:	91 05       	cpc	r25, r1
 102:	01 f0       	breq	.+0      	; 0x104 <cal_run+0x104>
 104:	00 c0       	rjmp	.+0      	; 0x106 <cal_run+0x106>
 106:	80 91 00 00 	lds	r24, 0x0000
 10a:	90 91 00 00 	lds	r25, 0x0000
 10e:	a0 91 00 00 	lds	r26, 0x0000
 112:	b0 91 00 00 	lds	r27, 0x0000
 116:	2a e0       	ldi	r18, 0x0A	; 10
			
			_delay_ms(50);
			
			for (int start = 0;start < 25; ++start)
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	bc 01       	movw	r22, r24
 120:	cd 01       	movw	r24, r26
 122:	0e 94 00 00 	call	0	; 0x0 <cal_run>
 126:	9b 01       	movw	r18, r22
 128:	ac 01       	movw	r20, r24
 12a:	80 91 00 00 	lds	r24, 0x0000
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 12e:	90 91 00 00 	lds	r25, 0x0000
 132:	cc 01       	movw	r24, r24
 134:	a0 e0       	ldi	r26, 0x00	; 0
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	82 0f       	add	r24, r18
 13a:	93 1f       	adc	r25, r19
 13c:	a4 1f       	adc	r26, r20
 13e:	b5 1f       	adc	r27, r21
 140:	80 93 00 00 	sts	0x0000, r24
 144:	90 93 00 00 	sts	0x0000, r25
 148:	a0 93 00 00 	sts	0x0000, r26
 14c:	b0 93 00 00 	sts	0x0000, r27
	if (__tmp < 1.0)
 150:	20 91 00 00 	lds	r18, 0x0000
 154:	30 91 00 00 	lds	r19, 0x0000
 158:	40 91 00 00 	lds	r20, 0x0000
 15c:	50 91 00 00 	lds	r21, 0x0000
 160:	80 91 00 00 	lds	r24, 0x0000
 164:	68 2f       	mov	r22, r24
		__ticks = 1;
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	e0 90 00 00 	lds	r14, 0x0000
 16c:	f0 90 00 00 	lds	r15, 0x0000
	else if (__tmp > 65535)
 170:	00 91 00 00 	lds	r16, 0x0000
 174:	10 91 00 00 	lds	r17, 0x0000
 178:	8d b7       	in	r24, 0x3d	; 61
 17a:	9e b7       	in	r25, 0x3e	; 62
 17c:	0e 97       	sbiw	r24, 0x0e	; 14
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	9e bf       	out	0x3e, r25	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	8d bf       	out	0x3d, r24	; 61
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 188:	ed b7       	in	r30, 0x3d	; 61
 18a:	fe b7       	in	r31, 0x3e	; 62
 18c:	31 96       	adiw	r30, 0x01	; 1
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	91 83       	std	Z+1, r25	; 0x01
 194:	80 83       	st	Z, r24
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	93 83       	std	Z+3, r25	; 0x03
 19c:	82 83       	std	Z+2, r24	; 0x02
 19e:	24 83       	std	Z+4, r18	; 0x04
 1a0:	35 83       	std	Z+5, r19	; 0x05
 1a2:	46 83       	std	Z+6, r20	; 0x06
 1a4:	57 83       	std	Z+7, r21	; 0x07
 1a6:	71 87       	std	Z+9, r23	; 0x09
 1a8:	60 87       	std	Z+8, r22	; 0x08
 1aa:	e2 86       	std	Z+10, r14	; 0x0a
 1ac:	f3 86       	std	Z+11, r15	; 0x0b
 1ae:	04 87       	std	Z+12, r16	; 0x0c
 1b0:	15 87       	std	Z+13, r17	; 0x0d
 1b2:	0e 94 00 00 	call	0	; 0x0 <cal_run>
 1b6:	0d b7       	in	r16, 0x3d	; 61
 1b8:	1e b7       	in	r17, 0x3e	; 62
 1ba:	02 5f       	subi	r16, 0xF2	; 242
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	1e bf       	out	0x3e, r17	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c6:	0d bf       	out	0x3d, r16	; 61
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	60 e0       	ldi	r22, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d0:	a9 01       	movw	r20, r18
 1d2:	0e 94 00 00 	call	0	; 0x0 <cal_run>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <cal_run+0x1d8>
 1d8:	80 91 00 00 	lds	r24, 0x0000
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1dc:	90 91 00 00 	lds	r25, 0x0000
 1e0:	85 30       	cpi	r24, 0x05	; 5
 1e2:	91 05       	cpc	r25, r1
 1e4:	01 f0       	breq	.+0      	; 0x1e6 <cal_run+0x1e6>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <cal_run+0x1e8>
 1e8:	80 91 00 00 	lds	r24, 0x0000
 1ec:	8b 32       	cpi	r24, 0x2B	; 43
 1ee:	01 f4       	brne	.+0      	; 0x1f0 <cal_run+0x1f0>
 1f0:	20 91 00 00 	lds	r18, 0x0000
 1f4:	30 91 00 00 	lds	r19, 0x0000
 1f8:	40 91 00 00 	lds	r20, 0x0000
 1fc:	50 91 00 00 	lds	r21, 0x0000
 200:	80 91 00 00 	lds	r24, 0x0000
			{
				_delay_ms(5);
				dis_shift('L');
 204:	90 91 00 00 	lds	r25, 0x0000
			dis_string(0,0,"When      Come    ;)");
			dis_string(1,4,"Dreams    True ;)");
			
			_delay_ms(50);
			
			for (int start = 0;start < 25; ++start)
 208:	a0 91 00 00 	lds	r26, 0x0000
 20c:	b0 91 00 00 	lds	r27, 0x0000
 210:	82 0f       	add	r24, r18
 212:	93 1f       	adc	r25, r19
 214:	a4 1f       	adc	r26, r20
 216:	b5 1f       	adc	r27, r21
 218:	bc 01       	movw	r22, r24
 21a:	cd 01       	movw	r24, r26
 21c:	0e 94 00 00 	call	0	; 0x0 <cal_run>
				dis_shift('L');
			}
		
    	while(1)
    	{
			calculate();
 220:	dc 01       	movw	r26, r24
 222:	cb 01       	movw	r24, r22
 224:	80 93 00 00 	sts	0x0000, r24
 228:	90 93 00 00 	sts	0x0000, r25
 22c:	a0 93 00 00 	sts	0x0000, r26
 230:	b0 93 00 00 	sts	0x0000, r27
 234:	00 c0       	rjmp	.+0      	; 0x236 <cal_run+0x236>
 236:	80 91 00 00 	lds	r24, 0x0000
 23a:	8d 32       	cpi	r24, 0x2D	; 45
 23c:	01 f4       	brne	.+0      	; 0x23e <cal_run+0x23e>
 23e:	20 91 00 00 	lds	r18, 0x0000
 242:	30 91 00 00 	lds	r19, 0x0000
 246:	40 91 00 00 	lds	r20, 0x0000
 24a:	50 91 00 00 	lds	r21, 0x0000
 24e:	80 91 00 00 	lds	r24, 0x0000
 252:	90 91 00 00 	lds	r25, 0x0000
 256:	a0 91 00 00 	lds	r26, 0x0000
 25a:	b0 91 00 00 	lds	r27, 0x0000
 25e:	79 01       	movw	r14, r18
 260:	8a 01       	movw	r16, r20
 262:	e8 1a       	sub	r14, r24
 264:	f9 0a       	sbc	r15, r25
 266:	0a 0b       	sbc	r16, r26
 268:	1b 0b       	sbc	r17, r27
 26a:	d8 01       	movw	r26, r16
 26c:	c7 01       	movw	r24, r14
 26e:	bc 01       	movw	r22, r24
 270:	cd 01       	movw	r24, r26
 272:	0e 94 00 00 	call	0	; 0x0 <cal_run>
 276:	dc 01       	movw	r26, r24
 278:	cb 01       	movw	r24, r22
 27a:	80 93 00 00 	sts	0x0000, r24
 27e:	90 93 00 00 	sts	0x0000, r25
 282:	a0 93 00 00 	sts	0x0000, r26
 286:	b0 93 00 00 	sts	0x0000, r27
 28a:	00 c0       	rjmp	.+0      	; 0x28c <cal_run+0x28c>
 28c:	80 91 00 00 	lds	r24, 0x0000
 290:	88 37       	cpi	r24, 0x78	; 120
 292:	01 f4       	brne	.+0      	; 0x294 <cal_run+0x294>
 294:	80 91 00 00 	lds	r24, 0x0000
 298:	90 91 00 00 	lds	r25, 0x0000
 29c:	a0 91 00 00 	lds	r26, 0x0000
 2a0:	b0 91 00 00 	lds	r27, 0x0000
 2a4:	20 91 00 00 	lds	r18, 0x0000
 2a8:	30 91 00 00 	lds	r19, 0x0000
 2ac:	40 91 00 00 	lds	r20, 0x0000
 2b0:	50 91 00 00 	lds	r21, 0x0000
 2b4:	bc 01       	movw	r22, r24
 2b6:	cd 01       	movw	r24, r26
 2b8:	0e 94 00 00 	call	0	; 0x0 <cal_run>
 2bc:	dc 01       	movw	r26, r24
 2be:	cb 01       	movw	r24, r22
 2c0:	bc 01       	movw	r22, r24
 2c2:	cd 01       	movw	r24, r26
 2c4:	0e 94 00 00 	call	0	; 0x0 <cal_run>
 2c8:	dc 01       	movw	r26, r24
 2ca:	cb 01       	movw	r24, r22
 2cc:	80 93 00 00 	sts	0x0000, r24
 2d0:	90 93 00 00 	sts	0x0000, r25
 2d4:	a0 93 00 00 	sts	0x0000, r26
 2d8:	b0 93 00 00 	sts	0x0000, r27
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <cal_run+0x2de>
 2de:	80 91 00 00 	lds	r24, 0x0000
 2e2:	8f 32       	cpi	r24, 0x2F	; 47
 2e4:	01 f4       	brne	.+0      	; 0x2e6 <cal_run+0x2e6>
 2e6:	80 91 00 00 	lds	r24, 0x0000
 2ea:	90 91 00 00 	lds	r25, 0x0000
 2ee:	a0 91 00 00 	lds	r26, 0x0000
 2f2:	b0 91 00 00 	lds	r27, 0x0000
 2f6:	bc 01       	movw	r22, r24
 2f8:	cd 01       	movw	r24, r26
 2fa:	0e 94 00 00 	call	0	; 0x0 <cal_run>
 2fe:	7b 01       	movw	r14, r22
 300:	8c 01       	movw	r16, r24
 302:	80 91 00 00 	lds	r24, 0x0000
 306:	90 91 00 00 	lds	r25, 0x0000
 30a:	a0 91 00 00 	lds	r26, 0x0000
 30e:	b0 91 00 00 	lds	r27, 0x0000
 312:	bc 01       	movw	r22, r24
 314:	cd 01       	movw	r24, r26
 316:	0e 94 00 00 	call	0	; 0x0 <cal_run>
 31a:	9b 01       	movw	r18, r22
 31c:	ac 01       	movw	r20, r24
 31e:	c8 01       	movw	r24, r16
 320:	b7 01       	movw	r22, r14
 322:	0e 94 00 00 	call	0	; 0x0 <cal_run>
 326:	dc 01       	movw	r26, r24
 328:	cb 01       	movw	r24, r22
 32a:	80 93 00 00 	sts	0x0000, r24
 32e:	90 93 00 00 	sts	0x0000, r25
 332:	a0 93 00 00 	sts	0x0000, r26
 336:	b0 93 00 00 	sts	0x0000, r27
 33a:	20 91 00 00 	lds	r18, 0x0000
 33e:	30 91 00 00 	lds	r19, 0x0000
 342:	40 91 00 00 	lds	r20, 0x0000
 346:	50 91 00 00 	lds	r21, 0x0000
 34a:	0d b7       	in	r16, 0x3d	; 61
 34c:	1e b7       	in	r17, 0x3e	; 62
 34e:	08 50       	subi	r16, 0x08	; 8
 350:	10 40       	sbci	r17, 0x00	; 0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	1e bf       	out	0x3e, r17	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0d bf       	out	0x3d, r16	; 61
 35c:	ed b7       	in	r30, 0x3d	; 61
 35e:	fe b7       	in	r31, 0x3e	; 62
 360:	31 96       	adiw	r30, 0x01	; 1
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	91 83       	std	Z+1, r25	; 0x01
 368:	80 83       	st	Z, r24
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	93 83       	std	Z+3, r25	; 0x03
 370:	82 83       	std	Z+2, r24	; 0x02
 372:	24 83       	std	Z+4, r18	; 0x04
 374:	35 83       	std	Z+5, r19	; 0x05
 376:	46 83       	std	Z+6, r20	; 0x06
 378:	57 83       	std	Z+7, r21	; 0x07
 37a:	0e 94 00 00 	call	0	; 0x0 <cal_run>
 37e:	8d b7       	in	r24, 0x3d	; 61
 380:	9e b7       	in	r25, 0x3e	; 62
 382:	08 96       	adiw	r24, 0x08	; 8
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	9e bf       	out	0x3e, r25	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	8d bf       	out	0x3d, r24	; 61
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	a9 01       	movw	r20, r18
 398:	0e 94 00 00 	call	0	; 0x0 <cal_run>
 39c:	10 92 00 00 	sts	0x0000, r1
 3a0:	10 92 00 00 	sts	0x0000, r1
 3a4:	10 92 00 00 	sts	0x0000, r1
 3a8:	10 92 00 00 	sts	0x0000, r1
 3ac:	10 92 00 00 	sts	0x0000, r1
 3b0:	10 92 00 00 	sts	0x0000, r1
 3b4:	10 92 00 00 	sts	0x0000, r1
 3b8:	10 92 00 00 	sts	0x0000, r1
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	a0 e0       	ldi	r26, 0x00	; 0
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	80 93 00 00 	sts	0x0000, r24
 3c8:	90 93 00 00 	sts	0x0000, r25
 3cc:	a0 93 00 00 	sts	0x0000, r26
 3d0:	b0 93 00 00 	sts	0x0000, r27
 3d4:	10 92 00 00 	sts	0x0000, r1
 3d8:	10 92 00 00 	sts	0x0000, r1
 3dc:	cf 91       	pop	r28
 3de:	df 91       	pop	r29
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	08 95       	ret

Disassembly of section .text.calculate:

00000000 <calculate>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	0e 94 00 00 	call	0	; 0x0 <calculate>
   c:	88 2f       	mov	r24, r24
   e:	90 e0       	ldi	r25, 0x00	; 0
  10:	90 93 00 00 	sts	0x0000, r25
		cal_init();
  14:	80 93 00 00 	sts	0x0000, r24
		
			dis_string(0,0,"When      Come    ;)");
  18:	80 91 00 00 	lds	r24, 0x0000
  1c:	90 91 00 00 	lds	r25, 0x0000
  20:	00 97       	sbiw	r24, 0x00	; 0
  22:	01 f0       	breq	.+0      	; 0x24 <calculate+0x24>
  24:	0e 94 00 00 	call	0	; 0x0 <calculate>
			dis_string(1,4,"Dreams    True ;)");
  28:	0e 94 00 00 	call	0	; 0x0 <calculate>
  2c:	10 92 00 00 	sts	0x0000, r1
  30:	10 92 00 00 	sts	0x0000, r1
  34:	cf 91       	pop	r28
  36:	df 91       	pop	r29
  38:	08 95       	ret

Disassembly of section .text.main:

00000000 <main>:
 */ 

#include "calc.h"

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	6e 97       	sbiw	r28, 0x1e	; 30
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
		cal_init();
  14:	0e 94 00 00 	call	0	; 0x0 <main>
		
			dis_string(0,0,"When      Come    ;)");
  18:	20 e0       	ldi	r18, 0x00	; 0
  1a:	30 e0       	ldi	r19, 0x00	; 0
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	60 e0       	ldi	r22, 0x00	; 0
  20:	a9 01       	movw	r20, r18
  22:	0e 94 00 00 	call	0	; 0x0 <main>
			dis_string(1,4,"Dreams    True ;)");
  26:	20 e0       	ldi	r18, 0x00	; 0
  28:	30 e0       	ldi	r19, 0x00	; 0
  2a:	81 e0       	ldi	r24, 0x01	; 1
  2c:	64 e0       	ldi	r22, 0x04	; 4
  2e:	a9 01       	movw	r20, r18
  30:	0e 94 00 00 	call	0	; 0x0 <main>
  34:	80 e0       	ldi	r24, 0x00	; 0
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	a8 e4       	ldi	r26, 0x48	; 72
  3a:	b2 e4       	ldi	r27, 0x42	; 66
  3c:	89 8f       	std	Y+25, r24	; 0x19
  3e:	9a 8f       	std	Y+26, r25	; 0x1a
  40:	ab 8f       	std	Y+27, r26	; 0x1b
  42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  44:	69 8d       	ldd	r22, Y+25	; 0x19
  46:	7a 8d       	ldd	r23, Y+26	; 0x1a
  48:	8b 8d       	ldd	r24, Y+27	; 0x1b
  4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	30 e8       	ldi	r19, 0x80	; 128
  50:	4b e3       	ldi	r20, 0x3B	; 59
  52:	55 e4       	ldi	r21, 0x45	; 69
  54:	0e 94 00 00 	call	0	; 0x0 <main>
  58:	dc 01       	movw	r26, r24
  5a:	cb 01       	movw	r24, r22
  5c:	8d 8b       	std	Y+21, r24	; 0x15
  5e:	9e 8b       	std	Y+22, r25	; 0x16
  60:	af 8b       	std	Y+23, r26	; 0x17
  62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
  64:	6d 89       	ldd	r22, Y+21	; 0x15
  66:	7e 89       	ldd	r23, Y+22	; 0x16
  68:	8f 89       	ldd	r24, Y+23	; 0x17
  6a:	98 8d       	ldd	r25, Y+24	; 0x18
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	40 e8       	ldi	r20, 0x80	; 128
  72:	5f e3       	ldi	r21, 0x3F	; 63
  74:	0e 94 00 00 	call	0	; 0x0 <main>
  78:	88 23       	and	r24, r24
  7a:	04 f4       	brge	.+0      	; 0x7c <main+0x7c>
		__ticks = 1;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	9c 8b       	std	Y+20, r25	; 0x14
  82:	8b 8b       	std	Y+19, r24	; 0x13
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x86>
	else if (__tmp > 65535)
  86:	6d 89       	ldd	r22, Y+21	; 0x15
  88:	7e 89       	ldd	r23, Y+22	; 0x16
  8a:	8f 89       	ldd	r24, Y+23	; 0x17
  8c:	98 8d       	ldd	r25, Y+24	; 0x18
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	3f ef       	ldi	r19, 0xFF	; 255
  92:	4f e7       	ldi	r20, 0x7F	; 127
  94:	57 e4       	ldi	r21, 0x47	; 71
  96:	0e 94 00 00 	call	0	; 0x0 <main>
  9a:	18 16       	cp	r1, r24
  9c:	04 f4       	brge	.+0      	; 0x9e <main+0x9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  9e:	69 8d       	ldd	r22, Y+25	; 0x19
  a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
  a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
  a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	40 e2       	ldi	r20, 0x20	; 32
  ac:	51 e4       	ldi	r21, 0x41	; 65
  ae:	0e 94 00 00 	call	0	; 0x0 <main>
  b2:	dc 01       	movw	r26, r24
  b4:	cb 01       	movw	r24, r22
  b6:	bc 01       	movw	r22, r24
  b8:	cd 01       	movw	r24, r26
  ba:	0e 94 00 00 	call	0	; 0x0 <main>
  be:	dc 01       	movw	r26, r24
  c0:	cb 01       	movw	r24, r22
  c2:	9c 8b       	std	Y+20, r25	; 0x14
  c4:	8b 8b       	std	Y+19, r24	; 0x13
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0xc8>
  c8:	8c e2       	ldi	r24, 0x2C	; 44
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	9a 8b       	std	Y+18, r25	; 0x12
  ce:	89 8b       	std	Y+17, r24	; 0x11
  d0:	89 89       	ldd	r24, Y+17	; 0x11
  d2:	9a 89       	ldd	r25, Y+18	; 0x12
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	01 f4       	brne	.+0      	; 0xd8 <main+0xd8>
  d8:	9a 8b       	std	Y+18, r25	; 0x12
  da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  dc:	8b 89       	ldd	r24, Y+19	; 0x13
  de:	9c 89       	ldd	r25, Y+20	; 0x14
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	9c 8b       	std	Y+20, r25	; 0x14
  e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	8b 89       	ldd	r24, Y+19	; 0x13
  e8:	9c 89       	ldd	r25, Y+20	; 0x14
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	01 f4       	brne	.+0      	; 0xee <main+0xee>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0xf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
  f0:	6d 89       	ldd	r22, Y+21	; 0x15
  f2:	7e 89       	ldd	r23, Y+22	; 0x16
  f4:	8f 89       	ldd	r24, Y+23	; 0x17
  f6:	98 8d       	ldd	r25, Y+24	; 0x18
  f8:	0e 94 00 00 	call	0	; 0x0 <main>
  fc:	dc 01       	movw	r26, r24
  fe:	cb 01       	movw	r24, r22
 100:	9c 8b       	std	Y+20, r25	; 0x14
 102:	8b 8b       	std	Y+19, r24	; 0x13
 104:	8b 89       	ldd	r24, Y+19	; 0x13
 106:	9c 89       	ldd	r25, Y+20	; 0x14
 108:	98 8b       	std	Y+16, r25	; 0x10
 10a:	8f 87       	std	Y+15, r24	; 0x0f
 10c:	8f 85       	ldd	r24, Y+15	; 0x0f
 10e:	98 89       	ldd	r25, Y+16	; 0x10
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	01 f4       	brne	.+0      	; 0x114 <main+0x114>
 114:	98 8b       	std	Y+16, r25	; 0x10
 116:	8f 87       	std	Y+15, r24	; 0x0f
			
			_delay_ms(50);
			
			for (int start = 0;start < 25; ++start)
 118:	1e 8e       	std	Y+30, r1	; 0x1e
 11a:	1d 8e       	std	Y+29, r1	; 0x1d
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x11e>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	a0 ea       	ldi	r26, 0xA0	; 160
 124:	b0 e4       	ldi	r27, 0x40	; 64
 126:	8b 87       	std	Y+11, r24	; 0x0b
 128:	9c 87       	std	Y+12, r25	; 0x0c
 12a:	ad 87       	std	Y+13, r26	; 0x0d
 12c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 12e:	6b 85       	ldd	r22, Y+11	; 0x0b
 130:	7c 85       	ldd	r23, Y+12	; 0x0c
 132:	8d 85       	ldd	r24, Y+13	; 0x0d
 134:	9e 85       	ldd	r25, Y+14	; 0x0e
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e8       	ldi	r19, 0x80	; 128
 13a:	4b e3       	ldi	r20, 0x3B	; 59
 13c:	55 e4       	ldi	r21, 0x45	; 69
 13e:	0e 94 00 00 	call	0	; 0x0 <main>
 142:	dc 01       	movw	r26, r24
 144:	cb 01       	movw	r24, r22
 146:	8f 83       	std	Y+7, r24	; 0x07
 148:	98 87       	std	Y+8, r25	; 0x08
 14a:	a9 87       	std	Y+9, r26	; 0x09
 14c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 14e:	6f 81       	ldd	r22, Y+7	; 0x07
 150:	78 85       	ldd	r23, Y+8	; 0x08
 152:	89 85       	ldd	r24, Y+9	; 0x09
 154:	9a 85       	ldd	r25, Y+10	; 0x0a
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	40 e8       	ldi	r20, 0x80	; 128
 15c:	5f e3       	ldi	r21, 0x3F	; 63
 15e:	0e 94 00 00 	call	0	; 0x0 <main>
 162:	88 23       	and	r24, r24
 164:	04 f4       	brge	.+0      	; 0x166 <main+0x166>
		__ticks = 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	9e 83       	std	Y+6, r25	; 0x06
 16c:	8d 83       	std	Y+5, r24	; 0x05
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x170>
	else if (__tmp > 65535)
 170:	6f 81       	ldd	r22, Y+7	; 0x07
 172:	78 85       	ldd	r23, Y+8	; 0x08
 174:	89 85       	ldd	r24, Y+9	; 0x09
 176:	9a 85       	ldd	r25, Y+10	; 0x0a
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	3f ef       	ldi	r19, 0xFF	; 255
 17c:	4f e7       	ldi	r20, 0x7F	; 127
 17e:	57 e4       	ldi	r21, 0x47	; 71
 180:	0e 94 00 00 	call	0	; 0x0 <main>
 184:	18 16       	cp	r1, r24
 186:	04 f4       	brge	.+0      	; 0x188 <main+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 188:	6b 85       	ldd	r22, Y+11	; 0x0b
 18a:	7c 85       	ldd	r23, Y+12	; 0x0c
 18c:	8d 85       	ldd	r24, Y+13	; 0x0d
 18e:	9e 85       	ldd	r25, Y+14	; 0x0e
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 e2       	ldi	r20, 0x20	; 32
 196:	51 e4       	ldi	r21, 0x41	; 65
 198:	0e 94 00 00 	call	0	; 0x0 <main>
 19c:	dc 01       	movw	r26, r24
 19e:	cb 01       	movw	r24, r22
 1a0:	bc 01       	movw	r22, r24
 1a2:	cd 01       	movw	r24, r26
 1a4:	0e 94 00 00 	call	0	; 0x0 <main>
 1a8:	dc 01       	movw	r26, r24
 1aa:	cb 01       	movw	r24, r22
 1ac:	9e 83       	std	Y+6, r25	; 0x06
 1ae:	8d 83       	std	Y+5, r24	; 0x05
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x1b2>
 1b2:	8c e2       	ldi	r24, 0x2C	; 44
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	9c 83       	std	Y+4, r25	; 0x04
 1b8:	8b 83       	std	Y+3, r24	; 0x03
 1ba:	8b 81       	ldd	r24, Y+3	; 0x03
 1bc:	9c 81       	ldd	r25, Y+4	; 0x04
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	01 f4       	brne	.+0      	; 0x1c2 <main+0x1c2>
 1c2:	9c 83       	std	Y+4, r25	; 0x04
 1c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c6:	8d 81       	ldd	r24, Y+5	; 0x05
 1c8:	9e 81       	ldd	r25, Y+6	; 0x06
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	9e 83       	std	Y+6, r25	; 0x06
 1ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	9e 81       	ldd	r25, Y+6	; 0x06
 1d4:	00 97       	sbiw	r24, 0x00	; 0
 1d6:	01 f4       	brne	.+0      	; 0x1d8 <main+0x1d8>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1da:	6f 81       	ldd	r22, Y+7	; 0x07
 1dc:	78 85       	ldd	r23, Y+8	; 0x08
 1de:	89 85       	ldd	r24, Y+9	; 0x09
 1e0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1e2:	0e 94 00 00 	call	0	; 0x0 <main>
 1e6:	dc 01       	movw	r26, r24
 1e8:	cb 01       	movw	r24, r22
 1ea:	9e 83       	std	Y+6, r25	; 0x06
 1ec:	8d 83       	std	Y+5, r24	; 0x05
 1ee:	8d 81       	ldd	r24, Y+5	; 0x05
 1f0:	9e 81       	ldd	r25, Y+6	; 0x06
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	9a 81       	ldd	r25, Y+2	; 0x02
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	01 f4       	brne	.+0      	; 0x1fe <main+0x1fe>
 1fe:	9a 83       	std	Y+2, r25	; 0x02
 200:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(5);
				dis_shift('L');
 202:	8c e4       	ldi	r24, 0x4C	; 76
 204:	0e 94 00 00 	call	0	; 0x0 <main>
			dis_string(0,0,"When      Come    ;)");
			dis_string(1,4,"Dreams    True ;)");
			
			_delay_ms(50);
			
			for (int start = 0;start < 25; ++start)
 208:	8d 8d       	ldd	r24, Y+29	; 0x1d
 20a:	9e 8d       	ldd	r25, Y+30	; 0x1e
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	9e 8f       	std	Y+30, r25	; 0x1e
 210:	8d 8f       	std	Y+29, r24	; 0x1d
 212:	8d 8d       	ldd	r24, Y+29	; 0x1d
 214:	9e 8d       	ldd	r25, Y+30	; 0x1e
 216:	89 31       	cpi	r24, 0x19	; 25
 218:	91 05       	cpc	r25, r1
 21a:	04 f4       	brge	.+0      	; 0x21c <main+0x21c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x21e>
				dis_shift('L');
			}
		
    	while(1)
    	{
			calculate();
 21e:	0e 94 00 00 	call	0	; 0x0 <main>
 222:	00 c0       	rjmp	.+0      	; 0x224 <__SREG__+0x1e5>
