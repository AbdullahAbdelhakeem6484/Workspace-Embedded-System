
INTENSITY_TWO_LEDS_PUSH-BUTTON.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00002dae  00002e42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000bc  008000bc  00002e9e  2**0
                  ALLOC
  3 .stab         000027cc  00000000  00000000  00002ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e97  00000000  00000000  0000566c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006503  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006643  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000067b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000083fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000092e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a094  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a481  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__vector_1>
       8:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3c       	cpi	r26, 0xC9	; 201
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 13 	call	0x262e	; 0x262e <main>
      8a:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 eb       	ldi	r26, 0xB4	; 180
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 eb       	ldi	r24, 0xB4	; 180
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
#include<avr/interrupt.h>

static u16 ADC_Value;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADMUX,7);
	CLEAR_BIT(ADMUX,6);

#elif Voltage_Refrence  ==   AVCC

	CLEAR_BIT(ADMUX,7);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,6);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,1);
	SET_BIT(ADCSRA,0);

#elif Prescaler_Selsction ==  Devision_Factor_4

	CLEAR_BIT(ADCSRA,2);  //ADC Prescaler selections
     b6a:	a6 e2       	ldi	r26, 0x26	; 38
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e6 e2       	ldi	r30, 0x26	; 38
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8b 7f       	andi	r24, 0xFB	; 251
     b76:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	82 60       	ori	r24, 0x02	; 2
     b84:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,0);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8e 7f       	andi	r24, 0xFE	; 254
     b92:	8c 93       	st	X, r24

#endif

#if  ADC_Data_Register ==   Right_Adjusment

	CLEAR_BIT(ADMUX,5);  //right adjusment
     b94:	a7 e2       	ldi	r26, 0x27	; 39
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e7 e2       	ldi	r30, 0x27	; 39
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
     ba0:	8c 93       	st	X, r24

#endif

#if Auto_Trigger    ==      Free_Running_Mode

	SET_BIT(ADCSRA,5);  // enable auto trigger for ADC
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 62       	ori	r24, 0x20	; 32
     bae:	8c 93       	st	X, r24
	CLEAR_BIT(SFIOR,5);   // auto trigger for adc by free running mode
     bb0:	a0 e5       	ldi	r26, 0x50	; 80
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e0 e5       	ldi	r30, 0x50	; 80
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 7d       	andi	r24, 0xDF	; 223
     bbc:	8c 93       	st	X, r24
	CLEAR_BIT(SFIOR,6);
     bbe:	a0 e5       	ldi	r26, 0x50	; 80
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e0 e5       	ldi	r30, 0x50	; 80
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 7b       	andi	r24, 0xBF	; 191
     bca:	8c 93       	st	X, r24
	CLEAR_BIT(SFIOR,7);
     bcc:	a0 e5       	ldi	r26, 0x50	; 80
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e0 e5       	ldi	r30, 0x50	; 80
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8f 77       	andi	r24, 0x7F	; 127
     bd8:	8c 93       	st	X, r24
	SET_BIT(SFIOR,7);

#endif


	SET_BIT(ADCSRA,7);   //Enable ADC
     bda:	a6 e2       	ldi	r26, 0x26	; 38
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e6 e2       	ldi	r30, 0x26	; 38
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 68       	ori	r24, 0x80	; 128
     be6:	8c 93       	st	X, r24

#if ADC_Interrupt ==   ADC_Interrupt_ON

	SET_BIT(ADCSRA,3);  //enable adc interrupt
     be8:	a6 e2       	ldi	r26, 0x26	; 38
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e6 e2       	ldi	r30, 0x26	; 38
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	88 60       	ori	r24, 0x08	; 8
     bf4:	8c 93       	st	X, r24
	SET_BIT(SREG,7);    //enable global interrupt
     bf6:	af e5       	ldi	r26, 0x5F	; 95
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ef e5       	ldi	r30, 0x5F	; 95
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 68       	ori	r24, 0x80	; 128
     c02:	8c 93       	st	X, r24

	CLEAR_BIT(ADCSRA,3);  //disable adc interrupt

#endif

}
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <ADC_u16GetValue>:

u16 ADC_u16GetValue(u8 channel)     //it has some problems and not preferable to use
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	0f 92       	push	r0
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &=0xE0;
     c16:	a7 e2       	ldi	r26, 0x27	; 39
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e7 e2       	ldi	r30, 0x27	; 39
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	80 7e       	andi	r24, 0xE0	; 224
     c22:	8c 93       	st	X, r24
	ADMUX |=channel;
     c24:	a7 e2       	ldi	r26, 0x27	; 39
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e2       	ldi	r30, 0x27	; 39
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	90 81       	ld	r25, Z
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	89 2b       	or	r24, r25
     c32:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,6); //start conversion
     c34:	a6 e2       	ldi	r26, 0x26	; 38
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e6 e2       	ldi	r30, 0x26	; 38
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	80 64       	ori	r24, 0x40	; 64
     c40:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA,4)==0);  //check if the flag is zero (conversion is over)
     c42:	e6 e2       	ldi	r30, 0x26	; 38
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	82 95       	swap	r24
     c4a:	8f 70       	andi	r24, 0x0F	; 15
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	81 70       	andi	r24, 0x01	; 1
     c52:	90 70       	andi	r25, 0x00	; 0
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	a9 f3       	breq	.-22     	; 0xc42 <ADC_u16GetValue+0x38>
	SET_BIT(ADCSRA,4);   //make flag = 0
     c58:	a6 e2       	ldi	r26, 0x26	; 38
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e6 e2       	ldi	r30, 0x26	; 38
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 61       	ori	r24, 0x10	; 16
     c64:	8c 93       	st	X, r24
	ADC_Value = 0;
     c66:	10 92 bd 00 	sts	0x00BD, r1
     c6a:	10 92 bc 00 	sts	0x00BC, r1
	ADC_Value = ADCL;
     c6e:	e4 e2       	ldi	r30, 0x24	; 36
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	88 2f       	mov	r24, r24
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	90 93 bd 00 	sts	0x00BD, r25
     c7c:	80 93 bc 00 	sts	0x00BC, r24
	ADC_Value |=(ADCH<<8);
     c80:	e5 e2       	ldi	r30, 0x25	; 37
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	98 2f       	mov	r25, r24
     c8c:	88 27       	eor	r24, r24
     c8e:	9c 01       	movw	r18, r24
     c90:	80 91 bc 00 	lds	r24, 0x00BC
     c94:	90 91 bd 00 	lds	r25, 0x00BD
     c98:	82 2b       	or	r24, r18
     c9a:	93 2b       	or	r25, r19
     c9c:	90 93 bd 00 	sts	0x00BD, r25
     ca0:	80 93 bc 00 	sts	0x00BC, r24
	return ADC_Value;
     ca4:	80 91 bc 00 	lds	r24, 0x00BC
     ca8:	90 91 bd 00 	lds	r25, 0x00BD
}
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <ADC_voidSelectChannel>:

void ADC_voidSelectChannel(u8 channel)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &=0xE0;
     cc0:	a7 e2       	ldi	r26, 0x27	; 39
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e7 e2       	ldi	r30, 0x27	; 39
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 7e       	andi	r24, 0xE0	; 224
     ccc:	8c 93       	st	X, r24
	ADMUX |=channel;
     cce:	a7 e2       	ldi	r26, 0x27	; 39
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e2       	ldi	r30, 0x27	; 39
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	90 81       	ld	r25, Z
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	89 2b       	or	r24, r25
     cdc:	8c 93       	st	X, r24

}
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <ADC_voidStartConversion>:

void ADC_voidStartConversion(void)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	if(GET_BIT(ADCSRA,6)==0)   // to check if you ended the last conversion to start a new one
     cee:	e6 e2       	ldi	r30, 0x26	; 38
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	82 95       	swap	r24
     cf6:	86 95       	lsr	r24
     cf8:	86 95       	lsr	r24
     cfa:	83 70       	andi	r24, 0x03	; 3
     cfc:	88 2f       	mov	r24, r24
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	81 70       	andi	r24, 0x01	; 1
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	39 f4       	brne	.+14     	; 0xd16 <ADC_voidStartConversion+0x30>
	{
		SET_BIT(ADCSRA,6);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 64       	ori	r24, 0x40	; 64
     d14:	8c 93       	st	X, r24
	}

}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <__vector_16>:

ISR(ADC_vect)    //when conversion end ,it calculate ADC_Value and  it makes flag = 0 to be ready to start another conversion
{
     d1c:	1f 92       	push	r1
     d1e:	0f 92       	push	r0
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	0f 92       	push	r0
     d24:	11 24       	eor	r1, r1
     d26:	2f 93       	push	r18
     d28:	3f 93       	push	r19
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
	ADC_Value = 0;
     d3a:	10 92 bd 00 	sts	0x00BD, r1
     d3e:	10 92 bc 00 	sts	0x00BC, r1
	ADC_Value = ADCL;
     d42:	e4 e2       	ldi	r30, 0x24	; 36
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	90 93 bd 00 	sts	0x00BD, r25
     d50:	80 93 bc 00 	sts	0x00BC, r24
	ADC_Value |=(ADCH<<8);
     d54:	e5 e2       	ldi	r30, 0x25	; 37
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	98 2f       	mov	r25, r24
     d60:	88 27       	eor	r24, r24
     d62:	9c 01       	movw	r18, r24
     d64:	80 91 bc 00 	lds	r24, 0x00BC
     d68:	90 91 bd 00 	lds	r25, 0x00BD
     d6c:	82 2b       	or	r24, r18
     d6e:	93 2b       	or	r25, r19
     d70:	90 93 bd 00 	sts	0x00BD, r25
     d74:	80 93 bc 00 	sts	0x00BC, r24

}
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	ff 91       	pop	r31
     d7e:	ef 91       	pop	r30
     d80:	9f 91       	pop	r25
     d82:	8f 91       	pop	r24
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <ADC_u16GetCurrentValue>:
u16 ADC_u16GetCurrentValue(void)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	return ADC_Value;
     d9a:	80 91 bc 00 	lds	r24, 0x00BC
     d9e:	90 91 bd 00 	lds	r25, 0x00BD

}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <DIO_voidSetPinDir>:

#include <avr/io.h>


void DIO_voidSetPinDir(u8 Port,u8 Pin,u8 Dir)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	00 d0       	rcall	.+0      	; 0xdae <DIO_voidSetPinDir+0x6>
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <DIO_voidSetPinDir+0x8>
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	6a 83       	std	Y+2, r22	; 0x02
     dba:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3d 83       	std	Y+5, r19	; 0x05
     dc4:	2c 83       	std	Y+4, r18	; 0x04
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	91 05       	cpc	r25, r1
     dce:	09 f4       	brne	.+2      	; 0xdd2 <DIO_voidSetPinDir+0x2a>
     dd0:	43 c0       	rjmp	.+134    	; 0xe58 <DIO_voidSetPinDir+0xb0>
     dd2:	2c 81       	ldd	r18, Y+4	; 0x04
     dd4:	3d 81       	ldd	r19, Y+5	; 0x05
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	2c f4       	brge	.+10     	; 0xde6 <DIO_voidSetPinDir+0x3e>
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	9d 81       	ldd	r25, Y+5	; 0x05
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	71 f0       	breq	.+28     	; 0xe00 <DIO_voidSetPinDir+0x58>
     de4:	bc c0       	rjmp	.+376    	; 0xf5e <DIO_voidSetPinDir+0x1b6>
     de6:	2c 81       	ldd	r18, Y+4	; 0x04
     de8:	3d 81       	ldd	r19, Y+5	; 0x05
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	09 f4       	brne	.+2      	; 0xdf2 <DIO_voidSetPinDir+0x4a>
     df0:	5f c0       	rjmp	.+190    	; 0xeb0 <DIO_voidSetPinDir+0x108>
     df2:	8c 81       	ldd	r24, Y+4	; 0x04
     df4:	9d 81       	ldd	r25, Y+5	; 0x05
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	91 05       	cpc	r25, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <DIO_voidSetPinDir+0x56>
     dfc:	85 c0       	rjmp	.+266    	; 0xf08 <DIO_voidSetPinDir+0x160>
     dfe:	af c0       	rjmp	.+350    	; 0xf5e <DIO_voidSetPinDir+0x1b6>
	{
	case 0:
	    if(Dir == 0)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	88 23       	and	r24, r24
     e04:	a9 f4       	brne	.+42     	; 0xe30 <DIO_voidSetPinDir+0x88>
		{
			CLEAR_BIT(DDRA,Pin);
     e06:	aa e3       	ldi	r26, 0x3A	; 58
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ea e3       	ldi	r30, 0x3A	; 58
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_voidSetPinDir+0x7c>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_voidSetPinDir+0x78>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	97 c0       	rjmp	.+302    	; 0xf5e <DIO_voidSetPinDir+0x1b6>
		}
		else
		{
			SET_BIT(DDRA,Pin);
     e30:	aa e3       	ldi	r26, 0x3A	; 58
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ea e3       	ldi	r30, 0x3A	; 58
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_voidSetPinDir+0xa6>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_voidSetPinDir+0xa2>
     e52:	84 2b       	or	r24, r20
     e54:	8c 93       	st	X, r24
     e56:	83 c0       	rjmp	.+262    	; 0xf5e <DIO_voidSetPinDir+0x1b6>

		}
		break;
	case 1:
		if(Dir == 0)
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	88 23       	and	r24, r24
     e5c:	a9 f4       	brne	.+42     	; 0xe88 <DIO_voidSetPinDir+0xe0>
		{
			CLEAR_BIT(DDRB,Pin);
     e5e:	a7 e3       	ldi	r26, 0x37	; 55
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e7 e3       	ldi	r30, 0x37	; 55
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_voidSetPinDir+0xd4>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_voidSetPinDir+0xd0>
     e80:	80 95       	com	r24
     e82:	84 23       	and	r24, r20
     e84:	8c 93       	st	X, r24
     e86:	6b c0       	rjmp	.+214    	; 0xf5e <DIO_voidSetPinDir+0x1b6>
		}
		else
		{
			SET_BIT(DDRB,Pin);
     e88:	a7 e3       	ldi	r26, 0x37	; 55
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e7 e3       	ldi	r30, 0x37	; 55
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_voidSetPinDir+0xfe>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_voidSetPinDir+0xfa>
     eaa:	84 2b       	or	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	57 c0       	rjmp	.+174    	; 0xf5e <DIO_voidSetPinDir+0x1b6>
		}

		break;
	case 2:
		if(Dir == 0)
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	88 23       	and	r24, r24
     eb4:	a9 f4       	brne	.+42     	; 0xee0 <DIO_voidSetPinDir+0x138>
		{
			CLEAR_BIT(DDRC,Pin);
     eb6:	a4 e3       	ldi	r26, 0x34	; 52
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e4 e3       	ldi	r30, 0x34	; 52
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_voidSetPinDir+0x12c>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_voidSetPinDir+0x128>
     ed8:	80 95       	com	r24
     eda:	84 23       	and	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	3f c0       	rjmp	.+126    	; 0xf5e <DIO_voidSetPinDir+0x1b6>
		}
		else
		{
			SET_BIT(DDRC,Pin);
     ee0:	a4 e3       	ldi	r26, 0x34	; 52
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e4 e3       	ldi	r30, 0x34	; 52
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_voidSetPinDir+0x156>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_voidSetPinDir+0x152>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	2b c0       	rjmp	.+86     	; 0xf5e <DIO_voidSetPinDir+0x1b6>
		}

		break;
	case 3:
		if(Dir == 0)
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	88 23       	and	r24, r24
     f0c:	a9 f4       	brne	.+42     	; 0xf38 <DIO_voidSetPinDir+0x190>
		{
			CLEAR_BIT(DDRD,Pin);
     f0e:	a1 e3       	ldi	r26, 0x31	; 49
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_voidSetPinDir+0x184>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_voidSetPinDir+0x180>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	13 c0       	rjmp	.+38     	; 0xf5e <DIO_voidSetPinDir+0x1b6>
		}
		else
		{
			SET_BIT(DDRD,Pin);
     f38:	a1 e3       	ldi	r26, 0x31	; 49
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e1 e3       	ldi	r30, 0x31	; 49
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_voidSetPinDir+0x1ae>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_voidSetPinDir+0x1aa>
     f5a:	84 2b       	or	r24, r20
     f5c:	8c 93       	st	X, r24
		}
		break;
	}

}
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Port,u8 Pin,u8 Value)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <DIO_voidSetPinValue+0x6>
     f74:	00 d0       	rcall	.+0      	; 0xf76 <DIO_voidSetPinValue+0x8>
     f76:	0f 92       	push	r0
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	6a 83       	std	Y+2, r22	; 0x02
     f80:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	3d 83       	std	Y+5, r19	; 0x05
     f8a:	2c 83       	std	Y+4, r18	; 0x04
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <DIO_voidSetPinValue+0x2a>
     f96:	43 c0       	rjmp	.+134    	; 0x101e <DIO_voidSetPinValue+0xb0>
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	2c f4       	brge	.+10     	; 0xfac <DIO_voidSetPinValue+0x3e>
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <DIO_voidSetPinValue+0x58>
     faa:	bc c0       	rjmp	.+376    	; 0x1124 <DIO_voidSetPinValue+0x1b6>
     fac:	2c 81       	ldd	r18, Y+4	; 0x04
     fae:	3d 81       	ldd	r19, Y+5	; 0x05
     fb0:	22 30       	cpi	r18, 0x02	; 2
     fb2:	31 05       	cpc	r19, r1
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <DIO_voidSetPinValue+0x4a>
     fb6:	5f c0       	rjmp	.+190    	; 0x1076 <DIO_voidSetPinValue+0x108>
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	91 05       	cpc	r25, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <DIO_voidSetPinValue+0x56>
     fc2:	85 c0       	rjmp	.+266    	; 0x10ce <DIO_voidSetPinValue+0x160>
     fc4:	af c0       	rjmp	.+350    	; 0x1124 <DIO_voidSetPinValue+0x1b6>
	{
	case 0:
		if(Value == 0)
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	88 23       	and	r24, r24
     fca:	a9 f4       	brne	.+42     	; 0xff6 <DIO_voidSetPinValue+0x88>
		{
			CLEAR_BIT(PORTA,Pin);
     fcc:	ab e3       	ldi	r26, 0x3B	; 59
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	eb e3       	ldi	r30, 0x3B	; 59
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_voidSetPinValue+0x7c>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_voidSetPinValue+0x78>
     fee:	80 95       	com	r24
     ff0:	84 23       	and	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	97 c0       	rjmp	.+302    	; 0x1124 <DIO_voidSetPinValue+0x1b6>
		}
		else
		{
			SET_BIT(PORTA,Pin);
     ff6:	ab e3       	ldi	r26, 0x3B	; 59
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e3       	ldi	r30, 0x3B	; 59
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_voidSetPinValue+0xa6>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_voidSetPinValue+0xa2>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	83 c0       	rjmp	.+262    	; 0x1124 <DIO_voidSetPinValue+0x1b6>
		}

		break;
	case 1:
		if(Value == 0)
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	88 23       	and	r24, r24
    1022:	a9 f4       	brne	.+42     	; 0x104e <DIO_voidSetPinValue+0xe0>
		{
			CLEAR_BIT(PORTB,Pin);
    1024:	a8 e3       	ldi	r26, 0x38	; 56
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e8 e3       	ldi	r30, 0x38	; 56
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_voidSetPinValue+0xd4>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_voidSetPinValue+0xd0>
    1046:	80 95       	com	r24
    1048:	84 23       	and	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	6b c0       	rjmp	.+214    	; 0x1124 <DIO_voidSetPinValue+0x1b6>
		}
		else
		{
			SET_BIT(PORTB,Pin);
    104e:	a8 e3       	ldi	r26, 0x38	; 56
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e8 e3       	ldi	r30, 0x38	; 56
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_voidSetPinValue+0xfe>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_voidSetPinValue+0xfa>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	57 c0       	rjmp	.+174    	; 0x1124 <DIO_voidSetPinValue+0x1b6>
		}

		break;
	case 2:
		if(Value == 0)
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 23       	and	r24, r24
    107a:	a9 f4       	brne	.+42     	; 0x10a6 <DIO_voidSetPinValue+0x138>
		{
			CLEAR_BIT(PORTC,Pin);
    107c:	a5 e3       	ldi	r26, 0x35	; 53
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e5 e3       	ldi	r30, 0x35	; 53
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_voidSetPinValue+0x12c>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_voidSetPinValue+0x128>
    109e:	80 95       	com	r24
    10a0:	84 23       	and	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	3f c0       	rjmp	.+126    	; 0x1124 <DIO_voidSetPinValue+0x1b6>
		}
		else
		{
			SET_BIT(PORTC,Pin);
    10a6:	a5 e3       	ldi	r26, 0x35	; 53
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e3       	ldi	r30, 0x35	; 53
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_voidSetPinValue+0x156>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_voidSetPinValue+0x152>
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	2b c0       	rjmp	.+86     	; 0x1124 <DIO_voidSetPinValue+0x1b6>
		}

		break;
	case 3:
		if(Value == 0)
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	88 23       	and	r24, r24
    10d2:	a9 f4       	brne	.+42     	; 0x10fe <DIO_voidSetPinValue+0x190>
		{
			CLEAR_BIT(PORTD,Pin);
    10d4:	a2 e3       	ldi	r26, 0x32	; 50
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e2 e3       	ldi	r30, 0x32	; 50
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_voidSetPinValue+0x184>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_voidSetPinValue+0x180>
    10f6:	80 95       	com	r24
    10f8:	84 23       	and	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	13 c0       	rjmp	.+38     	; 0x1124 <DIO_voidSetPinValue+0x1b6>
		}
		else
		{
			SET_BIT(PORTD,Pin);
    10fe:	a2 e3       	ldi	r26, 0x32	; 50
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_voidSetPinValue+0x1ae>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_voidSetPinValue+0x1aa>
    1120:	84 2b       	or	r24, r20
    1122:	8c 93       	st	X, r24
		}

		break;
	}

}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue(u8 Port,u8 Pin)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <DIO_voidTogglePinValue+0x6>
    113a:	00 d0       	rcall	.+0      	; 0x113c <DIO_voidTogglePinValue+0x8>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port){
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	3c 83       	std	Y+4, r19	; 0x04
    114c:	2b 83       	std	Y+3, r18	; 0x03
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 05       	cpc	r25, r1
    1156:	49 f1       	breq	.+82     	; 0x11aa <DIO_voidTogglePinValue+0x76>
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	2c f4       	brge	.+10     	; 0x116c <DIO_voidTogglePinValue+0x38>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	61 f0       	breq	.+24     	; 0x1182 <DIO_voidTogglePinValue+0x4e>
    116a:	5a c0       	rjmp	.+180    	; 0x1220 <DIO_voidTogglePinValue+0xec>
    116c:	2b 81       	ldd	r18, Y+3	; 0x03
    116e:	3c 81       	ldd	r19, Y+4	; 0x04
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	71 f1       	breq	.+92     	; 0x11d2 <DIO_voidTogglePinValue+0x9e>
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	91 05       	cpc	r25, r1
    117e:	e9 f1       	breq	.+122    	; 0x11fa <DIO_voidTogglePinValue+0xc6>
    1180:	4f c0       	rjmp	.+158    	; 0x1220 <DIO_voidTogglePinValue+0xec>
	case 0:
		TOGGLE_BIT(PORTA,Pin);
    1182:	ab e3       	ldi	r26, 0x3B	; 59
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	eb e3       	ldi	r30, 0x3B	; 59
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_voidTogglePinValue+0x6c>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <DIO_voidTogglePinValue+0x68>
    11a4:	84 27       	eor	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	3b c0       	rjmp	.+118    	; 0x1220 <DIO_voidTogglePinValue+0xec>

		break;
	case 1:
		TOGGLE_BIT(PORTB,Pin);
    11aa:	a8 e3       	ldi	r26, 0x38	; 56
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e8 e3       	ldi	r30, 0x38	; 56
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_voidTogglePinValue+0x94>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_voidTogglePinValue+0x90>
    11cc:	84 27       	eor	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	27 c0       	rjmp	.+78     	; 0x1220 <DIO_voidTogglePinValue+0xec>

		break;
	case 2:
		TOGGLE_BIT(PORTC,Pin);
    11d2:	a5 e3       	ldi	r26, 0x35	; 53
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e5 e3       	ldi	r30, 0x35	; 53
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_voidTogglePinValue+0xbc>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_voidTogglePinValue+0xb8>
    11f4:	84 27       	eor	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	13 c0       	rjmp	.+38     	; 0x1220 <DIO_voidTogglePinValue+0xec>

		break;
	case 3:
		TOGGLE_BIT(PORTD,Pin);
    11fa:	a2 e3       	ldi	r26, 0x32	; 50
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e2 e3       	ldi	r30, 0x32	; 50
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_voidTogglePinValue+0xe4>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_voidTogglePinValue+0xe0>
    121c:	84 27       	eor	r24, r20
    121e:	8c 93       	st	X, r24

		break;
	}

}
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <DIO_u8GetPinValue>:
u8   DIO_u8GetPinValue(u8 Port,u8 Pin)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <DIO_u8GetPinValue+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <DIO_u8GetPinValue+0x8>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <DIO_u8GetPinValue+0xa>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3d 83       	std	Y+5, r19	; 0x05
    1248:	2c 83       	std	Y+4, r18	; 0x04
    124a:	4c 81       	ldd	r20, Y+4	; 0x04
    124c:	5d 81       	ldd	r21, Y+5	; 0x05
    124e:	41 30       	cpi	r20, 0x01	; 1
    1250:	51 05       	cpc	r21, r1
    1252:	49 f1       	breq	.+82     	; 0x12a6 <DIO_u8GetPinValue+0x78>
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	9d 81       	ldd	r25, Y+5	; 0x05
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	91 05       	cpc	r25, r1
    125c:	34 f4       	brge	.+12     	; 0x126a <DIO_u8GetPinValue+0x3c>
    125e:	2c 81       	ldd	r18, Y+4	; 0x04
    1260:	3d 81       	ldd	r19, Y+5	; 0x05
    1262:	21 15       	cp	r18, r1
    1264:	31 05       	cpc	r19, r1
    1266:	61 f0       	breq	.+24     	; 0x1280 <DIO_u8GetPinValue+0x52>
    1268:	57 c0       	rjmp	.+174    	; 0x1318 <DIO_u8GetPinValue+0xea>
    126a:	4c 81       	ldd	r20, Y+4	; 0x04
    126c:	5d 81       	ldd	r21, Y+5	; 0x05
    126e:	42 30       	cpi	r20, 0x02	; 2
    1270:	51 05       	cpc	r21, r1
    1272:	61 f1       	breq	.+88     	; 0x12cc <DIO_u8GetPinValue+0x9e>
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	91 05       	cpc	r25, r1
    127c:	d1 f1       	breq	.+116    	; 0x12f2 <DIO_u8GetPinValue+0xc4>
    127e:	4c c0       	rjmp	.+152    	; 0x1318 <DIO_u8GetPinValue+0xea>
	{
	case 0:
		return GET_BIT(PINA,Pin);
    1280:	e9 e3       	ldi	r30, 0x39	; 57
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8GetPinValue+0x6a>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8GetPinValue+0x66>
    129c:	ca 01       	movw	r24, r20
    129e:	58 2f       	mov	r21, r24
    12a0:	51 70       	andi	r21, 0x01	; 1
    12a2:	5b 83       	std	Y+3, r21	; 0x03
    12a4:	3a c0       	rjmp	.+116    	; 0x131a <DIO_u8GetPinValue+0xec>
	case 1:
		return GET_BIT(PINB,Pin);
    12a6:	e6 e3       	ldi	r30, 0x36	; 54
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_u8GetPinValue+0x90>
    12ba:	55 95       	asr	r21
    12bc:	47 95       	ror	r20
    12be:	8a 95       	dec	r24
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_u8GetPinValue+0x8c>
    12c2:	ca 01       	movw	r24, r20
    12c4:	58 2f       	mov	r21, r24
    12c6:	51 70       	andi	r21, 0x01	; 1
    12c8:	5b 83       	std	Y+3, r21	; 0x03
    12ca:	27 c0       	rjmp	.+78     	; 0x131a <DIO_u8GetPinValue+0xec>
	case 2:
		return GET_BIT(PINC,Pin);
    12cc:	e3 e3       	ldi	r30, 0x33	; 51
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a9 01       	movw	r20, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_u8GetPinValue+0xb6>
    12e0:	55 95       	asr	r21
    12e2:	47 95       	ror	r20
    12e4:	8a 95       	dec	r24
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_u8GetPinValue+0xb2>
    12e8:	ca 01       	movw	r24, r20
    12ea:	58 2f       	mov	r21, r24
    12ec:	51 70       	andi	r21, 0x01	; 1
    12ee:	5b 83       	std	Y+3, r21	; 0x03
    12f0:	14 c0       	rjmp	.+40     	; 0x131a <DIO_u8GetPinValue+0xec>
	case 3:
		return GET_BIT(PIND,Pin);
    12f2:	e0 e3       	ldi	r30, 0x30	; 48
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a9 01       	movw	r20, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <DIO_u8GetPinValue+0xdc>
    1306:	55 95       	asr	r21
    1308:	47 95       	ror	r20
    130a:	8a 95       	dec	r24
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <DIO_u8GetPinValue+0xd8>
    130e:	ca 01       	movw	r24, r20
    1310:	58 2f       	mov	r21, r24
    1312:	51 70       	andi	r21, 0x01	; 1
    1314:	5b 83       	std	Y+3, r21	; 0x03
    1316:	01 c0       	rjmp	.+2      	; 0x131a <DIO_u8GetPinValue+0xec>
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_u8GetPinValue+0xf0>
	}

}
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	8e 83       	std	Y+6, r24	; 0x06
    131e:	8e 81       	ldd	r24, Y+6	; 0x06
    1320:	26 96       	adiw	r28, 0x06	; 6
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <EX_Interrupt_voidInitINT0>:
#include <avr/interrupt.h>

extern u8 flag;

void EX_Interrupt_voidInitINT0(void)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
	//Enable PIE for INT0
	SET_BIT(GICR,6);
    133a:	ab e5       	ldi	r26, 0x5B	; 91
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	eb e5       	ldi	r30, 0x5B	; 91
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	80 64       	ori	r24, 0x40	; 64
    1346:	8c 93       	st	X, r24


	//Enable GIE
	SET_BIT(SREG,7);
    1348:	af e5       	ldi	r26, 0x5F	; 95
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ef e5       	ldi	r30, 0x5F	; 95
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	80 68       	ori	r24, 0x80	; 128
    1354:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC00);
	SET_BIT(MCUCR,ISC01);

#elif SENSE_CONTROL == FALLING_EDGE

	CLEAR_BIT(MCUCR,ISC00);
    1356:	a5 e5       	ldi	r26, 0x55	; 85
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e5 e5       	ldi	r30, 0x55	; 85
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	8e 7f       	andi	r24, 0xFE	; 254
    1362:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC01);
    1364:	a5 e5       	ldi	r26, 0x55	; 85
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e5 e5       	ldi	r30, 0x55	; 85
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	82 60       	ori	r24, 0x02	; 2
    1370:	8c 93       	st	X, r24

#endif
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <EX_Interrupt_voidSetINT0>:

void EX_Interrupt_voidSetINT0(void)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	// Set PD2"INT0" as input pull-up
	DIO_voidSetPinDir(PORT_D,PIN_2,INPUT);
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	62 e0       	ldi	r22, 0x02	; 2
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinValue(PORT_D,PIN_2,HIGH);
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	62 e0       	ldi	r22, 0x02	; 2
    138e:	41 e0       	ldi	r20, 0x01	; 1
    1390:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <EX_Interrupt_voidInitINT1>:




void EX_Interrupt_voidInitINT1(void)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62

	//Enable GIE
	SET_BIT(SREG,7);
    13a2:	af e5       	ldi	r26, 0x5F	; 95
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ef e5       	ldi	r30, 0x5F	; 95
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	8c 93       	st	X, r24

	//Enable PIE for INT1
	SET_BIT(GICR,7);
    13b0:	ab e5       	ldi	r26, 0x5B	; 91
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	eb e5       	ldi	r30, 0x5B	; 91
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	80 68       	ori	r24, 0x80	; 128
    13bc:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC10);
	SET_BIT(MCUCR,ISC11);

#elif SENSE_CONTROL == FALLING_EDGE

	CLEAR_BIT(MCUCR,ISC10);
    13be:	a5 e5       	ldi	r26, 0x55	; 85
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e5 e5       	ldi	r30, 0x55	; 85
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8b 7f       	andi	r24, 0xFB	; 251
    13ca:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
    13cc:	a5 e5       	ldi	r26, 0x55	; 85
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e5 e5       	ldi	r30, 0x55	; 85
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	88 60       	ori	r24, 0x08	; 8
    13d8:	8c 93       	st	X, r24

#endif

}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <EX_Interrupt_voidSetINT1>:
void EX_Interrupt_voidSetINT1(void)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	// Set PD3"INT1" as input pull-up
	DIO_voidSetPinDir(PORT_D,PIN_3,INPUT);
    13e8:	83 e0       	ldi	r24, 0x03	; 3
    13ea:	63 e0       	ldi	r22, 0x03	; 3
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinValue(PORT_D,PIN_3,HIGH);
    13f2:	83 e0       	ldi	r24, 0x03	; 3
    13f4:	63 e0       	ldi	r22, 0x03	; 3
    13f6:	41 e0       	ldi	r20, 0x01	; 1
    13f8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
}
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <KEYPAD_voidInit>:
#include "../lib/macros.h"
#include "DIO_interface.h"
#include "KeyPad_interface.h"
#include "KeyPad_config.h"
void KEYPAD_voidInit(void)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(R1_PORT,R1_PIN,OUTPUT);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	67 e0       	ldi	r22, 0x07	; 7
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(R2_PORT,R2_PIN,OUTPUT);
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	66 e0       	ldi	r22, 0x06	; 6
    1418:	41 e0       	ldi	r20, 0x01	; 1
    141a:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(R3_PORT,R3_PIN,OUTPUT);
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	65 e0       	ldi	r22, 0x05	; 5
    1422:	41 e0       	ldi	r20, 0x01	; 1
    1424:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(R4_PORT,R4_PIN,OUTPUT);
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	64 e0       	ldi	r22, 0x04	; 4
    142c:	41 e0       	ldi	r20, 0x01	; 1
    142e:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>

	DIO_voidSetPinDir(C1_PORT,C1_PIN,INPUT);
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	63 e0       	ldi	r22, 0x03	; 3
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(C2_PORT,C2_PIN,INPUT);
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	62 e0       	ldi	r22, 0x02	; 2
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(C3_PORT,C3_PIN,INPUT);
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(C4_PORT,C4_PIN,INPUT);
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>

	DIO_voidSetPinValue(C1_PORT,C1_PIN,HIGH);   //to make each input bins with pull up ressistor
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	63 e0       	ldi	r22, 0x03	; 3
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(C2_PORT,C2_PIN,HIGH);
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	62 e0       	ldi	r22, 0x02	; 2
    1468:	41 e0       	ldi	r20, 0x01	; 1
    146a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(C3_PORT,C3_PIN,HIGH);
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	41 e0       	ldi	r20, 0x01	; 1
    1474:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(C4_PORT,C4_PIN,HIGH);
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
}
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <KEYPAD_voidInitTemp>:
u8 KEYPAD_voidInitTemp(u8 bit_1,u8 bit_2,u8 bit_3,u8 bit_4)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	00 d0       	rcall	.+0      	; 0x148e <KEYPAD_voidInitTemp+0x6>
    148e:	00 d0       	rcall	.+0      	; 0x1490 <KEYPAD_voidInitTemp+0x8>
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	8a 83       	std	Y+2, r24	; 0x02
    1498:	6b 83       	std	Y+3, r22	; 0x03
    149a:	4c 83       	std	Y+4, r20	; 0x04
    149c:	2d 83       	std	Y+5, r18	; 0x05
	u8 temp;
	DIO_voidSetPinValue(R1_PORT,R1_PIN,bit_1);
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	67 e0       	ldi	r22, 0x07	; 7
    14a2:	4a 81       	ldd	r20, Y+2	; 0x02
    14a4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(R2_PORT,R2_PIN,bit_2);
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	66 e0       	ldi	r22, 0x06	; 6
    14ac:	4b 81       	ldd	r20, Y+3	; 0x03
    14ae:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(R3_PORT,R3_PIN,bit_3);
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	65 e0       	ldi	r22, 0x05	; 5
    14b6:	4c 81       	ldd	r20, Y+4	; 0x04
    14b8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(R4_PORT,R4_PIN,bit_4);
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	64 e0       	ldi	r22, 0x04	; 4
    14c0:	4d 81       	ldd	r20, Y+5	; 0x05
    14c2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	temp = 0;
    14c6:	19 82       	std	Y+1, r1	; 0x01
	temp |=(DIO_u8GetPinValue(C4_PORT,C4_PIN)<<0);
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_u8GetPinValue>
    14d4:	98 2f       	mov	r25, r24
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	89 2b       	or	r24, r25
    14da:	89 83       	std	Y+1, r24	; 0x01
	temp |=(DIO_u8GetPinValue(C3_PORT,C3_PIN)<<1);
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_u8GetPinValue>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	98 2f       	mov	r25, r24
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	89 2b       	or	r24, r25
    14f2:	89 83       	std	Y+1, r24	; 0x01
	temp |=(DIO_u8GetPinValue(C2_PORT,C2_PIN)<<2);
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	62 e0       	ldi	r22, 0x02	; 2
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_u8GetPinValue>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	98 2f       	mov	r25, r24
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	89 2b       	or	r24, r25
    150e:	89 83       	std	Y+1, r24	; 0x01
	temp |=(DIO_u8GetPinValue(C1_PORT,C1_PIN)<<3);
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	63 e0       	ldi	r22, 0x03	; 3
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_u8GetPinValue>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	98 2f       	mov	r25, r24
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	89 2b       	or	r24, r25
    152e:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    1530:	89 81       	ldd	r24, Y+1	; 0x01
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <KEYPAD_u8GetKey>:
u8   KEYPAD_u8GetKey(void)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	2a 97       	sbiw	r28, 0x0a	; 10
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
	u8 temp;
	temp = KEYPAD_voidInitTemp(LOW,HIGH,HIGH,HIGH);
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	61 e0       	ldi	r22, 0x01	; 1
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	21 e0       	ldi	r18, 0x01	; 1
    155e:	0e 94 44 0a 	call	0x1488	; 0x1488 <KEYPAD_voidInitTemp>
    1562:	89 83       	std	Y+1, r24	; 0x01
	switch(temp)
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	3a 87       	std	Y+10, r19	; 0x0a
    156c:	29 87       	std	Y+9, r18	; 0x09
    156e:	89 85       	ldd	r24, Y+9	; 0x09
    1570:	9a 85       	ldd	r25, Y+10	; 0x0a
    1572:	8b 30       	cpi	r24, 0x0B	; 11
    1574:	91 05       	cpc	r25, r1
    1576:	d9 f0       	breq	.+54     	; 0x15ae <KEYPAD_u8GetKey+0x6c>
    1578:	29 85       	ldd	r18, Y+9	; 0x09
    157a:	3a 85       	ldd	r19, Y+10	; 0x0a
    157c:	2c 30       	cpi	r18, 0x0C	; 12
    157e:	31 05       	cpc	r19, r1
    1580:	34 f4       	brge	.+12     	; 0x158e <KEYPAD_u8GetKey+0x4c>
    1582:	89 85       	ldd	r24, Y+9	; 0x09
    1584:	9a 85       	ldd	r25, Y+10	; 0x0a
    1586:	87 30       	cpi	r24, 0x07	; 7
    1588:	91 05       	cpc	r25, r1
    158a:	99 f0       	breq	.+38     	; 0x15b2 <KEYPAD_u8GetKey+0x70>
    158c:	15 c0       	rjmp	.+42     	; 0x15b8 <KEYPAD_u8GetKey+0x76>
    158e:	29 85       	ldd	r18, Y+9	; 0x09
    1590:	3a 85       	ldd	r19, Y+10	; 0x0a
    1592:	2d 30       	cpi	r18, 0x0D	; 13
    1594:	31 05       	cpc	r19, r1
    1596:	41 f0       	breq	.+16     	; 0x15a8 <KEYPAD_u8GetKey+0x66>
    1598:	89 85       	ldd	r24, Y+9	; 0x09
    159a:	9a 85       	ldd	r25, Y+10	; 0x0a
    159c:	8e 30       	cpi	r24, 0x0E	; 14
    159e:	91 05       	cpc	r25, r1
    15a0:	59 f4       	brne	.+22     	; 0x15b8 <KEYPAD_u8GetKey+0x76>
	{
	case 0x0E:
		return '*';
    15a2:	9a e2       	ldi	r25, 0x2A	; 42
    15a4:	98 87       	std	Y+8, r25	; 0x08
    15a6:	a0 c0       	rjmp	.+320    	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	case 0x0D:
		return '#';
    15a8:	23 e2       	ldi	r18, 0x23	; 35
    15aa:	28 87       	std	Y+8, r18	; 0x08
    15ac:	9d c0       	rjmp	.+314    	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	case 0x0B:
		return 0;
    15ae:	18 86       	std	Y+8, r1	; 0x08
    15b0:	9b c0       	rjmp	.+310    	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	case 0x07:
		return '=';
    15b2:	3d e3       	ldi	r19, 0x3D	; 61
    15b4:	38 87       	std	Y+8, r19	; 0x08
    15b6:	98 c0       	rjmp	.+304    	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	}
	temp = KEYPAD_voidInitTemp(HIGH,LOW,HIGH,HIGH);
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	21 e0       	ldi	r18, 0x01	; 1
    15c0:	0e 94 44 0a 	call	0x1488	; 0x1488 <KEYPAD_voidInitTemp>
    15c4:	89 83       	std	Y+1, r24	; 0x01
	switch(temp)
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	3f 83       	std	Y+7, r19	; 0x07
    15ce:	2e 83       	std	Y+6, r18	; 0x06
    15d0:	8e 81       	ldd	r24, Y+6	; 0x06
    15d2:	9f 81       	ldd	r25, Y+7	; 0x07
    15d4:	8b 30       	cpi	r24, 0x0B	; 11
    15d6:	91 05       	cpc	r25, r1
    15d8:	d9 f0       	breq	.+54     	; 0x1610 <KEYPAD_u8GetKey+0xce>
    15da:	2e 81       	ldd	r18, Y+6	; 0x06
    15dc:	3f 81       	ldd	r19, Y+7	; 0x07
    15de:	2c 30       	cpi	r18, 0x0C	; 12
    15e0:	31 05       	cpc	r19, r1
    15e2:	34 f4       	brge	.+12     	; 0x15f0 <KEYPAD_u8GetKey+0xae>
    15e4:	8e 81       	ldd	r24, Y+6	; 0x06
    15e6:	9f 81       	ldd	r25, Y+7	; 0x07
    15e8:	87 30       	cpi	r24, 0x07	; 7
    15ea:	91 05       	cpc	r25, r1
    15ec:	a1 f0       	breq	.+40     	; 0x1616 <KEYPAD_u8GetKey+0xd4>
    15ee:	16 c0       	rjmp	.+44     	; 0x161c <KEYPAD_u8GetKey+0xda>
    15f0:	2e 81       	ldd	r18, Y+6	; 0x06
    15f2:	3f 81       	ldd	r19, Y+7	; 0x07
    15f4:	2d 30       	cpi	r18, 0x0D	; 13
    15f6:	31 05       	cpc	r19, r1
    15f8:	41 f0       	breq	.+16     	; 0x160a <KEYPAD_u8GetKey+0xc8>
    15fa:	8e 81       	ldd	r24, Y+6	; 0x06
    15fc:	9f 81       	ldd	r25, Y+7	; 0x07
    15fe:	8e 30       	cpi	r24, 0x0E	; 14
    1600:	91 05       	cpc	r25, r1
    1602:	61 f4       	brne	.+24     	; 0x161c <KEYPAD_u8GetKey+0xda>
	{
	case 0x0E:
		return '/';
    1604:	9f e2       	ldi	r25, 0x2F	; 47
    1606:	98 87       	std	Y+8, r25	; 0x08
    1608:	6f c0       	rjmp	.+222    	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	case 0x0D:
		return 9;
    160a:	29 e0       	ldi	r18, 0x09	; 9
    160c:	28 87       	std	Y+8, r18	; 0x08
    160e:	6c c0       	rjmp	.+216    	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	case 0x0B:
		return 8;
    1610:	38 e0       	ldi	r19, 0x08	; 8
    1612:	38 87       	std	Y+8, r19	; 0x08
    1614:	69 c0       	rjmp	.+210    	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	case 0x07:
		return 7 ;
    1616:	87 e0       	ldi	r24, 0x07	; 7
    1618:	88 87       	std	Y+8, r24	; 0x08
    161a:	66 c0       	rjmp	.+204    	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	}
	temp = KEYPAD_voidInitTemp(HIGH,HIGH,LOW,HIGH);
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	61 e0       	ldi	r22, 0x01	; 1
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	21 e0       	ldi	r18, 0x01	; 1
    1624:	0e 94 44 0a 	call	0x1488	; 0x1488 <KEYPAD_voidInitTemp>
    1628:	89 83       	std	Y+1, r24	; 0x01
	switch(temp)
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	3d 83       	std	Y+5, r19	; 0x05
    1632:	2c 83       	std	Y+4, r18	; 0x04
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	9d 81       	ldd	r25, Y+5	; 0x05
    1638:	8b 30       	cpi	r24, 0x0B	; 11
    163a:	91 05       	cpc	r25, r1
    163c:	d9 f0       	breq	.+54     	; 0x1674 <KEYPAD_u8GetKey+0x132>
    163e:	2c 81       	ldd	r18, Y+4	; 0x04
    1640:	3d 81       	ldd	r19, Y+5	; 0x05
    1642:	2c 30       	cpi	r18, 0x0C	; 12
    1644:	31 05       	cpc	r19, r1
    1646:	34 f4       	brge	.+12     	; 0x1654 <KEYPAD_u8GetKey+0x112>
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	9d 81       	ldd	r25, Y+5	; 0x05
    164c:	87 30       	cpi	r24, 0x07	; 7
    164e:	91 05       	cpc	r25, r1
    1650:	a1 f0       	breq	.+40     	; 0x167a <KEYPAD_u8GetKey+0x138>
    1652:	16 c0       	rjmp	.+44     	; 0x1680 <KEYPAD_u8GetKey+0x13e>
    1654:	2c 81       	ldd	r18, Y+4	; 0x04
    1656:	3d 81       	ldd	r19, Y+5	; 0x05
    1658:	2d 30       	cpi	r18, 0x0D	; 13
    165a:	31 05       	cpc	r19, r1
    165c:	41 f0       	breq	.+16     	; 0x166e <KEYPAD_u8GetKey+0x12c>
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	9d 81       	ldd	r25, Y+5	; 0x05
    1662:	8e 30       	cpi	r24, 0x0E	; 14
    1664:	91 05       	cpc	r25, r1
    1666:	61 f4       	brne	.+24     	; 0x1680 <KEYPAD_u8GetKey+0x13e>
	{
	case 0x0E:
		return '-';
    1668:	9d e2       	ldi	r25, 0x2D	; 45
    166a:	98 87       	std	Y+8, r25	; 0x08
    166c:	3d c0       	rjmp	.+122    	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	case 0x0D:
		return 6;
    166e:	26 e0       	ldi	r18, 0x06	; 6
    1670:	28 87       	std	Y+8, r18	; 0x08
    1672:	3a c0       	rjmp	.+116    	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	case 0x0B:
		return 5;
    1674:	35 e0       	ldi	r19, 0x05	; 5
    1676:	38 87       	std	Y+8, r19	; 0x08
    1678:	37 c0       	rjmp	.+110    	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	case 0x07:
		return 4;
    167a:	84 e0       	ldi	r24, 0x04	; 4
    167c:	88 87       	std	Y+8, r24	; 0x08
    167e:	34 c0       	rjmp	.+104    	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	}
	temp = KEYPAD_voidInitTemp(HIGH,HIGH,HIGH,LOW);
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	41 e0       	ldi	r20, 0x01	; 1
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	0e 94 44 0a 	call	0x1488	; 0x1488 <KEYPAD_voidInitTemp>
    168c:	89 83       	std	Y+1, r24	; 0x01
	switch(temp)
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	3b 83       	std	Y+3, r19	; 0x03
    1696:	2a 83       	std	Y+2, r18	; 0x02
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	9b 81       	ldd	r25, Y+3	; 0x03
    169c:	8b 30       	cpi	r24, 0x0B	; 11
    169e:	91 05       	cpc	r25, r1
    16a0:	d9 f0       	breq	.+54     	; 0x16d8 <KEYPAD_u8GetKey+0x196>
    16a2:	2a 81       	ldd	r18, Y+2	; 0x02
    16a4:	3b 81       	ldd	r19, Y+3	; 0x03
    16a6:	2c 30       	cpi	r18, 0x0C	; 12
    16a8:	31 05       	cpc	r19, r1
    16aa:	34 f4       	brge	.+12     	; 0x16b8 <KEYPAD_u8GetKey+0x176>
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	9b 81       	ldd	r25, Y+3	; 0x03
    16b0:	87 30       	cpi	r24, 0x07	; 7
    16b2:	91 05       	cpc	r25, r1
    16b4:	a1 f0       	breq	.+40     	; 0x16de <KEYPAD_u8GetKey+0x19c>
    16b6:	16 c0       	rjmp	.+44     	; 0x16e4 <KEYPAD_u8GetKey+0x1a2>
    16b8:	2a 81       	ldd	r18, Y+2	; 0x02
    16ba:	3b 81       	ldd	r19, Y+3	; 0x03
    16bc:	2d 30       	cpi	r18, 0x0D	; 13
    16be:	31 05       	cpc	r19, r1
    16c0:	41 f0       	breq	.+16     	; 0x16d2 <KEYPAD_u8GetKey+0x190>
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	9b 81       	ldd	r25, Y+3	; 0x03
    16c6:	8e 30       	cpi	r24, 0x0E	; 14
    16c8:	91 05       	cpc	r25, r1
    16ca:	61 f4       	brne	.+24     	; 0x16e4 <KEYPAD_u8GetKey+0x1a2>
	{
	case 0x0E:
		return '+';
    16cc:	9b e2       	ldi	r25, 0x2B	; 43
    16ce:	98 87       	std	Y+8, r25	; 0x08
    16d0:	0b c0       	rjmp	.+22     	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	case 0x0D:
		return 3;
    16d2:	23 e0       	ldi	r18, 0x03	; 3
    16d4:	28 87       	std	Y+8, r18	; 0x08
    16d6:	08 c0       	rjmp	.+16     	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	case 0x0B:
		return 2;
    16d8:	32 e0       	ldi	r19, 0x02	; 2
    16da:	38 87       	std	Y+8, r19	; 0x08
    16dc:	05 c0       	rjmp	.+10     	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	case 0x07:
		return 1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	88 87       	std	Y+8, r24	; 0x08
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <KEYPAD_u8GetKey+0x1a6>
	}
return NO_KEY;
    16e4:	9f ef       	ldi	r25, 0xFF	; 255
    16e6:	98 87       	std	Y+8, r25	; 0x08
    16e8:	88 85       	ldd	r24, Y+8	; 0x08
}
    16ea:	2a 96       	adiw	r28, 0x0a	; 10
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <LCD_voidInit>:

#include"LCD_config.h"


void LCD_voidInit(void)
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	aa 97       	sbiw	r28, 0x2a	; 42
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDir(D0_PORT ,D0_PIN ,OUTPUT);
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D1_PORT ,D1_PIN ,OUTPUT);
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	61 e0       	ldi	r22, 0x01	; 1
    171e:	41 e0       	ldi	r20, 0x01	; 1
    1720:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D2_PORT ,D2_PIN ,OUTPUT);
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	62 e0       	ldi	r22, 0x02	; 2
    1728:	41 e0       	ldi	r20, 0x01	; 1
    172a:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D3_PORT ,D3_PIN ,OUTPUT);
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	63 e0       	ldi	r22, 0x03	; 3
    1732:	41 e0       	ldi	r20, 0x01	; 1
    1734:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D4_PORT ,D4_PIN ,OUTPUT);
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	64 e0       	ldi	r22, 0x04	; 4
    173c:	41 e0       	ldi	r20, 0x01	; 1
    173e:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D5_PORT ,D5_PIN ,OUTPUT);
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	65 e0       	ldi	r22, 0x05	; 5
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D6_PORT ,D6_PIN ,OUTPUT);
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	66 e0       	ldi	r22, 0x06	; 6
    1750:	41 e0       	ldi	r20, 0x01	; 1
    1752:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D7_PORT ,D7_PIN ,OUTPUT);
    1756:	82 e0       	ldi	r24, 0x02	; 2
    1758:	67 e0       	ldi	r22, 0x07	; 7
    175a:	41 e0       	ldi	r20, 0x01	; 1
    175c:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>

	DIO_voidSetPinDir(RS_PORT,RS_PIN,OUTPUT);
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(RW_PORT,RW_PIN,OUTPUT);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	61 e0       	ldi	r22, 0x01	; 1
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(EN_PORT,EN_PIN,OUTPUT);
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	62 e0       	ldi	r22, 0x02	; 2
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>

	LCD_voidSendCommand(FunctionSet8bit2Line5x7Dots);
    177e:	88 e3       	ldi	r24, 0x38	; 56
    1780:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a0 ea       	ldi	r26, 0xA0	; 160
    178a:	b0 e4       	ldi	r27, 0x40	; 64
    178c:	8f a3       	std	Y+39, r24	; 0x27
    178e:	98 a7       	std	Y+40, r25	; 0x28
    1790:	a9 a7       	std	Y+41, r26	; 0x29
    1792:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1794:	6f a1       	ldd	r22, Y+39	; 0x27
    1796:	78 a5       	ldd	r23, Y+40	; 0x28
    1798:	89 a5       	ldd	r24, Y+41	; 0x29
    179a:	9a a5       	ldd	r25, Y+42	; 0x2a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e8       	ldi	r19, 0x80	; 128
    17a0:	4b e3       	ldi	r20, 0x3B	; 59
    17a2:	55 e4       	ldi	r21, 0x45	; 69
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	8b a3       	std	Y+35, r24	; 0x23
    17ae:	9c a3       	std	Y+36, r25	; 0x24
    17b0:	ad a3       	std	Y+37, r26	; 0x25
    17b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17b4:	6b a1       	ldd	r22, Y+35	; 0x23
    17b6:	7c a1       	ldd	r23, Y+36	; 0x24
    17b8:	8d a1       	ldd	r24, Y+37	; 0x25
    17ba:	9e a1       	ldd	r25, Y+38	; 0x26
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e8       	ldi	r20, 0x80	; 128
    17c2:	5f e3       	ldi	r21, 0x3F	; 63
    17c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c8:	88 23       	and	r24, r24
    17ca:	2c f4       	brge	.+10     	; 0x17d6 <LCD_voidInit+0xda>
		__ticks = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	9a a3       	std	Y+34, r25	; 0x22
    17d2:	89 a3       	std	Y+33, r24	; 0x21
    17d4:	3f c0       	rjmp	.+126    	; 0x1854 <LCD_voidInit+0x158>
	else if (__tmp > 65535)
    17d6:	6b a1       	ldd	r22, Y+35	; 0x23
    17d8:	7c a1       	ldd	r23, Y+36	; 0x24
    17da:	8d a1       	ldd	r24, Y+37	; 0x25
    17dc:	9e a1       	ldd	r25, Y+38	; 0x26
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	3f ef       	ldi	r19, 0xFF	; 255
    17e2:	4f e7       	ldi	r20, 0x7F	; 127
    17e4:	57 e4       	ldi	r21, 0x47	; 71
    17e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ea:	18 16       	cp	r1, r24
    17ec:	4c f5       	brge	.+82     	; 0x1840 <LCD_voidInit+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ee:	6f a1       	ldd	r22, Y+39	; 0x27
    17f0:	78 a5       	ldd	r23, Y+40	; 0x28
    17f2:	89 a5       	ldd	r24, Y+41	; 0x29
    17f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e2       	ldi	r20, 0x20	; 32
    17fc:	51 e4       	ldi	r21, 0x41	; 65
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9a a3       	std	Y+34, r25	; 0x22
    1814:	89 a3       	std	Y+33, r24	; 0x21
    1816:	0f c0       	rjmp	.+30     	; 0x1836 <LCD_voidInit+0x13a>
    1818:	8c e2       	ldi	r24, 0x2C	; 44
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	98 a3       	std	Y+32, r25	; 0x20
    181e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1820:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1822:	98 a1       	ldd	r25, Y+32	; 0x20
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <LCD_voidInit+0x128>
    1828:	98 a3       	std	Y+32, r25	; 0x20
    182a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182c:	89 a1       	ldd	r24, Y+33	; 0x21
    182e:	9a a1       	ldd	r25, Y+34	; 0x22
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	9a a3       	std	Y+34, r25	; 0x22
    1834:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1836:	89 a1       	ldd	r24, Y+33	; 0x21
    1838:	9a a1       	ldd	r25, Y+34	; 0x22
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	69 f7       	brne	.-38     	; 0x1818 <LCD_voidInit+0x11c>
    183e:	14 c0       	rjmp	.+40     	; 0x1868 <LCD_voidInit+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1840:	6b a1       	ldd	r22, Y+35	; 0x23
    1842:	7c a1       	ldd	r23, Y+36	; 0x24
    1844:	8d a1       	ldd	r24, Y+37	; 0x25
    1846:	9e a1       	ldd	r25, Y+38	; 0x26
    1848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	9a a3       	std	Y+34, r25	; 0x22
    1852:	89 a3       	std	Y+33, r24	; 0x21
    1854:	89 a1       	ldd	r24, Y+33	; 0x21
    1856:	9a a1       	ldd	r25, Y+34	; 0x22
    1858:	9e 8f       	std	Y+30, r25	; 0x1e
    185a:	8d 8f       	std	Y+29, r24	; 0x1d
    185c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    185e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <LCD_voidInit+0x164>
    1864:	9e 8f       	std	Y+30, r25	; 0x1e
    1866:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(DisplayOnCursorOff);
    1868:	8c e0       	ldi	r24, 0x0C	; 12
    186a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	a0 ea       	ldi	r26, 0xA0	; 160
    1874:	b0 e4       	ldi	r27, 0x40	; 64
    1876:	89 8f       	std	Y+25, r24	; 0x19
    1878:	9a 8f       	std	Y+26, r25	; 0x1a
    187a:	ab 8f       	std	Y+27, r26	; 0x1b
    187c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187e:	69 8d       	ldd	r22, Y+25	; 0x19
    1880:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1882:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1884:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e8       	ldi	r19, 0x80	; 128
    188a:	4b e3       	ldi	r20, 0x3B	; 59
    188c:	55 e4       	ldi	r21, 0x45	; 69
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	8d 8b       	std	Y+21, r24	; 0x15
    1898:	9e 8b       	std	Y+22, r25	; 0x16
    189a:	af 8b       	std	Y+23, r26	; 0x17
    189c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    189e:	6d 89       	ldd	r22, Y+21	; 0x15
    18a0:	7e 89       	ldd	r23, Y+22	; 0x16
    18a2:	8f 89       	ldd	r24, Y+23	; 0x17
    18a4:	98 8d       	ldd	r25, Y+24	; 0x18
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e8       	ldi	r20, 0x80	; 128
    18ac:	5f e3       	ldi	r21, 0x3F	; 63
    18ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b2:	88 23       	and	r24, r24
    18b4:	2c f4       	brge	.+10     	; 0x18c0 <LCD_voidInit+0x1c4>
		__ticks = 1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	9c 8b       	std	Y+20, r25	; 0x14
    18bc:	8b 8b       	std	Y+19, r24	; 0x13
    18be:	3f c0       	rjmp	.+126    	; 0x193e <LCD_voidInit+0x242>
	else if (__tmp > 65535)
    18c0:	6d 89       	ldd	r22, Y+21	; 0x15
    18c2:	7e 89       	ldd	r23, Y+22	; 0x16
    18c4:	8f 89       	ldd	r24, Y+23	; 0x17
    18c6:	98 8d       	ldd	r25, Y+24	; 0x18
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	3f ef       	ldi	r19, 0xFF	; 255
    18cc:	4f e7       	ldi	r20, 0x7F	; 127
    18ce:	57 e4       	ldi	r21, 0x47	; 71
    18d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d4:	18 16       	cp	r1, r24
    18d6:	4c f5       	brge	.+82     	; 0x192a <LCD_voidInit+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d8:	69 8d       	ldd	r22, Y+25	; 0x19
    18da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e2       	ldi	r20, 0x20	; 32
    18e6:	51 e4       	ldi	r21, 0x41	; 65
    18e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	bc 01       	movw	r22, r24
    18f2:	cd 01       	movw	r24, r26
    18f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	9c 8b       	std	Y+20, r25	; 0x14
    18fe:	8b 8b       	std	Y+19, r24	; 0x13
    1900:	0f c0       	rjmp	.+30     	; 0x1920 <LCD_voidInit+0x224>
    1902:	8c e2       	ldi	r24, 0x2C	; 44
    1904:	91 e0       	ldi	r25, 0x01	; 1
    1906:	9a 8b       	std	Y+18, r25	; 0x12
    1908:	89 8b       	std	Y+17, r24	; 0x11
    190a:	89 89       	ldd	r24, Y+17	; 0x11
    190c:	9a 89       	ldd	r25, Y+18	; 0x12
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <LCD_voidInit+0x212>
    1912:	9a 8b       	std	Y+18, r25	; 0x12
    1914:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1916:	8b 89       	ldd	r24, Y+19	; 0x13
    1918:	9c 89       	ldd	r25, Y+20	; 0x14
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	9c 8b       	std	Y+20, r25	; 0x14
    191e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1920:	8b 89       	ldd	r24, Y+19	; 0x13
    1922:	9c 89       	ldd	r25, Y+20	; 0x14
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	69 f7       	brne	.-38     	; 0x1902 <LCD_voidInit+0x206>
    1928:	14 c0       	rjmp	.+40     	; 0x1952 <LCD_voidInit+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192a:	6d 89       	ldd	r22, Y+21	; 0x15
    192c:	7e 89       	ldd	r23, Y+22	; 0x16
    192e:	8f 89       	ldd	r24, Y+23	; 0x17
    1930:	98 8d       	ldd	r25, Y+24	; 0x18
    1932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	9c 8b       	std	Y+20, r25	; 0x14
    193c:	8b 8b       	std	Y+19, r24	; 0x13
    193e:	8b 89       	ldd	r24, Y+19	; 0x13
    1940:	9c 89       	ldd	r25, Y+20	; 0x14
    1942:	98 8b       	std	Y+16, r25	; 0x10
    1944:	8f 87       	std	Y+15, r24	; 0x0f
    1946:	8f 85       	ldd	r24, Y+15	; 0x0f
    1948:	98 89       	ldd	r25, Y+16	; 0x10
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <LCD_voidInit+0x24e>
    194e:	98 8b       	std	Y+16, r25	; 0x10
    1950:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand(ClearWithDDRAM);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 ea       	ldi	r26, 0xA0	; 160
    195e:	b0 e4       	ldi	r27, 0x40	; 64
    1960:	8b 87       	std	Y+11, r24	; 0x0b
    1962:	9c 87       	std	Y+12, r25	; 0x0c
    1964:	ad 87       	std	Y+13, r26	; 0x0d
    1966:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1968:	6b 85       	ldd	r22, Y+11	; 0x0b
    196a:	7c 85       	ldd	r23, Y+12	; 0x0c
    196c:	8d 85       	ldd	r24, Y+13	; 0x0d
    196e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e8       	ldi	r19, 0x80	; 128
    1974:	4b e3       	ldi	r20, 0x3B	; 59
    1976:	55 e4       	ldi	r21, 0x45	; 69
    1978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	8f 83       	std	Y+7, r24	; 0x07
    1982:	98 87       	std	Y+8, r25	; 0x08
    1984:	a9 87       	std	Y+9, r26	; 0x09
    1986:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1988:	6f 81       	ldd	r22, Y+7	; 0x07
    198a:	78 85       	ldd	r23, Y+8	; 0x08
    198c:	89 85       	ldd	r24, Y+9	; 0x09
    198e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    199c:	88 23       	and	r24, r24
    199e:	2c f4       	brge	.+10     	; 0x19aa <LCD_voidInit+0x2ae>
		__ticks = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
    19a8:	3f c0       	rjmp	.+126    	; 0x1a28 <LCD_voidInit+0x32c>
	else if (__tmp > 65535)
    19aa:	6f 81       	ldd	r22, Y+7	; 0x07
    19ac:	78 85       	ldd	r23, Y+8	; 0x08
    19ae:	89 85       	ldd	r24, Y+9	; 0x09
    19b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	4f e7       	ldi	r20, 0x7F	; 127
    19b8:	57 e4       	ldi	r21, 0x47	; 71
    19ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19be:	18 16       	cp	r1, r24
    19c0:	4c f5       	brge	.+82     	; 0x1a14 <LCD_voidInit+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <LCD_voidInit+0x30e>
    19ec:	8c e2       	ldi	r24, 0x2C	; 44
    19ee:	91 e0       	ldi	r25, 0x01	; 1
    19f0:	9c 83       	std	Y+4, r25	; 0x04
    19f2:	8b 83       	std	Y+3, r24	; 0x03
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <LCD_voidInit+0x2fc>
    19fc:	9c 83       	std	Y+4, r25	; 0x04
    19fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a00:	8d 81       	ldd	r24, Y+5	; 0x05
    1a02:	9e 81       	ldd	r25, Y+6	; 0x06
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	69 f7       	brne	.-38     	; 0x19ec <LCD_voidInit+0x2f0>
    1a12:	14 c0       	rjmp	.+40     	; 0x1a3c <LCD_voidInit+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a14:	6f 81       	ldd	r22, Y+7	; 0x07
    1a16:	78 85       	ldd	r23, Y+8	; 0x08
    1a18:	89 85       	ldd	r24, Y+9	; 0x09
    1a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	9a 83       	std	Y+2, r25	; 0x02
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_voidInit+0x338>
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);



}
    1a3c:	aa 96       	adiw	r28, 0x2a	; 42
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <LCD_voidWriteCharacter>:

void LCD_voidWriteCharacter(u8 Charater)
{
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	2f 97       	sbiw	r28, 0x0f	; 15
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(RS_PORT,RS_PIN,HIGH);
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	41 e0       	ldi	r20, 0x01	; 1
    1a6a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(RW_PORT,RW_PIN,LOW);
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	61 e0       	ldi	r22, 0x01	; 1
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>

	DIO_voidSetPinValue(D0_PORT ,D0_PIN ,GET_BIT(Charater,PIN_0));
    1a78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7a:	98 2f       	mov	r25, r24
    1a7c:	91 70       	andi	r25, 0x01	; 1
    1a7e:	82 e0       	ldi	r24, 0x02	; 2
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	49 2f       	mov	r20, r25
    1a84:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D1_PORT ,D1_PIN ,GET_BIT(Charater,PIN_1));
    1a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8a:	86 95       	lsr	r24
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	91 70       	andi	r25, 0x01	; 1
    1a90:	82 e0       	ldi	r24, 0x02	; 2
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	49 2f       	mov	r20, r25
    1a96:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D2_PORT ,D2_PIN ,GET_BIT(Charater,PIN_2));
    1a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9c:	86 95       	lsr	r24
    1a9e:	86 95       	lsr	r24
    1aa0:	98 2f       	mov	r25, r24
    1aa2:	91 70       	andi	r25, 0x01	; 1
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	62 e0       	ldi	r22, 0x02	; 2
    1aa8:	49 2f       	mov	r20, r25
    1aaa:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D3_PORT ,D3_PIN ,GET_BIT(Charater,PIN_3));
    1aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab0:	86 95       	lsr	r24
    1ab2:	86 95       	lsr	r24
    1ab4:	86 95       	lsr	r24
    1ab6:	98 2f       	mov	r25, r24
    1ab8:	91 70       	andi	r25, 0x01	; 1
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	63 e0       	ldi	r22, 0x03	; 3
    1abe:	49 2f       	mov	r20, r25
    1ac0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT ,D4_PIN ,GET_BIT(Charater,PIN_4));
    1ac4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac6:	82 95       	swap	r24
    1ac8:	8f 70       	andi	r24, 0x0F	; 15
    1aca:	98 2f       	mov	r25, r24
    1acc:	91 70       	andi	r25, 0x01	; 1
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	64 e0       	ldi	r22, 0x04	; 4
    1ad2:	49 2f       	mov	r20, r25
    1ad4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT ,D5_PIN ,GET_BIT(Charater,PIN_5));
    1ad8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ada:	82 95       	swap	r24
    1adc:	86 95       	lsr	r24
    1ade:	87 70       	andi	r24, 0x07	; 7
    1ae0:	98 2f       	mov	r25, r24
    1ae2:	91 70       	andi	r25, 0x01	; 1
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	65 e0       	ldi	r22, 0x05	; 5
    1ae8:	49 2f       	mov	r20, r25
    1aea:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT ,D6_PIN ,GET_BIT(Charater,PIN_6));
    1aee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af0:	82 95       	swap	r24
    1af2:	86 95       	lsr	r24
    1af4:	86 95       	lsr	r24
    1af6:	83 70       	andi	r24, 0x03	; 3
    1af8:	98 2f       	mov	r25, r24
    1afa:	91 70       	andi	r25, 0x01	; 1
    1afc:	82 e0       	ldi	r24, 0x02	; 2
    1afe:	66 e0       	ldi	r22, 0x06	; 6
    1b00:	49 2f       	mov	r20, r25
    1b02:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D7_PORT ,D7_PIN ,GET_BIT(Charater,PIN_7));
    1b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b08:	98 2f       	mov	r25, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	99 27       	eor	r25, r25
    1b0e:	99 1f       	adc	r25, r25
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	67 e0       	ldi	r22, 0x07	; 7
    1b14:	49 2f       	mov	r20, r25
    1b16:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>

	DIO_voidSetPinValue(EN_PORT ,EN_PIN,HIGH);
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	62 e0       	ldi	r22, 0x02	; 2
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a0 e0       	ldi	r26, 0x00	; 0
    1b2a:	b0 e4       	ldi	r27, 0x40	; 64
    1b2c:	8b 87       	std	Y+11, r24	; 0x0b
    1b2e:	9c 87       	std	Y+12, r25	; 0x0c
    1b30:	ad 87       	std	Y+13, r26	; 0x0d
    1b32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e8       	ldi	r19, 0x80	; 128
    1b40:	4b e3       	ldi	r20, 0x3B	; 59
    1b42:	55 e4       	ldi	r21, 0x45	; 69
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8f 83       	std	Y+7, r24	; 0x07
    1b4e:	98 87       	std	Y+8, r25	; 0x08
    1b50:	a9 87       	std	Y+9, r26	; 0x09
    1b52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <LCD_voidWriteCharacter+0x128>
		__ticks = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	3f c0       	rjmp	.+126    	; 0x1bf4 <LCD_voidWriteCharacter+0x1a6>
	else if (__tmp > 65535)
    1b76:	6f 81       	ldd	r22, Y+7	; 0x07
    1b78:	78 85       	ldd	r23, Y+8	; 0x08
    1b7a:	89 85       	ldd	r24, Y+9	; 0x09
    1b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	3f ef       	ldi	r19, 0xFF	; 255
    1b82:	4f e7       	ldi	r20, 0x7F	; 127
    1b84:	57 e4       	ldi	r21, 0x47	; 71
    1b86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8a:	18 16       	cp	r1, r24
    1b8c:	4c f5       	brge	.+82     	; 0x1be0 <LCD_voidWriteCharacter+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e2       	ldi	r20, 0x20	; 32
    1b9c:	51 e4       	ldi	r21, 0x41	; 65
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	0f c0       	rjmp	.+30     	; 0x1bd6 <LCD_voidWriteCharacter+0x188>
    1bb8:	8c e2       	ldi	r24, 0x2C	; 44
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_voidWriteCharacter+0x176>
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
    1bca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	69 f7       	brne	.-38     	; 0x1bb8 <LCD_voidWriteCharacter+0x16a>
    1bde:	14 c0       	rjmp	.+40     	; 0x1c08 <LCD_voidWriteCharacter+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be0:	6f 81       	ldd	r22, Y+7	; 0x07
    1be2:	78 85       	ldd	r23, Y+8	; 0x08
    1be4:	89 85       	ldd	r24, Y+9	; 0x09
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LCD_voidWriteCharacter+0x1b2>
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT ,EN_PIN,LOW);
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	62 e0       	ldi	r22, 0x02	; 2
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>




}
    1c12:	2f 96       	adiw	r28, 0x0f	; 15
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Command)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	2f 97       	sbiw	r28, 0x0f	; 15
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(RS_PORT,RS_PIN,LOW);
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(RW_PORT,RW_PIN,LOW);
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	61 e0       	ldi	r22, 0x01	; 1
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>

	DIO_voidSetPinValue(D0_PORT ,D0_PIN ,GET_BIT(Command,PIN_0));
    1c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c50:	98 2f       	mov	r25, r24
    1c52:	91 70       	andi	r25, 0x01	; 1
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	49 2f       	mov	r20, r25
    1c5a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D1_PORT ,D1_PIN ,GET_BIT(Command,PIN_1));
    1c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c60:	86 95       	lsr	r24
    1c62:	98 2f       	mov	r25, r24
    1c64:	91 70       	andi	r25, 0x01	; 1
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	49 2f       	mov	r20, r25
    1c6c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D2_PORT ,D2_PIN ,GET_BIT(Command,PIN_2));
    1c70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c72:	86 95       	lsr	r24
    1c74:	86 95       	lsr	r24
    1c76:	98 2f       	mov	r25, r24
    1c78:	91 70       	andi	r25, 0x01	; 1
    1c7a:	82 e0       	ldi	r24, 0x02	; 2
    1c7c:	62 e0       	ldi	r22, 0x02	; 2
    1c7e:	49 2f       	mov	r20, r25
    1c80:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D3_PORT ,D3_PIN ,GET_BIT(Command,PIN_3));
    1c84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c86:	86 95       	lsr	r24
    1c88:	86 95       	lsr	r24
    1c8a:	86 95       	lsr	r24
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	91 70       	andi	r25, 0x01	; 1
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	63 e0       	ldi	r22, 0x03	; 3
    1c94:	49 2f       	mov	r20, r25
    1c96:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT ,D4_PIN ,GET_BIT(Command,PIN_4));
    1c9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9c:	82 95       	swap	r24
    1c9e:	8f 70       	andi	r24, 0x0F	; 15
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	91 70       	andi	r25, 0x01	; 1
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	64 e0       	ldi	r22, 0x04	; 4
    1ca8:	49 2f       	mov	r20, r25
    1caa:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT ,D5_PIN ,GET_BIT(Command,PIN_5));
    1cae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb0:	82 95       	swap	r24
    1cb2:	86 95       	lsr	r24
    1cb4:	87 70       	andi	r24, 0x07	; 7
    1cb6:	98 2f       	mov	r25, r24
    1cb8:	91 70       	andi	r25, 0x01	; 1
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	65 e0       	ldi	r22, 0x05	; 5
    1cbe:	49 2f       	mov	r20, r25
    1cc0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT ,D6_PIN ,GET_BIT(Command,PIN_6));
    1cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc6:	82 95       	swap	r24
    1cc8:	86 95       	lsr	r24
    1cca:	86 95       	lsr	r24
    1ccc:	83 70       	andi	r24, 0x03	; 3
    1cce:	98 2f       	mov	r25, r24
    1cd0:	91 70       	andi	r25, 0x01	; 1
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	66 e0       	ldi	r22, 0x06	; 6
    1cd6:	49 2f       	mov	r20, r25
    1cd8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D7_PORT ,D7_PIN ,GET_BIT(Command,PIN_7));
    1cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cde:	98 2f       	mov	r25, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	99 27       	eor	r25, r25
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	67 e0       	ldi	r22, 0x07	; 7
    1cea:	49 2f       	mov	r20, r25
    1cec:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>

	DIO_voidSetPinValue(EN_PORT ,EN_PIN,HIGH);
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	62 e0       	ldi	r22, 0x02	; 2
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a0 e0       	ldi	r26, 0x00	; 0
    1d00:	b0 e4       	ldi	r27, 0x40	; 64
    1d02:	8b 87       	std	Y+11, r24	; 0x0b
    1d04:	9c 87       	std	Y+12, r25	; 0x0c
    1d06:	ad 87       	std	Y+13, r26	; 0x0d
    1d08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e8       	ldi	r19, 0x80	; 128
    1d16:	4b e3       	ldi	r20, 0x3B	; 59
    1d18:	55 e4       	ldi	r21, 0x45	; 69
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	8f 83       	std	Y+7, r24	; 0x07
    1d24:	98 87       	std	Y+8, r25	; 0x08
    1d26:	a9 87       	std	Y+9, r26	; 0x09
    1d28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e8       	ldi	r20, 0x80	; 128
    1d38:	5f e3       	ldi	r21, 0x3F	; 63
    1d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3e:	88 23       	and	r24, r24
    1d40:	2c f4       	brge	.+10     	; 0x1d4c <LCD_voidSendCommand+0x128>
		__ticks = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9e 83       	std	Y+6, r25	; 0x06
    1d48:	8d 83       	std	Y+5, r24	; 0x05
    1d4a:	3f c0       	rjmp	.+126    	; 0x1dca <LCD_voidSendCommand+0x1a6>
	else if (__tmp > 65535)
    1d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4e:	78 85       	ldd	r23, Y+8	; 0x08
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	57 e4       	ldi	r21, 0x47	; 71
    1d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	4c f5       	brge	.+82     	; 0x1db6 <LCD_voidSendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e2       	ldi	r20, 0x20	; 32
    1d72:	51 e4       	ldi	r21, 0x41	; 65
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
    1d8c:	0f c0       	rjmp	.+30     	; 0x1dac <LCD_voidSendCommand+0x188>
    1d8e:	8c e2       	ldi	r24, 0x2C	; 44
    1d90:	91 e0       	ldi	r25, 0x01	; 1
    1d92:	9c 83       	std	Y+4, r25	; 0x04
    1d94:	8b 83       	std	Y+3, r24	; 0x03
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_voidSendCommand+0x176>
    1d9e:	9c 83       	std	Y+4, r25	; 0x04
    1da0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da2:	8d 81       	ldd	r24, Y+5	; 0x05
    1da4:	9e 81       	ldd	r25, Y+6	; 0x06
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	9e 81       	ldd	r25, Y+6	; 0x06
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	69 f7       	brne	.-38     	; 0x1d8e <LCD_voidSendCommand+0x16a>
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <LCD_voidSendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db6:	6f 81       	ldd	r22, Y+7	; 0x07
    1db8:	78 85       	ldd	r23, Y+8	; 0x08
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9e 83       	std	Y+6, r25	; 0x06
    1dc8:	8d 83       	std	Y+5, r24	; 0x05
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_voidSendCommand+0x1b2>
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT ,EN_PIN,LOW);
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	62 e0       	ldi	r22, 0x02	; 2
    1de2:	40 e0       	ldi	r20, 0x00	; 0
    1de4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>

}
    1de8:	2f 96       	adiw	r28, 0x0f	; 15
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <LCD_voidWriteString>:

void LCD_voidWriteString(u8 *String)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <LCD_voidWriteString+0x6>
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	9a 83       	std	Y+2, r25	; 0x02
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	0a c0       	rjmp	.+20     	; 0x1e1e <LCD_voidWriteString+0x24>
    while(*String != '\0')
    {
    	LCD_voidWriteCharacter( *String);
    1e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0e:	80 81       	ld	r24, Z
    1e10:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    	String ++;
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	9a 81       	ldd	r25, Y+2	; 0x02
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	9a 83       	std	Y+2, r25	; 0x02
    1e1c:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_voidWriteString(u8 *String)
{
    while(*String != '\0')
    1e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e20:	fa 81       	ldd	r31, Y+2	; 0x02
    1e22:	80 81       	ld	r24, Z
    1e24:	88 23       	and	r24, r24
    1e26:	89 f7       	brne	.-30     	; 0x1e0a <LCD_voidWriteString+0x10>
    {
    	LCD_voidWriteCharacter( *String);
    	String ++;
    }
}
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <LCD_voidSetCursor>:


}*/

void LCD_voidSetCursor (u8 R, u8 C)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <LCD_voidSetCursor+0x6>
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	6a 83       	std	Y+2, r22	; 0x02
	if (R == 0 && C == 0)
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	88 23       	and	r24, r24
    1e44:	39 f4       	brne	.+14     	; 0x1e54 <LCD_voidSetCursor+0x22>
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	88 23       	and	r24, r24
    1e4a:	21 f4       	brne	.+8      	; 0x1e54 <LCD_voidSetCursor+0x22>
	{
		LCD_voidSendCommand(Row0_Coulmn0);
    1e4c:	80 e8       	ldi	r24, 0x80	; 128
    1e4e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1e52:	39 c1       	rjmp	.+626    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 1)
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	88 23       	and	r24, r24
    1e58:	39 f4       	brne	.+14     	; 0x1e68 <LCD_voidSetCursor+0x36>
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	21 f4       	brne	.+8      	; 0x1e68 <LCD_voidSetCursor+0x36>
	{
		LCD_voidSendCommand(Row0_Coulmn1);
    1e60:	81 e8       	ldi	r24, 0x81	; 129
    1e62:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1e66:	2f c1       	rjmp	.+606    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 2)
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	88 23       	and	r24, r24
    1e6c:	39 f4       	brne	.+14     	; 0x1e7c <LCD_voidSetCursor+0x4a>
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	82 30       	cpi	r24, 0x02	; 2
    1e72:	21 f4       	brne	.+8      	; 0x1e7c <LCD_voidSetCursor+0x4a>
	{
		LCD_voidSendCommand(Row0_Coulmn2);
    1e74:	82 e8       	ldi	r24, 0x82	; 130
    1e76:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1e7a:	25 c1       	rjmp	.+586    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 3)
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	88 23       	and	r24, r24
    1e80:	39 f4       	brne	.+14     	; 0x1e90 <LCD_voidSetCursor+0x5e>
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	83 30       	cpi	r24, 0x03	; 3
    1e86:	21 f4       	brne	.+8      	; 0x1e90 <LCD_voidSetCursor+0x5e>
	{
		LCD_voidSendCommand(Row0_Coulmn3);
    1e88:	83 e8       	ldi	r24, 0x83	; 131
    1e8a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1e8e:	1b c1       	rjmp	.+566    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 4)
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	88 23       	and	r24, r24
    1e94:	39 f4       	brne	.+14     	; 0x1ea4 <LCD_voidSetCursor+0x72>
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	84 30       	cpi	r24, 0x04	; 4
    1e9a:	21 f4       	brne	.+8      	; 0x1ea4 <LCD_voidSetCursor+0x72>
	{
		LCD_voidSendCommand(Row0_Coulmn4);
    1e9c:	84 e8       	ldi	r24, 0x84	; 132
    1e9e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1ea2:	11 c1       	rjmp	.+546    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 5)
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	88 23       	and	r24, r24
    1ea8:	39 f4       	brne	.+14     	; 0x1eb8 <LCD_voidSetCursor+0x86>
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	85 30       	cpi	r24, 0x05	; 5
    1eae:	21 f4       	brne	.+8      	; 0x1eb8 <LCD_voidSetCursor+0x86>
	{
		LCD_voidSendCommand(Row0_Coulmn5);
    1eb0:	85 e8       	ldi	r24, 0x85	; 133
    1eb2:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1eb6:	07 c1       	rjmp	.+526    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 6)
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	88 23       	and	r24, r24
    1ebc:	39 f4       	brne	.+14     	; 0x1ecc <LCD_voidSetCursor+0x9a>
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	86 30       	cpi	r24, 0x06	; 6
    1ec2:	21 f4       	brne	.+8      	; 0x1ecc <LCD_voidSetCursor+0x9a>
	{
		LCD_voidSendCommand(Row0_Coulmn6);
    1ec4:	86 e8       	ldi	r24, 0x86	; 134
    1ec6:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1eca:	fd c0       	rjmp	.+506    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 7)
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	88 23       	and	r24, r24
    1ed0:	39 f4       	brne	.+14     	; 0x1ee0 <LCD_voidSetCursor+0xae>
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	87 30       	cpi	r24, 0x07	; 7
    1ed6:	21 f4       	brne	.+8      	; 0x1ee0 <LCD_voidSetCursor+0xae>
	{
		LCD_voidSendCommand(Row0_Coulmn7);
    1ed8:	87 e8       	ldi	r24, 0x87	; 135
    1eda:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1ede:	f3 c0       	rjmp	.+486    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 8)
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	88 23       	and	r24, r24
    1ee4:	39 f4       	brne	.+14     	; 0x1ef4 <LCD_voidSetCursor+0xc2>
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	88 30       	cpi	r24, 0x08	; 8
    1eea:	21 f4       	brne	.+8      	; 0x1ef4 <LCD_voidSetCursor+0xc2>
	{
		LCD_voidSendCommand(Row0_Coulmn8);
    1eec:	88 e8       	ldi	r24, 0x88	; 136
    1eee:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1ef2:	e9 c0       	rjmp	.+466    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 9)
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	88 23       	and	r24, r24
    1ef8:	39 f4       	brne	.+14     	; 0x1f08 <LCD_voidSetCursor+0xd6>
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	89 30       	cpi	r24, 0x09	; 9
    1efe:	21 f4       	brne	.+8      	; 0x1f08 <LCD_voidSetCursor+0xd6>
	{
		LCD_voidSendCommand(Row0_Coulmn9);
    1f00:	89 e8       	ldi	r24, 0x89	; 137
    1f02:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1f06:	df c0       	rjmp	.+446    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 10)
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	88 23       	and	r24, r24
    1f0c:	39 f4       	brne	.+14     	; 0x1f1c <LCD_voidSetCursor+0xea>
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	8a 30       	cpi	r24, 0x0A	; 10
    1f12:	21 f4       	brne	.+8      	; 0x1f1c <LCD_voidSetCursor+0xea>
	{
		LCD_voidSendCommand(Row0_Coulmn10);
    1f14:	8a e8       	ldi	r24, 0x8A	; 138
    1f16:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1f1a:	d5 c0       	rjmp	.+426    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 11)
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	88 23       	and	r24, r24
    1f20:	39 f4       	brne	.+14     	; 0x1f30 <LCD_voidSetCursor+0xfe>
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	8b 30       	cpi	r24, 0x0B	; 11
    1f26:	21 f4       	brne	.+8      	; 0x1f30 <LCD_voidSetCursor+0xfe>
	{
		LCD_voidSendCommand(Row0_Coulmn11);
    1f28:	8b e8       	ldi	r24, 0x8B	; 139
    1f2a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1f2e:	cb c0       	rjmp	.+406    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 12)
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	88 23       	and	r24, r24
    1f34:	39 f4       	brne	.+14     	; 0x1f44 <LCD_voidSetCursor+0x112>
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	8c 30       	cpi	r24, 0x0C	; 12
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <LCD_voidSetCursor+0x112>
	{
		LCD_voidSendCommand(Row0_Coulmn12);
    1f3c:	8c e8       	ldi	r24, 0x8C	; 140
    1f3e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1f42:	c1 c0       	rjmp	.+386    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 13)
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	88 23       	and	r24, r24
    1f48:	39 f4       	brne	.+14     	; 0x1f58 <LCD_voidSetCursor+0x126>
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	8d 30       	cpi	r24, 0x0D	; 13
    1f4e:	21 f4       	brne	.+8      	; 0x1f58 <LCD_voidSetCursor+0x126>
	{
		LCD_voidSendCommand(Row0_Coulmn13);
    1f50:	8d e8       	ldi	r24, 0x8D	; 141
    1f52:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1f56:	b7 c0       	rjmp	.+366    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 14)
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	88 23       	and	r24, r24
    1f5c:	39 f4       	brne	.+14     	; 0x1f6c <LCD_voidSetCursor+0x13a>
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	8e 30       	cpi	r24, 0x0E	; 14
    1f62:	21 f4       	brne	.+8      	; 0x1f6c <LCD_voidSetCursor+0x13a>
	{
		LCD_voidSendCommand(Row0_Coulmn14);
    1f64:	8e e8       	ldi	r24, 0x8E	; 142
    1f66:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1f6a:	ad c0       	rjmp	.+346    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 15)
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	88 23       	and	r24, r24
    1f70:	39 f4       	brne	.+14     	; 0x1f80 <LCD_voidSetCursor+0x14e>
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	8f 30       	cpi	r24, 0x0F	; 15
    1f76:	21 f4       	brne	.+8      	; 0x1f80 <LCD_voidSetCursor+0x14e>
	{
		LCD_voidSendCommand(Row0_Coulmn15);
    1f78:	8f e8       	ldi	r24, 0x8F	; 143
    1f7a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1f7e:	a3 c0       	rjmp	.+326    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 0)
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	39 f4       	brne	.+14     	; 0x1f94 <LCD_voidSetCursor+0x162>
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	88 23       	and	r24, r24
    1f8a:	21 f4       	brne	.+8      	; 0x1f94 <LCD_voidSetCursor+0x162>
	{
		LCD_voidSendCommand(Row1_Coulmn0);
    1f8c:	80 ec       	ldi	r24, 0xC0	; 192
    1f8e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1f92:	99 c0       	rjmp	.+306    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 1)
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	39 f4       	brne	.+14     	; 0x1fa8 <LCD_voidSetCursor+0x176>
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	81 30       	cpi	r24, 0x01	; 1
    1f9e:	21 f4       	brne	.+8      	; 0x1fa8 <LCD_voidSetCursor+0x176>
	{
		LCD_voidSendCommand(Row1_Coulmn1);
    1fa0:	81 ec       	ldi	r24, 0xC1	; 193
    1fa2:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1fa6:	8f c0       	rjmp	.+286    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 2)
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	39 f4       	brne	.+14     	; 0x1fbc <LCD_voidSetCursor+0x18a>
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	82 30       	cpi	r24, 0x02	; 2
    1fb2:	21 f4       	brne	.+8      	; 0x1fbc <LCD_voidSetCursor+0x18a>
	{
		LCD_voidSendCommand(Row1_Coulmn2);
    1fb4:	82 ec       	ldi	r24, 0xC2	; 194
    1fb6:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1fba:	85 c0       	rjmp	.+266    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 3)
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	39 f4       	brne	.+14     	; 0x1fd0 <LCD_voidSetCursor+0x19e>
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	83 30       	cpi	r24, 0x03	; 3
    1fc6:	21 f4       	brne	.+8      	; 0x1fd0 <LCD_voidSetCursor+0x19e>
	{
		LCD_voidSendCommand(Row1_Coulmn3);
    1fc8:	83 ec       	ldi	r24, 0xC3	; 195
    1fca:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1fce:	7b c0       	rjmp	.+246    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 4)
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	39 f4       	brne	.+14     	; 0x1fe4 <LCD_voidSetCursor+0x1b2>
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	84 30       	cpi	r24, 0x04	; 4
    1fda:	21 f4       	brne	.+8      	; 0x1fe4 <LCD_voidSetCursor+0x1b2>
	{
		LCD_voidSendCommand(Row1_Coulmn4);
    1fdc:	84 ec       	ldi	r24, 0xC4	; 196
    1fde:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1fe2:	71 c0       	rjmp	.+226    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C ==5)
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	39 f4       	brne	.+14     	; 0x1ff8 <LCD_voidSetCursor+0x1c6>
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	85 30       	cpi	r24, 0x05	; 5
    1fee:	21 f4       	brne	.+8      	; 0x1ff8 <LCD_voidSetCursor+0x1c6>
	{
		LCD_voidSendCommand(Row1_Coulmn5);
    1ff0:	85 ec       	ldi	r24, 0xC5	; 197
    1ff2:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    1ff6:	67 c0       	rjmp	.+206    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 6)
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	39 f4       	brne	.+14     	; 0x200c <LCD_voidSetCursor+0x1da>
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	86 30       	cpi	r24, 0x06	; 6
    2002:	21 f4       	brne	.+8      	; 0x200c <LCD_voidSetCursor+0x1da>
	{
		LCD_voidSendCommand(Row1_Coulmn6);
    2004:	86 ec       	ldi	r24, 0xC6	; 198
    2006:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    200a:	5d c0       	rjmp	.+186    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 7)
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	39 f4       	brne	.+14     	; 0x2020 <LCD_voidSetCursor+0x1ee>
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	87 30       	cpi	r24, 0x07	; 7
    2016:	21 f4       	brne	.+8      	; 0x2020 <LCD_voidSetCursor+0x1ee>
	{
		LCD_voidSendCommand(Row1_Coulmn7);
    2018:	87 ec       	ldi	r24, 0xC7	; 199
    201a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    201e:	53 c0       	rjmp	.+166    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 8)
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	39 f4       	brne	.+14     	; 0x2034 <LCD_voidSetCursor+0x202>
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	88 30       	cpi	r24, 0x08	; 8
    202a:	21 f4       	brne	.+8      	; 0x2034 <LCD_voidSetCursor+0x202>
	{
		LCD_voidSendCommand(Row1_Coulmn8);
    202c:	88 ec       	ldi	r24, 0xC8	; 200
    202e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    2032:	49 c0       	rjmp	.+146    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 2 && C == 9)
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	82 30       	cpi	r24, 0x02	; 2
    2038:	39 f4       	brne	.+14     	; 0x2048 <LCD_voidSetCursor+0x216>
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	89 30       	cpi	r24, 0x09	; 9
    203e:	21 f4       	brne	.+8      	; 0x2048 <LCD_voidSetCursor+0x216>
	{
		LCD_voidSendCommand(Row1_Coulmn9);
    2040:	89 ec       	ldi	r24, 0xC9	; 201
    2042:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    2046:	3f c0       	rjmp	.+126    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 10)
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	39 f4       	brne	.+14     	; 0x205c <LCD_voidSetCursor+0x22a>
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	8a 30       	cpi	r24, 0x0A	; 10
    2052:	21 f4       	brne	.+8      	; 0x205c <LCD_voidSetCursor+0x22a>
	{
		LCD_voidSendCommand(Row1_Coulmn10);
    2054:	8a ec       	ldi	r24, 0xCA	; 202
    2056:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    205a:	35 c0       	rjmp	.+106    	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 11)
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	81 30       	cpi	r24, 0x01	; 1
    2060:	39 f4       	brne	.+14     	; 0x2070 <LCD_voidSetCursor+0x23e>
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	8b 30       	cpi	r24, 0x0B	; 11
    2066:	21 f4       	brne	.+8      	; 0x2070 <LCD_voidSetCursor+0x23e>
	{
		LCD_voidSendCommand(Row1_Coulmn11);
    2068:	8b ec       	ldi	r24, 0xCB	; 203
    206a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    206e:	2b c0       	rjmp	.+86     	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 12)
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	39 f4       	brne	.+14     	; 0x2084 <LCD_voidSetCursor+0x252>
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	8c 30       	cpi	r24, 0x0C	; 12
    207a:	21 f4       	brne	.+8      	; 0x2084 <LCD_voidSetCursor+0x252>
	{
		LCD_voidSendCommand(Row1_Coulmn12);
    207c:	8c ec       	ldi	r24, 0xCC	; 204
    207e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    2082:	21 c0       	rjmp	.+66     	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 13)
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	39 f4       	brne	.+14     	; 0x2098 <LCD_voidSetCursor+0x266>
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	8d 30       	cpi	r24, 0x0D	; 13
    208e:	21 f4       	brne	.+8      	; 0x2098 <LCD_voidSetCursor+0x266>
	{
		LCD_voidSendCommand(Row1_Coulmn13);
    2090:	8d ec       	ldi	r24, 0xCD	; 205
    2092:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    2096:	17 c0       	rjmp	.+46     	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 14)
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	39 f4       	brne	.+14     	; 0x20ac <LCD_voidSetCursor+0x27a>
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	8e 30       	cpi	r24, 0x0E	; 14
    20a2:	21 f4       	brne	.+8      	; 0x20ac <LCD_voidSetCursor+0x27a>
	{
		LCD_voidSendCommand(Row1_Coulmn14);
    20a4:	8e ec       	ldi	r24, 0xCE	; 206
    20a6:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    20aa:	0d c0       	rjmp	.+26     	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 15)
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	39 f4       	brne	.+14     	; 0x20c0 <LCD_voidSetCursor+0x28e>
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	8f 30       	cpi	r24, 0x0F	; 15
    20b6:	21 f4       	brne	.+8      	; 0x20c0 <LCD_voidSetCursor+0x28e>
	{
		LCD_voidSendCommand(Row1_Coulmn15);
    20b8:	8f ec       	ldi	r24, 0xCF	; 207
    20ba:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
    20be:	03 c0       	rjmp	.+6      	; 0x20c6 <LCD_voidSetCursor+0x294>
	}
	else
	{
		LCD_voidSendCommand(Row0_Coulmn0);
    20c0:	80 e8       	ldi	r24, 0x80	; 128
    20c2:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>
	}



}
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <LCD_voidWrite>:
		LCD_voidSetCursor(0,0);
	}*/


void LCD_voidWrite(u8 Num_1)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <LCD_voidWrite+0x6>
    20d6:	0f 92       	push	r0
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	89 83       	std	Y+1, r24	; 0x01
	switch (Num_1)
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	3b 83       	std	Y+3, r19	; 0x03
    20e6:	2a 83       	std	Y+2, r18	; 0x02
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	87 30       	cpi	r24, 0x07	; 7
    20ee:	91 05       	cpc	r25, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <LCD_voidWrite+0x24>
    20f2:	7a c0       	rjmp	.+244    	; 0x21e8 <LCD_voidWrite+0x118>
    20f4:	2a 81       	ldd	r18, Y+2	; 0x02
    20f6:	3b 81       	ldd	r19, Y+3	; 0x03
    20f8:	28 30       	cpi	r18, 0x08	; 8
    20fa:	31 05       	cpc	r19, r1
    20fc:	54 f5       	brge	.+84     	; 0x2152 <LCD_voidWrite+0x82>
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	9b 81       	ldd	r25, Y+3	; 0x03
    2102:	83 30       	cpi	r24, 0x03	; 3
    2104:	91 05       	cpc	r25, r1
    2106:	09 f4       	brne	.+2      	; 0x210a <LCD_voidWrite+0x3a>
    2108:	5f c0       	rjmp	.+190    	; 0x21c8 <LCD_voidWrite+0xf8>
    210a:	2a 81       	ldd	r18, Y+2	; 0x02
    210c:	3b 81       	ldd	r19, Y+3	; 0x03
    210e:	24 30       	cpi	r18, 0x04	; 4
    2110:	31 05       	cpc	r19, r1
    2112:	94 f4       	brge	.+36     	; 0x2138 <LCD_voidWrite+0x68>
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	9b 81       	ldd	r25, Y+3	; 0x03
    2118:	81 30       	cpi	r24, 0x01	; 1
    211a:	91 05       	cpc	r25, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <LCD_voidWrite+0x50>
    211e:	4c c0       	rjmp	.+152    	; 0x21b8 <LCD_voidWrite+0xe8>
    2120:	2a 81       	ldd	r18, Y+2	; 0x02
    2122:	3b 81       	ldd	r19, Y+3	; 0x03
    2124:	22 30       	cpi	r18, 0x02	; 2
    2126:	31 05       	cpc	r19, r1
    2128:	0c f0       	brlt	.+2      	; 0x212c <LCD_voidWrite+0x5c>
    212a:	4a c0       	rjmp	.+148    	; 0x21c0 <LCD_voidWrite+0xf0>
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	9b 81       	ldd	r25, Y+3	; 0x03
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	09 f4       	brne	.+2      	; 0x2136 <LCD_voidWrite+0x66>
    2134:	3d c0       	rjmp	.+122    	; 0x21b0 <LCD_voidWrite+0xe0>
    2136:	77 c0       	rjmp	.+238    	; 0x2226 <LCD_voidWrite+0x156>
    2138:	2a 81       	ldd	r18, Y+2	; 0x02
    213a:	3b 81       	ldd	r19, Y+3	; 0x03
    213c:	25 30       	cpi	r18, 0x05	; 5
    213e:	31 05       	cpc	r19, r1
    2140:	09 f4       	brne	.+2      	; 0x2144 <LCD_voidWrite+0x74>
    2142:	4a c0       	rjmp	.+148    	; 0x21d8 <LCD_voidWrite+0x108>
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	86 30       	cpi	r24, 0x06	; 6
    214a:	91 05       	cpc	r25, r1
    214c:	0c f0       	brlt	.+2      	; 0x2150 <LCD_voidWrite+0x80>
    214e:	48 c0       	rjmp	.+144    	; 0x21e0 <LCD_voidWrite+0x110>
    2150:	3f c0       	rjmp	.+126    	; 0x21d0 <LCD_voidWrite+0x100>
    2152:	2a 81       	ldd	r18, Y+2	; 0x02
    2154:	3b 81       	ldd	r19, Y+3	; 0x03
    2156:	2b 32       	cpi	r18, 0x2B	; 43
    2158:	31 05       	cpc	r19, r1
    215a:	09 f4       	brne	.+2      	; 0x215e <LCD_voidWrite+0x8e>
    215c:	51 c0       	rjmp	.+162    	; 0x2200 <LCD_voidWrite+0x130>
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	8c 32       	cpi	r24, 0x2C	; 44
    2164:	91 05       	cpc	r25, r1
    2166:	94 f4       	brge	.+36     	; 0x218c <LCD_voidWrite+0xbc>
    2168:	2a 81       	ldd	r18, Y+2	; 0x02
    216a:	3b 81       	ldd	r19, Y+3	; 0x03
    216c:	29 30       	cpi	r18, 0x09	; 9
    216e:	31 05       	cpc	r19, r1
    2170:	09 f4       	brne	.+2      	; 0x2174 <LCD_voidWrite+0xa4>
    2172:	42 c0       	rjmp	.+132    	; 0x21f8 <LCD_voidWrite+0x128>
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	9b 81       	ldd	r25, Y+3	; 0x03
    2178:	89 30       	cpi	r24, 0x09	; 9
    217a:	91 05       	cpc	r25, r1
    217c:	cc f1       	brlt	.+114    	; 0x21f0 <LCD_voidWrite+0x120>
    217e:	2a 81       	ldd	r18, Y+2	; 0x02
    2180:	3b 81       	ldd	r19, Y+3	; 0x03
    2182:	2a 32       	cpi	r18, 0x2A	; 42
    2184:	31 05       	cpc	r19, r1
    2186:	09 f4       	brne	.+2      	; 0x218a <LCD_voidWrite+0xba>
    2188:	43 c0       	rjmp	.+134    	; 0x2210 <LCD_voidWrite+0x140>
    218a:	4d c0       	rjmp	.+154    	; 0x2226 <LCD_voidWrite+0x156>
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	9b 81       	ldd	r25, Y+3	; 0x03
    2190:	8f 32       	cpi	r24, 0x2F	; 47
    2192:	91 05       	cpc	r25, r1
    2194:	09 f4       	brne	.+2      	; 0x2198 <LCD_voidWrite+0xc8>
    2196:	40 c0       	rjmp	.+128    	; 0x2218 <LCD_voidWrite+0x148>
    2198:	2a 81       	ldd	r18, Y+2	; 0x02
    219a:	3b 81       	ldd	r19, Y+3	; 0x03
    219c:	2d 33       	cpi	r18, 0x3D	; 61
    219e:	31 05       	cpc	r19, r1
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <LCD_voidWrite+0xd4>
    21a2:	3e c0       	rjmp	.+124    	; 0x2220 <LCD_voidWrite+0x150>
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	9b 81       	ldd	r25, Y+3	; 0x03
    21a8:	8d 32       	cpi	r24, 0x2D	; 45
    21aa:	91 05       	cpc	r25, r1
    21ac:	69 f1       	breq	.+90     	; 0x2208 <LCD_voidWrite+0x138>
    21ae:	3b c0       	rjmp	.+118    	; 0x2226 <LCD_voidWrite+0x156>
	{
	case 0 :
		LCD_voidWriteCharacter('0');
    21b0:	80 e3       	ldi	r24, 0x30	; 48
    21b2:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    21b6:	37 c0       	rjmp	.+110    	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case 1 :
		LCD_voidWriteCharacter('1');
    21b8:	81 e3       	ldi	r24, 0x31	; 49
    21ba:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    21be:	33 c0       	rjmp	.+102    	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case 2 :
		LCD_voidWriteCharacter('2');
    21c0:	82 e3       	ldi	r24, 0x32	; 50
    21c2:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    21c6:	2f c0       	rjmp	.+94     	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case 3 :
		LCD_voidWriteCharacter('3');
    21c8:	83 e3       	ldi	r24, 0x33	; 51
    21ca:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    21ce:	2b c0       	rjmp	.+86     	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case 4 :
		LCD_voidWriteCharacter('4');
    21d0:	84 e3       	ldi	r24, 0x34	; 52
    21d2:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    21d6:	27 c0       	rjmp	.+78     	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case 5 :
		LCD_voidWriteCharacter('5');
    21d8:	85 e3       	ldi	r24, 0x35	; 53
    21da:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    21de:	23 c0       	rjmp	.+70     	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case 6 :
		LCD_voidWriteCharacter('6');
    21e0:	86 e3       	ldi	r24, 0x36	; 54
    21e2:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    21e6:	1f c0       	rjmp	.+62     	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case 7 :
		LCD_voidWriteCharacter('7');
    21e8:	87 e3       	ldi	r24, 0x37	; 55
    21ea:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    21ee:	1b c0       	rjmp	.+54     	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case 8 :
		LCD_voidWriteCharacter('8');
    21f0:	88 e3       	ldi	r24, 0x38	; 56
    21f2:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    21f6:	17 c0       	rjmp	.+46     	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case 9 :
		LCD_voidWriteCharacter('9');
    21f8:	89 e3       	ldi	r24, 0x39	; 57
    21fa:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    21fe:	13 c0       	rjmp	.+38     	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case '+' :
		LCD_voidWriteCharacter('+');
    2200:	8b e2       	ldi	r24, 0x2B	; 43
    2202:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case '-' :
		LCD_voidWriteCharacter('-');
    2208:	8d e2       	ldi	r24, 0x2D	; 45
    220a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    220e:	0b c0       	rjmp	.+22     	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case '*' :
		LCD_voidWriteCharacter('*');
    2210:	8a e2       	ldi	r24, 0x2A	; 42
    2212:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    2216:	07 c0       	rjmp	.+14     	; 0x2226 <LCD_voidWrite+0x156>

		break;
	case '/' :
		LCD_voidWriteCharacter('/');
    2218:	8f e2       	ldi	r24, 0x2F	; 47
    221a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
    221e:	03 c0       	rjmp	.+6      	; 0x2226 <LCD_voidWrite+0x156>
		break;
	case '=' :
		LCD_voidWriteCharacter('=');
    2220:	8d e3       	ldi	r24, 0x3D	; 61
    2222:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_voidWriteCharacter>
		break;

	}
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <LCD_voidwriteNumber>:

void LCD_voidwriteNumber(u32 Num,u8 R,u8 C)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	e6 97       	sbiw	r28, 0x36	; 54
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	69 ab       	std	Y+49, r22	; 0x31
    2248:	7a ab       	std	Y+50, r23	; 0x32
    224a:	8b ab       	std	Y+51, r24	; 0x33
    224c:	9c ab       	std	Y+52, r25	; 0x34
    224e:	4d ab       	std	Y+53, r20	; 0x35
    2250:	2e ab       	std	Y+54, r18	; 0x36
	u32 Num_1;
	u32 Num_2,Intermediate_2,Num_3,Intermediate_3,Intermediate_4,Num_4,Num_5,Intermediate_5,Num_6,Intermediate_6,Num_7;

	if(Num<10)
    2252:	89 a9       	ldd	r24, Y+49	; 0x31
    2254:	9a a9       	ldd	r25, Y+50	; 0x32
    2256:	ab a9       	ldd	r26, Y+51	; 0x33
    2258:	bc a9       	ldd	r27, Y+52	; 0x34
    225a:	8a 30       	cpi	r24, 0x0A	; 10
    225c:	91 05       	cpc	r25, r1
    225e:	a1 05       	cpc	r26, r1
    2260:	b1 05       	cpc	r27, r1
    2262:	40 f4       	brcc	.+16     	; 0x2274 <LCD_voidwriteNumber+0x42>
	{
		LCD_voidSetCursor(R,C);
    2264:	8d a9       	ldd	r24, Y+53	; 0x35
    2266:	6e a9       	ldd	r22, Y+54	; 0x36
    2268:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWrite(Num);
    226c:	89 a9       	ldd	r24, Y+49	; 0x31
    226e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidWrite>
    2272:	6f c1       	rjmp	.+734    	; 0x2552 <LCD_voidwriteNumber+0x320>
	}
	else if(Num >=10 && Num <100)
    2274:	89 a9       	ldd	r24, Y+49	; 0x31
    2276:	9a a9       	ldd	r25, Y+50	; 0x32
    2278:	ab a9       	ldd	r26, Y+51	; 0x33
    227a:	bc a9       	ldd	r27, Y+52	; 0x34
    227c:	8a 30       	cpi	r24, 0x0A	; 10
    227e:	91 05       	cpc	r25, r1
    2280:	a1 05       	cpc	r26, r1
    2282:	b1 05       	cpc	r27, r1
    2284:	08 f4       	brcc	.+2      	; 0x2288 <LCD_voidwriteNumber+0x56>
    2286:	3f c0       	rjmp	.+126    	; 0x2306 <LCD_voidwriteNumber+0xd4>
    2288:	89 a9       	ldd	r24, Y+49	; 0x31
    228a:	9a a9       	ldd	r25, Y+50	; 0x32
    228c:	ab a9       	ldd	r26, Y+51	; 0x33
    228e:	bc a9       	ldd	r27, Y+52	; 0x34
    2290:	84 36       	cpi	r24, 0x64	; 100
    2292:	91 05       	cpc	r25, r1
    2294:	a1 05       	cpc	r26, r1
    2296:	b1 05       	cpc	r27, r1
    2298:	b0 f5       	brcc	.+108    	; 0x2306 <LCD_voidwriteNumber+0xd4>
	{
		Num_1 = Num / 10;
    229a:	89 a9       	ldd	r24, Y+49	; 0x31
    229c:	9a a9       	ldd	r25, Y+50	; 0x32
    229e:	ab a9       	ldd	r26, Y+51	; 0x33
    22a0:	bc a9       	ldd	r27, Y+52	; 0x34
    22a2:	2a e0       	ldi	r18, 0x0A	; 10
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	50 e0       	ldi	r21, 0x00	; 0
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    22b2:	da 01       	movw	r26, r20
    22b4:	c9 01       	movw	r24, r18
    22b6:	8d a7       	std	Y+45, r24	; 0x2d
    22b8:	9e a7       	std	Y+46, r25	; 0x2e
    22ba:	af a7       	std	Y+47, r26	; 0x2f
    22bc:	b8 ab       	std	Y+48, r27	; 0x30
		LCD_voidSetCursor(R,C);
    22be:	8d a9       	ldd	r24, Y+53	; 0x35
    22c0:	6e a9       	ldd	r22, Y+54	; 0x36
    22c2:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWrite(Num_1);
    22c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    22c8:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidWrite>

		Num_2 = Num % 10;
    22cc:	89 a9       	ldd	r24, Y+49	; 0x31
    22ce:	9a a9       	ldd	r25, Y+50	; 0x32
    22d0:	ab a9       	ldd	r26, Y+51	; 0x33
    22d2:	bc a9       	ldd	r27, Y+52	; 0x34
    22d4:	2a e0       	ldi	r18, 0x0A	; 10
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	89 a7       	std	Y+41, r24	; 0x29
    22ea:	9a a7       	std	Y+42, r25	; 0x2a
    22ec:	ab a7       	std	Y+43, r26	; 0x2b
    22ee:	bc a7       	std	Y+44, r27	; 0x2c
		LCD_voidSetCursor(R,C+1);
    22f0:	8e a9       	ldd	r24, Y+54	; 0x36
    22f2:	98 2f       	mov	r25, r24
    22f4:	9f 5f       	subi	r25, 0xFF	; 255
    22f6:	8d a9       	ldd	r24, Y+53	; 0x35
    22f8:	69 2f       	mov	r22, r25
    22fa:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWrite(Num_2);
    22fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2300:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidWrite>
    2304:	26 c1       	rjmp	.+588    	; 0x2552 <LCD_voidwriteNumber+0x320>
	}
	else if(Num >=100 && Num <1000)
    2306:	89 a9       	ldd	r24, Y+49	; 0x31
    2308:	9a a9       	ldd	r25, Y+50	; 0x32
    230a:	ab a9       	ldd	r26, Y+51	; 0x33
    230c:	bc a9       	ldd	r27, Y+52	; 0x34
    230e:	84 36       	cpi	r24, 0x64	; 100
    2310:	91 05       	cpc	r25, r1
    2312:	a1 05       	cpc	r26, r1
    2314:	b1 05       	cpc	r27, r1
    2316:	08 f4       	brcc	.+2      	; 0x231a <LCD_voidwriteNumber+0xe8>
    2318:	71 c0       	rjmp	.+226    	; 0x23fc <LCD_voidwriteNumber+0x1ca>
    231a:	89 a9       	ldd	r24, Y+49	; 0x31
    231c:	9a a9       	ldd	r25, Y+50	; 0x32
    231e:	ab a9       	ldd	r26, Y+51	; 0x33
    2320:	bc a9       	ldd	r27, Y+52	; 0x34
    2322:	88 3e       	cpi	r24, 0xE8	; 232
    2324:	23 e0       	ldi	r18, 0x03	; 3
    2326:	92 07       	cpc	r25, r18
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	a2 07       	cpc	r26, r18
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	b2 07       	cpc	r27, r18
    2330:	08 f0       	brcs	.+2      	; 0x2334 <LCD_voidwriteNumber+0x102>
    2332:	64 c0       	rjmp	.+200    	; 0x23fc <LCD_voidwriteNumber+0x1ca>
	{ //123
		Num_1 = Num/100; //1
    2334:	89 a9       	ldd	r24, Y+49	; 0x31
    2336:	9a a9       	ldd	r25, Y+50	; 0x32
    2338:	ab a9       	ldd	r26, Y+51	; 0x33
    233a:	bc a9       	ldd	r27, Y+52	; 0x34
    233c:	24 e6       	ldi	r18, 0x64	; 100
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    234c:	da 01       	movw	r26, r20
    234e:	c9 01       	movw	r24, r18
    2350:	8d a7       	std	Y+45, r24	; 0x2d
    2352:	9e a7       	std	Y+46, r25	; 0x2e
    2354:	af a7       	std	Y+47, r26	; 0x2f
    2356:	b8 ab       	std	Y+48, r27	; 0x30
		LCD_voidSetCursor(R,C);
    2358:	8d a9       	ldd	r24, Y+53	; 0x35
    235a:	6e a9       	ldd	r22, Y+54	; 0x36
    235c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWrite(Num_1);
    2360:	8d a5       	ldd	r24, Y+45	; 0x2d
    2362:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidWrite>

		Num_2 = Num % 100; //23
    2366:	89 a9       	ldd	r24, Y+49	; 0x31
    2368:	9a a9       	ldd	r25, Y+50	; 0x32
    236a:	ab a9       	ldd	r26, Y+51	; 0x33
    236c:	bc a9       	ldd	r27, Y+52	; 0x34
    236e:	24 e6       	ldi	r18, 0x64	; 100
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	bc 01       	movw	r22, r24
    2378:	cd 01       	movw	r24, r26
    237a:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	89 a7       	std	Y+41, r24	; 0x29
    2384:	9a a7       	std	Y+42, r25	; 0x2a
    2386:	ab a7       	std	Y+43, r26	; 0x2b
    2388:	bc a7       	std	Y+44, r27	; 0x2c
		Intermediate_2 = Num_2 / 10; //2
    238a:	89 a5       	ldd	r24, Y+41	; 0x29
    238c:	9a a5       	ldd	r25, Y+42	; 0x2a
    238e:	ab a5       	ldd	r26, Y+43	; 0x2b
    2390:	bc a5       	ldd	r27, Y+44	; 0x2c
    2392:	2a e0       	ldi	r18, 0x0A	; 10
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    23a2:	da 01       	movw	r26, r20
    23a4:	c9 01       	movw	r24, r18
    23a6:	8d a3       	std	Y+37, r24	; 0x25
    23a8:	9e a3       	std	Y+38, r25	; 0x26
    23aa:	af a3       	std	Y+39, r26	; 0x27
    23ac:	b8 a7       	std	Y+40, r27	; 0x28
		LCD_voidSetCursor(R,C+1);
    23ae:	8e a9       	ldd	r24, Y+54	; 0x36
    23b0:	98 2f       	mov	r25, r24
    23b2:	9f 5f       	subi	r25, 0xFF	; 255
    23b4:	8d a9       	ldd	r24, Y+53	; 0x35
    23b6:	69 2f       	mov	r22, r25
    23b8:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWrite(Intermediate_2);
    23bc:	8d a1       	ldd	r24, Y+37	; 0x25
    23be:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidWrite>

		Num_3 = Num_2 % 10; //3
    23c2:	89 a5       	ldd	r24, Y+41	; 0x29
    23c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23c6:	ab a5       	ldd	r26, Y+43	; 0x2b
    23c8:	bc a5       	ldd	r27, Y+44	; 0x2c
    23ca:	2a e0       	ldi	r18, 0x0A	; 10
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	89 a3       	std	Y+33, r24	; 0x21
    23e0:	9a a3       	std	Y+34, r25	; 0x22
    23e2:	ab a3       	std	Y+35, r26	; 0x23
    23e4:	bc a3       	std	Y+36, r27	; 0x24
    	LCD_voidSetCursor(R,C+2);
    23e6:	8e a9       	ldd	r24, Y+54	; 0x36
    23e8:	98 2f       	mov	r25, r24
    23ea:	9e 5f       	subi	r25, 0xFE	; 254
    23ec:	8d a9       	ldd	r24, Y+53	; 0x35
    23ee:	69 2f       	mov	r22, r25
    23f0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWrite(Num_3);
    23f4:	89 a1       	ldd	r24, Y+33	; 0x21
    23f6:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidWrite>
    23fa:	ab c0       	rjmp	.+342    	; 0x2552 <LCD_voidwriteNumber+0x320>
	}
	else if(Num >=1000 && Num <10000)
    23fc:	89 a9       	ldd	r24, Y+49	; 0x31
    23fe:	9a a9       	ldd	r25, Y+50	; 0x32
    2400:	ab a9       	ldd	r26, Y+51	; 0x33
    2402:	bc a9       	ldd	r27, Y+52	; 0x34
    2404:	88 3e       	cpi	r24, 0xE8	; 232
    2406:	23 e0       	ldi	r18, 0x03	; 3
    2408:	92 07       	cpc	r25, r18
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	a2 07       	cpc	r26, r18
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	b2 07       	cpc	r27, r18
    2412:	08 f4       	brcc	.+2      	; 0x2416 <LCD_voidwriteNumber+0x1e4>
    2414:	9e c0       	rjmp	.+316    	; 0x2552 <LCD_voidwriteNumber+0x320>
    2416:	89 a9       	ldd	r24, Y+49	; 0x31
    2418:	9a a9       	ldd	r25, Y+50	; 0x32
    241a:	ab a9       	ldd	r26, Y+51	; 0x33
    241c:	bc a9       	ldd	r27, Y+52	; 0x34
    241e:	80 31       	cpi	r24, 0x10	; 16
    2420:	27 e2       	ldi	r18, 0x27	; 39
    2422:	92 07       	cpc	r25, r18
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	a2 07       	cpc	r26, r18
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	b2 07       	cpc	r27, r18
    242c:	08 f0       	brcs	.+2      	; 0x2430 <LCD_voidwriteNumber+0x1fe>
    242e:	91 c0       	rjmp	.+290    	; 0x2552 <LCD_voidwriteNumber+0x320>
	{  ///1234
		Num_1 = Num/1000; //1
    2430:	89 a9       	ldd	r24, Y+49	; 0x31
    2432:	9a a9       	ldd	r25, Y+50	; 0x32
    2434:	ab a9       	ldd	r26, Y+51	; 0x33
    2436:	bc a9       	ldd	r27, Y+52	; 0x34
    2438:	28 ee       	ldi	r18, 0xE8	; 232
    243a:	33 e0       	ldi	r19, 0x03	; 3
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	50 e0       	ldi	r21, 0x00	; 0
    2440:	bc 01       	movw	r22, r24
    2442:	cd 01       	movw	r24, r26
    2444:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    2448:	da 01       	movw	r26, r20
    244a:	c9 01       	movw	r24, r18
    244c:	8d a7       	std	Y+45, r24	; 0x2d
    244e:	9e a7       	std	Y+46, r25	; 0x2e
    2450:	af a7       	std	Y+47, r26	; 0x2f
    2452:	b8 ab       	std	Y+48, r27	; 0x30
		LCD_voidSetCursor(R,C);
    2454:	8d a9       	ldd	r24, Y+53	; 0x35
    2456:	6e a9       	ldd	r22, Y+54	; 0x36
    2458:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWrite(Num_1);
    245c:	8d a5       	ldd	r24, Y+45	; 0x2d
    245e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidWrite>

		Num_2 = Num % 1000;  //234
    2462:	89 a9       	ldd	r24, Y+49	; 0x31
    2464:	9a a9       	ldd	r25, Y+50	; 0x32
    2466:	ab a9       	ldd	r26, Y+51	; 0x33
    2468:	bc a9       	ldd	r27, Y+52	; 0x34
    246a:	28 ee       	ldi	r18, 0xE8	; 232
    246c:	33 e0       	ldi	r19, 0x03	; 3
    246e:	40 e0       	ldi	r20, 0x00	; 0
    2470:	50 e0       	ldi	r21, 0x00	; 0
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	89 a7       	std	Y+41, r24	; 0x29
    2480:	9a a7       	std	Y+42, r25	; 0x2a
    2482:	ab a7       	std	Y+43, r26	; 0x2b
    2484:	bc a7       	std	Y+44, r27	; 0x2c
		Intermediate_2= Num_2 / 100; //2
    2486:	89 a5       	ldd	r24, Y+41	; 0x29
    2488:	9a a5       	ldd	r25, Y+42	; 0x2a
    248a:	ab a5       	ldd	r26, Y+43	; 0x2b
    248c:	bc a5       	ldd	r27, Y+44	; 0x2c
    248e:	24 e6       	ldi	r18, 0x64	; 100
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    249e:	da 01       	movw	r26, r20
    24a0:	c9 01       	movw	r24, r18
    24a2:	8d a3       	std	Y+37, r24	; 0x25
    24a4:	9e a3       	std	Y+38, r25	; 0x26
    24a6:	af a3       	std	Y+39, r26	; 0x27
    24a8:	b8 a7       	std	Y+40, r27	; 0x28
		LCD_voidSetCursor(R,C+1);
    24aa:	8e a9       	ldd	r24, Y+54	; 0x36
    24ac:	98 2f       	mov	r25, r24
    24ae:	9f 5f       	subi	r25, 0xFF	; 255
    24b0:	8d a9       	ldd	r24, Y+53	; 0x35
    24b2:	69 2f       	mov	r22, r25
    24b4:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWrite(Intermediate_2);
    24b8:	8d a1       	ldd	r24, Y+37	; 0x25
    24ba:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidWrite>

		Intermediate_3 = Num_2 % 100; //34
    24be:	89 a5       	ldd	r24, Y+41	; 0x29
    24c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24c2:	ab a5       	ldd	r26, Y+43	; 0x2b
    24c4:	bc a5       	ldd	r27, Y+44	; 0x2c
    24c6:	24 e6       	ldi	r18, 0x64	; 100
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	50 e0       	ldi	r21, 0x00	; 0
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	8d 8f       	std	Y+29, r24	; 0x1d
    24dc:	9e 8f       	std	Y+30, r25	; 0x1e
    24de:	af 8f       	std	Y+31, r26	; 0x1f
    24e0:	b8 a3       	std	Y+32, r27	; 0x20
		Num_3 = Intermediate_3 /10; //3
    24e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24e6:	af 8d       	ldd	r26, Y+31	; 0x1f
    24e8:	b8 a1       	ldd	r27, Y+32	; 0x20
    24ea:	2a e0       	ldi	r18, 0x0A	; 10
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e0       	ldi	r20, 0x00	; 0
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	bc 01       	movw	r22, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    24fa:	da 01       	movw	r26, r20
    24fc:	c9 01       	movw	r24, r18
    24fe:	89 a3       	std	Y+33, r24	; 0x21
    2500:	9a a3       	std	Y+34, r25	; 0x22
    2502:	ab a3       	std	Y+35, r26	; 0x23
    2504:	bc a3       	std	Y+36, r27	; 0x24
		LCD_voidSetCursor(R,C+2);
    2506:	8e a9       	ldd	r24, Y+54	; 0x36
    2508:	98 2f       	mov	r25, r24
    250a:	9e 5f       	subi	r25, 0xFE	; 254
    250c:	8d a9       	ldd	r24, Y+53	; 0x35
    250e:	69 2f       	mov	r22, r25
    2510:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWrite(Num_3);
    2514:	89 a1       	ldd	r24, Y+33	; 0x21
    2516:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidWrite>

		Num_4 = Intermediate_3 % 10; //4
    251a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    251c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    251e:	af 8d       	ldd	r26, Y+31	; 0x1f
    2520:	b8 a1       	ldd	r27, Y+32	; 0x20
    2522:	2a e0       	ldi	r18, 0x0A	; 10
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	8d 8b       	std	Y+21, r24	; 0x15
    2538:	9e 8b       	std	Y+22, r25	; 0x16
    253a:	af 8b       	std	Y+23, r26	; 0x17
    253c:	b8 8f       	std	Y+24, r27	; 0x18
		LCD_voidSetCursor(R,C+3);
    253e:	8e a9       	ldd	r24, Y+54	; 0x36
    2540:	98 2f       	mov	r25, r24
    2542:	9d 5f       	subi	r25, 0xFD	; 253
    2544:	8d a9       	ldd	r24, Y+53	; 0x35
    2546:	69 2f       	mov	r22, r25
    2548:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWrite(Num_4);
    254c:	8d 89       	ldd	r24, Y+21	; 0x15
    254e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <LCD_voidWrite>





}
    2552:	e6 96       	adiw	r28, 0x36	; 54
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	de bf       	out	0x3e, r29	; 62
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <Timer_voidInit>:

static u32 OVF_counter;
static u32 OVF_Value;

void Timer_voidInit(u16 Start)
{
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	00 d0       	rcall	.+0      	; 0x256a <Timer_voidInit+0x6>
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	9a 83       	std	Y+2, r25	; 0x02
    2570:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR0,5);
#endif
//___________________________________________________________________
#elif Timer_Mode == Fast_PWM

	SET_BIT(TCCR0,6);
    2572:	a3 e5       	ldi	r26, 0x53	; 83
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	e3 e5       	ldi	r30, 0x53	; 83
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	80 64       	ori	r24, 0x40	; 64
    257e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    2580:	a3 e5       	ldi	r26, 0x53	; 83
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	e3 e5       	ldi	r30, 0x53	; 83
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	88 60       	ori	r24, 0x08	; 8
    258c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,5);
#elif Compare_Output_Mode_Fast_PWM == Fast_PWM_Reserved
	SET_BIT(TCCR0,4);
	CLEAR_BIT(TCCR0,5);
#elif Compare_Output_Mode_Fast_PWM == Fast_PWM_Clear_OC0_On_Compare_Set_OC0_On_Top
	CLEAR_BIT(TCCR0,4);
    258e:	a3 e5       	ldi	r26, 0x53	; 83
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e3 e5       	ldi	r30, 0x53	; 83
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	8f 7e       	andi	r24, 0xEF	; 239
    259a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    259c:	a3 e5       	ldi	r26, 0x53	; 83
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e3 e5       	ldi	r30, 0x53	; 83
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	80 62       	ori	r24, 0x20	; 32
    25a8:	8c 93       	st	X, r24
#if Clock_Select ==   No_Cock_Source
	CLEAR_BIT(TCCR0,2);
	CLEAR_BIT(TCCR0,1);
	CLEAR_BIT(TCCR0,0);
#elif Clock_Select ==   NO_Prescalling
	CLEAR_BIT(TCCR0,2); //no Prescaler
    25aa:	a3 e5       	ldi	r26, 0x53	; 83
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e3 e5       	ldi	r30, 0x53	; 83
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	8b 7f       	andi	r24, 0xFB	; 251
    25b6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,1);
    25b8:	a3 e5       	ldi	r26, 0x53	; 83
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e3 e5       	ldi	r30, 0x53	; 83
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	8d 7f       	andi	r24, 0xFD	; 253
    25c4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
    25c6:	a3 e5       	ldi	r26, 0x53	; 83
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e3 e5       	ldi	r30, 0x53	; 83
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	81 60       	ori	r24, 0x01	; 1
    25d2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
	SET_BIT(TCCR0,1);
	SET_BIT(TCCR0,0);
#endif

	TCNT0 = Start;
    25d4:	e2 e5       	ldi	r30, 0x52	; 82
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	80 83       	st	Z, r24

	//SET_BIT(TIMSK,0); //PIE overflow interrupt

    SET_BIT(SREG,7); // Global interrupt enable
    25dc:	af e5       	ldi	r26, 0x5F	; 95
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	ef e5       	ldi	r30, 0x5F	; 95
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	80 68       	ori	r24, 0x80	; 128
    25e8:	8c 93       	st	X, r24
}
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <Timer_u32_OVF_Counter>:

void Timer_u32_OVF_Counter(u32 value)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <Timer_u32_OVF_Counter+0x6>
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <Timer_u32_OVF_Counter+0x8>
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	69 83       	std	Y+1, r22	; 0x01
    2602:	7a 83       	std	Y+2, r23	; 0x02
    2604:	8b 83       	std	Y+3, r24	; 0x03
    2606:	9c 83       	std	Y+4, r25	; 0x04
	OVF_Value = value;
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	ab 81       	ldd	r26, Y+3	; 0x03
    260e:	bc 81       	ldd	r27, Y+4	; 0x04
    2610:	80 93 c2 00 	sts	0x00C2, r24
    2614:	90 93 c3 00 	sts	0x00C3, r25
    2618:	a0 93 c4 00 	sts	0x00C4, r26
    261c:	b0 93 c5 00 	sts	0x00C5, r27

}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <main>:
#define F_CPU 12000000

u8 up,down;
 u8 flag;
int main (void)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	ac 97       	sbiw	r28, 0x2c	; 44
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
	u8 Enter , x ;
	DIO_voidSetPinDir(PORT_A,PIN_0,INPUT);  //enter key
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	40 e0       	ldi	r20, 0x00	; 0
    2648:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>
	DIO_voidSetPinValue(PORT_A,PIN_0,HIGH);
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	41 e0       	ldi	r20, 0x01	; 1
    2652:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_voidSetPinValue>

	EX_Interrupt_voidInitINT0();   //up counting
    2656:	0e 94 99 09 	call	0x1332	; 0x1332 <EX_Interrupt_voidInitINT0>
	EX_Interrupt_voidSetINT0();
    265a:	0e 94 bc 09 	call	0x1378	; 0x1378 <EX_Interrupt_voidSetINT0>

	EX_Interrupt_voidInitINT1();   //down counting
    265e:	0e 94 cd 09 	call	0x139a	; 0x139a <EX_Interrupt_voidInitINT1>
	EX_Interrupt_voidSetINT1();
    2662:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <EX_Interrupt_voidSetINT1>

	LCD_voidInit();
    2666:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LCD_voidInit>

	Timer_voidInit(0);
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 b2 12 	call	0x2564	; 0x2564 <Timer_voidInit>


	DIO_voidSetPinDir(PORT_B,PIN_3,OUTPUT);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	63 e0       	ldi	r22, 0x03	; 3
    2676:	41 e0       	ldi	r20, 0x01	; 1
    2678:	0e 94 d4 06 	call	0xda8	; 0xda8 <DIO_voidSetPinDir>

	LCD_voidSendCommand(ClearWithDDRAM);
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <LCD_voidSendCommand>


	Enter = GET_BIT(PINA,0);
    2682:	e9 e3       	ldi	r30, 0x39	; 57
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	81 70       	andi	r24, 0x01	; 1
    268a:	8c a7       	std	Y+44, r24	; 0x2c
	up =GET_BIT(PIND,2);
    268c:	e0 e3       	ldi	r30, 0x30	; 48
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	86 95       	lsr	r24
    2694:	86 95       	lsr	r24
    2696:	81 70       	andi	r24, 0x01	; 1
    2698:	80 93 c6 00 	sts	0x00C6, r24
	down=  GET_BIT(PIND,3);
    269c:	e0 e3       	ldi	r30, 0x30	; 48
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	86 95       	lsr	r24
    26a4:	86 95       	lsr	r24
    26a6:	86 95       	lsr	r24
    26a8:	81 70       	andi	r24, 0x01	; 1
    26aa:	80 93 c8 00 	sts	0x00C8, r24


	flag = 0;
    26ae:	10 92 c7 00 	sts	0x00C7, r1

	OCR0 =0;
    26b2:	ec e5       	ldi	r30, 0x5C	; 92
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	10 82       	st	Z, r1

	while(1)
	{
		LCD_voidSetCursor(0,0);
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	60 e0       	ldi	r22, 0x00	; 0
    26bc:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWriteString("Welcome ON lcd");
    26c0:	80 e6       	ldi	r24, 0x60	; 96
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	aa ef       	ldi	r26, 0xFA	; 250
    26ce:	b4 e4       	ldi	r27, 0x44	; 68
    26d0:	8f a3       	std	Y+39, r24	; 0x27
    26d2:	98 a7       	std	Y+40, r25	; 0x28
    26d4:	a9 a7       	std	Y+41, r26	; 0x29
    26d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d8:	6f a1       	ldd	r22, Y+39	; 0x27
    26da:	78 a5       	ldd	r23, Y+40	; 0x28
    26dc:	89 a5       	ldd	r24, Y+41	; 0x29
    26de:	9a a5       	ldd	r25, Y+42	; 0x2a
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e8       	ldi	r19, 0x80	; 128
    26e4:	4b e3       	ldi	r20, 0x3B	; 59
    26e6:	55 e4       	ldi	r21, 0x45	; 69
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	8b a3       	std	Y+35, r24	; 0x23
    26f2:	9c a3       	std	Y+36, r25	; 0x24
    26f4:	ad a3       	std	Y+37, r26	; 0x25
    26f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26f8:	6b a1       	ldd	r22, Y+35	; 0x23
    26fa:	7c a1       	ldd	r23, Y+36	; 0x24
    26fc:	8d a1       	ldd	r24, Y+37	; 0x25
    26fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e8       	ldi	r20, 0x80	; 128
    2706:	5f e3       	ldi	r21, 0x3F	; 63
    2708:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    270c:	88 23       	and	r24, r24
    270e:	2c f4       	brge	.+10     	; 0x271a <main+0xec>
		__ticks = 1;
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	9a a3       	std	Y+34, r25	; 0x22
    2716:	89 a3       	std	Y+33, r24	; 0x21
    2718:	3f c0       	rjmp	.+126    	; 0x2798 <main+0x16a>
	else if (__tmp > 65535)
    271a:	6b a1       	ldd	r22, Y+35	; 0x23
    271c:	7c a1       	ldd	r23, Y+36	; 0x24
    271e:	8d a1       	ldd	r24, Y+37	; 0x25
    2720:	9e a1       	ldd	r25, Y+38	; 0x26
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	3f ef       	ldi	r19, 0xFF	; 255
    2726:	4f e7       	ldi	r20, 0x7F	; 127
    2728:	57 e4       	ldi	r21, 0x47	; 71
    272a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272e:	18 16       	cp	r1, r24
    2730:	4c f5       	brge	.+82     	; 0x2784 <main+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2732:	6f a1       	ldd	r22, Y+39	; 0x27
    2734:	78 a5       	ldd	r23, Y+40	; 0x28
    2736:	89 a5       	ldd	r24, Y+41	; 0x29
    2738:	9a a5       	ldd	r25, Y+42	; 0x2a
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e2       	ldi	r20, 0x20	; 32
    2740:	51 e4       	ldi	r21, 0x41	; 65
    2742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	9a a3       	std	Y+34, r25	; 0x22
    2758:	89 a3       	std	Y+33, r24	; 0x21
    275a:	0f c0       	rjmp	.+30     	; 0x277a <main+0x14c>
    275c:	8c e2       	ldi	r24, 0x2C	; 44
    275e:	91 e0       	ldi	r25, 0x01	; 1
    2760:	98 a3       	std	Y+32, r25	; 0x20
    2762:	8f 8f       	std	Y+31, r24	; 0x1f
    2764:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2766:	98 a1       	ldd	r25, Y+32	; 0x20
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <main+0x13a>
    276c:	98 a3       	std	Y+32, r25	; 0x20
    276e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2770:	89 a1       	ldd	r24, Y+33	; 0x21
    2772:	9a a1       	ldd	r25, Y+34	; 0x22
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	9a a3       	std	Y+34, r25	; 0x22
    2778:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277a:	89 a1       	ldd	r24, Y+33	; 0x21
    277c:	9a a1       	ldd	r25, Y+34	; 0x22
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	69 f7       	brne	.-38     	; 0x275c <main+0x12e>
    2782:	14 c0       	rjmp	.+40     	; 0x27ac <main+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2784:	6b a1       	ldd	r22, Y+35	; 0x23
    2786:	7c a1       	ldd	r23, Y+36	; 0x24
    2788:	8d a1       	ldd	r24, Y+37	; 0x25
    278a:	9e a1       	ldd	r25, Y+38	; 0x26
    278c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	9a a3       	std	Y+34, r25	; 0x22
    2796:	89 a3       	std	Y+33, r24	; 0x21
    2798:	89 a1       	ldd	r24, Y+33	; 0x21
    279a:	9a a1       	ldd	r25, Y+34	; 0x22
    279c:	9e 8f       	std	Y+30, r25	; 0x1e
    279e:	8d 8f       	std	Y+29, r24	; 0x1d
    27a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <main+0x176>
    27a8:	9e 8f       	std	Y+30, r25	; 0x1e
    27aa:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000);

		LCD_voidSetCursor(0,0);
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWriteString("IMT_OMAR.Solima");
    27b4:	8f e6       	ldi	r24, 0x6F	; 111
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	aa ef       	ldi	r26, 0xFA	; 250
    27c2:	b3 e4       	ldi	r27, 0x43	; 67
    27c4:	89 8f       	std	Y+25, r24	; 0x19
    27c6:	9a 8f       	std	Y+26, r25	; 0x1a
    27c8:	ab 8f       	std	Y+27, r26	; 0x1b
    27ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27cc:	69 8d       	ldd	r22, Y+25	; 0x19
    27ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e8       	ldi	r19, 0x80	; 128
    27d8:	4b e3       	ldi	r20, 0x3B	; 59
    27da:	55 e4       	ldi	r21, 0x45	; 69
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	8d 8b       	std	Y+21, r24	; 0x15
    27e6:	9e 8b       	std	Y+22, r25	; 0x16
    27e8:	af 8b       	std	Y+23, r26	; 0x17
    27ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27ec:	6d 89       	ldd	r22, Y+21	; 0x15
    27ee:	7e 89       	ldd	r23, Y+22	; 0x16
    27f0:	8f 89       	ldd	r24, Y+23	; 0x17
    27f2:	98 8d       	ldd	r25, Y+24	; 0x18
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	2c f4       	brge	.+10     	; 0x280e <main+0x1e0>
		__ticks = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9c 8b       	std	Y+20, r25	; 0x14
    280a:	8b 8b       	std	Y+19, r24	; 0x13
    280c:	3f c0       	rjmp	.+126    	; 0x288c <main+0x25e>
	else if (__tmp > 65535)
    280e:	6d 89       	ldd	r22, Y+21	; 0x15
    2810:	7e 89       	ldd	r23, Y+22	; 0x16
    2812:	8f 89       	ldd	r24, Y+23	; 0x17
    2814:	98 8d       	ldd	r25, Y+24	; 0x18
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	3f ef       	ldi	r19, 0xFF	; 255
    281a:	4f e7       	ldi	r20, 0x7F	; 127
    281c:	57 e4       	ldi	r21, 0x47	; 71
    281e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2822:	18 16       	cp	r1, r24
    2824:	4c f5       	brge	.+82     	; 0x2878 <main+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2826:	69 8d       	ldd	r22, Y+25	; 0x19
    2828:	7a 8d       	ldd	r23, Y+26	; 0x1a
    282a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	51 e4       	ldi	r21, 0x41	; 65
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9c 8b       	std	Y+20, r25	; 0x14
    284c:	8b 8b       	std	Y+19, r24	; 0x13
    284e:	0f c0       	rjmp	.+30     	; 0x286e <main+0x240>
    2850:	8c e2       	ldi	r24, 0x2C	; 44
    2852:	91 e0       	ldi	r25, 0x01	; 1
    2854:	9a 8b       	std	Y+18, r25	; 0x12
    2856:	89 8b       	std	Y+17, r24	; 0x11
    2858:	89 89       	ldd	r24, Y+17	; 0x11
    285a:	9a 89       	ldd	r25, Y+18	; 0x12
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <main+0x22e>
    2860:	9a 8b       	std	Y+18, r25	; 0x12
    2862:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2864:	8b 89       	ldd	r24, Y+19	; 0x13
    2866:	9c 89       	ldd	r25, Y+20	; 0x14
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	9c 8b       	std	Y+20, r25	; 0x14
    286c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286e:	8b 89       	ldd	r24, Y+19	; 0x13
    2870:	9c 89       	ldd	r25, Y+20	; 0x14
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	69 f7       	brne	.-38     	; 0x2850 <main+0x222>
    2876:	14 c0       	rjmp	.+40     	; 0x28a0 <main+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2878:	6d 89       	ldd	r22, Y+21	; 0x15
    287a:	7e 89       	ldd	r23, Y+22	; 0x16
    287c:	8f 89       	ldd	r24, Y+23	; 0x17
    287e:	98 8d       	ldd	r25, Y+24	; 0x18
    2880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9c 8b       	std	Y+20, r25	; 0x14
    288a:	8b 8b       	std	Y+19, r24	; 0x13
    288c:	8b 89       	ldd	r24, Y+19	; 0x13
    288e:	9c 89       	ldd	r25, Y+20	; 0x14
    2890:	98 8b       	std	Y+16, r25	; 0x10
    2892:	8f 87       	std	Y+15, r24	; 0x0f
    2894:	8f 85       	ldd	r24, Y+15	; 0x0f
    2896:	98 89       	ldd	r25, Y+16	; 0x10
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <main+0x26a>
    289c:	98 8b       	std	Y+16, r25	; 0x10
    289e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);

		LCD_voidSetCursor(0,0);
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWriteString("Abdullah.Hakeem");
    28a8:	8f e7       	ldi	r24, 0x7F	; 127
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	aa ef       	ldi	r26, 0xFA	; 250
    28b6:	b3 e4       	ldi	r27, 0x43	; 67
    28b8:	8b 87       	std	Y+11, r24	; 0x0b
    28ba:	9c 87       	std	Y+12, r25	; 0x0c
    28bc:	ad 87       	std	Y+13, r26	; 0x0d
    28be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e8       	ldi	r19, 0x80	; 128
    28cc:	4b e3       	ldi	r20, 0x3B	; 59
    28ce:	55 e4       	ldi	r21, 0x45	; 69
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	8f 83       	std	Y+7, r24	; 0x07
    28da:	98 87       	std	Y+8, r25	; 0x08
    28dc:	a9 87       	std	Y+9, r26	; 0x09
    28de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28e0:	6f 81       	ldd	r22, Y+7	; 0x07
    28e2:	78 85       	ldd	r23, Y+8	; 0x08
    28e4:	89 85       	ldd	r24, Y+9	; 0x09
    28e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e8       	ldi	r20, 0x80	; 128
    28ee:	5f e3       	ldi	r21, 0x3F	; 63
    28f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f4:	88 23       	and	r24, r24
    28f6:	2c f4       	brge	.+10     	; 0x2902 <main+0x2d4>
		__ticks = 1;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9e 83       	std	Y+6, r25	; 0x06
    28fe:	8d 83       	std	Y+5, r24	; 0x05
    2900:	3f c0       	rjmp	.+126    	; 0x2980 <main+0x352>
	else if (__tmp > 65535)
    2902:	6f 81       	ldd	r22, Y+7	; 0x07
    2904:	78 85       	ldd	r23, Y+8	; 0x08
    2906:	89 85       	ldd	r24, Y+9	; 0x09
    2908:	9a 85       	ldd	r25, Y+10	; 0x0a
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	3f ef       	ldi	r19, 0xFF	; 255
    290e:	4f e7       	ldi	r20, 0x7F	; 127
    2910:	57 e4       	ldi	r21, 0x47	; 71
    2912:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2916:	18 16       	cp	r1, r24
    2918:	4c f5       	brge	.+82     	; 0x296c <main+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291a:	6b 85       	ldd	r22, Y+11	; 0x0b
    291c:	7c 85       	ldd	r23, Y+12	; 0x0c
    291e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2920:	9e 85       	ldd	r25, Y+14	; 0x0e
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e2       	ldi	r20, 0x20	; 32
    2928:	51 e4       	ldi	r21, 0x41	; 65
    292a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	bc 01       	movw	r22, r24
    2934:	cd 01       	movw	r24, r26
    2936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	9e 83       	std	Y+6, r25	; 0x06
    2940:	8d 83       	std	Y+5, r24	; 0x05
    2942:	0f c0       	rjmp	.+30     	; 0x2962 <main+0x334>
    2944:	8c e2       	ldi	r24, 0x2C	; 44
    2946:	91 e0       	ldi	r25, 0x01	; 1
    2948:	9c 83       	std	Y+4, r25	; 0x04
    294a:	8b 83       	std	Y+3, r24	; 0x03
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	9c 81       	ldd	r25, Y+4	; 0x04
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <main+0x322>
    2954:	9c 83       	std	Y+4, r25	; 0x04
    2956:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	9e 81       	ldd	r25, Y+6	; 0x06
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	9e 83       	std	Y+6, r25	; 0x06
    2960:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2962:	8d 81       	ldd	r24, Y+5	; 0x05
    2964:	9e 81       	ldd	r25, Y+6	; 0x06
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	69 f7       	brne	.-38     	; 0x2944 <main+0x316>
    296a:	1a c0       	rjmp	.+52     	; 0x29a0 <main+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296c:	6f 81       	ldd	r22, Y+7	; 0x07
    296e:	78 85       	ldd	r23, Y+8	; 0x08
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	9a 83       	std	Y+2, r25	; 0x02
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	9a 81       	ldd	r25, Y+2	; 0x02
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <main+0x35e>
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	05 c0       	rjmp	.+10     	; 0x29a0 <main+0x372>



		while(Enter == 1)
		{
			Enter = GET_BIT(PINA,0);
    2996:	e9 e3       	ldi	r30, 0x39	; 57
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	81 70       	andi	r24, 0x01	; 1
    299e:	8c a7       	std	Y+44, r24	; 0x2c
		LCD_voidWriteString("Abdullah.Hakeem");
		_delay_ms(500);



		while(Enter == 1)
    29a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    29a2:	81 30       	cpi	r24, 0x01	; 1
    29a4:	c1 f3       	breq	.-16     	; 0x2996 <main+0x368>
    29a6:	05 c0       	rjmp	.+10     	; 0x29b2 <main+0x384>

		}

		while(Enter == 0)
		{
			Enter = GET_BIT(PINA,0);
    29a8:	e9 e3       	ldi	r30, 0x39	; 57
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	81 70       	andi	r24, 0x01	; 1
    29b0:	8c a7       	std	Y+44, r24	; 0x2c
		{
			Enter = GET_BIT(PINA,0);

		}

		while(Enter == 0)
    29b2:	8c a5       	ldd	r24, Y+44	; 0x2c
    29b4:	88 23       	and	r24, r24
    29b6:	c1 f3       	breq	.-16     	; 0x29a8 <main+0x37a>
		{
			Enter = GET_BIT(PINA,0);
		}
		LCD_voidSetCursor(0,0);
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWriteString("Select_Intensity");
    29c0:	8f e8       	ldi	r24, 0x8F	; 143
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
		LCD_voidSetCursor(1,0);
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	60 e0       	ldi	r22, 0x00	; 0
    29cc:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWriteString("0%");
    29d0:	80 ea       	ldi	r24, 0xA0	; 160
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
    29d8:	05 c0       	rjmp	.+10     	; 0x29e4 <main+0x3b6>
		while(1)
		{
			while(Enter == 1)
			{
				Enter = GET_BIT(PINA,0);
    29da:	e9 e3       	ldi	r30, 0x39	; 57
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	81 70       	andi	r24, 0x01	; 1
    29e2:	8c a7       	std	Y+44, r24	; 0x2c
		LCD_voidWriteString("Select_Intensity");
		LCD_voidSetCursor(1,0);
		LCD_voidWriteString("0%");
		while(1)
		{
			while(Enter == 1)
    29e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    29e6:	81 30       	cpi	r24, 0x01	; 1
    29e8:	c1 f3       	breq	.-16     	; 0x29da <main+0x3ac>
    29ea:	05 c0       	rjmp	.+10     	; 0x29f6 <main+0x3c8>
			{
				Enter = GET_BIT(PINA,0);
			}
			while(Enter == 0)
			{
				Enter = GET_BIT(PINA,0);
    29ec:	e9 e3       	ldi	r30, 0x39	; 57
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	81 70       	andi	r24, 0x01	; 1
    29f4:	8c a7       	std	Y+44, r24	; 0x2c
		{
			while(Enter == 1)
			{
				Enter = GET_BIT(PINA,0);
			}
			while(Enter == 0)
    29f6:	8c a5       	ldd	r24, Y+44	; 0x2c
    29f8:	88 23       	and	r24, r24
    29fa:	c1 f3       	breq	.-16     	; 0x29ec <main+0x3be>
			{
				Enter = GET_BIT(PINA,0);
			}
			if (flag == 0)
    29fc:	80 91 c7 00 	lds	r24, 0x00C7
    2a00:	88 23       	and	r24, r24
    2a02:	21 f4       	brne	.+8      	; 0x2a0c <main+0x3de>
			{
				OCR0 = 0;
    2a04:	ec e5       	ldi	r30, 0x5C	; 92
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	10 82       	st	Z, r1
    2a0a:	3a c0       	rjmp	.+116    	; 0x2a80 <main+0x452>
			}
			else if (flag >0 && flag <= 9)
    2a0c:	80 91 c7 00 	lds	r24, 0x00C7
    2a10:	88 23       	and	r24, r24
    2a12:	71 f1       	breq	.+92     	; 0x2a70 <main+0x442>
    2a14:	80 91 c7 00 	lds	r24, 0x00C7
    2a18:	8a 30       	cpi	r24, 0x0A	; 10
    2a1a:	50 f5       	brcc	.+84     	; 0x2a70 <main+0x442>
			{
			    x = (flag*10);
    2a1c:	80 91 c7 00 	lds	r24, 0x00C7
    2a20:	88 2f       	mov	r24, r24
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	9c 01       	movw	r18, r24
    2a26:	22 0f       	add	r18, r18
    2a28:	33 1f       	adc	r19, r19
    2a2a:	c9 01       	movw	r24, r18
    2a2c:	88 0f       	add	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	88 0f       	add	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	82 0f       	add	r24, r18
    2a36:	93 1f       	adc	r25, r19
    2a38:	8b a7       	std	Y+43, r24	; 0x2b
			    OCR0 = (x * 255)/100;
    2a3a:	ec e5       	ldi	r30, 0x5C	; 92
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a40:	48 2f       	mov	r20, r24
    2a42:	50 e0       	ldi	r21, 0x00	; 0
    2a44:	ca 01       	movw	r24, r20
    2a46:	9c 01       	movw	r18, r24
    2a48:	22 0f       	add	r18, r18
    2a4a:	33 1f       	adc	r19, r19
    2a4c:	c9 01       	movw	r24, r18
    2a4e:	96 95       	lsr	r25
    2a50:	98 2f       	mov	r25, r24
    2a52:	88 27       	eor	r24, r24
    2a54:	97 95       	ror	r25
    2a56:	87 95       	ror	r24
    2a58:	82 1b       	sub	r24, r18
    2a5a:	93 0b       	sbc	r25, r19
    2a5c:	84 0f       	add	r24, r20
    2a5e:	95 1f       	adc	r25, r21
    2a60:	24 e6       	ldi	r18, 0x64	; 100
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	b9 01       	movw	r22, r18
    2a66:	0e 94 55 16 	call	0x2caa	; 0x2caa <__divmodhi4>
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	80 83       	st	Z, r24
    2a6e:	08 c0       	rjmp	.+16     	; 0x2a80 <main+0x452>
			}
			else if (flag == 10)
    2a70:	80 91 c7 00 	lds	r24, 0x00C7
    2a74:	8a 30       	cpi	r24, 0x0A	; 10
    2a76:	21 f4       	brne	.+8      	; 0x2a80 <main+0x452>
			{
				OCR0=255;
    2a78:	ec e5       	ldi	r30, 0x5C	; 92
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	8f ef       	ldi	r24, 0xFF	; 255
    2a7e:	80 83       	st	Z, r24
			}
		    LCD_voidSetCursor(1,5);
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	65 e0       	ldi	r22, 0x05	; 5
    2a84:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		    LCD_voidWriteString("ok");
    2a88:	83 ea       	ldi	r24, 0xA3	; 163
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
    2a90:	a9 cf       	rjmp	.-174    	; 0x29e4 <main+0x3b6>

00002a92 <__vector_1>:


	return 0;
}
ISR(INT0_vect)
{
    2a92:	1f 92       	push	r1
    2a94:	0f 92       	push	r0
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	0f 92       	push	r0
    2a9a:	11 24       	eor	r1, r1
    2a9c:	2f 93       	push	r18
    2a9e:	3f 93       	push	r19
    2aa0:	4f 93       	push	r20
    2aa2:	5f 93       	push	r21
    2aa4:	6f 93       	push	r22
    2aa6:	7f 93       	push	r23
    2aa8:	8f 93       	push	r24
    2aaa:	9f 93       	push	r25
    2aac:	af 93       	push	r26
    2aae:	bf 93       	push	r27
    2ab0:	ef 93       	push	r30
    2ab2:	ff 93       	push	r31
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	08 c0       	rjmp	.+16     	; 0x2ace <__vector_1+0x3c>
	while(up == 0)
	{
		up =GET_BIT(PIND,2);
    2abe:	e0 e3       	ldi	r30, 0x30	; 48
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	86 95       	lsr	r24
    2ac6:	86 95       	lsr	r24
    2ac8:	81 70       	andi	r24, 0x01	; 1
    2aca:	80 93 c6 00 	sts	0x00C6, r24

	return 0;
}
ISR(INT0_vect)
{
	while(up == 0)
    2ace:	80 91 c6 00 	lds	r24, 0x00C6
    2ad2:	88 23       	and	r24, r24
    2ad4:	a1 f3       	breq	.-24     	; 0x2abe <__vector_1+0x2c>
	{
		up =GET_BIT(PIND,2);
	}
    LCD_voidSetCursor(1,5);
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	65 e0       	ldi	r22, 0x05	; 5
    2ada:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
    LCD_voidWriteString("    ");
    2ade:	86 ea       	ldi	r24, 0xA6	; 166
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
    flag ++;
    2ae6:	80 91 c7 00 	lds	r24, 0x00C7
    2aea:	8f 5f       	subi	r24, 0xFF	; 255
    2aec:	80 93 c7 00 	sts	0x00C7, r24
	if (flag == 0)
    2af0:	80 91 c7 00 	lds	r24, 0x00C7
    2af4:	88 23       	and	r24, r24
    2af6:	49 f4       	brne	.+18     	; 0x2b0a <__vector_1+0x78>
	{
		LCD_voidSetCursor(1,0);
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWriteString("0% ");
    2b00:	8b ea       	ldi	r24, 0xAB	; 171
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
    2b08:	32 c0       	rjmp	.+100    	; 0x2b6e <__vector_1+0xdc>
	}
	else if (flag >0 && flag <=9)
    2b0a:	80 91 c7 00 	lds	r24, 0x00C7
    2b0e:	88 23       	and	r24, r24
    2b10:	c9 f0       	breq	.+50     	; 0x2b44 <__vector_1+0xb2>
    2b12:	80 91 c7 00 	lds	r24, 0x00C7
    2b16:	8a 30       	cpi	r24, 0x0A	; 10
    2b18:	a8 f4       	brcc	.+42     	; 0x2b44 <__vector_1+0xb2>
	{
		LCD_voidwriteNumber(flag,1,0);
    2b1a:	80 91 c7 00 	lds	r24, 0x00C7
    2b1e:	88 2f       	mov	r24, r24
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	a0 e0       	ldi	r26, 0x00	; 0
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	41 e0       	ldi	r20, 0x01	; 1
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_voidwriteNumber>
		LCD_voidSetCursor(1,1);
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	61 e0       	ldi	r22, 0x01	; 1
    2b36:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWriteString("0% ");
    2b3a:	8b ea       	ldi	r24, 0xAB	; 171
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
    2b42:	15 c0       	rjmp	.+42     	; 0x2b6e <__vector_1+0xdc>
	}
	else if (flag == 10)
    2b44:	80 91 c7 00 	lds	r24, 0x00C7
    2b48:	8a 30       	cpi	r24, 0x0A	; 10
    2b4a:	89 f4       	brne	.+34     	; 0x2b6e <__vector_1+0xdc>
	{
	LCD_voidSetCursor(1,0);
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	60 e0       	ldi	r22, 0x00	; 0
    2b50:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
	LCD_voidWriteString("100%");
    2b54:	8f ea       	ldi	r24, 0xAF	; 175
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
    2b5c:	08 c0       	rjmp	.+16     	; 0x2b6e <__vector_1+0xdc>

	}

	while(up == 0)
	{
		up =GET_BIT(PIND,2);
    2b5e:	e0 e3       	ldi	r30, 0x30	; 48
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	86 95       	lsr	r24
    2b66:	86 95       	lsr	r24
    2b68:	81 70       	andi	r24, 0x01	; 1
    2b6a:	80 93 c6 00 	sts	0x00C6, r24
	LCD_voidSetCursor(1,0);
	LCD_voidWriteString("100%");

	}

	while(up == 0)
    2b6e:	80 91 c6 00 	lds	r24, 0x00C6
    2b72:	88 23       	and	r24, r24
    2b74:	a1 f3       	breq	.-24     	; 0x2b5e <__vector_1+0xcc>
	{
		up =GET_BIT(PIND,2);
	}


}
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	ff 91       	pop	r31
    2b7c:	ef 91       	pop	r30
    2b7e:	bf 91       	pop	r27
    2b80:	af 91       	pop	r26
    2b82:	9f 91       	pop	r25
    2b84:	8f 91       	pop	r24
    2b86:	7f 91       	pop	r23
    2b88:	6f 91       	pop	r22
    2b8a:	5f 91       	pop	r21
    2b8c:	4f 91       	pop	r20
    2b8e:	3f 91       	pop	r19
    2b90:	2f 91       	pop	r18
    2b92:	0f 90       	pop	r0
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	0f 90       	pop	r0
    2b98:	1f 90       	pop	r1
    2b9a:	18 95       	reti

00002b9c <__vector_2>:
ISR(INT1_vect)
{
    2b9c:	1f 92       	push	r1
    2b9e:	0f 92       	push	r0
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	0f 92       	push	r0
    2ba4:	11 24       	eor	r1, r1
    2ba6:	2f 93       	push	r18
    2ba8:	3f 93       	push	r19
    2baa:	4f 93       	push	r20
    2bac:	5f 93       	push	r21
    2bae:	6f 93       	push	r22
    2bb0:	7f 93       	push	r23
    2bb2:	8f 93       	push	r24
    2bb4:	9f 93       	push	r25
    2bb6:	af 93       	push	r26
    2bb8:	bf 93       	push	r27
    2bba:	ef 93       	push	r30
    2bbc:	ff 93       	push	r31
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	09 c0       	rjmp	.+18     	; 0x2bda <__vector_2+0x3e>
	while(down == 0)
	{
		down=  GET_BIT(PIND,3);
    2bc8:	e0 e3       	ldi	r30, 0x30	; 48
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	86 95       	lsr	r24
    2bd0:	86 95       	lsr	r24
    2bd2:	86 95       	lsr	r24
    2bd4:	81 70       	andi	r24, 0x01	; 1
    2bd6:	80 93 c8 00 	sts	0x00C8, r24


}
ISR(INT1_vect)
{
	while(down == 0)
    2bda:	80 91 c8 00 	lds	r24, 0x00C8
    2bde:	88 23       	and	r24, r24
    2be0:	99 f3       	breq	.-26     	; 0x2bc8 <__vector_2+0x2c>
	{
		down=  GET_BIT(PIND,3);
	}
    LCD_voidSetCursor(1,5);
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	65 e0       	ldi	r22, 0x05	; 5
    2be6:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
    LCD_voidWriteString("    ");
    2bea:	86 ea       	ldi	r24, 0xA6	; 166
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
	flag --;
    2bf2:	80 91 c7 00 	lds	r24, 0x00C7
    2bf6:	81 50       	subi	r24, 0x01	; 1
    2bf8:	80 93 c7 00 	sts	0x00C7, r24
	if (flag == 0)
    2bfc:	80 91 c7 00 	lds	r24, 0x00C7
    2c00:	88 23       	and	r24, r24
    2c02:	49 f4       	brne	.+18     	; 0x2c16 <__vector_2+0x7a>
	{
		LCD_voidSetCursor(1,0);
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWriteString("0% ");
    2c0c:	8b ea       	ldi	r24, 0xAB	; 171
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
    2c14:	33 c0       	rjmp	.+102    	; 0x2c7c <__vector_2+0xe0>
	}
	else if (flag >0 && flag <=9)
    2c16:	80 91 c7 00 	lds	r24, 0x00C7
    2c1a:	88 23       	and	r24, r24
    2c1c:	c9 f0       	breq	.+50     	; 0x2c50 <__vector_2+0xb4>
    2c1e:	80 91 c7 00 	lds	r24, 0x00C7
    2c22:	8a 30       	cpi	r24, 0x0A	; 10
    2c24:	a8 f4       	brcc	.+42     	; 0x2c50 <__vector_2+0xb4>
	{
		LCD_voidwriteNumber(flag,1,0);
    2c26:	80 91 c7 00 	lds	r24, 0x00C7
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	a0 e0       	ldi	r26, 0x00	; 0
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	41 e0       	ldi	r20, 0x01	; 1
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_voidwriteNumber>
		LCD_voidSetCursor(1,1);
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	61 e0       	ldi	r22, 0x01	; 1
    2c42:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
		LCD_voidWriteString("0% ");
    2c46:	8b ea       	ldi	r24, 0xAB	; 171
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
    2c4e:	16 c0       	rjmp	.+44     	; 0x2c7c <__vector_2+0xe0>
	}
	else if (flag == 10)
    2c50:	80 91 c7 00 	lds	r24, 0x00C7
    2c54:	8a 30       	cpi	r24, 0x0A	; 10
    2c56:	91 f4       	brne	.+36     	; 0x2c7c <__vector_2+0xe0>
	{
	LCD_voidSetCursor(1,0);
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	60 e0       	ldi	r22, 0x00	; 0
    2c5c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSetCursor>
	LCD_voidWriteString("100%");
    2c60:	8f ea       	ldi	r24, 0xAF	; 175
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_voidWriteString>
    2c68:	09 c0       	rjmp	.+18     	; 0x2c7c <__vector_2+0xe0>

	}

	while(down == 0)
	{
		down=  GET_BIT(PIND,3);
    2c6a:	e0 e3       	ldi	r30, 0x30	; 48
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	86 95       	lsr	r24
    2c72:	86 95       	lsr	r24
    2c74:	86 95       	lsr	r24
    2c76:	81 70       	andi	r24, 0x01	; 1
    2c78:	80 93 c8 00 	sts	0x00C8, r24
	LCD_voidSetCursor(1,0);
	LCD_voidWriteString("100%");

	}

	while(down == 0)
    2c7c:	80 91 c8 00 	lds	r24, 0x00C8
    2c80:	88 23       	and	r24, r24
    2c82:	99 f3       	breq	.-26     	; 0x2c6a <__vector_2+0xce>
		down=  GET_BIT(PIND,3);
	}



}
    2c84:	cf 91       	pop	r28
    2c86:	df 91       	pop	r29
    2c88:	ff 91       	pop	r31
    2c8a:	ef 91       	pop	r30
    2c8c:	bf 91       	pop	r27
    2c8e:	af 91       	pop	r26
    2c90:	9f 91       	pop	r25
    2c92:	8f 91       	pop	r24
    2c94:	7f 91       	pop	r23
    2c96:	6f 91       	pop	r22
    2c98:	5f 91       	pop	r21
    2c9a:	4f 91       	pop	r20
    2c9c:	3f 91       	pop	r19
    2c9e:	2f 91       	pop	r18
    2ca0:	0f 90       	pop	r0
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	0f 90       	pop	r0
    2ca6:	1f 90       	pop	r1
    2ca8:	18 95       	reti

00002caa <__divmodhi4>:
    2caa:	97 fb       	bst	r25, 7
    2cac:	09 2e       	mov	r0, r25
    2cae:	07 26       	eor	r0, r23
    2cb0:	0a d0       	rcall	.+20     	; 0x2cc6 <__divmodhi4_neg1>
    2cb2:	77 fd       	sbrc	r23, 7
    2cb4:	04 d0       	rcall	.+8      	; 0x2cbe <__divmodhi4_neg2>
    2cb6:	2e d0       	rcall	.+92     	; 0x2d14 <__udivmodhi4>
    2cb8:	06 d0       	rcall	.+12     	; 0x2cc6 <__divmodhi4_neg1>
    2cba:	00 20       	and	r0, r0
    2cbc:	1a f4       	brpl	.+6      	; 0x2cc4 <__divmodhi4_exit>

00002cbe <__divmodhi4_neg2>:
    2cbe:	70 95       	com	r23
    2cc0:	61 95       	neg	r22
    2cc2:	7f 4f       	sbci	r23, 0xFF	; 255

00002cc4 <__divmodhi4_exit>:
    2cc4:	08 95       	ret

00002cc6 <__divmodhi4_neg1>:
    2cc6:	f6 f7       	brtc	.-4      	; 0x2cc4 <__divmodhi4_exit>
    2cc8:	90 95       	com	r25
    2cca:	81 95       	neg	r24
    2ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cce:	08 95       	ret

00002cd0 <__udivmodsi4>:
    2cd0:	a1 e2       	ldi	r26, 0x21	; 33
    2cd2:	1a 2e       	mov	r1, r26
    2cd4:	aa 1b       	sub	r26, r26
    2cd6:	bb 1b       	sub	r27, r27
    2cd8:	fd 01       	movw	r30, r26
    2cda:	0d c0       	rjmp	.+26     	; 0x2cf6 <__udivmodsi4_ep>

00002cdc <__udivmodsi4_loop>:
    2cdc:	aa 1f       	adc	r26, r26
    2cde:	bb 1f       	adc	r27, r27
    2ce0:	ee 1f       	adc	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	a2 17       	cp	r26, r18
    2ce6:	b3 07       	cpc	r27, r19
    2ce8:	e4 07       	cpc	r30, r20
    2cea:	f5 07       	cpc	r31, r21
    2cec:	20 f0       	brcs	.+8      	; 0x2cf6 <__udivmodsi4_ep>
    2cee:	a2 1b       	sub	r26, r18
    2cf0:	b3 0b       	sbc	r27, r19
    2cf2:	e4 0b       	sbc	r30, r20
    2cf4:	f5 0b       	sbc	r31, r21

00002cf6 <__udivmodsi4_ep>:
    2cf6:	66 1f       	adc	r22, r22
    2cf8:	77 1f       	adc	r23, r23
    2cfa:	88 1f       	adc	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	1a 94       	dec	r1
    2d00:	69 f7       	brne	.-38     	; 0x2cdc <__udivmodsi4_loop>
    2d02:	60 95       	com	r22
    2d04:	70 95       	com	r23
    2d06:	80 95       	com	r24
    2d08:	90 95       	com	r25
    2d0a:	9b 01       	movw	r18, r22
    2d0c:	ac 01       	movw	r20, r24
    2d0e:	bd 01       	movw	r22, r26
    2d10:	cf 01       	movw	r24, r30
    2d12:	08 95       	ret

00002d14 <__udivmodhi4>:
    2d14:	aa 1b       	sub	r26, r26
    2d16:	bb 1b       	sub	r27, r27
    2d18:	51 e1       	ldi	r21, 0x11	; 17
    2d1a:	07 c0       	rjmp	.+14     	; 0x2d2a <__udivmodhi4_ep>

00002d1c <__udivmodhi4_loop>:
    2d1c:	aa 1f       	adc	r26, r26
    2d1e:	bb 1f       	adc	r27, r27
    2d20:	a6 17       	cp	r26, r22
    2d22:	b7 07       	cpc	r27, r23
    2d24:	10 f0       	brcs	.+4      	; 0x2d2a <__udivmodhi4_ep>
    2d26:	a6 1b       	sub	r26, r22
    2d28:	b7 0b       	sbc	r27, r23

00002d2a <__udivmodhi4_ep>:
    2d2a:	88 1f       	adc	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	5a 95       	dec	r21
    2d30:	a9 f7       	brne	.-22     	; 0x2d1c <__udivmodhi4_loop>
    2d32:	80 95       	com	r24
    2d34:	90 95       	com	r25
    2d36:	bc 01       	movw	r22, r24
    2d38:	cd 01       	movw	r24, r26
    2d3a:	08 95       	ret

00002d3c <__prologue_saves__>:
    2d3c:	2f 92       	push	r2
    2d3e:	3f 92       	push	r3
    2d40:	4f 92       	push	r4
    2d42:	5f 92       	push	r5
    2d44:	6f 92       	push	r6
    2d46:	7f 92       	push	r7
    2d48:	8f 92       	push	r8
    2d4a:	9f 92       	push	r9
    2d4c:	af 92       	push	r10
    2d4e:	bf 92       	push	r11
    2d50:	cf 92       	push	r12
    2d52:	df 92       	push	r13
    2d54:	ef 92       	push	r14
    2d56:	ff 92       	push	r15
    2d58:	0f 93       	push	r16
    2d5a:	1f 93       	push	r17
    2d5c:	cf 93       	push	r28
    2d5e:	df 93       	push	r29
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	ca 1b       	sub	r28, r26
    2d66:	db 0b       	sbc	r29, r27
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	cd bf       	out	0x3d, r28	; 61
    2d72:	09 94       	ijmp

00002d74 <__epilogue_restores__>:
    2d74:	2a 88       	ldd	r2, Y+18	; 0x12
    2d76:	39 88       	ldd	r3, Y+17	; 0x11
    2d78:	48 88       	ldd	r4, Y+16	; 0x10
    2d7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d80:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d82:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d84:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d86:	b9 84       	ldd	r11, Y+9	; 0x09
    2d88:	c8 84       	ldd	r12, Y+8	; 0x08
    2d8a:	df 80       	ldd	r13, Y+7	; 0x07
    2d8c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d8e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d90:	0c 81       	ldd	r16, Y+4	; 0x04
    2d92:	1b 81       	ldd	r17, Y+3	; 0x03
    2d94:	aa 81       	ldd	r26, Y+2	; 0x02
    2d96:	b9 81       	ldd	r27, Y+1	; 0x01
    2d98:	ce 0f       	add	r28, r30
    2d9a:	d1 1d       	adc	r29, r1
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	de bf       	out	0x3e, r29	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	cd bf       	out	0x3d, r28	; 61
    2da6:	ed 01       	movw	r28, r26
    2da8:	08 95       	ret

00002daa <_exit>:
    2daa:	f8 94       	cli

00002dac <__stop_program>:
    2dac:	ff cf       	rjmp	.-2      	; 0x2dac <__stop_program>
