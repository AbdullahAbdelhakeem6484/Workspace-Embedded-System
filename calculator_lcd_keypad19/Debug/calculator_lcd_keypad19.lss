
calculator_lcd_keypad19.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d4a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002d4a  00002dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000022ec  00000000  00000000  00002de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d49  00000000  00000000  000050d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000060c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000099ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a567  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <main>
      7a:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e7       	ldi	r26, 0x7B	; 123
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e7       	ldi	r24, 0x7B	; 123
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidSetPinDir>:




void DIO_voidSetPinDir(u8 Port,u8 Pin,u8 Dir)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_voidSetPinDir+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_voidSetPinDir+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03

switch(Port)
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	28 2f       	mov	r18, r24
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	3d 83       	std	Y+5, r19	; 0x05
     b52:	2c 83       	std	Y+4, r18	; 0x04
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	9d 81       	ldd	r25, Y+5	; 0x05
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	91 05       	cpc	r25, r1
     b5c:	09 f4       	brne	.+2      	; 0xb60 <DIO_voidSetPinDir+0x2a>
     b5e:	43 c0       	rjmp	.+134    	; 0xbe6 <DIO_voidSetPinDir+0xb0>
     b60:	2c 81       	ldd	r18, Y+4	; 0x04
     b62:	3d 81       	ldd	r19, Y+5	; 0x05
     b64:	22 30       	cpi	r18, 0x02	; 2
     b66:	31 05       	cpc	r19, r1
     b68:	2c f4       	brge	.+10     	; 0xb74 <DIO_voidSetPinDir+0x3e>
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	9d 81       	ldd	r25, Y+5	; 0x05
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	71 f0       	breq	.+28     	; 0xb8e <DIO_voidSetPinDir+0x58>
     b72:	bc c0       	rjmp	.+376    	; 0xcec <DIO_voidSetPinDir+0x1b6>
     b74:	2c 81       	ldd	r18, Y+4	; 0x04
     b76:	3d 81       	ldd	r19, Y+5	; 0x05
     b78:	22 30       	cpi	r18, 0x02	; 2
     b7a:	31 05       	cpc	r19, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <DIO_voidSetPinDir+0x4a>
     b7e:	5f c0       	rjmp	.+190    	; 0xc3e <DIO_voidSetPinDir+0x108>
     b80:	8c 81       	ldd	r24, Y+4	; 0x04
     b82:	9d 81       	ldd	r25, Y+5	; 0x05
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	91 05       	cpc	r25, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <DIO_voidSetPinDir+0x56>
     b8a:	85 c0       	rjmp	.+266    	; 0xc96 <DIO_voidSetPinDir+0x160>
     b8c:	af c0       	rjmp	.+350    	; 0xcec <DIO_voidSetPinDir+0x1b6>
{
	case 0:
		if(Dir==0)
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	88 23       	and	r24, r24
     b92:	a9 f4       	brne	.+42     	; 0xbbe <DIO_voidSetPinDir+0x88>
		{
			CLEAR_BIT(DDRA,Pin);
     b94:	aa e3       	ldi	r26, 0x3A	; 58
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	ea e3       	ldi	r30, 0x3A	; 58
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	48 2f       	mov	r20, r24
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	02 2e       	mov	r0, r18
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <DIO_voidSetPinDir+0x7c>
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	0a 94       	dec	r0
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <DIO_voidSetPinDir+0x78>
     bb6:	80 95       	com	r24
     bb8:	84 23       	and	r24, r20
     bba:	8c 93       	st	X, r24
     bbc:	97 c0       	rjmp	.+302    	; 0xcec <DIO_voidSetPinDir+0x1b6>

		}
		else
		{
			SET_BIT(DDRA,Pin);
     bbe:	aa e3       	ldi	r26, 0x3A	; 58
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	ea e3       	ldi	r30, 0x3A	; 58
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	48 2f       	mov	r20, r24
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 2e       	mov	r0, r18
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_voidSetPinDir+0xa6>
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	0a 94       	dec	r0
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_voidSetPinDir+0xa2>
     be0:	84 2b       	or	r24, r20
     be2:	8c 93       	st	X, r24
     be4:	83 c0       	rjmp	.+262    	; 0xcec <DIO_voidSetPinDir+0x1b6>



		break;
	case 1:
		if(Dir==0)
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	88 23       	and	r24, r24
     bea:	a9 f4       	brne	.+42     	; 0xc16 <DIO_voidSetPinDir+0xe0>
				{
					CLEAR_BIT(DDRB,Pin);
     bec:	a7 e3       	ldi	r26, 0x37	; 55
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e7 e3       	ldi	r30, 0x37	; 55
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	48 2f       	mov	r20, r24
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	02 2e       	mov	r0, r18
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <DIO_voidSetPinDir+0xd4>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <DIO_voidSetPinDir+0xd0>
     c0e:	80 95       	com	r24
     c10:	84 23       	and	r24, r20
     c12:	8c 93       	st	X, r24
     c14:	6b c0       	rjmp	.+214    	; 0xcec <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRB,Pin);
     c16:	a7 e3       	ldi	r26, 0x37	; 55
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e7 e3       	ldi	r30, 0x37	; 55
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	48 2f       	mov	r20, r24
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	02 2e       	mov	r0, r18
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <DIO_voidSetPinDir+0xfe>
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	0a 94       	dec	r0
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <DIO_voidSetPinDir+0xfa>
     c38:	84 2b       	or	r24, r20
     c3a:	8c 93       	st	X, r24
     c3c:	57 c0       	rjmp	.+174    	; 0xcec <DIO_voidSetPinDir+0x1b6>
				}


		break;
	case 2:
		if(Dir==0)
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	88 23       	and	r24, r24
     c42:	a9 f4       	brne	.+42     	; 0xc6e <DIO_voidSetPinDir+0x138>
				{
					CLEAR_BIT(DDRC,Pin);
     c44:	a4 e3       	ldi	r26, 0x34	; 52
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e4 e3       	ldi	r30, 0x34	; 52
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 2e       	mov	r0, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_voidSetPinDir+0x12c>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_voidSetPinDir+0x128>
     c66:	80 95       	com	r24
     c68:	84 23       	and	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	3f c0       	rjmp	.+126    	; 0xcec <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRC,Pin);
     c6e:	a4 e3       	ldi	r26, 0x34	; 52
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e4 e3       	ldi	r30, 0x34	; 52
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	48 2f       	mov	r20, r24
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 2e       	mov	r0, r18
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <DIO_voidSetPinDir+0x156>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <DIO_voidSetPinDir+0x152>
     c90:	84 2b       	or	r24, r20
     c92:	8c 93       	st	X, r24
     c94:	2b c0       	rjmp	.+86     	; 0xcec <DIO_voidSetPinDir+0x1b6>


		break;

	case 3:
		if(Dir==0)
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	88 23       	and	r24, r24
     c9a:	a9 f4       	brne	.+42     	; 0xcc6 <DIO_voidSetPinDir+0x190>
				{
					CLEAR_BIT(DDRD,Pin);
     c9c:	a1 e3       	ldi	r26, 0x31	; 49
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e1 e3       	ldi	r30, 0x31	; 49
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	48 2f       	mov	r20, r24
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	02 2e       	mov	r0, r18
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <DIO_voidSetPinDir+0x184>
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	0a 94       	dec	r0
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <DIO_voidSetPinDir+0x180>
     cbe:	80 95       	com	r24
     cc0:	84 23       	and	r24, r20
     cc2:	8c 93       	st	X, r24
     cc4:	13 c0       	rjmp	.+38     	; 0xcec <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRD,Pin);
     cc6:	a1 e3       	ldi	r26, 0x31	; 49
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e1 e3       	ldi	r30, 0x31	; 49
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	48 2f       	mov	r20, r24
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	02 2e       	mov	r0, r18
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <DIO_voidSetPinDir+0x1ae>
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	0a 94       	dec	r0
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <DIO_voidSetPinDir+0x1aa>
     ce8:	84 2b       	or	r24, r20
     cea:	8c 93       	st	X, r24

		break;
}


}
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	08 95       	ret

00000cfc <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Port,u8 Pin,u8 Value)
{
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	00 d0       	rcall	.+0      	; 0xd02 <DIO_voidSetPinValue+0x6>
     d02:	00 d0       	rcall	.+0      	; 0xd04 <DIO_voidSetPinValue+0x8>
     d04:	0f 92       	push	r0
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	6a 83       	std	Y+2, r22	; 0x02
     d0e:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3d 83       	std	Y+5, r19	; 0x05
     d18:	2c 83       	std	Y+4, r18	; 0x04
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	9d 81       	ldd	r25, Y+5	; 0x05
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <DIO_voidSetPinValue+0x2a>
     d24:	43 c0       	rjmp	.+134    	; 0xdac <DIO_voidSetPinValue+0xb0>
     d26:	2c 81       	ldd	r18, Y+4	; 0x04
     d28:	3d 81       	ldd	r19, Y+5	; 0x05
     d2a:	22 30       	cpi	r18, 0x02	; 2
     d2c:	31 05       	cpc	r19, r1
     d2e:	2c f4       	brge	.+10     	; 0xd3a <DIO_voidSetPinValue+0x3e>
     d30:	8c 81       	ldd	r24, Y+4	; 0x04
     d32:	9d 81       	ldd	r25, Y+5	; 0x05
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	71 f0       	breq	.+28     	; 0xd54 <DIO_voidSetPinValue+0x58>
     d38:	bc c0       	rjmp	.+376    	; 0xeb2 <DIO_voidSetPinValue+0x1b6>
     d3a:	2c 81       	ldd	r18, Y+4	; 0x04
     d3c:	3d 81       	ldd	r19, Y+5	; 0x05
     d3e:	22 30       	cpi	r18, 0x02	; 2
     d40:	31 05       	cpc	r19, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <DIO_voidSetPinValue+0x4a>
     d44:	5f c0       	rjmp	.+190    	; 0xe04 <DIO_voidSetPinValue+0x108>
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	9d 81       	ldd	r25, Y+5	; 0x05
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	91 05       	cpc	r25, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <DIO_voidSetPinValue+0x56>
     d50:	85 c0       	rjmp	.+266    	; 0xe5c <DIO_voidSetPinValue+0x160>
     d52:	af c0       	rjmp	.+350    	; 0xeb2 <DIO_voidSetPinValue+0x1b6>
	{
		case 0:
			if(Value==0)
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	88 23       	and	r24, r24
     d58:	a9 f4       	brne	.+42     	; 0xd84 <DIO_voidSetPinValue+0x88>
					{
						CLEAR_BIT(PORTA,Pin);
     d5a:	ab e3       	ldi	r26, 0x3B	; 59
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	eb e3       	ldi	r30, 0x3B	; 59
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_voidSetPinValue+0x7c>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_voidSetPinValue+0x78>
     d7c:	80 95       	com	r24
     d7e:	84 23       	and	r24, r20
     d80:	8c 93       	st	X, r24
     d82:	97 c0       	rjmp	.+302    	; 0xeb2 <DIO_voidSetPinValue+0x1b6>

					}
					else
					{
						SET_BIT(PORTA,Pin);
     d84:	ab e3       	ldi	r26, 0x3B	; 59
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	eb e3       	ldi	r30, 0x3B	; 59
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_voidSetPinValue+0xa6>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_voidSetPinValue+0xa2>
     da6:	84 2b       	or	r24, r20
     da8:	8c 93       	st	X, r24
     daa:	83 c0       	rjmp	.+262    	; 0xeb2 <DIO_voidSetPinValue+0x1b6>
					}


			break;
		case 1:
			if(Value==0)
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	88 23       	and	r24, r24
     db0:	a9 f4       	brne	.+42     	; 0xddc <DIO_voidSetPinValue+0xe0>
				{
				CLEAR_BIT(PORTB,Pin);
     db2:	a8 e3       	ldi	r26, 0x38	; 56
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e8 e3       	ldi	r30, 0x38	; 56
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_voidSetPinValue+0xd4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_voidSetPinValue+0xd0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	6b c0       	rjmp	.+214    	; 0xeb2 <DIO_voidSetPinValue+0x1b6>

				}
				else
				{
				SET_BIT(PORTB,Pin);
     ddc:	a8 e3       	ldi	r26, 0x38	; 56
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e8 e3       	ldi	r30, 0x38	; 56
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <DIO_voidSetPinValue+0xfe>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <DIO_voidSetPinValue+0xfa>
     dfe:	84 2b       	or	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	57 c0       	rjmp	.+174    	; 0xeb2 <DIO_voidSetPinValue+0x1b6>
				}

			break;
		case 2:
			if(Value==0)
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	88 23       	and	r24, r24
     e08:	a9 f4       	brne	.+42     	; 0xe34 <DIO_voidSetPinValue+0x138>
				{
				CLEAR_BIT(PORTC,Pin);
     e0a:	a5 e3       	ldi	r26, 0x35	; 53
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e3       	ldi	r30, 0x35	; 53
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_voidSetPinValue+0x12c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_voidSetPinValue+0x128>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	3f c0       	rjmp	.+126    	; 0xeb2 <DIO_voidSetPinValue+0x1b6>

				}
				else
				{
					SET_BIT(PORTC,Pin);
     e34:	a5 e3       	ldi	r26, 0x35	; 53
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e5 e3       	ldi	r30, 0x35	; 53
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_voidSetPinValue+0x156>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_voidSetPinValue+0x152>
     e56:	84 2b       	or	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	2b c0       	rjmp	.+86     	; 0xeb2 <DIO_voidSetPinValue+0x1b6>
				}
			break;

		case 3:
			if(Value==0)
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	88 23       	and	r24, r24
     e60:	a9 f4       	brne	.+42     	; 0xe8c <DIO_voidSetPinValue+0x190>
					{
					CLEAR_BIT(PORTD,Pin);
     e62:	a2 e3       	ldi	r26, 0x32	; 50
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e2 e3       	ldi	r30, 0x32	; 50
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_voidSetPinValue+0x184>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_voidSetPinValue+0x180>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	13 c0       	rjmp	.+38     	; 0xeb2 <DIO_voidSetPinValue+0x1b6>

					}
					else
					{
						SET_BIT(PORTD,Pin);
     e8c:	a2 e3       	ldi	r26, 0x32	; 50
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e2 e3       	ldi	r30, 0x32	; 50
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_voidSetPinValue+0x1ae>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_voidSetPinValue+0x1aa>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24

			break;
	}


}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue(u8 Port,u8 Pin)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <DIO_voidTogglePinValue+0x6>
     ec8:	00 d0       	rcall	.+0      	; 0xeca <DIO_voidTogglePinValue+0x8>
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	3c 83       	std	Y+4, r19	; 0x04
     eda:	2b 83       	std	Y+3, r18	; 0x03
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	91 05       	cpc	r25, r1
     ee4:	49 f1       	breq	.+82     	; 0xf38 <DIO_voidTogglePinValue+0x76>
     ee6:	2b 81       	ldd	r18, Y+3	; 0x03
     ee8:	3c 81       	ldd	r19, Y+4	; 0x04
     eea:	22 30       	cpi	r18, 0x02	; 2
     eec:	31 05       	cpc	r19, r1
     eee:	2c f4       	brge	.+10     	; 0xefa <DIO_voidTogglePinValue+0x38>
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	9c 81       	ldd	r25, Y+4	; 0x04
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	61 f0       	breq	.+24     	; 0xf10 <DIO_voidTogglePinValue+0x4e>
     ef8:	5a c0       	rjmp	.+180    	; 0xfae <DIO_voidTogglePinValue+0xec>
     efa:	2b 81       	ldd	r18, Y+3	; 0x03
     efc:	3c 81       	ldd	r19, Y+4	; 0x04
     efe:	22 30       	cpi	r18, 0x02	; 2
     f00:	31 05       	cpc	r19, r1
     f02:	71 f1       	breq	.+92     	; 0xf60 <DIO_voidTogglePinValue+0x9e>
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	91 05       	cpc	r25, r1
     f0c:	e9 f1       	breq	.+122    	; 0xf88 <DIO_voidTogglePinValue+0xc6>
     f0e:	4f c0       	rjmp	.+158    	; 0xfae <DIO_voidTogglePinValue+0xec>
	{
	case 0:
		TOGGLE_BIT(PORTA,Pin);
     f10:	ab e3       	ldi	r26, 0x3B	; 59
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	eb e3       	ldi	r30, 0x3B	; 59
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_voidTogglePinValue+0x6c>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_voidTogglePinValue+0x68>
     f32:	84 27       	eor	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	3b c0       	rjmp	.+118    	; 0xfae <DIO_voidTogglePinValue+0xec>

		break;
	case 1:
		TOGGLE_BIT(PORTB,Pin);
     f38:	a8 e3       	ldi	r26, 0x38	; 56
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e8 e3       	ldi	r30, 0x38	; 56
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_voidTogglePinValue+0x94>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_voidTogglePinValue+0x90>
     f5a:	84 27       	eor	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	27 c0       	rjmp	.+78     	; 0xfae <DIO_voidTogglePinValue+0xec>

		break;
	case 2:
		TOGGLE_BIT(PORTC,Pin);
     f60:	a5 e3       	ldi	r26, 0x35	; 53
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e3       	ldi	r30, 0x35	; 53
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_voidTogglePinValue+0xbc>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_voidTogglePinValue+0xb8>
     f82:	84 27       	eor	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	13 c0       	rjmp	.+38     	; 0xfae <DIO_voidTogglePinValue+0xec>

		break;

	case 3:
		TOGGLE_BIT(PORTD,Pin);
     f88:	a2 e3       	ldi	r26, 0x32	; 50
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e2 e3       	ldi	r30, 0x32	; 50
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_voidTogglePinValue+0xe4>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <DIO_voidTogglePinValue+0xe0>
     faa:	84 27       	eor	r24, r20
     fac:	8c 93       	st	X, r24

		break;

	}

}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 PORT,u8 Pin)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <DIO_u8GetPinValue+0x6>
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <DIO_u8GetPinValue+0x8>
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <DIO_u8GetPinValue+0xa>
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	6a 83       	std	Y+2, r22	; 0x02
switch(PORT)
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	3d 83       	std	Y+5, r19	; 0x05
     fd6:	2c 83       	std	Y+4, r18	; 0x04
     fd8:	4c 81       	ldd	r20, Y+4	; 0x04
     fda:	5d 81       	ldd	r21, Y+5	; 0x05
     fdc:	41 30       	cpi	r20, 0x01	; 1
     fde:	51 05       	cpc	r21, r1
     fe0:	49 f1       	breq	.+82     	; 0x1034 <DIO_u8GetPinValue+0x78>
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	91 05       	cpc	r25, r1
     fea:	34 f4       	brge	.+12     	; 0xff8 <DIO_u8GetPinValue+0x3c>
     fec:	2c 81       	ldd	r18, Y+4	; 0x04
     fee:	3d 81       	ldd	r19, Y+5	; 0x05
     ff0:	21 15       	cp	r18, r1
     ff2:	31 05       	cpc	r19, r1
     ff4:	61 f0       	breq	.+24     	; 0x100e <DIO_u8GetPinValue+0x52>
     ff6:	57 c0       	rjmp	.+174    	; 0x10a6 <DIO_u8GetPinValue+0xea>
     ff8:	4c 81       	ldd	r20, Y+4	; 0x04
     ffa:	5d 81       	ldd	r21, Y+5	; 0x05
     ffc:	42 30       	cpi	r20, 0x02	; 2
     ffe:	51 05       	cpc	r21, r1
    1000:	61 f1       	breq	.+88     	; 0x105a <DIO_u8GetPinValue+0x9e>
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	91 05       	cpc	r25, r1
    100a:	d1 f1       	breq	.+116    	; 0x1080 <DIO_u8GetPinValue+0xc4>
    100c:	4c c0       	rjmp	.+152    	; 0x10a6 <DIO_u8GetPinValue+0xea>
{
case 0:
	return  GET_BIT(PINA,Pin);
    100e:	e9 e3       	ldi	r30, 0x39	; 57
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	88 2f       	mov	r24, r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a9 01       	movw	r20, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_u8GetPinValue+0x6a>
    1022:	55 95       	asr	r21
    1024:	47 95       	ror	r20
    1026:	8a 95       	dec	r24
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_u8GetPinValue+0x66>
    102a:	ca 01       	movw	r24, r20
    102c:	58 2f       	mov	r21, r24
    102e:	51 70       	andi	r21, 0x01	; 1
    1030:	5b 83       	std	Y+3, r21	; 0x03
    1032:	3a c0       	rjmp	.+116    	; 0x10a8 <DIO_u8GetPinValue+0xec>

case 1:
	return GET_BIT(PINB,Pin);
    1034:	e6 e3       	ldi	r30, 0x36	; 54
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a9 01       	movw	r20, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_u8GetPinValue+0x90>
    1048:	55 95       	asr	r21
    104a:	47 95       	ror	r20
    104c:	8a 95       	dec	r24
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_u8GetPinValue+0x8c>
    1050:	ca 01       	movw	r24, r20
    1052:	58 2f       	mov	r21, r24
    1054:	51 70       	andi	r21, 0x01	; 1
    1056:	5b 83       	std	Y+3, r21	; 0x03
    1058:	27 c0       	rjmp	.+78     	; 0x10a8 <DIO_u8GetPinValue+0xec>
case 2:
	return GET_BIT(PINC,Pin);
    105a:	e3 e3       	ldi	r30, 0x33	; 51
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	a9 01       	movw	r20, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIO_u8GetPinValue+0xb6>
    106e:	55 95       	asr	r21
    1070:	47 95       	ror	r20
    1072:	8a 95       	dec	r24
    1074:	e2 f7       	brpl	.-8      	; 0x106e <DIO_u8GetPinValue+0xb2>
    1076:	ca 01       	movw	r24, r20
    1078:	58 2f       	mov	r21, r24
    107a:	51 70       	andi	r21, 0x01	; 1
    107c:	5b 83       	std	Y+3, r21	; 0x03
    107e:	14 c0       	rjmp	.+40     	; 0x10a8 <DIO_u8GetPinValue+0xec>
case 3:
	return GET_BIT(PIND,Pin);
    1080:	e0 e3       	ldi	r30, 0x30	; 48
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a9 01       	movw	r20, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_u8GetPinValue+0xdc>
    1094:	55 95       	asr	r21
    1096:	47 95       	ror	r20
    1098:	8a 95       	dec	r24
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_u8GetPinValue+0xd8>
    109c:	ca 01       	movw	r24, r20
    109e:	58 2f       	mov	r21, r24
    10a0:	51 70       	andi	r21, 0x01	; 1
    10a2:	5b 83       	std	Y+3, r21	; 0x03
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <DIO_u8GetPinValue+0xec>
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_u8GetPinValue+0xf0>


}


}
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	8e 83       	std	Y+6, r24	; 0x06
    10ac:	8e 81       	ldd	r24, Y+6	; 0x06
    10ae:	26 96       	adiw	r28, 0x06	; 6
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <LCD_voidInit>:
#include "DIO_interface.h"
#include "LCD_interface.h"
#include "LCD_config.h"

void LCD_voidInit(void)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	aa 97       	sbiw	r28, 0x2a	; 42
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61



	DIO_voidSetPinDir(D0_PORT,D0_PIN,OUTPUT);
    10d4:	83 e0       	ldi	r24, 0x03	; 3
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	41 e0       	ldi	r20, 0x01	; 1
    10da:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D1_PORT,D1_PIN,OUTPUT);
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	41 e0       	ldi	r20, 0x01	; 1
    10e4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D2_PORT,D2_PIN,OUTPUT);
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	62 e0       	ldi	r22, 0x02	; 2
    10ec:	41 e0       	ldi	r20, 0x01	; 1
    10ee:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D3_PORT,D3_PIN,OUTPUT);
    10f2:	83 e0       	ldi	r24, 0x03	; 3
    10f4:	63 e0       	ldi	r22, 0x03	; 3
    10f6:	41 e0       	ldi	r20, 0x01	; 1
    10f8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D4_PORT,D4_PIN,OUTPUT);
    10fc:	83 e0       	ldi	r24, 0x03	; 3
    10fe:	64 e0       	ldi	r22, 0x04	; 4
    1100:	41 e0       	ldi	r20, 0x01	; 1
    1102:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D5_PORT,D5_PIN,OUTPUT);
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	65 e0       	ldi	r22, 0x05	; 5
    110a:	41 e0       	ldi	r20, 0x01	; 1
    110c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D6_PORT,D6_PIN,OUTPUT);
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	66 e0       	ldi	r22, 0x06	; 6
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D7_PORT,D7_PIN,OUTPUT);
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	67 e0       	ldi	r22, 0x07	; 7
    111e:	41 e0       	ldi	r20, 0x01	; 1
    1120:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>

	DIO_voidSetPinDir(RS_PORT,RS_PIN,OUTPUT);
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	41 e0       	ldi	r20, 0x01	; 1
    112a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(RW_PORT,RW_PIN,OUTPUT);
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(EN_PORT,EN_PIN,OUTPUT);
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	62 e0       	ldi	r22, 0x02	; 2
    113c:	41 e0       	ldi	r20, 0x01	; 1
    113e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>

	LCD_voidSendCommand(0x38);    //turn on
    1142:	88 e3       	ldi	r24, 0x38	; 56
    1144:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <LCD_voidSendCommand>
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a0 ea       	ldi	r26, 0xA0	; 160
    114e:	b0 e4       	ldi	r27, 0x40	; 64
    1150:	8f a3       	std	Y+39, r24	; 0x27
    1152:	98 a7       	std	Y+40, r25	; 0x28
    1154:	a9 a7       	std	Y+41, r26	; 0x29
    1156:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1158:	6f a1       	ldd	r22, Y+39	; 0x27
    115a:	78 a5       	ldd	r23, Y+40	; 0x28
    115c:	89 a5       	ldd	r24, Y+41	; 0x29
    115e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e8       	ldi	r19, 0x80	; 128
    1164:	4b e3       	ldi	r20, 0x3B	; 59
    1166:	55 e4       	ldi	r21, 0x45	; 69
    1168:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	8b a3       	std	Y+35, r24	; 0x23
    1172:	9c a3       	std	Y+36, r25	; 0x24
    1174:	ad a3       	std	Y+37, r26	; 0x25
    1176:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1178:	6b a1       	ldd	r22, Y+35	; 0x23
    117a:	7c a1       	ldd	r23, Y+36	; 0x24
    117c:	8d a1       	ldd	r24, Y+37	; 0x25
    117e:	9e a1       	ldd	r25, Y+38	; 0x26
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    118c:	88 23       	and	r24, r24
    118e:	2c f4       	brge	.+10     	; 0x119a <LCD_voidInit+0xda>
		__ticks = 1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9a a3       	std	Y+34, r25	; 0x22
    1196:	89 a3       	std	Y+33, r24	; 0x21
    1198:	3f c0       	rjmp	.+126    	; 0x1218 <LCD_voidInit+0x158>
	else if (__tmp > 65535)
    119a:	6b a1       	ldd	r22, Y+35	; 0x23
    119c:	7c a1       	ldd	r23, Y+36	; 0x24
    119e:	8d a1       	ldd	r24, Y+37	; 0x25
    11a0:	9e a1       	ldd	r25, Y+38	; 0x26
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	3f ef       	ldi	r19, 0xFF	; 255
    11a6:	4f e7       	ldi	r20, 0x7F	; 127
    11a8:	57 e4       	ldi	r21, 0x47	; 71
    11aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11ae:	18 16       	cp	r1, r24
    11b0:	4c f5       	brge	.+82     	; 0x1204 <LCD_voidInit+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b2:	6f a1       	ldd	r22, Y+39	; 0x27
    11b4:	78 a5       	ldd	r23, Y+40	; 0x28
    11b6:	89 a5       	ldd	r24, Y+41	; 0x29
    11b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e2       	ldi	r20, 0x20	; 32
    11c0:	51 e4       	ldi	r21, 0x41	; 65
    11c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	9a a3       	std	Y+34, r25	; 0x22
    11d8:	89 a3       	std	Y+33, r24	; 0x21
    11da:	0f c0       	rjmp	.+30     	; 0x11fa <LCD_voidInit+0x13a>
    11dc:	8c e2       	ldi	r24, 0x2C	; 44
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	98 a3       	std	Y+32, r25	; 0x20
    11e2:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11e6:	98 a1       	ldd	r25, Y+32	; 0x20
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <LCD_voidInit+0x128>
    11ec:	98 a3       	std	Y+32, r25	; 0x20
    11ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f0:	89 a1       	ldd	r24, Y+33	; 0x21
    11f2:	9a a1       	ldd	r25, Y+34	; 0x22
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	9a a3       	std	Y+34, r25	; 0x22
    11f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fa:	89 a1       	ldd	r24, Y+33	; 0x21
    11fc:	9a a1       	ldd	r25, Y+34	; 0x22
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	69 f7       	brne	.-38     	; 0x11dc <LCD_voidInit+0x11c>
    1202:	14 c0       	rjmp	.+40     	; 0x122c <LCD_voidInit+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1204:	6b a1       	ldd	r22, Y+35	; 0x23
    1206:	7c a1       	ldd	r23, Y+36	; 0x24
    1208:	8d a1       	ldd	r24, Y+37	; 0x25
    120a:	9e a1       	ldd	r25, Y+38	; 0x26
    120c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9a a3       	std	Y+34, r25	; 0x22
    1216:	89 a3       	std	Y+33, r24	; 0x21
    1218:	89 a1       	ldd	r24, Y+33	; 0x21
    121a:	9a a1       	ldd	r25, Y+34	; 0x22
    121c:	9e 8f       	std	Y+30, r25	; 0x1e
    121e:	8d 8f       	std	Y+29, r24	; 0x1d
    1220:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1222:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <LCD_voidInit+0x164>
    1228:	9e 8f       	std	Y+30, r25	; 0x1e
    122a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(0x0C);   //make cursor invisible
    122c:	8c e0       	ldi	r24, 0x0C	; 12
    122e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <LCD_voidSendCommand>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a0 ea       	ldi	r26, 0xA0	; 160
    1238:	b0 e4       	ldi	r27, 0x40	; 64
    123a:	89 8f       	std	Y+25, r24	; 0x19
    123c:	9a 8f       	std	Y+26, r25	; 0x1a
    123e:	ab 8f       	std	Y+27, r26	; 0x1b
    1240:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1242:	69 8d       	ldd	r22, Y+25	; 0x19
    1244:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1246:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1248:	9c 8d       	ldd	r25, Y+28	; 0x1c
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e8       	ldi	r19, 0x80	; 128
    124e:	4b e3       	ldi	r20, 0x3B	; 59
    1250:	55 e4       	ldi	r21, 0x45	; 69
    1252:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	8d 8b       	std	Y+21, r24	; 0x15
    125c:	9e 8b       	std	Y+22, r25	; 0x16
    125e:	af 8b       	std	Y+23, r26	; 0x17
    1260:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1262:	6d 89       	ldd	r22, Y+21	; 0x15
    1264:	7e 89       	ldd	r23, Y+22	; 0x16
    1266:	8f 89       	ldd	r24, Y+23	; 0x17
    1268:	98 8d       	ldd	r25, Y+24	; 0x18
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e8       	ldi	r20, 0x80	; 128
    1270:	5f e3       	ldi	r21, 0x3F	; 63
    1272:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1276:	88 23       	and	r24, r24
    1278:	2c f4       	brge	.+10     	; 0x1284 <LCD_voidInit+0x1c4>
		__ticks = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	9c 8b       	std	Y+20, r25	; 0x14
    1280:	8b 8b       	std	Y+19, r24	; 0x13
    1282:	3f c0       	rjmp	.+126    	; 0x1302 <LCD_voidInit+0x242>
	else if (__tmp > 65535)
    1284:	6d 89       	ldd	r22, Y+21	; 0x15
    1286:	7e 89       	ldd	r23, Y+22	; 0x16
    1288:	8f 89       	ldd	r24, Y+23	; 0x17
    128a:	98 8d       	ldd	r25, Y+24	; 0x18
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	3f ef       	ldi	r19, 0xFF	; 255
    1290:	4f e7       	ldi	r20, 0x7F	; 127
    1292:	57 e4       	ldi	r21, 0x47	; 71
    1294:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1298:	18 16       	cp	r1, r24
    129a:	4c f5       	brge	.+82     	; 0x12ee <LCD_voidInit+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129c:	69 8d       	ldd	r22, Y+25	; 0x19
    129e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e2       	ldi	r20, 0x20	; 32
    12aa:	51 e4       	ldi	r21, 0x41	; 65
    12ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	bc 01       	movw	r22, r24
    12b6:	cd 01       	movw	r24, r26
    12b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	9c 8b       	std	Y+20, r25	; 0x14
    12c2:	8b 8b       	std	Y+19, r24	; 0x13
    12c4:	0f c0       	rjmp	.+30     	; 0x12e4 <LCD_voidInit+0x224>
    12c6:	8c e2       	ldi	r24, 0x2C	; 44
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	9a 8b       	std	Y+18, r25	; 0x12
    12cc:	89 8b       	std	Y+17, r24	; 0x11
    12ce:	89 89       	ldd	r24, Y+17	; 0x11
    12d0:	9a 89       	ldd	r25, Y+18	; 0x12
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <LCD_voidInit+0x212>
    12d6:	9a 8b       	std	Y+18, r25	; 0x12
    12d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12da:	8b 89       	ldd	r24, Y+19	; 0x13
    12dc:	9c 89       	ldd	r25, Y+20	; 0x14
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	9c 8b       	std	Y+20, r25	; 0x14
    12e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e4:	8b 89       	ldd	r24, Y+19	; 0x13
    12e6:	9c 89       	ldd	r25, Y+20	; 0x14
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	69 f7       	brne	.-38     	; 0x12c6 <LCD_voidInit+0x206>
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <LCD_voidInit+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ee:	6d 89       	ldd	r22, Y+21	; 0x15
    12f0:	7e 89       	ldd	r23, Y+22	; 0x16
    12f2:	8f 89       	ldd	r24, Y+23	; 0x17
    12f4:	98 8d       	ldd	r25, Y+24	; 0x18
    12f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	9c 8b       	std	Y+20, r25	; 0x14
    1300:	8b 8b       	std	Y+19, r24	; 0x13
    1302:	8b 89       	ldd	r24, Y+19	; 0x13
    1304:	9c 89       	ldd	r25, Y+20	; 0x14
    1306:	98 8b       	std	Y+16, r25	; 0x10
    1308:	8f 87       	std	Y+15, r24	; 0x0f
    130a:	8f 85       	ldd	r24, Y+15	; 0x0f
    130c:	98 89       	ldd	r25, Y+16	; 0x10
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <LCD_voidInit+0x24e>
    1312:	98 8b       	std	Y+16, r25	; 0x10
    1314:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	LCD_voidSendCommand(0x01); //clear screan
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <LCD_voidSendCommand>
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a0 ea       	ldi	r26, 0xA0	; 160
    1322:	b0 e4       	ldi	r27, 0x40	; 64
    1324:	8b 87       	std	Y+11, r24	; 0x0b
    1326:	9c 87       	std	Y+12, r25	; 0x0c
    1328:	ad 87       	std	Y+13, r26	; 0x0d
    132a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132c:	6b 85       	ldd	r22, Y+11	; 0x0b
    132e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1330:	8d 85       	ldd	r24, Y+13	; 0x0d
    1332:	9e 85       	ldd	r25, Y+14	; 0x0e
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e8       	ldi	r19, 0x80	; 128
    1338:	4b e3       	ldi	r20, 0x3B	; 59
    133a:	55 e4       	ldi	r21, 0x45	; 69
    133c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	8f 83       	std	Y+7, r24	; 0x07
    1346:	98 87       	std	Y+8, r25	; 0x08
    1348:	a9 87       	std	Y+9, r26	; 0x09
    134a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    134c:	6f 81       	ldd	r22, Y+7	; 0x07
    134e:	78 85       	ldd	r23, Y+8	; 0x08
    1350:	89 85       	ldd	r24, Y+9	; 0x09
    1352:	9a 85       	ldd	r25, Y+10	; 0x0a
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1360:	88 23       	and	r24, r24
    1362:	2c f4       	brge	.+10     	; 0x136e <LCD_voidInit+0x2ae>
		__ticks = 1;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9e 83       	std	Y+6, r25	; 0x06
    136a:	8d 83       	std	Y+5, r24	; 0x05
    136c:	3f c0       	rjmp	.+126    	; 0x13ec <LCD_voidInit+0x32c>
	else if (__tmp > 65535)
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	3f ef       	ldi	r19, 0xFF	; 255
    137a:	4f e7       	ldi	r20, 0x7F	; 127
    137c:	57 e4       	ldi	r21, 0x47	; 71
    137e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1382:	18 16       	cp	r1, r24
    1384:	4c f5       	brge	.+82     	; 0x13d8 <LCD_voidInit+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1386:	6b 85       	ldd	r22, Y+11	; 0x0b
    1388:	7c 85       	ldd	r23, Y+12	; 0x0c
    138a:	8d 85       	ldd	r24, Y+13	; 0x0d
    138c:	9e 85       	ldd	r25, Y+14	; 0x0e
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e2       	ldi	r20, 0x20	; 32
    1394:	51 e4       	ldi	r21, 0x41	; 65
    1396:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	bc 01       	movw	r22, r24
    13a0:	cd 01       	movw	r24, r26
    13a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	9e 83       	std	Y+6, r25	; 0x06
    13ac:	8d 83       	std	Y+5, r24	; 0x05
    13ae:	0f c0       	rjmp	.+30     	; 0x13ce <LCD_voidInit+0x30e>
    13b0:	8c e2       	ldi	r24, 0x2C	; 44
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	9c 83       	std	Y+4, r25	; 0x04
    13b6:	8b 83       	std	Y+3, r24	; 0x03
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <LCD_voidInit+0x2fc>
    13c0:	9c 83       	std	Y+4, r25	; 0x04
    13c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	9e 83       	std	Y+6, r25	; 0x06
    13cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	69 f7       	brne	.-38     	; 0x13b0 <LCD_voidInit+0x2f0>
    13d6:	14 c0       	rjmp	.+40     	; 0x1400 <LCD_voidInit+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d8:	6f 81       	ldd	r22, Y+7	; 0x07
    13da:	78 85       	ldd	r23, Y+8	; 0x08
    13dc:	89 85       	ldd	r24, Y+9	; 0x09
    13de:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	9e 83       	std	Y+6, r25	; 0x06
    13ea:	8d 83       	std	Y+5, r24	; 0x05
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	9a 83       	std	Y+2, r25	; 0x02
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <LCD_voidInit+0x338>
    13fc:	9a 83       	std	Y+2, r25	; 0x02
    13fe:	89 83       	std	Y+1, r24	; 0x01





}
    1400:	aa 96       	adiw	r28, 0x2a	; 42
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <LCD_voidWriteCharacter>:

void LCD_voidWriteCharacter(u8 Character)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	2f 97       	sbiw	r28, 0x0f	; 15
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	8f 87       	std	Y+15, r24	; 0x0f


	DIO_voidSetPinValue(RS_PORT,RS_PIN,HIGH);
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	41 e0       	ldi	r20, 0x01	; 1
    142e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(RW_PORT,RW_PIN,LOW);
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

	DIO_voidSetPinValue(D0_PORT,D0_PIN,GET_BIT(Character,PIN_0));
    143c:	8f 85       	ldd	r24, Y+15	; 0x0f
    143e:	98 2f       	mov	r25, r24
    1440:	91 70       	andi	r25, 0x01	; 1
    1442:	83 e0       	ldi	r24, 0x03	; 3
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	49 2f       	mov	r20, r25
    1448:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D1_PORT,D1_PIN,GET_BIT(Character,PIN_1));
    144c:	8f 85       	ldd	r24, Y+15	; 0x0f
    144e:	86 95       	lsr	r24
    1450:	98 2f       	mov	r25, r24
    1452:	91 70       	andi	r25, 0x01	; 1
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	61 e0       	ldi	r22, 0x01	; 1
    1458:	49 2f       	mov	r20, r25
    145a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D2_PORT,D2_PIN,GET_BIT(Character,PIN_2));
    145e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1460:	86 95       	lsr	r24
    1462:	86 95       	lsr	r24
    1464:	98 2f       	mov	r25, r24
    1466:	91 70       	andi	r25, 0x01	; 1
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	62 e0       	ldi	r22, 0x02	; 2
    146c:	49 2f       	mov	r20, r25
    146e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D3_PORT,D3_PIN,GET_BIT(Character,PIN_3));
    1472:	8f 85       	ldd	r24, Y+15	; 0x0f
    1474:	86 95       	lsr	r24
    1476:	86 95       	lsr	r24
    1478:	86 95       	lsr	r24
    147a:	98 2f       	mov	r25, r24
    147c:	91 70       	andi	r25, 0x01	; 1
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	63 e0       	ldi	r22, 0x03	; 3
    1482:	49 2f       	mov	r20, r25
    1484:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN,GET_BIT(Character,PIN_4));
    1488:	8f 85       	ldd	r24, Y+15	; 0x0f
    148a:	82 95       	swap	r24
    148c:	8f 70       	andi	r24, 0x0F	; 15
    148e:	98 2f       	mov	r25, r24
    1490:	91 70       	andi	r25, 0x01	; 1
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	64 e0       	ldi	r22, 0x04	; 4
    1496:	49 2f       	mov	r20, r25
    1498:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN,GET_BIT(Character,PIN_5));
    149c:	8f 85       	ldd	r24, Y+15	; 0x0f
    149e:	82 95       	swap	r24
    14a0:	86 95       	lsr	r24
    14a2:	87 70       	andi	r24, 0x07	; 7
    14a4:	98 2f       	mov	r25, r24
    14a6:	91 70       	andi	r25, 0x01	; 1
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	65 e0       	ldi	r22, 0x05	; 5
    14ac:	49 2f       	mov	r20, r25
    14ae:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN,GET_BIT(Character,PIN_6));
    14b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b4:	82 95       	swap	r24
    14b6:	86 95       	lsr	r24
    14b8:	86 95       	lsr	r24
    14ba:	83 70       	andi	r24, 0x03	; 3
    14bc:	98 2f       	mov	r25, r24
    14be:	91 70       	andi	r25, 0x01	; 1
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	66 e0       	ldi	r22, 0x06	; 6
    14c4:	49 2f       	mov	r20, r25
    14c6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D7_PORT,D7_PIN,GET_BIT(Character,PIN_7));
    14ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    14cc:	98 2f       	mov	r25, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	99 27       	eor	r25, r25
    14d2:	99 1f       	adc	r25, r25
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	67 e0       	ldi	r22, 0x07	; 7
    14d8:	49 2f       	mov	r20, r25
    14da:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

	DIO_voidSetPinValue(EN_PORT,EN_PIN,HIGH);
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	62 e0       	ldi	r22, 0x02	; 2
    14e2:	41 e0       	ldi	r20, 0x01	; 1
    14e4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a0 e0       	ldi	r26, 0x00	; 0
    14ee:	b0 e4       	ldi	r27, 0x40	; 64
    14f0:	8b 87       	std	Y+11, r24	; 0x0b
    14f2:	9c 87       	std	Y+12, r25	; 0x0c
    14f4:	ad 87       	std	Y+13, r26	; 0x0d
    14f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    14fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e8       	ldi	r19, 0x80	; 128
    1504:	4b e3       	ldi	r20, 0x3B	; 59
    1506:	55 e4       	ldi	r21, 0x45	; 69
    1508:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	8f 83       	std	Y+7, r24	; 0x07
    1512:	98 87       	std	Y+8, r25	; 0x08
    1514:	a9 87       	std	Y+9, r26	; 0x09
    1516:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1518:	6f 81       	ldd	r22, Y+7	; 0x07
    151a:	78 85       	ldd	r23, Y+8	; 0x08
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e8       	ldi	r20, 0x80	; 128
    1526:	5f e3       	ldi	r21, 0x3F	; 63
    1528:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    152c:	88 23       	and	r24, r24
    152e:	2c f4       	brge	.+10     	; 0x153a <LCD_voidWriteCharacter+0x128>
		__ticks = 1;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	3f c0       	rjmp	.+126    	; 0x15b8 <LCD_voidWriteCharacter+0x1a6>
	else if (__tmp > 65535)
    153a:	6f 81       	ldd	r22, Y+7	; 0x07
    153c:	78 85       	ldd	r23, Y+8	; 0x08
    153e:	89 85       	ldd	r24, Y+9	; 0x09
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	3f ef       	ldi	r19, 0xFF	; 255
    1546:	4f e7       	ldi	r20, 0x7F	; 127
    1548:	57 e4       	ldi	r21, 0x47	; 71
    154a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    154e:	18 16       	cp	r1, r24
    1550:	4c f5       	brge	.+82     	; 0x15a4 <LCD_voidWriteCharacter+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1552:	6b 85       	ldd	r22, Y+11	; 0x0b
    1554:	7c 85       	ldd	r23, Y+12	; 0x0c
    1556:	8d 85       	ldd	r24, Y+13	; 0x0d
    1558:	9e 85       	ldd	r25, Y+14	; 0x0e
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e2       	ldi	r20, 0x20	; 32
    1560:	51 e4       	ldi	r21, 0x41	; 65
    1562:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	bc 01       	movw	r22, r24
    156c:	cd 01       	movw	r24, r26
    156e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9e 83       	std	Y+6, r25	; 0x06
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	0f c0       	rjmp	.+30     	; 0x159a <LCD_voidWriteCharacter+0x188>
    157c:	8c e2       	ldi	r24, 0x2C	; 44
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	9c 83       	std	Y+4, r25	; 0x04
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <LCD_voidWriteCharacter+0x176>
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	69 f7       	brne	.-38     	; 0x157c <LCD_voidWriteCharacter+0x16a>
    15a2:	14 c0       	rjmp	.+40     	; 0x15cc <LCD_voidWriteCharacter+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a4:	6f 81       	ldd	r22, Y+7	; 0x07
    15a6:	78 85       	ldd	r23, Y+8	; 0x08
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	f1 f7       	brne	.-4      	; 0x15c4 <LCD_voidWriteCharacter+0x1b2>
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN,LOW);
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	62 e0       	ldi	r22, 0x02	; 2
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

}
    15d6:	2f 96       	adiw	r28, 0x0f	; 15
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Command)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	2f 97       	sbiw	r28, 0x0f	; 15
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(RS_PORT,RS_PIN,LOW);
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(RW_PORT,RW_PIN,LOW);
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

	DIO_voidSetPinValue(D0_PORT,D0_PIN,GET_BIT(Command,PIN_0));
    1612:	8f 85       	ldd	r24, Y+15	; 0x0f
    1614:	98 2f       	mov	r25, r24
    1616:	91 70       	andi	r25, 0x01	; 1
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	49 2f       	mov	r20, r25
    161e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D1_PORT,D1_PIN,GET_BIT(Command,PIN_1));
    1622:	8f 85       	ldd	r24, Y+15	; 0x0f
    1624:	86 95       	lsr	r24
    1626:	98 2f       	mov	r25, r24
    1628:	91 70       	andi	r25, 0x01	; 1
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	49 2f       	mov	r20, r25
    1630:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D2_PORT,D2_PIN,GET_BIT(Command,PIN_2));
    1634:	8f 85       	ldd	r24, Y+15	; 0x0f
    1636:	86 95       	lsr	r24
    1638:	86 95       	lsr	r24
    163a:	98 2f       	mov	r25, r24
    163c:	91 70       	andi	r25, 0x01	; 1
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	62 e0       	ldi	r22, 0x02	; 2
    1642:	49 2f       	mov	r20, r25
    1644:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D3_PORT,D3_PIN,GET_BIT(Command,PIN_3));
    1648:	8f 85       	ldd	r24, Y+15	; 0x0f
    164a:	86 95       	lsr	r24
    164c:	86 95       	lsr	r24
    164e:	86 95       	lsr	r24
    1650:	98 2f       	mov	r25, r24
    1652:	91 70       	andi	r25, 0x01	; 1
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	63 e0       	ldi	r22, 0x03	; 3
    1658:	49 2f       	mov	r20, r25
    165a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN,GET_BIT(Command,PIN_4));
    165e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1660:	82 95       	swap	r24
    1662:	8f 70       	andi	r24, 0x0F	; 15
    1664:	98 2f       	mov	r25, r24
    1666:	91 70       	andi	r25, 0x01	; 1
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	64 e0       	ldi	r22, 0x04	; 4
    166c:	49 2f       	mov	r20, r25
    166e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN,GET_BIT(Command,PIN_5));
    1672:	8f 85       	ldd	r24, Y+15	; 0x0f
    1674:	82 95       	swap	r24
    1676:	86 95       	lsr	r24
    1678:	87 70       	andi	r24, 0x07	; 7
    167a:	98 2f       	mov	r25, r24
    167c:	91 70       	andi	r25, 0x01	; 1
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	65 e0       	ldi	r22, 0x05	; 5
    1682:	49 2f       	mov	r20, r25
    1684:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN,GET_BIT(Command,PIN_6));
    1688:	8f 85       	ldd	r24, Y+15	; 0x0f
    168a:	82 95       	swap	r24
    168c:	86 95       	lsr	r24
    168e:	86 95       	lsr	r24
    1690:	83 70       	andi	r24, 0x03	; 3
    1692:	98 2f       	mov	r25, r24
    1694:	91 70       	andi	r25, 0x01	; 1
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	66 e0       	ldi	r22, 0x06	; 6
    169a:	49 2f       	mov	r20, r25
    169c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D7_PORT,D7_PIN,GET_BIT(Command,PIN_7));
    16a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a2:	98 2f       	mov	r25, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	99 27       	eor	r25, r25
    16a8:	99 1f       	adc	r25, r25
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	67 e0       	ldi	r22, 0x07	; 7
    16ae:	49 2f       	mov	r20, r25
    16b0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

	DIO_voidSetPinValue(EN_PORT,EN_PIN,HIGH);
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	62 e0       	ldi	r22, 0x02	; 2
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	a0 e0       	ldi	r26, 0x00	; 0
    16c4:	b0 e4       	ldi	r27, 0x40	; 64
    16c6:	8b 87       	std	Y+11, r24	; 0x0b
    16c8:	9c 87       	std	Y+12, r25	; 0x0c
    16ca:	ad 87       	std	Y+13, r26	; 0x0d
    16cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e8       	ldi	r19, 0x80	; 128
    16da:	4b e3       	ldi	r20, 0x3B	; 59
    16dc:	55 e4       	ldi	r21, 0x45	; 69
    16de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	8f 83       	std	Y+7, r24	; 0x07
    16e8:	98 87       	std	Y+8, r25	; 0x08
    16ea:	a9 87       	std	Y+9, r26	; 0x09
    16ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ee:	6f 81       	ldd	r22, Y+7	; 0x07
    16f0:	78 85       	ldd	r23, Y+8	; 0x08
    16f2:	89 85       	ldd	r24, Y+9	; 0x09
    16f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e8       	ldi	r20, 0x80	; 128
    16fc:	5f e3       	ldi	r21, 0x3F	; 63
    16fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1702:	88 23       	and	r24, r24
    1704:	2c f4       	brge	.+10     	; 0x1710 <LCD_voidSendCommand+0x128>
		__ticks = 1;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9e 83       	std	Y+6, r25	; 0x06
    170c:	8d 83       	std	Y+5, r24	; 0x05
    170e:	3f c0       	rjmp	.+126    	; 0x178e <LCD_voidSendCommand+0x1a6>
	else if (__tmp > 65535)
    1710:	6f 81       	ldd	r22, Y+7	; 0x07
    1712:	78 85       	ldd	r23, Y+8	; 0x08
    1714:	89 85       	ldd	r24, Y+9	; 0x09
    1716:	9a 85       	ldd	r25, Y+10	; 0x0a
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	3f ef       	ldi	r19, 0xFF	; 255
    171c:	4f e7       	ldi	r20, 0x7F	; 127
    171e:	57 e4       	ldi	r21, 0x47	; 71
    1720:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1724:	18 16       	cp	r1, r24
    1726:	4c f5       	brge	.+82     	; 0x177a <LCD_voidSendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1728:	6b 85       	ldd	r22, Y+11	; 0x0b
    172a:	7c 85       	ldd	r23, Y+12	; 0x0c
    172c:	8d 85       	ldd	r24, Y+13	; 0x0d
    172e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e2       	ldi	r20, 0x20	; 32
    1736:	51 e4       	ldi	r21, 0x41	; 65
    1738:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	bc 01       	movw	r22, r24
    1742:	cd 01       	movw	r24, r26
    1744:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
    1750:	0f c0       	rjmp	.+30     	; 0x1770 <LCD_voidSendCommand+0x188>
    1752:	8c e2       	ldi	r24, 0x2C	; 44
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	9c 83       	std	Y+4, r25	; 0x04
    1758:	8b 83       	std	Y+3, r24	; 0x03
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <LCD_voidSendCommand+0x176>
    1762:	9c 83       	std	Y+4, r25	; 0x04
    1764:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	9e 81       	ldd	r25, Y+6	; 0x06
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	9e 83       	std	Y+6, r25	; 0x06
    176e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	9e 81       	ldd	r25, Y+6	; 0x06
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	69 f7       	brne	.-38     	; 0x1752 <LCD_voidSendCommand+0x16a>
    1778:	14 c0       	rjmp	.+40     	; 0x17a2 <LCD_voidSendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177a:	6f 81       	ldd	r22, Y+7	; 0x07
    177c:	78 85       	ldd	r23, Y+8	; 0x08
    177e:	89 85       	ldd	r24, Y+9	; 0x09
    1780:	9a 85       	ldd	r25, Y+10	; 0x0a
    1782:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	8d 83       	std	Y+5, r24	; 0x05
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	9e 81       	ldd	r25, Y+6	; 0x06
    1792:	9a 83       	std	Y+2, r25	; 0x02
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <LCD_voidSendCommand+0x1b2>
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN,LOW);
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	62 e0       	ldi	r22, 0x02	; 2
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>


}
    17ac:	2f 96       	adiw	r28, 0x0f	; 15
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <LCD_voidWriteString>:

void LCD_voidWriteString(u8 *string)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <LCD_voidWriteString+0x6>
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	0a c0       	rjmp	.+20     	; 0x17e2 <LCD_voidWriteString+0x24>

	while(*string!='\0')
	{
		LCD_voidWriteCharacter(*string);
    17ce:	e9 81       	ldd	r30, Y+1	; 0x01
    17d0:	fa 81       	ldd	r31, Y+2	; 0x02
    17d2:	80 81       	ld	r24, Z
    17d4:	0e 94 09 0a 	call	0x1412	; 0x1412 <LCD_voidWriteCharacter>
		string++;
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8 *string)
{

	while(*string!='\0')
    17e2:	e9 81       	ldd	r30, Y+1	; 0x01
    17e4:	fa 81       	ldd	r31, Y+2	; 0x02
    17e6:	80 81       	ld	r24, Z
    17e8:	88 23       	and	r24, r24
    17ea:	89 f7       	brne	.-30     	; 0x17ce <LCD_voidWriteString+0x10>
		string++;

	}


}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <main>:

// ***********************************************************
// Main program
//
int main(void)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	28 97       	sbiw	r28, 0x08	; 8
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
   char key;                     //key char for keeping record of pressed key
   int num1 = 0;                 //First number
    180a:	1d 82       	std	Y+5, r1	; 0x05
    180c:	1c 82       	std	Y+4, r1	; 0x04
   char func = '+';              //Function to be performed among two numbers
    180e:	8b e2       	ldi	r24, 0x2B	; 43
    1810:	8b 83       	std	Y+3, r24	; 0x03
   int num2 = 0;                 //Second number
    1812:	1a 82       	std	Y+2, r1	; 0x02
    1814:	19 82       	std	Y+1, r1	; 0x01

   cct_init();                   //Make input and output pins as required
    1816:	0e 94 a3 0c 	call	0x1946	; 0x1946 <cct_init>
   lcdinit();                    //Initilize LCD
    181a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <lcdinit>

   while(1)
   {

     //get numb1
     key = get_key();
    181e:	0e 94 c3 12 	call	0x2586	; 0x2586 <get_key>
    1822:	8e 83       	std	Y+6, r24	; 0x06
     writecmd(0x01);            //clear display
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <writecmd>

	 writedata(key);            //Echo the key pressed to LCD
    182c:	8e 81       	ldd	r24, Y+6	; 0x06
    182e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <writedata>
	 num1 = get_num(key);       //Get int number from char value, it checks for wrong input as well
    1832:	8e 81       	ldd	r24, Y+6	; 0x06
    1834:	0e 94 d6 12 	call	0x25ac	; 0x25ac <get_num>
    1838:	9d 83       	std	Y+5, r25	; 0x05
    183a:	8c 83       	std	Y+4, r24	; 0x04

	 if(num1!=Error)            //if correct input then proceed, num1==Error means wrong input
    183c:	8c 81       	ldd	r24, Y+4	; 0x04
    183e:	9d 81       	ldd	r25, Y+5	; 0x05
    1840:	8d 30       	cpi	r24, 0x0D	; 13
    1842:	91 05       	cpc	r25, r1
    1844:	61 f3       	breq	.-40     	; 0x181e <main+0x28>
	 {
		 //get function
		 key = get_key();
    1846:	0e 94 c3 12 	call	0x2586	; 0x2586 <get_key>
    184a:	8e 83       	std	Y+6, r24	; 0x06
		 writedata(key);                  //Echo the key pressed to LCD
    184c:	8e 81       	ldd	r24, Y+6	; 0x06
    184e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <writedata>
		 func = get_func(key);            //it checks for wrong func
    1852:	8e 81       	ldd	r24, Y+6	; 0x06
    1854:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <get_func>
    1858:	8b 83       	std	Y+3, r24	; 0x03

		 if(func!='e')                    //if correct input then proceed, func=='e' means wrong input
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	85 36       	cpi	r24, 0x65	; 101
    185e:	f9 f2       	breq	.-66     	; 0x181e <main+0x28>
		 {
			 //get numb2
			 key = get_key();
    1860:	0e 94 c3 12 	call	0x2586	; 0x2586 <get_key>
    1864:	8e 83       	std	Y+6, r24	; 0x06
			 writedata(key);              //Echo the key pressed to LCD
    1866:	8e 81       	ldd	r24, Y+6	; 0x06
    1868:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <writedata>
			 num2 = get_num(key);         //Get int number from char value, it checks for wrong input as well
    186c:	8e 81       	ldd	r24, Y+6	; 0x06
    186e:	0e 94 d6 12 	call	0x25ac	; 0x25ac <get_num>
    1872:	9a 83       	std	Y+2, r25	; 0x02
    1874:	89 83       	std	Y+1, r24	; 0x01

			 if(num2!=Error)              //if correct input then proceed, num2==Error means wrong input
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	8d 30       	cpi	r24, 0x0D	; 13
    187c:	91 05       	cpc	r25, r1
    187e:	79 f2       	breq	.-98     	; 0x181e <main+0x28>
			 {
				 //get equal sign
				 key = get_key();
    1880:	0e 94 c3 12 	call	0x2586	; 0x2586 <get_key>
    1884:	8e 83       	std	Y+6, r24	; 0x06
				 writedata(key);          //Echo the key pressed to LCD
    1886:	8e 81       	ldd	r24, Y+6	; 0x06
    1888:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <writedata>

				 if(key == '=')           //if = is pressed then proceed
    188c:	8e 81       	ldd	r24, Y+6	; 0x06
    188e:	8d 33       	cpi	r24, 0x3D	; 61
    1890:	09 f0       	breq	.+2      	; 0x1894 <main+0x9e>
    1892:	4c c0       	rjmp	.+152    	; 0x192c <main+0x136>
				 {
					 switch(func)         //switch on function
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	38 87       	std	Y+8, r19	; 0x08
    189c:	2f 83       	std	Y+7, r18	; 0x07
    189e:	4f 81       	ldd	r20, Y+7	; 0x07
    18a0:	58 85       	ldd	r21, Y+8	; 0x08
    18a2:	4f 32       	cpi	r20, 0x2F	; 47
    18a4:	51 05       	cpc	r21, r1
    18a6:	b9 f1       	breq	.+110    	; 0x1916 <main+0x120>
    18a8:	8f 81       	ldd	r24, Y+7	; 0x07
    18aa:	98 85       	ldd	r25, Y+8	; 0x08
    18ac:	80 33       	cpi	r24, 0x30	; 48
    18ae:	91 05       	cpc	r25, r1
    18b0:	5c f4       	brge	.+22     	; 0x18c8 <main+0xd2>
    18b2:	2f 81       	ldd	r18, Y+7	; 0x07
    18b4:	38 85       	ldd	r19, Y+8	; 0x08
    18b6:	2b 32       	cpi	r18, 0x2B	; 43
    18b8:	31 05       	cpc	r19, r1
    18ba:	61 f0       	breq	.+24     	; 0x18d4 <main+0xde>
    18bc:	4f 81       	ldd	r20, Y+7	; 0x07
    18be:	58 85       	ldd	r21, Y+8	; 0x08
    18c0:	4d 32       	cpi	r20, 0x2D	; 45
    18c2:	51 05       	cpc	r21, r1
    18c4:	81 f0       	breq	.+32     	; 0x18e6 <main+0xf0>
    18c6:	ab cf       	rjmp	.-170    	; 0x181e <main+0x28>
    18c8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ca:	98 85       	ldd	r25, Y+8	; 0x08
    18cc:	88 37       	cpi	r24, 0x78	; 120
    18ce:	91 05       	cpc	r25, r1
    18d0:	99 f0       	breq	.+38     	; 0x18f8 <main+0x102>
    18d2:	a5 cf       	rjmp	.-182    	; 0x181e <main+0x28>
					 {
					 case '+': disp_num(num1+num2); break;
    18d4:	8c 81       	ldd	r24, Y+4	; 0x04
    18d6:	9d 81       	ldd	r25, Y+5	; 0x05
    18d8:	29 81       	ldd	r18, Y+1	; 0x01
    18da:	3a 81       	ldd	r19, Y+2	; 0x02
    18dc:	82 0f       	add	r24, r18
    18de:	93 1f       	adc	r25, r19
    18e0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <disp_num>
    18e4:	9c cf       	rjmp	.-200    	; 0x181e <main+0x28>
					 case '-': disp_num(num1-num2); break;
    18e6:	8c 81       	ldd	r24, Y+4	; 0x04
    18e8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ea:	29 81       	ldd	r18, Y+1	; 0x01
    18ec:	3a 81       	ldd	r19, Y+2	; 0x02
    18ee:	82 1b       	sub	r24, r18
    18f0:	93 0b       	sbc	r25, r19
    18f2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <disp_num>
    18f6:	93 cf       	rjmp	.-218    	; 0x181e <main+0x28>
					 case 'x': disp_num(num1*num2); break;
    18f8:	8c 81       	ldd	r24, Y+4	; 0x04
    18fa:	9d 81       	ldd	r25, Y+5	; 0x05
    18fc:	29 81       	ldd	r18, Y+1	; 0x01
    18fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1900:	ac 01       	movw	r20, r24
    1902:	42 9f       	mul	r20, r18
    1904:	c0 01       	movw	r24, r0
    1906:	43 9f       	mul	r20, r19
    1908:	90 0d       	add	r25, r0
    190a:	52 9f       	mul	r21, r18
    190c:	90 0d       	add	r25, r0
    190e:	11 24       	eor	r1, r1
    1910:	0e 94 d5 13 	call	0x27aa	; 0x27aa <disp_num>
    1914:	84 cf       	rjmp	.-248    	; 0x181e <main+0x28>
					 case '/': disp_num(num1/num2); break;
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
    1918:	9d 81       	ldd	r25, Y+5	; 0x05
    191a:	29 81       	ldd	r18, Y+1	; 0x01
    191c:	3a 81       	ldd	r19, Y+2	; 0x02
    191e:	b9 01       	movw	r22, r18
    1920:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__divmodhi4>
    1924:	cb 01       	movw	r24, r22
    1926:	0e 94 d5 13 	call	0x27aa	; 0x27aa <disp_num>
    192a:	79 cf       	rjmp	.-270    	; 0x181e <main+0x28>
					 }
				 }
				 else				      //key other then = here means error wrong input
				 {
					 if(key == 'C')       //if clear screen is pressed then clear screen and reset
    192c:	8e 81       	ldd	r24, Y+6	; 0x06
    192e:	83 34       	cpi	r24, 0x43	; 67
    1930:	29 f4       	brne	.+10     	; 0x193c <main+0x146>
					 {
					    writecmd(0x01);   //Clear Screen
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <writecmd>
    193a:	71 cf       	rjmp	.-286    	; 0x181e <main+0x28>

					 }
					 else
					 {
					 	DispError(0); 	  //Display wrong input error
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 a6 13 	call	0x274c	; 0x274c <DispError>
    1944:	6c cf       	rjmp	.-296    	; 0x181e <main+0x28>

00001946 <cct_init>:
}



void cct_init(void)
{//KEYPAD
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
		DIO_voidSetPinDir(R1_PORT,R1_PIN,OUTPUT);
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	67 e0       	ldi	r22, 0x07	; 7
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(R2_PORT,R2_PIN,OUTPUT);
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	66 e0       	ldi	r22, 0x06	; 6
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(R3_PORT,R3_PIN,OUTPUT);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	65 e0       	ldi	r22, 0x05	; 5
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(R4_PORT,R4_PIN,OUTPUT);
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	64 e0       	ldi	r22, 0x04	; 4
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>

		DIO_voidSetPinDir(C1_PORT,C1_PIN,INPUT);
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	63 e0       	ldi	r22, 0x03	; 3
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(C2_PORT,C2_PIN,INPUT);
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	62 e0       	ldi	r22, 0x02	; 2
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(C3_PORT,C3_PIN,INPUT);
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(C4_PORT,C4_PIN,INPUT);
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	40 e0       	ldi	r20, 0x00	; 0
    199a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>

		DIO_voidSetPinValue(C1_PORT,C1_PIN,HIGH);
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	63 e0       	ldi	r22, 0x03	; 3
    19a2:	41 e0       	ldi	r20, 0x01	; 1
    19a4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(C2_PORT,C2_PIN,HIGH);
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	62 e0       	ldi	r22, 0x02	; 2
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(C3_PORT,C3_PIN,HIGH);
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	61 e0       	ldi	r22, 0x01	; 1
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(C4_PORT,C4_PIN,HIGH);
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

		DIO_voidSetPinDir(D0_PORT,D0_PIN,OUTPUT);
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(D1_PORT,D1_PIN,OUTPUT);
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	41 e0       	ldi	r20, 0x01	; 1
    19d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(D2_PORT,D2_PIN,OUTPUT);
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	62 e0       	ldi	r22, 0x02	; 2
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(D3_PORT,D3_PIN,OUTPUT);
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	63 e0       	ldi	r22, 0x03	; 3
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(D4_PORT,D4_PIN,OUTPUT);
    19ee:	83 e0       	ldi	r24, 0x03	; 3
    19f0:	64 e0       	ldi	r22, 0x04	; 4
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(D5_PORT,D5_PIN,OUTPUT);
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	65 e0       	ldi	r22, 0x05	; 5
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(D6_PORT,D6_PIN,OUTPUT);
    1a02:	83 e0       	ldi	r24, 0x03	; 3
    1a04:	66 e0       	ldi	r22, 0x06	; 6
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(D7_PORT,D7_PIN,OUTPUT);
    1a0c:	83 e0       	ldi	r24, 0x03	; 3
    1a0e:	67 e0       	ldi	r22, 0x07	; 7
    1a10:	41 e0       	ldi	r20, 0x01	; 1
    1a12:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>

		DIO_voidSetPinDir(RS_PORT,RS_PIN,OUTPUT);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(RW_PORT,RW_PIN,OUTPUT);
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
		DIO_voidSetPinDir(EN_PORT,EN_PIN,OUTPUT);
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	62 e0       	ldi	r22, 0x02	; 2
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>




	}
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <delay>:


void delay(int a)
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <delay+0x6>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <delay+0x8>
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	9c 83       	std	Y+4, r25	; 0x04
    1a48:	8b 83       	std	Y+3, r24	; 0x03
   int i;
   for(i=0;i<a;i++);   //null statement
    1a4a:	1a 82       	std	Y+2, r1	; 0x02
    1a4c:	19 82       	std	Y+1, r1	; 0x01
    1a4e:	05 c0       	rjmp	.+10     	; 0x1a5a <delay+0x20>
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	9a 81       	ldd	r25, Y+2	; 0x02
    1a54:	01 96       	adiw	r24, 0x01	; 1
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	29 81       	ldd	r18, Y+1	; 0x01
    1a5c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	28 17       	cp	r18, r24
    1a64:	39 07       	cpc	r19, r25
    1a66:	a4 f3       	brlt	.-24     	; 0x1a50 <delay+0x16>
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <writedata>:

void writedata(char Character)
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	2f 97       	sbiw	r28, 0x0f	; 15
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	8f 87       	std	Y+15, r24	; 0x0f
		DIO_voidSetPinValue(RS_PORT,RS_PIN,HIGH);
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	41 e0       	ldi	r20, 0x01	; 1
    1a92:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(RW_PORT,RW_PIN,LOW);
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

		DIO_voidSetPinValue(D0_PORT,D0_PIN,GET_BIT(Character,PIN_0));
    1aa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	91 70       	andi	r25, 0x01	; 1
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	49 2f       	mov	r20, r25
    1aac:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D1_PORT,D1_PIN,GET_BIT(Character,PIN_1));
    1ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab2:	86 95       	lsr	r24
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	91 70       	andi	r25, 0x01	; 1
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	49 2f       	mov	r20, r25
    1abe:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D2_PORT,D2_PIN,GET_BIT(Character,PIN_2));
    1ac2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac4:	86 95       	lsr	r24
    1ac6:	86 95       	lsr	r24
    1ac8:	98 2f       	mov	r25, r24
    1aca:	91 70       	andi	r25, 0x01	; 1
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	62 e0       	ldi	r22, 0x02	; 2
    1ad0:	49 2f       	mov	r20, r25
    1ad2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D3_PORT,D3_PIN,GET_BIT(Character,PIN_3));
    1ad6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad8:	86 95       	lsr	r24
    1ada:	86 95       	lsr	r24
    1adc:	86 95       	lsr	r24
    1ade:	98 2f       	mov	r25, r24
    1ae0:	91 70       	andi	r25, 0x01	; 1
    1ae2:	83 e0       	ldi	r24, 0x03	; 3
    1ae4:	63 e0       	ldi	r22, 0x03	; 3
    1ae6:	49 2f       	mov	r20, r25
    1ae8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D4_PORT,D4_PIN,GET_BIT(Character,PIN_4));
    1aec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aee:	82 95       	swap	r24
    1af0:	8f 70       	andi	r24, 0x0F	; 15
    1af2:	98 2f       	mov	r25, r24
    1af4:	91 70       	andi	r25, 0x01	; 1
    1af6:	83 e0       	ldi	r24, 0x03	; 3
    1af8:	64 e0       	ldi	r22, 0x04	; 4
    1afa:	49 2f       	mov	r20, r25
    1afc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D5_PORT,D5_PIN,GET_BIT(Character,PIN_5));
    1b00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b02:	82 95       	swap	r24
    1b04:	86 95       	lsr	r24
    1b06:	87 70       	andi	r24, 0x07	; 7
    1b08:	98 2f       	mov	r25, r24
    1b0a:	91 70       	andi	r25, 0x01	; 1
    1b0c:	83 e0       	ldi	r24, 0x03	; 3
    1b0e:	65 e0       	ldi	r22, 0x05	; 5
    1b10:	49 2f       	mov	r20, r25
    1b12:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D6_PORT,D6_PIN,GET_BIT(Character,PIN_6));
    1b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b18:	82 95       	swap	r24
    1b1a:	86 95       	lsr	r24
    1b1c:	86 95       	lsr	r24
    1b1e:	83 70       	andi	r24, 0x03	; 3
    1b20:	98 2f       	mov	r25, r24
    1b22:	91 70       	andi	r25, 0x01	; 1
    1b24:	83 e0       	ldi	r24, 0x03	; 3
    1b26:	66 e0       	ldi	r22, 0x06	; 6
    1b28:	49 2f       	mov	r20, r25
    1b2a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D7_PORT,D7_PIN,GET_BIT(Character,PIN_7));
    1b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b30:	98 2f       	mov	r25, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	99 27       	eor	r25, r25
    1b36:	99 1f       	adc	r25, r25
    1b38:	83 e0       	ldi	r24, 0x03	; 3
    1b3a:	67 e0       	ldi	r22, 0x07	; 7
    1b3c:	49 2f       	mov	r20, r25
    1b3e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

		DIO_voidSetPinValue(EN_PORT,EN_PIN,HIGH);
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e0       	ldi	r26, 0x00	; 0
    1b52:	b0 e4       	ldi	r27, 0x40	; 64
    1b54:	8b 87       	std	Y+11, r24	; 0x0b
    1b56:	9c 87       	std	Y+12, r25	; 0x0c
    1b58:	ad 87       	std	Y+13, r26	; 0x0d
    1b5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e8       	ldi	r19, 0x80	; 128
    1b68:	4b e3       	ldi	r20, 0x3B	; 59
    1b6a:	55 e4       	ldi	r21, 0x45	; 69
    1b6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8f 83       	std	Y+7, r24	; 0x07
    1b76:	98 87       	std	Y+8, r25	; 0x08
    1b78:	a9 87       	std	Y+9, r26	; 0x09
    1b7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7e:	78 85       	ldd	r23, Y+8	; 0x08
    1b80:	89 85       	ldd	r24, Y+9	; 0x09
    1b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <writedata+0x128>
		__ticks = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <writedata+0x1a6>
	else if (__tmp > 65535)
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	57 e4       	ldi	r21, 0x47	; 71
    1bae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	4c f5       	brge	.+82     	; 0x1c08 <writedata+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e2       	ldi	r20, 0x20	; 32
    1bc4:	51 e4       	ldi	r21, 0x41	; 65
    1bc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
    1bde:	0f c0       	rjmp	.+30     	; 0x1bfe <writedata+0x188>
    1be0:	8c e2       	ldi	r24, 0x2C	; 44
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	8b 83       	std	Y+3, r24	; 0x03
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <writedata+0x176>
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1c00:	9e 81       	ldd	r25, Y+6	; 0x06
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	69 f7       	brne	.-38     	; 0x1be0 <writedata+0x16a>
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <writedata+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c08:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0a:	78 85       	ldd	r23, Y+8	; 0x08
    1c0c:	89 85       	ldd	r24, Y+9	; 0x09
    1c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9e 83       	std	Y+6, r25	; 0x06
    1c1a:	8d 83       	std	Y+5, r24	; 0x05
    1c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c20:	9a 83       	std	Y+2, r25	; 0x02
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	9a 81       	ldd	r25, Y+2	; 0x02
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <writedata+0x1b2>
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_voidSetPinValue(EN_PORT,EN_PIN,LOW);
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	62 e0       	ldi	r22, 0x02	; 2
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

}
    1c3a:	2f 96       	adiw	r28, 0x0f	; 15
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <writecmd>:


void writecmd(int Command)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	60 97       	sbiw	r28, 0x10	; 16
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	98 8b       	std	Y+16, r25	; 0x10
    1c62:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(RS_PORT,RS_PIN,LOW);
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(RW_PORT,RW_PIN,LOW);
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

		DIO_voidSetPinValue(D0_PORT,D0_PIN,GET_BIT(Command,PIN_0));
    1c78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7a:	98 2f       	mov	r25, r24
    1c7c:	91 70       	andi	r25, 0x01	; 1
    1c7e:	83 e0       	ldi	r24, 0x03	; 3
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	49 2f       	mov	r20, r25
    1c84:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D1_PORT,D1_PIN,GET_BIT(Command,PIN_1));
    1c88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8a:	98 89       	ldd	r25, Y+16	; 0x10
    1c8c:	95 95       	asr	r25
    1c8e:	87 95       	ror	r24
    1c90:	98 2f       	mov	r25, r24
    1c92:	91 70       	andi	r25, 0x01	; 1
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	61 e0       	ldi	r22, 0x01	; 1
    1c98:	49 2f       	mov	r20, r25
    1c9a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D2_PORT,D2_PIN,GET_BIT(Command,PIN_2));
    1c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca0:	98 89       	ldd	r25, Y+16	; 0x10
    1ca2:	95 95       	asr	r25
    1ca4:	87 95       	ror	r24
    1ca6:	95 95       	asr	r25
    1ca8:	87 95       	ror	r24
    1caa:	98 2f       	mov	r25, r24
    1cac:	91 70       	andi	r25, 0x01	; 1
    1cae:	83 e0       	ldi	r24, 0x03	; 3
    1cb0:	62 e0       	ldi	r22, 0x02	; 2
    1cb2:	49 2f       	mov	r20, r25
    1cb4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D3_PORT,D3_PIN,GET_BIT(Command,PIN_3));
    1cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cba:	98 89       	ldd	r25, Y+16	; 0x10
    1cbc:	95 95       	asr	r25
    1cbe:	87 95       	ror	r24
    1cc0:	95 95       	asr	r25
    1cc2:	87 95       	ror	r24
    1cc4:	95 95       	asr	r25
    1cc6:	87 95       	ror	r24
    1cc8:	98 2f       	mov	r25, r24
    1cca:	91 70       	andi	r25, 0x01	; 1
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	63 e0       	ldi	r22, 0x03	; 3
    1cd0:	49 2f       	mov	r20, r25
    1cd2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D4_PORT,D4_PIN,GET_BIT(Command,PIN_4));
    1cd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd8:	98 89       	ldd	r25, Y+16	; 0x10
    1cda:	95 95       	asr	r25
    1cdc:	87 95       	ror	r24
    1cde:	95 95       	asr	r25
    1ce0:	87 95       	ror	r24
    1ce2:	95 95       	asr	r25
    1ce4:	87 95       	ror	r24
    1ce6:	95 95       	asr	r25
    1ce8:	87 95       	ror	r24
    1cea:	98 2f       	mov	r25, r24
    1cec:	91 70       	andi	r25, 0x01	; 1
    1cee:	83 e0       	ldi	r24, 0x03	; 3
    1cf0:	64 e0       	ldi	r22, 0x04	; 4
    1cf2:	49 2f       	mov	r20, r25
    1cf4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D5_PORT,D5_PIN,GET_BIT(Command,PIN_5));
    1cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfa:	98 89       	ldd	r25, Y+16	; 0x10
    1cfc:	95 95       	asr	r25
    1cfe:	87 95       	ror	r24
    1d00:	95 95       	asr	r25
    1d02:	87 95       	ror	r24
    1d04:	95 95       	asr	r25
    1d06:	87 95       	ror	r24
    1d08:	95 95       	asr	r25
    1d0a:	87 95       	ror	r24
    1d0c:	95 95       	asr	r25
    1d0e:	87 95       	ror	r24
    1d10:	98 2f       	mov	r25, r24
    1d12:	91 70       	andi	r25, 0x01	; 1
    1d14:	83 e0       	ldi	r24, 0x03	; 3
    1d16:	65 e0       	ldi	r22, 0x05	; 5
    1d18:	49 2f       	mov	r20, r25
    1d1a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D6_PORT,D6_PIN,GET_BIT(Command,PIN_6));
    1d1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d20:	98 89       	ldd	r25, Y+16	; 0x10
    1d22:	08 2e       	mov	r0, r24
    1d24:	89 2f       	mov	r24, r25
    1d26:	00 0c       	add	r0, r0
    1d28:	88 1f       	adc	r24, r24
    1d2a:	99 0b       	sbc	r25, r25
    1d2c:	00 0c       	add	r0, r0
    1d2e:	88 1f       	adc	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	98 2f       	mov	r25, r24
    1d34:	91 70       	andi	r25, 0x01	; 1
    1d36:	83 e0       	ldi	r24, 0x03	; 3
    1d38:	66 e0       	ldi	r22, 0x06	; 6
    1d3a:	49 2f       	mov	r20, r25
    1d3c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(D7_PORT,D7_PIN,GET_BIT(Command,PIN_7));
    1d40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d42:	98 89       	ldd	r25, Y+16	; 0x10
    1d44:	88 0f       	add	r24, r24
    1d46:	89 2f       	mov	r24, r25
    1d48:	88 1f       	adc	r24, r24
    1d4a:	99 0b       	sbc	r25, r25
    1d4c:	98 2f       	mov	r25, r24
    1d4e:	91 70       	andi	r25, 0x01	; 1
    1d50:	83 e0       	ldi	r24, 0x03	; 3
    1d52:	67 e0       	ldi	r22, 0x07	; 7
    1d54:	49 2f       	mov	r20, r25
    1d56:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

		DIO_voidSetPinValue(EN_PORT,EN_PIN,HIGH);
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	62 e0       	ldi	r22, 0x02	; 2
    1d5e:	41 e0       	ldi	r20, 0x01	; 1
    1d60:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e0       	ldi	r26, 0x00	; 0
    1d6a:	b0 e4       	ldi	r27, 0x40	; 64
    1d6c:	8b 87       	std	Y+11, r24	; 0x0b
    1d6e:	9c 87       	std	Y+12, r25	; 0x0c
    1d70:	ad 87       	std	Y+13, r26	; 0x0d
    1d72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e8       	ldi	r19, 0x80	; 128
    1d80:	4b e3       	ldi	r20, 0x3B	; 59
    1d82:	55 e4       	ldi	r21, 0x45	; 69
    1d84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	8f 83       	std	Y+7, r24	; 0x07
    1d8e:	98 87       	std	Y+8, r25	; 0x08
    1d90:	a9 87       	std	Y+9, r26	; 0x09
    1d92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d94:	6f 81       	ldd	r22, Y+7	; 0x07
    1d96:	78 85       	ldd	r23, Y+8	; 0x08
    1d98:	89 85       	ldd	r24, Y+9	; 0x09
    1d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <writecmd+0x16a>
		__ticks = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	3f c0       	rjmp	.+126    	; 0x1e34 <writecmd+0x1e8>
	else if (__tmp > 65535)
    1db6:	6f 81       	ldd	r22, Y+7	; 0x07
    1db8:	78 85       	ldd	r23, Y+8	; 0x08
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	4c f5       	brge	.+82     	; 0x1e20 <writecmd+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e2       	ldi	r20, 0x20	; 32
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9e 83       	std	Y+6, r25	; 0x06
    1df4:	8d 83       	std	Y+5, r24	; 0x05
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <writecmd+0x1ca>
    1df8:	8c e2       	ldi	r24, 0x2C	; 44
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	9c 83       	std	Y+4, r25	; 0x04
    1dfe:	8b 83       	std	Y+3, r24	; 0x03
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <writecmd+0x1b8>
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	9e 83       	std	Y+6, r25	; 0x06
    1e14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <writecmd+0x1ac>
    1e1e:	14 c0       	rjmp	.+40     	; 0x1e48 <writecmd+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e20:	6f 81       	ldd	r22, Y+7	; 0x07
    1e22:	78 85       	ldd	r23, Y+8	; 0x08
    1e24:	89 85       	ldd	r24, Y+9	; 0x09
    1e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	9e 81       	ldd	r25, Y+6	; 0x06
    1e38:	9a 83       	std	Y+2, r25	; 0x02
    1e3a:	89 83       	std	Y+1, r24	; 0x01
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <writecmd+0x1f4>
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_voidSetPinValue(EN_PORT,EN_PIN,LOW);
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	62 e0       	ldi	r22, 0x02	; 2
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

}
    1e52:	60 96       	adiw	r28, 0x10	; 16
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <lcdinit>:

void lcdinit(void)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	aa 97       	sbiw	r28, 0x2a	; 42
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
   writecmd(0x01);    //clear display
   writecmd(0x06);    //entry mode, set increment*/
	//LCD


			writecmd(0x38);    //turn on
    1e78:	88 e3       	ldi	r24, 0x38	; 56
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <writecmd>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 ea       	ldi	r26, 0xA0	; 160
    1e86:	b0 e4       	ldi	r27, 0x40	; 64
    1e88:	8f a3       	std	Y+39, r24	; 0x27
    1e8a:	98 a7       	std	Y+40, r25	; 0x28
    1e8c:	a9 a7       	std	Y+41, r26	; 0x29
    1e8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	6f a1       	ldd	r22, Y+39	; 0x27
    1e92:	78 a5       	ldd	r23, Y+40	; 0x28
    1e94:	89 a5       	ldd	r24, Y+41	; 0x29
    1e96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e8       	ldi	r19, 0x80	; 128
    1e9c:	4b e3       	ldi	r20, 0x3B	; 59
    1e9e:	55 e4       	ldi	r21, 0x45	; 69
    1ea0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8b a3       	std	Y+35, r24	; 0x23
    1eaa:	9c a3       	std	Y+36, r25	; 0x24
    1eac:	ad a3       	std	Y+37, r26	; 0x25
    1eae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <lcdinit+0x6e>
		__ticks = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9a a3       	std	Y+34, r25	; 0x22
    1ece:	89 a3       	std	Y+33, r24	; 0x21
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <lcdinit+0xec>
	else if (__tmp > 65535)
    1ed2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	57 e4       	ldi	r21, 0x47	; 71
    1ee2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	4c f5       	brge	.+82     	; 0x1f3c <lcdinit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eea:	6f a1       	ldd	r22, Y+39	; 0x27
    1eec:	78 a5       	ldd	r23, Y+40	; 0x28
    1eee:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9a a3       	std	Y+34, r25	; 0x22
    1f10:	89 a3       	std	Y+33, r24	; 0x21
    1f12:	0f c0       	rjmp	.+30     	; 0x1f32 <lcdinit+0xce>
    1f14:	8c e2       	ldi	r24, 0x2C	; 44
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	98 a3       	std	Y+32, r25	; 0x20
    1f1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <lcdinit+0xbc>
    1f24:	98 a3       	std	Y+32, r25	; 0x20
    1f26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f28:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	9a a3       	std	Y+34, r25	; 0x22
    1f30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f32:	89 a1       	ldd	r24, Y+33	; 0x21
    1f34:	9a a1       	ldd	r25, Y+34	; 0x22
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	69 f7       	brne	.-38     	; 0x1f14 <lcdinit+0xb0>
    1f3a:	14 c0       	rjmp	.+40     	; 0x1f64 <lcdinit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f40:	8d a1       	ldd	r24, Y+37	; 0x25
    1f42:	9e a1       	ldd	r25, Y+38	; 0x26
    1f44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9a a3       	std	Y+34, r25	; 0x22
    1f4e:	89 a3       	std	Y+33, r24	; 0x21
    1f50:	89 a1       	ldd	r24, Y+33	; 0x21
    1f52:	9a a1       	ldd	r25, Y+34	; 0x22
    1f54:	9e 8f       	std	Y+30, r25	; 0x1e
    1f56:	8d 8f       	std	Y+29, r24	; 0x1d
    1f58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <lcdinit+0xf8>
    1f60:	9e 8f       	std	Y+30, r25	; 0x1e
    1f62:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(5);
			writecmd(0x0C);   //make cursor invisible
    1f64:	8c e0       	ldi	r24, 0x0C	; 12
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <writecmd>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a0 ea       	ldi	r26, 0xA0	; 160
    1f72:	b0 e4       	ldi	r27, 0x40	; 64
    1f74:	89 8f       	std	Y+25, r24	; 0x19
    1f76:	9a 8f       	std	Y+26, r25	; 0x1a
    1f78:	ab 8f       	std	Y+27, r26	; 0x1b
    1f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e8       	ldi	r19, 0x80	; 128
    1f88:	4b e3       	ldi	r20, 0x3B	; 59
    1f8a:	55 e4       	ldi	r21, 0x45	; 69
    1f8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	8d 8b       	std	Y+21, r24	; 0x15
    1f96:	9e 8b       	std	Y+22, r25	; 0x16
    1f98:	af 8b       	std	Y+23, r26	; 0x17
    1f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e8       	ldi	r20, 0x80	; 128
    1faa:	5f e3       	ldi	r21, 0x3F	; 63
    1fac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fb0:	88 23       	and	r24, r24
    1fb2:	2c f4       	brge	.+10     	; 0x1fbe <lcdinit+0x15a>
		__ticks = 1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9c 8b       	std	Y+20, r25	; 0x14
    1fba:	8b 8b       	std	Y+19, r24	; 0x13
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <lcdinit+0x1d8>
	else if (__tmp > 65535)
    1fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	3f ef       	ldi	r19, 0xFF	; 255
    1fca:	4f e7       	ldi	r20, 0x7F	; 127
    1fcc:	57 e4       	ldi	r21, 0x47	; 71
    1fce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	4c f5       	brge	.+82     	; 0x2028 <lcdinit+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9c 8b       	std	Y+20, r25	; 0x14
    1ffc:	8b 8b       	std	Y+19, r24	; 0x13
    1ffe:	0f c0       	rjmp	.+30     	; 0x201e <lcdinit+0x1ba>
    2000:	8c e2       	ldi	r24, 0x2C	; 44
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	9a 8b       	std	Y+18, r25	; 0x12
    2006:	89 8b       	std	Y+17, r24	; 0x11
    2008:	89 89       	ldd	r24, Y+17	; 0x11
    200a:	9a 89       	ldd	r25, Y+18	; 0x12
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <lcdinit+0x1a8>
    2010:	9a 8b       	std	Y+18, r25	; 0x12
    2012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2014:	8b 89       	ldd	r24, Y+19	; 0x13
    2016:	9c 89       	ldd	r25, Y+20	; 0x14
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	9c 8b       	std	Y+20, r25	; 0x14
    201c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	8b 89       	ldd	r24, Y+19	; 0x13
    2020:	9c 89       	ldd	r25, Y+20	; 0x14
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	69 f7       	brne	.-38     	; 0x2000 <lcdinit+0x19c>
    2026:	14 c0       	rjmp	.+40     	; 0x2050 <lcdinit+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2028:	6d 89       	ldd	r22, Y+21	; 0x15
    202a:	7e 89       	ldd	r23, Y+22	; 0x16
    202c:	8f 89       	ldd	r24, Y+23	; 0x17
    202e:	98 8d       	ldd	r25, Y+24	; 0x18
    2030:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9c 8b       	std	Y+20, r25	; 0x14
    203a:	8b 8b       	std	Y+19, r24	; 0x13
    203c:	8b 89       	ldd	r24, Y+19	; 0x13
    203e:	9c 89       	ldd	r25, Y+20	; 0x14
    2040:	98 8b       	std	Y+16, r25	; 0x10
    2042:	8f 87       	std	Y+15, r24	; 0x0f
    2044:	8f 85       	ldd	r24, Y+15	; 0x0f
    2046:	98 89       	ldd	r25, Y+16	; 0x10
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <lcdinit+0x1e4>
    204c:	98 8b       	std	Y+16, r25	; 0x10
    204e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5);

			writecmd(0x01); //clear screan
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <writecmd>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 ea       	ldi	r26, 0xA0	; 160
    205e:	b0 e4       	ldi	r27, 0x40	; 64
    2060:	8b 87       	std	Y+11, r24	; 0x0b
    2062:	9c 87       	std	Y+12, r25	; 0x0c
    2064:	ad 87       	std	Y+13, r26	; 0x0d
    2066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e8       	ldi	r19, 0x80	; 128
    2074:	4b e3       	ldi	r20, 0x3B	; 59
    2076:	55 e4       	ldi	r21, 0x45	; 69
    2078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8f 83       	std	Y+7, r24	; 0x07
    2082:	98 87       	std	Y+8, r25	; 0x08
    2084:	a9 87       	std	Y+9, r26	; 0x09
    2086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <lcdinit+0x246>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <lcdinit+0x2c4>
	else if (__tmp > 65535)
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <lcdinit+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <lcdinit+0x2a6>
    20ec:	8c e2       	ldi	r24, 0x2C	; 44
    20ee:	91 e0       	ldi	r25, 0x01	; 1
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <lcdinit+0x294>
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <lcdinit+0x288>
    2112:	14 c0       	rjmp	.+40     	; 0x213c <lcdinit+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	6f 81       	ldd	r22, Y+7	; 0x07
    2116:	78 85       	ldd	r23, Y+8	; 0x08
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <lcdinit+0x2d0>
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5);



}
    213c:	aa 96       	adiw	r28, 0x2a	; 42
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <ReturnHome>:

void ReturnHome(void)     /* Return to 0 cursor location */
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
   writecmd(0x02);
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <writecmd>
   delay(1500);
    215e:	8c ed       	ldi	r24, 0xDC	; 220
    2160:	95 e0       	ldi	r25, 0x05	; 5
    2162:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <delay>

}
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <writeline>:

void writeline(char Line[])
{
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <writeline+0xa>
    2176:	00 d0       	rcall	.+0      	; 0x2178 <writeline+0xc>
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	9c 83       	std	Y+4, r25	; 0x04
    217e:	8b 83       	std	Y+3, r24	; 0x03
   int i;
   for(i=0;i<strlen(Line);i++)
    2180:	1a 82       	std	Y+2, r1	; 0x02
    2182:	19 82       	std	Y+1, r1	; 0x01
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <writeline+0x38>
   {
      writedata(Line[i]);     /* Write Character */
    2186:	29 81       	ldd	r18, Y+1	; 0x01
    2188:	3a 81       	ldd	r19, Y+2	; 0x02
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	9c 81       	ldd	r25, Y+4	; 0x04
    218e:	fc 01       	movw	r30, r24
    2190:	e2 0f       	add	r30, r18
    2192:	f3 1f       	adc	r31, r19
    2194:	80 81       	ld	r24, Z
    2196:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <writedata>
}

void writeline(char Line[])
{
   int i;
   for(i=0;i<strlen(Line);i++)
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	01 96       	adiw	r24, 0x01	; 1
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	09 81       	ldd	r16, Y+1	; 0x01
    21a6:	1a 81       	ldd	r17, Y+2	; 0x02
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <strlen>
    21b0:	08 17       	cp	r16, r24
    21b2:	19 07       	cpc	r17, r25
    21b4:	40 f3       	brcs	.-48     	; 0x2186 <writeline+0x1a>
   {
      writedata(Line[i]);     /* Write Character */
   }

   ReturnHome();          /* Return to 0 cursor position */
    21b6:	0e 94 a7 10 	call	0x214e	; 0x214e <ReturnHome>
}
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	08 95       	ret

000021cc <READ_SWITCHES>:

char READ_SWITCHES(void)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	2a 97       	sbiw	r28, 0x0a	; 10
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
	u8 temp;
		DIO_voidSetPinValue(R1_PORT,R1_PIN,LOW); //DETECT ONE PUTTON ROW
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	67 e0       	ldi	r22, 0x07	; 7
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(R2_PORT,R2_PIN,HIGH);
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	66 e0       	ldi	r22, 0x06	; 6
    21ee:	41 e0       	ldi	r20, 0x01	; 1
    21f0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(R3_PORT,R3_PIN,HIGH);
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	65 e0       	ldi	r22, 0x05	; 5
    21f8:	41 e0       	ldi	r20, 0x01	; 1
    21fa:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(R4_PORT,R4_PIN,HIGH);
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	64 e0       	ldi	r22, 0x04	; 4
    2202:	41 e0       	ldi	r20, 0x01	; 1
    2204:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

	   temp=0;
    2208:	19 82       	std	Y+1, r1	; 0x01
	   temp|=(DIO_u8GetPinValue(C4_PORT,C4_PIN)<<0);
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2212:	98 2f       	mov	r25, r24
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	89 2b       	or	r24, r25
    2218:	89 83       	std	Y+1, r24	; 0x01
	   temp|=(DIO_u8GetPinValue(C3_PORT,C3_PIN)<<1);
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2222:	88 2f       	mov	r24, r24
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	98 2f       	mov	r25, r24
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	89 2b       	or	r24, r25
    2230:	89 83       	std	Y+1, r24	; 0x01
	   temp|=(DIO_u8GetPinValue(C2_PORT,C2_PIN)<<2);
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	62 e0       	ldi	r22, 0x02	; 2
    2236:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    223a:	88 2f       	mov	r24, r24
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	98 2f       	mov	r25, r24
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	89 2b       	or	r24, r25
    224c:	89 83       	std	Y+1, r24	; 0x01
	   temp|=(DIO_u8GetPinValue(C1_PORT,C1_PIN)<<3);
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	63 e0       	ldi	r22, 0x03	; 3
    2252:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	98 2f       	mov	r25, r24
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	89 2b       	or	r24, r25
    226c:	89 83       	std	Y+1, r24	; 0x01

	   switch(temp)
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	3a 87       	std	Y+10, r19	; 0x0a
    2276:	29 87       	std	Y+9, r18	; 0x09
    2278:	89 85       	ldd	r24, Y+9	; 0x09
    227a:	9a 85       	ldd	r25, Y+10	; 0x0a
    227c:	8b 30       	cpi	r24, 0x0B	; 11
    227e:	91 05       	cpc	r25, r1
    2280:	d9 f0       	breq	.+54     	; 0x22b8 <READ_SWITCHES+0xec>
    2282:	29 85       	ldd	r18, Y+9	; 0x09
    2284:	3a 85       	ldd	r19, Y+10	; 0x0a
    2286:	2c 30       	cpi	r18, 0x0C	; 12
    2288:	31 05       	cpc	r19, r1
    228a:	34 f4       	brge	.+12     	; 0x2298 <READ_SWITCHES+0xcc>
    228c:	89 85       	ldd	r24, Y+9	; 0x09
    228e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2290:	87 30       	cpi	r24, 0x07	; 7
    2292:	91 05       	cpc	r25, r1
    2294:	99 f0       	breq	.+38     	; 0x22bc <READ_SWITCHES+0xf0>
    2296:	15 c0       	rjmp	.+42     	; 0x22c2 <READ_SWITCHES+0xf6>
    2298:	29 85       	ldd	r18, Y+9	; 0x09
    229a:	3a 85       	ldd	r19, Y+10	; 0x0a
    229c:	2d 30       	cpi	r18, 0x0D	; 13
    229e:	31 05       	cpc	r19, r1
    22a0:	41 f0       	breq	.+16     	; 0x22b2 <READ_SWITCHES+0xe6>
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	8e 30       	cpi	r24, 0x0E	; 14
    22a8:	91 05       	cpc	r25, r1
    22aa:	59 f4       	brne	.+22     	; 0x22c2 <READ_SWITCHES+0xf6>
	   {
	   case 0x0E:
		   return '*';
    22ac:	9a e2       	ldi	r25, 0x2A	; 42
    22ae:	98 87       	std	Y+8, r25	; 0x08
    22b0:	60 c1       	rjmp	.+704    	; 0x2572 <READ_SWITCHES+0x3a6>
	   case 0x0D:
	   	   return '#';
    22b2:	23 e2       	ldi	r18, 0x23	; 35
    22b4:	28 87       	std	Y+8, r18	; 0x08
    22b6:	5d c1       	rjmp	.+698    	; 0x2572 <READ_SWITCHES+0x3a6>
	   case 0x0B:
	   	   return 0;
    22b8:	18 86       	std	Y+8, r1	; 0x08
    22ba:	5b c1       	rjmp	.+694    	; 0x2572 <READ_SWITCHES+0x3a6>
	   case 0x07:
	   	   return '=';
    22bc:	3d e3       	ldi	r19, 0x3D	; 61
    22be:	38 87       	std	Y+8, r19	; 0x08
    22c0:	58 c1       	rjmp	.+688    	; 0x2572 <READ_SWITCHES+0x3a6>


	   }

	    DIO_voidSetPinValue(R1_PORT,R1_PIN,HIGH); //DETECT ONE PUTTON ROW
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	67 e0       	ldi	r22, 0x07	; 7
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	   	DIO_voidSetPinValue(R2_PORT,R2_PIN,LOW);
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	66 e0       	ldi	r22, 0x06	; 6
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	   	DIO_voidSetPinValue(R3_PORT,R3_PIN,HIGH);
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	65 e0       	ldi	r22, 0x05	; 5
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	   	DIO_voidSetPinValue(R4_PORT,R4_PIN,HIGH);
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	64 e0       	ldi	r22, 0x04	; 4
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

	      temp=0;
    22ea:	19 82       	std	Y+1, r1	; 0x01
	      temp|=(DIO_u8GetPinValue(C4_PORT,C4_PIN)<<0);
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    22f4:	98 2f       	mov	r25, r24
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	89 2b       	or	r24, r25
    22fa:	89 83       	std	Y+1, r24	; 0x01
	      temp|=(DIO_u8GetPinValue(C3_PORT,C3_PIN)<<1);
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	61 e0       	ldi	r22, 0x01	; 1
    2300:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2304:	88 2f       	mov	r24, r24
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	98 2f       	mov	r25, r24
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	89 2b       	or	r24, r25
    2312:	89 83       	std	Y+1, r24	; 0x01
	      temp|=(DIO_u8GetPinValue(C2_PORT,C2_PIN)<<2);
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	62 e0       	ldi	r22, 0x02	; 2
    2318:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    231c:	88 2f       	mov	r24, r24
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	98 2f       	mov	r25, r24
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	89 2b       	or	r24, r25
    232e:	89 83       	std	Y+1, r24	; 0x01
	      temp|=(DIO_u8GetPinValue(C1_PORT,C1_PIN)<<3);
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	63 e0       	ldi	r22, 0x03	; 3
    2334:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	98 2f       	mov	r25, r24
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	89 2b       	or	r24, r25
    234e:	89 83       	std	Y+1, r24	; 0x01

	      switch(temp)
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	3f 83       	std	Y+7, r19	; 0x07
    2358:	2e 83       	std	Y+6, r18	; 0x06
    235a:	8e 81       	ldd	r24, Y+6	; 0x06
    235c:	9f 81       	ldd	r25, Y+7	; 0x07
    235e:	8b 30       	cpi	r24, 0x0B	; 11
    2360:	91 05       	cpc	r25, r1
    2362:	d9 f0       	breq	.+54     	; 0x239a <READ_SWITCHES+0x1ce>
    2364:	2e 81       	ldd	r18, Y+6	; 0x06
    2366:	3f 81       	ldd	r19, Y+7	; 0x07
    2368:	2c 30       	cpi	r18, 0x0C	; 12
    236a:	31 05       	cpc	r19, r1
    236c:	34 f4       	brge	.+12     	; 0x237a <READ_SWITCHES+0x1ae>
    236e:	8e 81       	ldd	r24, Y+6	; 0x06
    2370:	9f 81       	ldd	r25, Y+7	; 0x07
    2372:	87 30       	cpi	r24, 0x07	; 7
    2374:	91 05       	cpc	r25, r1
    2376:	a1 f0       	breq	.+40     	; 0x23a0 <READ_SWITCHES+0x1d4>
    2378:	16 c0       	rjmp	.+44     	; 0x23a6 <READ_SWITCHES+0x1da>
    237a:	2e 81       	ldd	r18, Y+6	; 0x06
    237c:	3f 81       	ldd	r19, Y+7	; 0x07
    237e:	2d 30       	cpi	r18, 0x0D	; 13
    2380:	31 05       	cpc	r19, r1
    2382:	41 f0       	breq	.+16     	; 0x2394 <READ_SWITCHES+0x1c8>
    2384:	8e 81       	ldd	r24, Y+6	; 0x06
    2386:	9f 81       	ldd	r25, Y+7	; 0x07
    2388:	8e 30       	cpi	r24, 0x0E	; 14
    238a:	91 05       	cpc	r25, r1
    238c:	61 f4       	brne	.+24     	; 0x23a6 <READ_SWITCHES+0x1da>
	      {
	      case 0x0E:
	   	   return '/';
    238e:	9f e2       	ldi	r25, 0x2F	; 47
    2390:	98 87       	std	Y+8, r25	; 0x08
    2392:	ef c0       	rjmp	.+478    	; 0x2572 <READ_SWITCHES+0x3a6>
	      case 0x0D:
	      	   return 9;
    2394:	29 e0       	ldi	r18, 0x09	; 9
    2396:	28 87       	std	Y+8, r18	; 0x08
    2398:	ec c0       	rjmp	.+472    	; 0x2572 <READ_SWITCHES+0x3a6>
	      case 0x0B:
	      	   return 8;
    239a:	38 e0       	ldi	r19, 0x08	; 8
    239c:	38 87       	std	Y+8, r19	; 0x08
    239e:	e9 c0       	rjmp	.+466    	; 0x2572 <READ_SWITCHES+0x3a6>
	      case 0x07:
	      	   return 7;
    23a0:	87 e0       	ldi	r24, 0x07	; 7
    23a2:	88 87       	std	Y+8, r24	; 0x08
    23a4:	e6 c0       	rjmp	.+460    	; 0x2572 <READ_SWITCHES+0x3a6>


	      }
	        DIO_voidSetPinValue(R1_PORT,R1_PIN,HIGH); //DETECT ONE PUTTON ROW
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	67 e0       	ldi	r22, 0x07	; 7
    23aa:	41 e0       	ldi	r20, 0x01	; 1
    23ac:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	      	DIO_voidSetPinValue(R2_PORT,R2_PIN,HIGH);
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	66 e0       	ldi	r22, 0x06	; 6
    23b4:	41 e0       	ldi	r20, 0x01	; 1
    23b6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	      	DIO_voidSetPinValue(R3_PORT,R3_PIN,LOW);
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	65 e0       	ldi	r22, 0x05	; 5
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	      	DIO_voidSetPinValue(R4_PORT,R4_PIN,HIGH);
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	64 e0       	ldi	r22, 0x04	; 4
    23c8:	41 e0       	ldi	r20, 0x01	; 1
    23ca:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

	         temp=0;
    23ce:	19 82       	std	Y+1, r1	; 0x01
	         temp|=(DIO_u8GetPinValue(C4_PORT,C4_PIN)<<0);
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	60 e0       	ldi	r22, 0x00	; 0
    23d4:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    23d8:	98 2f       	mov	r25, r24
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	89 2b       	or	r24, r25
    23de:	89 83       	std	Y+1, r24	; 0x01
	         temp|=(DIO_u8GetPinValue(C3_PORT,C3_PIN)<<1);
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	98 2f       	mov	r25, r24
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	89 2b       	or	r24, r25
    23f6:	89 83       	std	Y+1, r24	; 0x01
	         temp|=(DIO_u8GetPinValue(C2_PORT,C2_PIN)<<2);
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	62 e0       	ldi	r22, 0x02	; 2
    23fc:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2400:	88 2f       	mov	r24, r24
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	98 2f       	mov	r25, r24
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	89 2b       	or	r24, r25
    2412:	89 83       	std	Y+1, r24	; 0x01
	         temp|=(DIO_u8GetPinValue(C1_PORT,C1_PIN)<<3);
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	63 e0       	ldi	r22, 0x03	; 3
    2418:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    241c:	88 2f       	mov	r24, r24
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	98 2f       	mov	r25, r24
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	89 2b       	or	r24, r25
    2432:	89 83       	std	Y+1, r24	; 0x01

	         switch(temp)
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	3d 83       	std	Y+5, r19	; 0x05
    243c:	2c 83       	std	Y+4, r18	; 0x04
    243e:	8c 81       	ldd	r24, Y+4	; 0x04
    2440:	9d 81       	ldd	r25, Y+5	; 0x05
    2442:	8b 30       	cpi	r24, 0x0B	; 11
    2444:	91 05       	cpc	r25, r1
    2446:	d9 f0       	breq	.+54     	; 0x247e <READ_SWITCHES+0x2b2>
    2448:	2c 81       	ldd	r18, Y+4	; 0x04
    244a:	3d 81       	ldd	r19, Y+5	; 0x05
    244c:	2c 30       	cpi	r18, 0x0C	; 12
    244e:	31 05       	cpc	r19, r1
    2450:	34 f4       	brge	.+12     	; 0x245e <READ_SWITCHES+0x292>
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	9d 81       	ldd	r25, Y+5	; 0x05
    2456:	87 30       	cpi	r24, 0x07	; 7
    2458:	91 05       	cpc	r25, r1
    245a:	a1 f0       	breq	.+40     	; 0x2484 <READ_SWITCHES+0x2b8>
    245c:	16 c0       	rjmp	.+44     	; 0x248a <READ_SWITCHES+0x2be>
    245e:	2c 81       	ldd	r18, Y+4	; 0x04
    2460:	3d 81       	ldd	r19, Y+5	; 0x05
    2462:	2d 30       	cpi	r18, 0x0D	; 13
    2464:	31 05       	cpc	r19, r1
    2466:	41 f0       	breq	.+16     	; 0x2478 <READ_SWITCHES+0x2ac>
    2468:	8c 81       	ldd	r24, Y+4	; 0x04
    246a:	9d 81       	ldd	r25, Y+5	; 0x05
    246c:	8e 30       	cpi	r24, 0x0E	; 14
    246e:	91 05       	cpc	r25, r1
    2470:	61 f4       	brne	.+24     	; 0x248a <READ_SWITCHES+0x2be>
	         {
	         case 0x0E:
	      	   return '-';
    2472:	9d e2       	ldi	r25, 0x2D	; 45
    2474:	98 87       	std	Y+8, r25	; 0x08
    2476:	7d c0       	rjmp	.+250    	; 0x2572 <READ_SWITCHES+0x3a6>
	         case 0x0D:
	         	   return 6;
    2478:	26 e0       	ldi	r18, 0x06	; 6
    247a:	28 87       	std	Y+8, r18	; 0x08
    247c:	7a c0       	rjmp	.+244    	; 0x2572 <READ_SWITCHES+0x3a6>
	         case 0x0B:
	         	   return 5;
    247e:	35 e0       	ldi	r19, 0x05	; 5
    2480:	38 87       	std	Y+8, r19	; 0x08
    2482:	77 c0       	rjmp	.+238    	; 0x2572 <READ_SWITCHES+0x3a6>
	         case 0x07:
	         	   return 4;
    2484:	84 e0       	ldi	r24, 0x04	; 4
    2486:	88 87       	std	Y+8, r24	; 0x08
    2488:	74 c0       	rjmp	.+232    	; 0x2572 <READ_SWITCHES+0x3a6>


	         }

	           DIO_voidSetPinValue(R1_PORT,R1_PIN,HIGH); //DETECT ONE PUTTON ROW
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	67 e0       	ldi	r22, 0x07	; 7
    248e:	41 e0       	ldi	r20, 0x01	; 1
    2490:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	         	DIO_voidSetPinValue(R2_PORT,R2_PIN,HIGH);
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	66 e0       	ldi	r22, 0x06	; 6
    2498:	41 e0       	ldi	r20, 0x01	; 1
    249a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	         	DIO_voidSetPinValue(R3_PORT,R3_PIN,HIGH);
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	65 e0       	ldi	r22, 0x05	; 5
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	         	DIO_voidSetPinValue(R4_PORT,R4_PIN,LOW);
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	64 e0       	ldi	r22, 0x04	; 4
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

	            temp=0;
    24b2:	19 82       	std	Y+1, r1	; 0x01
	            temp|=(DIO_u8GetPinValue(C4_PORT,C4_PIN)<<0);
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	60 e0       	ldi	r22, 0x00	; 0
    24b8:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    24bc:	98 2f       	mov	r25, r24
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	89 2b       	or	r24, r25
    24c2:	89 83       	std	Y+1, r24	; 0x01
	            temp|=(DIO_u8GetPinValue(C3_PORT,C3_PIN)<<1);
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    24cc:	88 2f       	mov	r24, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	98 2f       	mov	r25, r24
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	89 2b       	or	r24, r25
    24da:	89 83       	std	Y+1, r24	; 0x01
	            temp|=(DIO_u8GetPinValue(C2_PORT,C2_PIN)<<2);
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	62 e0       	ldi	r22, 0x02	; 2
    24e0:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	98 2f       	mov	r25, r24
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	89 2b       	or	r24, r25
    24f6:	89 83       	std	Y+1, r24	; 0x01
	            temp|=(DIO_u8GetPinValue(C1_PORT,C1_PIN)<<3);
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	63 e0       	ldi	r22, 0x03	; 3
    24fc:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2500:	88 2f       	mov	r24, r24
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	98 2f       	mov	r25, r24
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	89 2b       	or	r24, r25
    2516:	89 83       	std	Y+1, r24	; 0x01

	            switch(temp)
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	3b 83       	std	Y+3, r19	; 0x03
    2520:	2a 83       	std	Y+2, r18	; 0x02
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	9b 81       	ldd	r25, Y+3	; 0x03
    2526:	8b 30       	cpi	r24, 0x0B	; 11
    2528:	91 05       	cpc	r25, r1
    252a:	d9 f0       	breq	.+54     	; 0x2562 <READ_SWITCHES+0x396>
    252c:	2a 81       	ldd	r18, Y+2	; 0x02
    252e:	3b 81       	ldd	r19, Y+3	; 0x03
    2530:	2c 30       	cpi	r18, 0x0C	; 12
    2532:	31 05       	cpc	r19, r1
    2534:	34 f4       	brge	.+12     	; 0x2542 <READ_SWITCHES+0x376>
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	9b 81       	ldd	r25, Y+3	; 0x03
    253a:	87 30       	cpi	r24, 0x07	; 7
    253c:	91 05       	cpc	r25, r1
    253e:	a1 f0       	breq	.+40     	; 0x2568 <READ_SWITCHES+0x39c>
    2540:	16 c0       	rjmp	.+44     	; 0x256e <READ_SWITCHES+0x3a2>
    2542:	2a 81       	ldd	r18, Y+2	; 0x02
    2544:	3b 81       	ldd	r19, Y+3	; 0x03
    2546:	2d 30       	cpi	r18, 0x0D	; 13
    2548:	31 05       	cpc	r19, r1
    254a:	41 f0       	breq	.+16     	; 0x255c <READ_SWITCHES+0x390>
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	9b 81       	ldd	r25, Y+3	; 0x03
    2550:	8e 30       	cpi	r24, 0x0E	; 14
    2552:	91 05       	cpc	r25, r1
    2554:	61 f4       	brne	.+24     	; 0x256e <READ_SWITCHES+0x3a2>
	            {
	            case 0x0E:
	         	   return '+';
    2556:	9b e2       	ldi	r25, 0x2B	; 43
    2558:	98 87       	std	Y+8, r25	; 0x08
    255a:	0b c0       	rjmp	.+22     	; 0x2572 <READ_SWITCHES+0x3a6>
	            case 0x0D:
	            	   return 3;
    255c:	23 e0       	ldi	r18, 0x03	; 3
    255e:	28 87       	std	Y+8, r18	; 0x08
    2560:	08 c0       	rjmp	.+16     	; 0x2572 <READ_SWITCHES+0x3a6>
	            case 0x0B:
	            	   return 2;
    2562:	32 e0       	ldi	r19, 0x02	; 2
    2564:	38 87       	std	Y+8, r19	; 0x08
    2566:	05 c0       	rjmp	.+10     	; 0x2572 <READ_SWITCHES+0x3a6>
	            case 0x07:
	            	   return 1;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	88 87       	std	Y+8, r24	; 0x08
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <READ_SWITCHES+0x3a6>


	            }

	            return no_key;
    256e:	9f ef       	ldi	r25, 0xFF	; 255
    2570:	98 87       	std	Y+8, r25	; 0x08
    2572:	88 85       	ldd	r24, Y+8	; 0x08

	}
    2574:	2a 96       	adiw	r28, 0x0a	; 10
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <get_key>:
         	// Means no key has been pressed


char get_key(void)           //get key from user
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	0f 92       	push	r0
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
	char key = 'n';              //assume no key pressed
    2590:	8e e6       	ldi	r24, 0x6E	; 110
    2592:	89 83       	std	Y+1, r24	; 0x01
    2594:	03 c0       	rjmp	.+6      	; 0x259c <get_key+0x16>

	while(key=='n')              //wait untill a key is pressed
		key = READ_SWITCHES();   //scan the keys again and again
    2596:	0e 94 e6 10 	call	0x21cc	; 0x21cc <READ_SWITCHES>
    259a:	89 83       	std	Y+1, r24	; 0x01

char get_key(void)           //get key from user
{
	char key = 'n';              //assume no key pressed

	while(key=='n')              //wait untill a key is pressed
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	8e 36       	cpi	r24, 0x6E	; 110
    25a0:	d1 f3       	breq	.-12     	; 0x2596 <get_key+0x10>
		key = READ_SWITCHES();   //scan the keys again and again

	return key;                  //when key pressed then return its value
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    25a4:	0f 90       	pop	r0
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <get_num>:

int get_num(char ch)         //convert char into int
{
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <get_num+0x6>
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <get_num+0x8>
    25b4:	0f 92       	push	r0
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	89 83       	std	Y+1, r24	; 0x01
	switch(ch)
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	3d 83       	std	Y+5, r19	; 0x05
    25c4:	2c 83       	std	Y+4, r18	; 0x04
    25c6:	8c 81       	ldd	r24, Y+4	; 0x04
    25c8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ca:	85 33       	cpi	r24, 0x35	; 53
    25cc:	91 05       	cpc	r25, r1
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <get_num+0x26>
    25d0:	5e c0       	rjmp	.+188    	; 0x268e <get_num+0xe2>
    25d2:	2c 81       	ldd	r18, Y+4	; 0x04
    25d4:	3d 81       	ldd	r19, Y+5	; 0x05
    25d6:	26 33       	cpi	r18, 0x36	; 54
    25d8:	31 05       	cpc	r19, r1
    25da:	0c f5       	brge	.+66     	; 0x261e <get_num+0x72>
    25dc:	8c 81       	ldd	r24, Y+4	; 0x04
    25de:	9d 81       	ldd	r25, Y+5	; 0x05
    25e0:	82 33       	cpi	r24, 0x32	; 50
    25e2:	91 05       	cpc	r25, r1
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <get_num+0x3c>
    25e6:	44 c0       	rjmp	.+136    	; 0x2670 <get_num+0xc4>
    25e8:	2c 81       	ldd	r18, Y+4	; 0x04
    25ea:	3d 81       	ldd	r19, Y+5	; 0x05
    25ec:	23 33       	cpi	r18, 0x33	; 51
    25ee:	31 05       	cpc	r19, r1
    25f0:	5c f4       	brge	.+22     	; 0x2608 <get_num+0x5c>
    25f2:	8c 81       	ldd	r24, Y+4	; 0x04
    25f4:	9d 81       	ldd	r25, Y+5	; 0x05
    25f6:	80 33       	cpi	r24, 0x30	; 48
    25f8:	91 05       	cpc	r25, r1
    25fa:	91 f1       	breq	.+100    	; 0x2660 <get_num+0xb4>
    25fc:	2c 81       	ldd	r18, Y+4	; 0x04
    25fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2600:	21 33       	cpi	r18, 0x31	; 49
    2602:	31 05       	cpc	r19, r1
    2604:	81 f1       	breq	.+96     	; 0x2666 <get_num+0xba>
    2606:	65 c0       	rjmp	.+202    	; 0x26d2 <get_num+0x126>
    2608:	8c 81       	ldd	r24, Y+4	; 0x04
    260a:	9d 81       	ldd	r25, Y+5	; 0x05
    260c:	83 33       	cpi	r24, 0x33	; 51
    260e:	91 05       	cpc	r25, r1
    2610:	a1 f1       	breq	.+104    	; 0x267a <get_num+0xce>
    2612:	2c 81       	ldd	r18, Y+4	; 0x04
    2614:	3d 81       	ldd	r19, Y+5	; 0x05
    2616:	24 33       	cpi	r18, 0x34	; 52
    2618:	31 05       	cpc	r19, r1
    261a:	a1 f1       	breq	.+104    	; 0x2684 <get_num+0xd8>
    261c:	5a c0       	rjmp	.+180    	; 0x26d2 <get_num+0x126>
    261e:	8c 81       	ldd	r24, Y+4	; 0x04
    2620:	9d 81       	ldd	r25, Y+5	; 0x05
    2622:	88 33       	cpi	r24, 0x38	; 56
    2624:	91 05       	cpc	r25, r1
    2626:	09 f4       	brne	.+2      	; 0x262a <get_num+0x7e>
    2628:	41 c0       	rjmp	.+130    	; 0x26ac <get_num+0x100>
    262a:	2c 81       	ldd	r18, Y+4	; 0x04
    262c:	3d 81       	ldd	r19, Y+5	; 0x05
    262e:	29 33       	cpi	r18, 0x39	; 57
    2630:	31 05       	cpc	r19, r1
    2632:	5c f4       	brge	.+22     	; 0x264a <get_num+0x9e>
    2634:	8c 81       	ldd	r24, Y+4	; 0x04
    2636:	9d 81       	ldd	r25, Y+5	; 0x05
    2638:	86 33       	cpi	r24, 0x36	; 54
    263a:	91 05       	cpc	r25, r1
    263c:	69 f1       	breq	.+90     	; 0x2698 <get_num+0xec>
    263e:	2c 81       	ldd	r18, Y+4	; 0x04
    2640:	3d 81       	ldd	r19, Y+5	; 0x05
    2642:	27 33       	cpi	r18, 0x37	; 55
    2644:	31 05       	cpc	r19, r1
    2646:	69 f1       	breq	.+90     	; 0x26a2 <get_num+0xf6>
    2648:	44 c0       	rjmp	.+136    	; 0x26d2 <get_num+0x126>
    264a:	8c 81       	ldd	r24, Y+4	; 0x04
    264c:	9d 81       	ldd	r25, Y+5	; 0x05
    264e:	89 33       	cpi	r24, 0x39	; 57
    2650:	91 05       	cpc	r25, r1
    2652:	89 f1       	breq	.+98     	; 0x26b6 <get_num+0x10a>
    2654:	2c 81       	ldd	r18, Y+4	; 0x04
    2656:	3d 81       	ldd	r19, Y+5	; 0x05
    2658:	23 34       	cpi	r18, 0x43	; 67
    265a:	31 05       	cpc	r19, r1
    265c:	89 f1       	breq	.+98     	; 0x26c0 <get_num+0x114>
    265e:	39 c0       	rjmp	.+114    	; 0x26d2 <get_num+0x126>
	{
		case '0': return 0; break;
    2660:	1b 82       	std	Y+3, r1	; 0x03
    2662:	1a 82       	std	Y+2, r1	; 0x02
    2664:	3e c0       	rjmp	.+124    	; 0x26e2 <get_num+0x136>
		case '1': return 1; break;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9b 83       	std	Y+3, r25	; 0x03
    266c:	8a 83       	std	Y+2, r24	; 0x02
    266e:	39 c0       	rjmp	.+114    	; 0x26e2 <get_num+0x136>
		case '2': return 2; break;
    2670:	22 e0       	ldi	r18, 0x02	; 2
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	3b 83       	std	Y+3, r19	; 0x03
    2676:	2a 83       	std	Y+2, r18	; 0x02
    2678:	34 c0       	rjmp	.+104    	; 0x26e2 <get_num+0x136>
		case '3': return 3; break;
    267a:	83 e0       	ldi	r24, 0x03	; 3
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9b 83       	std	Y+3, r25	; 0x03
    2680:	8a 83       	std	Y+2, r24	; 0x02
    2682:	2f c0       	rjmp	.+94     	; 0x26e2 <get_num+0x136>
		case '4': return 4; break;
    2684:	24 e0       	ldi	r18, 0x04	; 4
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	3b 83       	std	Y+3, r19	; 0x03
    268a:	2a 83       	std	Y+2, r18	; 0x02
    268c:	2a c0       	rjmp	.+84     	; 0x26e2 <get_num+0x136>
		case '5': return 5; break;
    268e:	85 e0       	ldi	r24, 0x05	; 5
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9b 83       	std	Y+3, r25	; 0x03
    2694:	8a 83       	std	Y+2, r24	; 0x02
    2696:	25 c0       	rjmp	.+74     	; 0x26e2 <get_num+0x136>
		case '6': return 6; break;
    2698:	26 e0       	ldi	r18, 0x06	; 6
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	3b 83       	std	Y+3, r19	; 0x03
    269e:	2a 83       	std	Y+2, r18	; 0x02
    26a0:	20 c0       	rjmp	.+64     	; 0x26e2 <get_num+0x136>
		case '7': return 7; break;
    26a2:	87 e0       	ldi	r24, 0x07	; 7
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	9b 83       	std	Y+3, r25	; 0x03
    26a8:	8a 83       	std	Y+2, r24	; 0x02
    26aa:	1b c0       	rjmp	.+54     	; 0x26e2 <get_num+0x136>
		case '8': return 8; break;
    26ac:	28 e0       	ldi	r18, 0x08	; 8
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	3b 83       	std	Y+3, r19	; 0x03
    26b2:	2a 83       	std	Y+2, r18	; 0x02
    26b4:	16 c0       	rjmp	.+44     	; 0x26e2 <get_num+0x136>
		case '9': return 9; break;
    26b6:	89 e0       	ldi	r24, 0x09	; 9
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9b 83       	std	Y+3, r25	; 0x03
    26bc:	8a 83       	std	Y+2, r24	; 0x02
    26be:	11 c0       	rjmp	.+34     	; 0x26e2 <get_num+0x136>
		case 'C': writecmd(0x01); return Error; break;  //this is used as a clear screen and then reset by setting error
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <writecmd>
    26c8:	2d e0       	ldi	r18, 0x0D	; 13
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	3b 83       	std	Y+3, r19	; 0x03
    26ce:	2a 83       	std	Y+2, r18	; 0x02
    26d0:	08 c0       	rjmp	.+16     	; 0x26e2 <get_num+0x136>
		default: DispError(0); return Error; break;     //it means wrong input
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 a6 13 	call	0x274c	; 0x274c <DispError>
    26da:	8d e0       	ldi	r24, 0x0D	; 13
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9b 83       	std	Y+3, r25	; 0x03
    26e0:	8a 83       	std	Y+2, r24	; 0x02
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <get_func>:

char get_func(char chf)            //detects the errors in inputted function
{
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <get_func+0x6>
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	89 83       	std	Y+1, r24	; 0x01
	if(chf=='C')                   //if clear screen then clear the LCD and reset
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	83 34       	cpi	r24, 0x43	; 67
    2706:	39 f4       	brne	.+14     	; 0x2716 <get_func+0x20>
	{
		writecmd(0x01);            //clear display
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <writecmd>

		return 'e';
    2710:	85 e6       	ldi	r24, 0x65	; 101
    2712:	8a 83       	std	Y+2, r24	; 0x02
    2714:	15 c0       	rjmp	.+42     	; 0x2740 <get_func+0x4a>
	}

	if( chf!='+' && chf!='-' && chf!='x' && chf!='/' )  //if input is not from allowed funtions then show error
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	8b 32       	cpi	r24, 0x2B	; 43
    271a:	81 f0       	breq	.+32     	; 0x273c <get_func+0x46>
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	8d 32       	cpi	r24, 0x2D	; 45
    2720:	69 f0       	breq	.+26     	; 0x273c <get_func+0x46>
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	88 37       	cpi	r24, 0x78	; 120
    2726:	51 f0       	breq	.+20     	; 0x273c <get_func+0x46>
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	8f 32       	cpi	r24, 0x2F	; 47
    272c:	39 f0       	breq	.+14     	; 0x273c <get_func+0x46>
	{
		DispError(1);
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	0e 94 a6 13 	call	0x274c	; 0x274c <DispError>

		return 'e';
    2736:	85 e6       	ldi	r24, 0x65	; 101
    2738:	8a 83       	std	Y+2, r24	; 0x02
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <get_func+0x4a>
	}

	return chf;                        //function is correct so return the correct function
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	8a 83       	std	Y+2, r24	; 0x02
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <DispError>:


void DispError(int numb)           //displays differet error messages
{
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	00 d0       	rcall	.+0      	; 0x2752 <DispError+0x6>
    2752:	00 d0       	rcall	.+0      	; 0x2754 <DispError+0x8>
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	9a 83       	std	Y+2, r25	; 0x02
    275a:	89 83       	std	Y+1, r24	; 0x01
	writecmd(0x01);                //clear display
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <writecmd>

	switch(numb)
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	9c 83       	std	Y+4, r25	; 0x04
    276a:	8b 83       	std	Y+3, r24	; 0x03
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	31 f0       	breq	.+12     	; 0x2780 <DispError+0x34>
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	9c 81       	ldd	r25, Y+4	; 0x04
    2778:	81 30       	cpi	r24, 0x01	; 1
    277a:	91 05       	cpc	r25, r1
    277c:	31 f0       	breq	.+12     	; 0x278a <DispError+0x3e>
    277e:	0a c0       	rjmp	.+20     	; 0x2794 <DispError+0x48>
	{
	case 0: 	writeline("Wrong Input");      break;
    2780:	80 e6       	ldi	r24, 0x60	; 96
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	0e 94 b6 10 	call	0x216c	; 0x216c <writeline>
    2788:	09 c0       	rjmp	.+18     	; 0x279c <DispError+0x50>
	case 1: 	writeline("Wrong Function");   break;
    278a:	8c e6       	ldi	r24, 0x6C	; 108
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	0e 94 b6 10 	call	0x216c	; 0x216c <writeline>
    2792:	04 c0       	rjmp	.+8      	; 0x279c <DispError+0x50>
	default:    writeline("Wrong Input");      break;
    2794:	80 e6       	ldi	r24, 0x60	; 96
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	0e 94 b6 10 	call	0x216c	; 0x216c <writeline>
	}
}
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <disp_num>:

void disp_num(int numb)            //displays number on LCD
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <disp_num+0x6>
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <disp_num+0x8>
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	9c 83       	std	Y+4, r25	; 0x04
    27b8:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char UnitDigit  = 0;  //It will contain unit digit of numb
    27ba:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char TenthDigit = 0;  //It will contain 10th position digit of numb
    27bc:	19 82       	std	Y+1, r1	; 0x01

	if(numb<0)
    27be:	8b 81       	ldd	r24, Y+3	; 0x03
    27c0:	9c 81       	ldd	r25, Y+4	; 0x04
    27c2:	99 23       	and	r25, r25
    27c4:	54 f4       	brge	.+20     	; 0x27da <disp_num+0x30>
	{
		numb = -1*numb;  // Make number positive
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ca:	90 95       	com	r25
    27cc:	81 95       	neg	r24
    27ce:	9f 4f       	sbci	r25, 0xFF	; 255
    27d0:	9c 83       	std	Y+4, r25	; 0x04
    27d2:	8b 83       	std	Y+3, r24	; 0x03
		writedata('-');	 // Display a negative sign on LCD
    27d4:	8d e2       	ldi	r24, 0x2D	; 45
    27d6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <writedata>
	}

	TenthDigit = (numb/10);	          // Findout Tenth Digit
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	9c 81       	ldd	r25, Y+4	; 0x04
    27de:	2a e0       	ldi	r18, 0x0A	; 10
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	b9 01       	movw	r22, r18
    27e4:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__divmodhi4>
    27e8:	cb 01       	movw	r24, r22
    27ea:	89 83       	std	Y+1, r24	; 0x01

	if( TenthDigit != 0)	          // If it is zero, then don't display
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	88 23       	and	r24, r24
    27f0:	21 f0       	breq	.+8      	; 0x27fa <disp_num+0x50>
		writedata(TenthDigit+0x30);	  // Make Char of TenthDigit and then display it on LCD
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	80 5d       	subi	r24, 0xD0	; 208
    27f6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <writedata>

	UnitDigit = numb - TenthDigit*10;
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	88 2f       	mov	r24, r24
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9c 01       	movw	r18, r24
    2802:	22 0f       	add	r18, r18
    2804:	33 1f       	adc	r19, r19
    2806:	c9 01       	movw	r24, r18
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	82 0f       	add	r24, r18
    2812:	93 1f       	adc	r25, r19
    2814:	90 95       	com	r25
    2816:	81 95       	neg	r24
    2818:	9f 4f       	sbci	r25, 0xFF	; 255
    281a:	98 2f       	mov	r25, r24
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	89 0f       	add	r24, r25
    2820:	8a 83       	std	Y+2, r24	; 0x02

	writedata(UnitDigit+0x30);	  // Make Char of UnitDigit and then display it on LCD
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	80 5d       	subi	r24, 0xD0	; 208
    2826:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <writedata>
}
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <KEYPAD_voidInit>:
#include"DIO_interface.h"
#include"keypad_interface.h"
#include"keypad_config.h"

void KEYPAD_voidInit(void)
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(R1_PORT,R1_PIN,OUTPUT);
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	67 e0       	ldi	r22, 0x07	; 7
    2844:	41 e0       	ldi	r20, 0x01	; 1
    2846:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(R2_PORT,R2_PIN,OUTPUT);
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	66 e0       	ldi	r22, 0x06	; 6
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(R3_PORT,R3_PIN,OUTPUT);
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	65 e0       	ldi	r22, 0x05	; 5
    2858:	41 e0       	ldi	r20, 0x01	; 1
    285a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(R4_PORT,R4_PIN,OUTPUT);
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	64 e0       	ldi	r22, 0x04	; 4
    2862:	41 e0       	ldi	r20, 0x01	; 1
    2864:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>

	DIO_voidSetPinDir(C1_PORT,C1_PIN,INPUT);
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	63 e0       	ldi	r22, 0x03	; 3
    286c:	40 e0       	ldi	r20, 0x00	; 0
    286e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(C2_PORT,C2_PIN,INPUT);
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	62 e0       	ldi	r22, 0x02	; 2
    2876:	40 e0       	ldi	r20, 0x00	; 0
    2878:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(C3_PORT,C3_PIN,INPUT);
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	61 e0       	ldi	r22, 0x01	; 1
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(C4_PORT,C4_PIN,INPUT);
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDir>

	DIO_voidSetPinValue(C1_PORT,C1_PIN,HIGH);
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	63 e0       	ldi	r22, 0x03	; 3
    2894:	41 e0       	ldi	r20, 0x01	; 1
    2896:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(C2_PORT,C2_PIN,HIGH);
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	62 e0       	ldi	r22, 0x02	; 2
    289e:	41 e0       	ldi	r20, 0x01	; 1
    28a0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(C3_PORT,C3_PIN,HIGH);
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	61 e0       	ldi	r22, 0x01	; 1
    28a8:	41 e0       	ldi	r20, 0x01	; 1
    28aa:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(C4_PORT,C4_PIN,HIGH);
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	41 e0       	ldi	r20, 0x01	; 1
    28b4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>


}
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <KEYPAD_u8GetKey>:
u8 KEYPAD_u8GetKey(void)
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	2a 97       	sbiw	r28, 0x0a	; 10
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
	u8 temp;
	DIO_voidSetPinValue(R1_PORT,R1_PIN,LOW); //DETECT ONE PUTTON ROW
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	67 e0       	ldi	r22, 0x07	; 7
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(R2_PORT,R2_PIN,HIGH);
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	66 e0       	ldi	r22, 0x06	; 6
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(R3_PORT,R3_PIN,HIGH);
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	65 e0       	ldi	r22, 0x05	; 5
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(R4_PORT,R4_PIN,HIGH);
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	64 e0       	ldi	r22, 0x04	; 4
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

   temp=0;
    28fa:	19 82       	std	Y+1, r1	; 0x01
   temp|=(DIO_u8GetPinValue(C4_PORT,C4_PIN)<<0);
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	60 e0       	ldi	r22, 0x00	; 0
    2900:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2904:	98 2f       	mov	r25, r24
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	89 2b       	or	r24, r25
    290a:	89 83       	std	Y+1, r24	; 0x01
   temp|=(DIO_u8GetPinValue(C3_PORT,C3_PIN)<<1);
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2914:	88 2f       	mov	r24, r24
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	88 0f       	add	r24, r24
    291a:	99 1f       	adc	r25, r25
    291c:	98 2f       	mov	r25, r24
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	89 2b       	or	r24, r25
    2922:	89 83       	std	Y+1, r24	; 0x01
   temp|=(DIO_u8GetPinValue(C2_PORT,C2_PIN)<<2);
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	62 e0       	ldi	r22, 0x02	; 2
    2928:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    292c:	88 2f       	mov	r24, r24
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	88 0f       	add	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	98 2f       	mov	r25, r24
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	89 2b       	or	r24, r25
    293e:	89 83       	std	Y+1, r24	; 0x01
   temp|=(DIO_u8GetPinValue(C1_PORT,C1_PIN)<<3);
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	63 e0       	ldi	r22, 0x03	; 3
    2944:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2948:	88 2f       	mov	r24, r24
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	98 2f       	mov	r25, r24
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	89 2b       	or	r24, r25
    295e:	89 83       	std	Y+1, r24	; 0x01

   switch(temp)
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	3a 87       	std	Y+10, r19	; 0x0a
    2968:	29 87       	std	Y+9, r18	; 0x09
    296a:	89 85       	ldd	r24, Y+9	; 0x09
    296c:	9a 85       	ldd	r25, Y+10	; 0x0a
    296e:	8b 30       	cpi	r24, 0x0B	; 11
    2970:	91 05       	cpc	r25, r1
    2972:	d9 f0       	breq	.+54     	; 0x29aa <KEYPAD_u8GetKey+0xec>
    2974:	29 85       	ldd	r18, Y+9	; 0x09
    2976:	3a 85       	ldd	r19, Y+10	; 0x0a
    2978:	2c 30       	cpi	r18, 0x0C	; 12
    297a:	31 05       	cpc	r19, r1
    297c:	34 f4       	brge	.+12     	; 0x298a <KEYPAD_u8GetKey+0xcc>
    297e:	89 85       	ldd	r24, Y+9	; 0x09
    2980:	9a 85       	ldd	r25, Y+10	; 0x0a
    2982:	87 30       	cpi	r24, 0x07	; 7
    2984:	91 05       	cpc	r25, r1
    2986:	99 f0       	breq	.+38     	; 0x29ae <KEYPAD_u8GetKey+0xf0>
    2988:	15 c0       	rjmp	.+42     	; 0x29b4 <KEYPAD_u8GetKey+0xf6>
    298a:	29 85       	ldd	r18, Y+9	; 0x09
    298c:	3a 85       	ldd	r19, Y+10	; 0x0a
    298e:	2d 30       	cpi	r18, 0x0D	; 13
    2990:	31 05       	cpc	r19, r1
    2992:	41 f0       	breq	.+16     	; 0x29a4 <KEYPAD_u8GetKey+0xe6>
    2994:	89 85       	ldd	r24, Y+9	; 0x09
    2996:	9a 85       	ldd	r25, Y+10	; 0x0a
    2998:	8e 30       	cpi	r24, 0x0E	; 14
    299a:	91 05       	cpc	r25, r1
    299c:	59 f4       	brne	.+22     	; 0x29b4 <KEYPAD_u8GetKey+0xf6>
   {
   case 0x0E:
	   return '*';
    299e:	9a e2       	ldi	r25, 0x2A	; 42
    29a0:	98 87       	std	Y+8, r25	; 0x08
    29a2:	60 c1       	rjmp	.+704    	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>
   case 0x0D:
   	   return '#';
    29a4:	23 e2       	ldi	r18, 0x23	; 35
    29a6:	28 87       	std	Y+8, r18	; 0x08
    29a8:	5d c1       	rjmp	.+698    	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>
   case 0x0B:
   	   return 0;
    29aa:	18 86       	std	Y+8, r1	; 0x08
    29ac:	5b c1       	rjmp	.+694    	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>
   case 0x07:
   	   return '=';
    29ae:	3d e3       	ldi	r19, 0x3D	; 61
    29b0:	38 87       	std	Y+8, r19	; 0x08
    29b2:	58 c1       	rjmp	.+688    	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>


   }

    DIO_voidSetPinValue(R1_PORT,R1_PIN,HIGH); //DETECT ONE PUTTON ROW
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	67 e0       	ldi	r22, 0x07	; 7
    29b8:	41 e0       	ldi	r20, 0x01	; 1
    29ba:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
   	DIO_voidSetPinValue(R2_PORT,R2_PIN,LOW);
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	66 e0       	ldi	r22, 0x06	; 6
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
   	DIO_voidSetPinValue(R3_PORT,R3_PIN,HIGH);
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	65 e0       	ldi	r22, 0x05	; 5
    29cc:	41 e0       	ldi	r20, 0x01	; 1
    29ce:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
   	DIO_voidSetPinValue(R4_PORT,R4_PIN,HIGH);
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	64 e0       	ldi	r22, 0x04	; 4
    29d6:	41 e0       	ldi	r20, 0x01	; 1
    29d8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

      temp=0;
    29dc:	19 82       	std	Y+1, r1	; 0x01
      temp|=(DIO_u8GetPinValue(C4_PORT,C4_PIN)<<0);
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    29e6:	98 2f       	mov	r25, r24
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	89 2b       	or	r24, r25
    29ec:	89 83       	std	Y+1, r24	; 0x01
      temp|=(DIO_u8GetPinValue(C3_PORT,C3_PIN)<<1);
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	61 e0       	ldi	r22, 0x01	; 1
    29f2:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    29f6:	88 2f       	mov	r24, r24
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	98 2f       	mov	r25, r24
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	89 2b       	or	r24, r25
    2a04:	89 83       	std	Y+1, r24	; 0x01
      temp|=(DIO_u8GetPinValue(C2_PORT,C2_PIN)<<2);
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	62 e0       	ldi	r22, 0x02	; 2
    2a0a:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2a0e:	88 2f       	mov	r24, r24
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	88 0f       	add	r24, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	89 2b       	or	r24, r25
    2a20:	89 83       	std	Y+1, r24	; 0x01
      temp|=(DIO_u8GetPinValue(C1_PORT,C1_PIN)<<3);
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	63 e0       	ldi	r22, 0x03	; 3
    2a26:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2a2a:	88 2f       	mov	r24, r24
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	98 2f       	mov	r25, r24
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	89 2b       	or	r24, r25
    2a40:	89 83       	std	Y+1, r24	; 0x01

      switch(temp)
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	28 2f       	mov	r18, r24
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	3f 83       	std	Y+7, r19	; 0x07
    2a4a:	2e 83       	std	Y+6, r18	; 0x06
    2a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a50:	8b 30       	cpi	r24, 0x0B	; 11
    2a52:	91 05       	cpc	r25, r1
    2a54:	d9 f0       	breq	.+54     	; 0x2a8c <KEYPAD_u8GetKey+0x1ce>
    2a56:	2e 81       	ldd	r18, Y+6	; 0x06
    2a58:	3f 81       	ldd	r19, Y+7	; 0x07
    2a5a:	2c 30       	cpi	r18, 0x0C	; 12
    2a5c:	31 05       	cpc	r19, r1
    2a5e:	34 f4       	brge	.+12     	; 0x2a6c <KEYPAD_u8GetKey+0x1ae>
    2a60:	8e 81       	ldd	r24, Y+6	; 0x06
    2a62:	9f 81       	ldd	r25, Y+7	; 0x07
    2a64:	87 30       	cpi	r24, 0x07	; 7
    2a66:	91 05       	cpc	r25, r1
    2a68:	a1 f0       	breq	.+40     	; 0x2a92 <KEYPAD_u8GetKey+0x1d4>
    2a6a:	16 c0       	rjmp	.+44     	; 0x2a98 <KEYPAD_u8GetKey+0x1da>
    2a6c:	2e 81       	ldd	r18, Y+6	; 0x06
    2a6e:	3f 81       	ldd	r19, Y+7	; 0x07
    2a70:	2d 30       	cpi	r18, 0x0D	; 13
    2a72:	31 05       	cpc	r19, r1
    2a74:	41 f0       	breq	.+16     	; 0x2a86 <KEYPAD_u8GetKey+0x1c8>
    2a76:	8e 81       	ldd	r24, Y+6	; 0x06
    2a78:	9f 81       	ldd	r25, Y+7	; 0x07
    2a7a:	8e 30       	cpi	r24, 0x0E	; 14
    2a7c:	91 05       	cpc	r25, r1
    2a7e:	61 f4       	brne	.+24     	; 0x2a98 <KEYPAD_u8GetKey+0x1da>
      {
      case 0x0E:
   	   return '/';
    2a80:	9f e2       	ldi	r25, 0x2F	; 47
    2a82:	98 87       	std	Y+8, r25	; 0x08
    2a84:	ef c0       	rjmp	.+478    	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>
      case 0x0D:
      	   return 9;
    2a86:	29 e0       	ldi	r18, 0x09	; 9
    2a88:	28 87       	std	Y+8, r18	; 0x08
    2a8a:	ec c0       	rjmp	.+472    	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>
      case 0x0B:
      	   return 8;
    2a8c:	38 e0       	ldi	r19, 0x08	; 8
    2a8e:	38 87       	std	Y+8, r19	; 0x08
    2a90:	e9 c0       	rjmp	.+466    	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>
      case 0x07:
      	   return 7;
    2a92:	87 e0       	ldi	r24, 0x07	; 7
    2a94:	88 87       	std	Y+8, r24	; 0x08
    2a96:	e6 c0       	rjmp	.+460    	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>


      }
        DIO_voidSetPinValue(R1_PORT,R1_PIN,HIGH); //DETECT ONE PUTTON ROW
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	67 e0       	ldi	r22, 0x07	; 7
    2a9c:	41 e0       	ldi	r20, 0x01	; 1
    2a9e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
      	DIO_voidSetPinValue(R2_PORT,R2_PIN,HIGH);
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	66 e0       	ldi	r22, 0x06	; 6
    2aa6:	41 e0       	ldi	r20, 0x01	; 1
    2aa8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
      	DIO_voidSetPinValue(R3_PORT,R3_PIN,LOW);
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	65 e0       	ldi	r22, 0x05	; 5
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
      	DIO_voidSetPinValue(R4_PORT,R4_PIN,HIGH);
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	64 e0       	ldi	r22, 0x04	; 4
    2aba:	41 e0       	ldi	r20, 0x01	; 1
    2abc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

         temp=0;
    2ac0:	19 82       	std	Y+1, r1	; 0x01
         temp|=(DIO_u8GetPinValue(C4_PORT,C4_PIN)<<0);
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	60 e0       	ldi	r22, 0x00	; 0
    2ac6:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2aca:	98 2f       	mov	r25, r24
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	89 2b       	or	r24, r25
    2ad0:	89 83       	std	Y+1, r24	; 0x01
         temp|=(DIO_u8GetPinValue(C3_PORT,C3_PIN)<<1);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	61 e0       	ldi	r22, 0x01	; 1
    2ad6:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2ada:	88 2f       	mov	r24, r24
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	98 2f       	mov	r25, r24
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	89 2b       	or	r24, r25
    2ae8:	89 83       	std	Y+1, r24	; 0x01
         temp|=(DIO_u8GetPinValue(C2_PORT,C2_PIN)<<2);
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	62 e0       	ldi	r22, 0x02	; 2
    2aee:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	98 2f       	mov	r25, r24
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	89 2b       	or	r24, r25
    2b04:	89 83       	std	Y+1, r24	; 0x01
         temp|=(DIO_u8GetPinValue(C1_PORT,C1_PIN)<<3);
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	63 e0       	ldi	r22, 0x03	; 3
    2b0a:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2b0e:	88 2f       	mov	r24, r24
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	88 0f       	add	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	98 2f       	mov	r25, r24
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	89 2b       	or	r24, r25
    2b24:	89 83       	std	Y+1, r24	; 0x01

         switch(temp)
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
    2b28:	28 2f       	mov	r18, r24
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	3d 83       	std	Y+5, r19	; 0x05
    2b2e:	2c 83       	std	Y+4, r18	; 0x04
    2b30:	8c 81       	ldd	r24, Y+4	; 0x04
    2b32:	9d 81       	ldd	r25, Y+5	; 0x05
    2b34:	8b 30       	cpi	r24, 0x0B	; 11
    2b36:	91 05       	cpc	r25, r1
    2b38:	d9 f0       	breq	.+54     	; 0x2b70 <KEYPAD_u8GetKey+0x2b2>
    2b3a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b3c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b3e:	2c 30       	cpi	r18, 0x0C	; 12
    2b40:	31 05       	cpc	r19, r1
    2b42:	34 f4       	brge	.+12     	; 0x2b50 <KEYPAD_u8GetKey+0x292>
    2b44:	8c 81       	ldd	r24, Y+4	; 0x04
    2b46:	9d 81       	ldd	r25, Y+5	; 0x05
    2b48:	87 30       	cpi	r24, 0x07	; 7
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	a1 f0       	breq	.+40     	; 0x2b76 <KEYPAD_u8GetKey+0x2b8>
    2b4e:	16 c0       	rjmp	.+44     	; 0x2b7c <KEYPAD_u8GetKey+0x2be>
    2b50:	2c 81       	ldd	r18, Y+4	; 0x04
    2b52:	3d 81       	ldd	r19, Y+5	; 0x05
    2b54:	2d 30       	cpi	r18, 0x0D	; 13
    2b56:	31 05       	cpc	r19, r1
    2b58:	41 f0       	breq	.+16     	; 0x2b6a <KEYPAD_u8GetKey+0x2ac>
    2b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b5e:	8e 30       	cpi	r24, 0x0E	; 14
    2b60:	91 05       	cpc	r25, r1
    2b62:	61 f4       	brne	.+24     	; 0x2b7c <KEYPAD_u8GetKey+0x2be>
         {
         case 0x0E:
      	   return '-';
    2b64:	9d e2       	ldi	r25, 0x2D	; 45
    2b66:	98 87       	std	Y+8, r25	; 0x08
    2b68:	7d c0       	rjmp	.+250    	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>
         case 0x0D:
         	   return 6;
    2b6a:	26 e0       	ldi	r18, 0x06	; 6
    2b6c:	28 87       	std	Y+8, r18	; 0x08
    2b6e:	7a c0       	rjmp	.+244    	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>
         case 0x0B:
         	   return 5;
    2b70:	35 e0       	ldi	r19, 0x05	; 5
    2b72:	38 87       	std	Y+8, r19	; 0x08
    2b74:	77 c0       	rjmp	.+238    	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>
         case 0x07:
         	   return 4;
    2b76:	84 e0       	ldi	r24, 0x04	; 4
    2b78:	88 87       	std	Y+8, r24	; 0x08
    2b7a:	74 c0       	rjmp	.+232    	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>


         }

           DIO_voidSetPinValue(R1_PORT,R1_PIN,HIGH); //DETECT ONE PUTTON ROW
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	67 e0       	ldi	r22, 0x07	; 7
    2b80:	41 e0       	ldi	r20, 0x01	; 1
    2b82:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
         	DIO_voidSetPinValue(R2_PORT,R2_PIN,HIGH);
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	66 e0       	ldi	r22, 0x06	; 6
    2b8a:	41 e0       	ldi	r20, 0x01	; 1
    2b8c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
         	DIO_voidSetPinValue(R3_PORT,R3_PIN,HIGH);
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	65 e0       	ldi	r22, 0x05	; 5
    2b94:	41 e0       	ldi	r20, 0x01	; 1
    2b96:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>
         	DIO_voidSetPinValue(R4_PORT,R4_PIN,LOW);
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	64 e0       	ldi	r22, 0x04	; 4
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <DIO_voidSetPinValue>

            temp=0;
    2ba4:	19 82       	std	Y+1, r1	; 0x01
            temp|=(DIO_u8GetPinValue(C4_PORT,C4_PIN)<<0);
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	60 e0       	ldi	r22, 0x00	; 0
    2baa:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2bae:	98 2f       	mov	r25, r24
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	89 2b       	or	r24, r25
    2bb4:	89 83       	std	Y+1, r24	; 0x01
            temp|=(DIO_u8GetPinValue(C3_PORT,C3_PIN)<<1);
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	61 e0       	ldi	r22, 0x01	; 1
    2bba:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2bbe:	88 2f       	mov	r24, r24
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	98 2f       	mov	r25, r24
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	89 2b       	or	r24, r25
    2bcc:	89 83       	std	Y+1, r24	; 0x01
            temp|=(DIO_u8GetPinValue(C2_PORT,C2_PIN)<<2);
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	62 e0       	ldi	r22, 0x02	; 2
    2bd2:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2bd6:	88 2f       	mov	r24, r24
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	98 2f       	mov	r25, r24
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	89 2b       	or	r24, r25
    2be8:	89 83       	std	Y+1, r24	; 0x01
            temp|=(DIO_u8GetPinValue(C1_PORT,C1_PIN)<<3);
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	63 e0       	ldi	r22, 0x03	; 3
    2bee:	0e 94 de 07 	call	0xfbc	; 0xfbc <DIO_u8GetPinValue>
    2bf2:	88 2f       	mov	r24, r24
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	88 0f       	add	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	98 2f       	mov	r25, r24
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	89 2b       	or	r24, r25
    2c08:	89 83       	std	Y+1, r24	; 0x01

            switch(temp)
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	28 2f       	mov	r18, r24
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	3b 83       	std	Y+3, r19	; 0x03
    2c12:	2a 83       	std	Y+2, r18	; 0x02
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	9b 81       	ldd	r25, Y+3	; 0x03
    2c18:	8b 30       	cpi	r24, 0x0B	; 11
    2c1a:	91 05       	cpc	r25, r1
    2c1c:	d9 f0       	breq	.+54     	; 0x2c54 <KEYPAD_u8GetKey+0x396>
    2c1e:	2a 81       	ldd	r18, Y+2	; 0x02
    2c20:	3b 81       	ldd	r19, Y+3	; 0x03
    2c22:	2c 30       	cpi	r18, 0x0C	; 12
    2c24:	31 05       	cpc	r19, r1
    2c26:	34 f4       	brge	.+12     	; 0x2c34 <KEYPAD_u8GetKey+0x376>
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2c:	87 30       	cpi	r24, 0x07	; 7
    2c2e:	91 05       	cpc	r25, r1
    2c30:	a1 f0       	breq	.+40     	; 0x2c5a <KEYPAD_u8GetKey+0x39c>
    2c32:	16 c0       	rjmp	.+44     	; 0x2c60 <KEYPAD_u8GetKey+0x3a2>
    2c34:	2a 81       	ldd	r18, Y+2	; 0x02
    2c36:	3b 81       	ldd	r19, Y+3	; 0x03
    2c38:	2d 30       	cpi	r18, 0x0D	; 13
    2c3a:	31 05       	cpc	r19, r1
    2c3c:	41 f0       	breq	.+16     	; 0x2c4e <KEYPAD_u8GetKey+0x390>
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	9b 81       	ldd	r25, Y+3	; 0x03
    2c42:	8e 30       	cpi	r24, 0x0E	; 14
    2c44:	91 05       	cpc	r25, r1
    2c46:	61 f4       	brne	.+24     	; 0x2c60 <KEYPAD_u8GetKey+0x3a2>
            {
            case 0x0E:
         	   return '+';
    2c48:	9b e2       	ldi	r25, 0x2B	; 43
    2c4a:	98 87       	std	Y+8, r25	; 0x08
    2c4c:	0b c0       	rjmp	.+22     	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>
            case 0x0D:
            	   return 3;
    2c4e:	23 e0       	ldi	r18, 0x03	; 3
    2c50:	28 87       	std	Y+8, r18	; 0x08
    2c52:	08 c0       	rjmp	.+16     	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>
            case 0x0B:
            	   return 2;
    2c54:	32 e0       	ldi	r19, 0x02	; 2
    2c56:	38 87       	std	Y+8, r19	; 0x08
    2c58:	05 c0       	rjmp	.+10     	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>
            case 0x07:
            	   return 1;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	88 87       	std	Y+8, r24	; 0x08
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <KEYPAD_u8GetKey+0x3a6>


            }

            return no_key;
    2c60:	9f ef       	ldi	r25, 0xFF	; 255
    2c62:	98 87       	std	Y+8, r25	; 0x08
    2c64:	88 85       	ldd	r24, Y+8	; 0x08

}
    2c66:	2a 96       	adiw	r28, 0x0a	; 10
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <__divmodhi4>:
    2c78:	97 fb       	bst	r25, 7
    2c7a:	09 2e       	mov	r0, r25
    2c7c:	07 26       	eor	r0, r23
    2c7e:	0a d0       	rcall	.+20     	; 0x2c94 <__divmodhi4_neg1>
    2c80:	77 fd       	sbrc	r23, 7
    2c82:	04 d0       	rcall	.+8      	; 0x2c8c <__divmodhi4_neg2>
    2c84:	0c d0       	rcall	.+24     	; 0x2c9e <__udivmodhi4>
    2c86:	06 d0       	rcall	.+12     	; 0x2c94 <__divmodhi4_neg1>
    2c88:	00 20       	and	r0, r0
    2c8a:	1a f4       	brpl	.+6      	; 0x2c92 <__divmodhi4_exit>

00002c8c <__divmodhi4_neg2>:
    2c8c:	70 95       	com	r23
    2c8e:	61 95       	neg	r22
    2c90:	7f 4f       	sbci	r23, 0xFF	; 255

00002c92 <__divmodhi4_exit>:
    2c92:	08 95       	ret

00002c94 <__divmodhi4_neg1>:
    2c94:	f6 f7       	brtc	.-4      	; 0x2c92 <__divmodhi4_exit>
    2c96:	90 95       	com	r25
    2c98:	81 95       	neg	r24
    2c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9c:	08 95       	ret

00002c9e <__udivmodhi4>:
    2c9e:	aa 1b       	sub	r26, r26
    2ca0:	bb 1b       	sub	r27, r27
    2ca2:	51 e1       	ldi	r21, 0x11	; 17
    2ca4:	07 c0       	rjmp	.+14     	; 0x2cb4 <__udivmodhi4_ep>

00002ca6 <__udivmodhi4_loop>:
    2ca6:	aa 1f       	adc	r26, r26
    2ca8:	bb 1f       	adc	r27, r27
    2caa:	a6 17       	cp	r26, r22
    2cac:	b7 07       	cpc	r27, r23
    2cae:	10 f0       	brcs	.+4      	; 0x2cb4 <__udivmodhi4_ep>
    2cb0:	a6 1b       	sub	r26, r22
    2cb2:	b7 0b       	sbc	r27, r23

00002cb4 <__udivmodhi4_ep>:
    2cb4:	88 1f       	adc	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	5a 95       	dec	r21
    2cba:	a9 f7       	brne	.-22     	; 0x2ca6 <__udivmodhi4_loop>
    2cbc:	80 95       	com	r24
    2cbe:	90 95       	com	r25
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	08 95       	ret

00002cc6 <__prologue_saves__>:
    2cc6:	2f 92       	push	r2
    2cc8:	3f 92       	push	r3
    2cca:	4f 92       	push	r4
    2ccc:	5f 92       	push	r5
    2cce:	6f 92       	push	r6
    2cd0:	7f 92       	push	r7
    2cd2:	8f 92       	push	r8
    2cd4:	9f 92       	push	r9
    2cd6:	af 92       	push	r10
    2cd8:	bf 92       	push	r11
    2cda:	cf 92       	push	r12
    2cdc:	df 92       	push	r13
    2cde:	ef 92       	push	r14
    2ce0:	ff 92       	push	r15
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	ca 1b       	sub	r28, r26
    2cf0:	db 0b       	sbc	r29, r27
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	de bf       	out	0x3e, r29	; 62
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	cd bf       	out	0x3d, r28	; 61
    2cfc:	09 94       	ijmp

00002cfe <__epilogue_restores__>:
    2cfe:	2a 88       	ldd	r2, Y+18	; 0x12
    2d00:	39 88       	ldd	r3, Y+17	; 0x11
    2d02:	48 88       	ldd	r4, Y+16	; 0x10
    2d04:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d06:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d08:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d10:	b9 84       	ldd	r11, Y+9	; 0x09
    2d12:	c8 84       	ldd	r12, Y+8	; 0x08
    2d14:	df 80       	ldd	r13, Y+7	; 0x07
    2d16:	ee 80       	ldd	r14, Y+6	; 0x06
    2d18:	fd 80       	ldd	r15, Y+5	; 0x05
    2d1a:	0c 81       	ldd	r16, Y+4	; 0x04
    2d1c:	1b 81       	ldd	r17, Y+3	; 0x03
    2d1e:	aa 81       	ldd	r26, Y+2	; 0x02
    2d20:	b9 81       	ldd	r27, Y+1	; 0x01
    2d22:	ce 0f       	add	r28, r30
    2d24:	d1 1d       	adc	r29, r1
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	ed 01       	movw	r28, r26
    2d32:	08 95       	ret

00002d34 <strlen>:
    2d34:	fc 01       	movw	r30, r24
    2d36:	01 90       	ld	r0, Z+
    2d38:	00 20       	and	r0, r0
    2d3a:	e9 f7       	brne	.-6      	; 0x2d36 <strlen+0x2>
    2d3c:	80 95       	com	r24
    2d3e:	90 95       	com	r25
    2d40:	8e 0f       	add	r24, r30
    2d42:	9f 1f       	adc	r25, r31
    2d44:	08 95       	ret

00002d46 <_exit>:
    2d46:	f8 94       	cli

00002d48 <__stop_program>:
    2d48:	ff cf       	rjmp	.-2      	; 0x2d48 <__stop_program>
