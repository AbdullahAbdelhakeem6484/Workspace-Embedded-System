
SERVO_MOTOR_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f1c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002f1c  00002f90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000019d4  00000000  00000000  00002f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000aa1  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000540d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000556d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000056fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007741  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008842  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000097c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a494  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e6 14 	call	0x29cc	; 0x29cc <main>
      7a:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 81 17 	jmp	0x2f02	; 0x2f02 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidSetPinDir>:




void DIO_voidSetPinDir(u8 Port,u8 Pin,u8 Dir)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <DIO_voidSetPinDir+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_voidSetPinDir+0x8>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	6a 83       	std	Y+2, r22	; 0x02
     ca0:	4b 83       	std	Y+3, r20	; 0x03

switch(Port)
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	3d 83       	std	Y+5, r19	; 0x05
     caa:	2c 83       	std	Y+4, r18	; 0x04
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	9d 81       	ldd	r25, Y+5	; 0x05
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	91 05       	cpc	r25, r1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <DIO_voidSetPinDir+0x2a>
     cb6:	43 c0       	rjmp	.+134    	; 0xd3e <DIO_voidSetPinDir+0xb0>
     cb8:	2c 81       	ldd	r18, Y+4	; 0x04
     cba:	3d 81       	ldd	r19, Y+5	; 0x05
     cbc:	22 30       	cpi	r18, 0x02	; 2
     cbe:	31 05       	cpc	r19, r1
     cc0:	2c f4       	brge	.+10     	; 0xccc <DIO_voidSetPinDir+0x3e>
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	9d 81       	ldd	r25, Y+5	; 0x05
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	71 f0       	breq	.+28     	; 0xce6 <DIO_voidSetPinDir+0x58>
     cca:	bc c0       	rjmp	.+376    	; 0xe44 <DIO_voidSetPinDir+0x1b6>
     ccc:	2c 81       	ldd	r18, Y+4	; 0x04
     cce:	3d 81       	ldd	r19, Y+5	; 0x05
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <DIO_voidSetPinDir+0x4a>
     cd6:	5f c0       	rjmp	.+190    	; 0xd96 <DIO_voidSetPinDir+0x108>
     cd8:	8c 81       	ldd	r24, Y+4	; 0x04
     cda:	9d 81       	ldd	r25, Y+5	; 0x05
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	91 05       	cpc	r25, r1
     ce0:	09 f4       	brne	.+2      	; 0xce4 <DIO_voidSetPinDir+0x56>
     ce2:	85 c0       	rjmp	.+266    	; 0xdee <DIO_voidSetPinDir+0x160>
     ce4:	af c0       	rjmp	.+350    	; 0xe44 <DIO_voidSetPinDir+0x1b6>
{
	case 0:
		if(Dir==0)
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	88 23       	and	r24, r24
     cea:	a9 f4       	brne	.+42     	; 0xd16 <DIO_voidSetPinDir+0x88>
		{
			CLEAR_BIT(DDRA,Pin);
     cec:	aa e3       	ldi	r26, 0x3A	; 58
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ea e3       	ldi	r30, 0x3A	; 58
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_voidSetPinDir+0x7c>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_voidSetPinDir+0x78>
     d0e:	80 95       	com	r24
     d10:	84 23       	and	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	97 c0       	rjmp	.+302    	; 0xe44 <DIO_voidSetPinDir+0x1b6>

		}
		else
		{
			SET_BIT(DDRA,Pin);
     d16:	aa e3       	ldi	r26, 0x3A	; 58
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	ea e3       	ldi	r30, 0x3A	; 58
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_voidSetPinDir+0xa6>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DIO_voidSetPinDir+0xa2>
     d38:	84 2b       	or	r24, r20
     d3a:	8c 93       	st	X, r24
     d3c:	83 c0       	rjmp	.+262    	; 0xe44 <DIO_voidSetPinDir+0x1b6>



		break;
	case 1:
		if(Dir==0)
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	88 23       	and	r24, r24
     d42:	a9 f4       	brne	.+42     	; 0xd6e <DIO_voidSetPinDir+0xe0>
				{
					CLEAR_BIT(DDRB,Pin);
     d44:	a7 e3       	ldi	r26, 0x37	; 55
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e7 e3       	ldi	r30, 0x37	; 55
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	48 2f       	mov	r20, r24
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 2e       	mov	r0, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_voidSetPinDir+0xd4>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_voidSetPinDir+0xd0>
     d66:	80 95       	com	r24
     d68:	84 23       	and	r24, r20
     d6a:	8c 93       	st	X, r24
     d6c:	6b c0       	rjmp	.+214    	; 0xe44 <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRB,Pin);
     d6e:	a7 e3       	ldi	r26, 0x37	; 55
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e7 e3       	ldi	r30, 0x37	; 55
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_voidSetPinDir+0xfe>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_voidSetPinDir+0xfa>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	57 c0       	rjmp	.+174    	; 0xe44 <DIO_voidSetPinDir+0x1b6>
				}


		break;
	case 2:
		if(Dir==0)
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	88 23       	and	r24, r24
     d9a:	a9 f4       	brne	.+42     	; 0xdc6 <DIO_voidSetPinDir+0x138>
				{
					CLEAR_BIT(DDRC,Pin);
     d9c:	a4 e3       	ldi	r26, 0x34	; 52
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e4 e3       	ldi	r30, 0x34	; 52
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_voidSetPinDir+0x12c>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_voidSetPinDir+0x128>
     dbe:	80 95       	com	r24
     dc0:	84 23       	and	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	3f c0       	rjmp	.+126    	; 0xe44 <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRC,Pin);
     dc6:	a4 e3       	ldi	r26, 0x34	; 52
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e4 e3       	ldi	r30, 0x34	; 52
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_voidSetPinDir+0x156>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_voidSetPinDir+0x152>
     de8:	84 2b       	or	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	2b c0       	rjmp	.+86     	; 0xe44 <DIO_voidSetPinDir+0x1b6>


		break;

	case 3:
		if(Dir==0)
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	88 23       	and	r24, r24
     df2:	a9 f4       	brne	.+42     	; 0xe1e <DIO_voidSetPinDir+0x190>
				{
					CLEAR_BIT(DDRD,Pin);
     df4:	a1 e3       	ldi	r26, 0x31	; 49
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e1 e3       	ldi	r30, 0x31	; 49
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_voidSetPinDir+0x184>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_voidSetPinDir+0x180>
     e16:	80 95       	com	r24
     e18:	84 23       	and	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	13 c0       	rjmp	.+38     	; 0xe44 <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRD,Pin);
     e1e:	a1 e3       	ldi	r26, 0x31	; 49
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e1 e3       	ldi	r30, 0x31	; 49
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_voidSetPinDir+0x1ae>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_voidSetPinDir+0x1aa>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24

		break;
}


}
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Port,u8 Pin,u8 Value)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <DIO_voidSetPinValue+0x6>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <DIO_voidSetPinValue+0x8>
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	6a 83       	std	Y+2, r22	; 0x02
     e66:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	3d 83       	std	Y+5, r19	; 0x05
     e70:	2c 83       	std	Y+4, r18	; 0x04
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	9d 81       	ldd	r25, Y+5	; 0x05
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	91 05       	cpc	r25, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <DIO_voidSetPinValue+0x2a>
     e7c:	43 c0       	rjmp	.+134    	; 0xf04 <DIO_voidSetPinValue+0xb0>
     e7e:	2c 81       	ldd	r18, Y+4	; 0x04
     e80:	3d 81       	ldd	r19, Y+5	; 0x05
     e82:	22 30       	cpi	r18, 0x02	; 2
     e84:	31 05       	cpc	r19, r1
     e86:	2c f4       	brge	.+10     	; 0xe92 <DIO_voidSetPinValue+0x3e>
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	9d 81       	ldd	r25, Y+5	; 0x05
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	71 f0       	breq	.+28     	; 0xeac <DIO_voidSetPinValue+0x58>
     e90:	bc c0       	rjmp	.+376    	; 0x100a <DIO_voidSetPinValue+0x1b6>
     e92:	2c 81       	ldd	r18, Y+4	; 0x04
     e94:	3d 81       	ldd	r19, Y+5	; 0x05
     e96:	22 30       	cpi	r18, 0x02	; 2
     e98:	31 05       	cpc	r19, r1
     e9a:	09 f4       	brne	.+2      	; 0xe9e <DIO_voidSetPinValue+0x4a>
     e9c:	5f c0       	rjmp	.+190    	; 0xf5c <DIO_voidSetPinValue+0x108>
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	9d 81       	ldd	r25, Y+5	; 0x05
     ea2:	83 30       	cpi	r24, 0x03	; 3
     ea4:	91 05       	cpc	r25, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <DIO_voidSetPinValue+0x56>
     ea8:	85 c0       	rjmp	.+266    	; 0xfb4 <DIO_voidSetPinValue+0x160>
     eaa:	af c0       	rjmp	.+350    	; 0x100a <DIO_voidSetPinValue+0x1b6>
	{
		case 0:
			if(Value==0)
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	88 23       	and	r24, r24
     eb0:	a9 f4       	brne	.+42     	; 0xedc <DIO_voidSetPinValue+0x88>
					{
						CLEAR_BIT(PORTA,Pin);
     eb2:	ab e3       	ldi	r26, 0x3B	; 59
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	eb e3       	ldi	r30, 0x3B	; 59
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	48 2f       	mov	r20, r24
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 2e       	mov	r0, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_voidSetPinValue+0x7c>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_voidSetPinValue+0x78>
     ed4:	80 95       	com	r24
     ed6:	84 23       	and	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	97 c0       	rjmp	.+302    	; 0x100a <DIO_voidSetPinValue+0x1b6>

					}
					else
					{
						SET_BIT(PORTA,Pin);
     edc:	ab e3       	ldi	r26, 0x3B	; 59
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	eb e3       	ldi	r30, 0x3B	; 59
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_voidSetPinValue+0xa6>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_voidSetPinValue+0xa2>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	83 c0       	rjmp	.+262    	; 0x100a <DIO_voidSetPinValue+0x1b6>
					}


			break;
		case 1:
			if(Value==0)
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	88 23       	and	r24, r24
     f08:	a9 f4       	brne	.+42     	; 0xf34 <DIO_voidSetPinValue+0xe0>
				{
				CLEAR_BIT(PORTB,Pin);
     f0a:	a8 e3       	ldi	r26, 0x38	; 56
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e8 e3       	ldi	r30, 0x38	; 56
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <DIO_voidSetPinValue+0xd4>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <DIO_voidSetPinValue+0xd0>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	6b c0       	rjmp	.+214    	; 0x100a <DIO_voidSetPinValue+0x1b6>

				}
				else
				{
				SET_BIT(PORTB,Pin);
     f34:	a8 e3       	ldi	r26, 0x38	; 56
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e8 e3       	ldi	r30, 0x38	; 56
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO_voidSetPinValue+0xfe>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO_voidSetPinValue+0xfa>
     f56:	84 2b       	or	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	57 c0       	rjmp	.+174    	; 0x100a <DIO_voidSetPinValue+0x1b6>
				}

			break;
		case 2:
			if(Value==0)
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	88 23       	and	r24, r24
     f60:	a9 f4       	brne	.+42     	; 0xf8c <DIO_voidSetPinValue+0x138>
				{
				CLEAR_BIT(PORTC,Pin);
     f62:	a5 e3       	ldi	r26, 0x35	; 53
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e5 e3       	ldi	r30, 0x35	; 53
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_voidSetPinValue+0x12c>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_voidSetPinValue+0x128>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	3f c0       	rjmp	.+126    	; 0x100a <DIO_voidSetPinValue+0x1b6>

				}
				else
				{
					SET_BIT(PORTC,Pin);
     f8c:	a5 e3       	ldi	r26, 0x35	; 53
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e3       	ldi	r30, 0x35	; 53
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_voidSetPinValue+0x156>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_voidSetPinValue+0x152>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	2b c0       	rjmp	.+86     	; 0x100a <DIO_voidSetPinValue+0x1b6>
				}
			break;

		case 3:
			if(Value==0)
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	88 23       	and	r24, r24
     fb8:	a9 f4       	brne	.+42     	; 0xfe4 <DIO_voidSetPinValue+0x190>
					{
					CLEAR_BIT(PORTD,Pin);
     fba:	a2 e3       	ldi	r26, 0x32	; 50
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e2 e3       	ldi	r30, 0x32	; 50
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_voidSetPinValue+0x184>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_voidSetPinValue+0x180>
     fdc:	80 95       	com	r24
     fde:	84 23       	and	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	13 c0       	rjmp	.+38     	; 0x100a <DIO_voidSetPinValue+0x1b6>

					}
					else
					{
						SET_BIT(PORTD,Pin);
     fe4:	a2 e3       	ldi	r26, 0x32	; 50
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e2 e3       	ldi	r30, 0x32	; 50
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_voidSetPinValue+0x1ae>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_voidSetPinValue+0x1aa>
    1006:	84 2b       	or	r24, r20
    1008:	8c 93       	st	X, r24

			break;
	}


}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue(u8 Port,u8 Pin)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <DIO_voidTogglePinValue+0x6>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <DIO_voidTogglePinValue+0x8>
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	3c 83       	std	Y+4, r19	; 0x04
    1032:	2b 83       	std	Y+3, r18	; 0x03
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	91 05       	cpc	r25, r1
    103c:	49 f1       	breq	.+82     	; 0x1090 <DIO_voidTogglePinValue+0x76>
    103e:	2b 81       	ldd	r18, Y+3	; 0x03
    1040:	3c 81       	ldd	r19, Y+4	; 0x04
    1042:	22 30       	cpi	r18, 0x02	; 2
    1044:	31 05       	cpc	r19, r1
    1046:	2c f4       	brge	.+10     	; 0x1052 <DIO_voidTogglePinValue+0x38>
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	61 f0       	breq	.+24     	; 0x1068 <DIO_voidTogglePinValue+0x4e>
    1050:	5a c0       	rjmp	.+180    	; 0x1106 <DIO_voidTogglePinValue+0xec>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	71 f1       	breq	.+92     	; 0x10b8 <DIO_voidTogglePinValue+0x9e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	91 05       	cpc	r25, r1
    1064:	e9 f1       	breq	.+122    	; 0x10e0 <DIO_voidTogglePinValue+0xc6>
    1066:	4f c0       	rjmp	.+158    	; 0x1106 <DIO_voidTogglePinValue+0xec>
	{
	case 0:
		TOGGLE_BIT(PORTA,Pin);
    1068:	ab e3       	ldi	r26, 0x3B	; 59
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	eb e3       	ldi	r30, 0x3B	; 59
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_voidTogglePinValue+0x6c>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_voidTogglePinValue+0x68>
    108a:	84 27       	eor	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	3b c0       	rjmp	.+118    	; 0x1106 <DIO_voidTogglePinValue+0xec>

		break;
	case 1:
		TOGGLE_BIT(PORTB,Pin);
    1090:	a8 e3       	ldi	r26, 0x38	; 56
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e8 e3       	ldi	r30, 0x38	; 56
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_voidTogglePinValue+0x94>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_voidTogglePinValue+0x90>
    10b2:	84 27       	eor	r24, r20
    10b4:	8c 93       	st	X, r24
    10b6:	27 c0       	rjmp	.+78     	; 0x1106 <DIO_voidTogglePinValue+0xec>

		break;
	case 2:
		TOGGLE_BIT(PORTC,Pin);
    10b8:	a5 e3       	ldi	r26, 0x35	; 53
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e3       	ldi	r30, 0x35	; 53
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_voidTogglePinValue+0xbc>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_voidTogglePinValue+0xb8>
    10da:	84 27       	eor	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	13 c0       	rjmp	.+38     	; 0x1106 <DIO_voidTogglePinValue+0xec>

		break;

	case 3:
		TOGGLE_BIT(PORTD,Pin);
    10e0:	a2 e3       	ldi	r26, 0x32	; 50
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e2 e3       	ldi	r30, 0x32	; 50
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_voidTogglePinValue+0xe4>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_voidTogglePinValue+0xe0>
    1102:	84 27       	eor	r24, r20
    1104:	8c 93       	st	X, r24

		break;

	}

}
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 PORT,u8 Pin)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <DIO_u8GetPinValue+0x6>
    111a:	00 d0       	rcall	.+0      	; 0x111c <DIO_u8GetPinValue+0x8>
    111c:	00 d0       	rcall	.+0      	; 0x111e <DIO_u8GetPinValue+0xa>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	6a 83       	std	Y+2, r22	; 0x02
switch(PORT)
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	3d 83       	std	Y+5, r19	; 0x05
    112e:	2c 83       	std	Y+4, r18	; 0x04
    1130:	4c 81       	ldd	r20, Y+4	; 0x04
    1132:	5d 81       	ldd	r21, Y+5	; 0x05
    1134:	41 30       	cpi	r20, 0x01	; 1
    1136:	51 05       	cpc	r21, r1
    1138:	49 f1       	breq	.+82     	; 0x118c <DIO_u8GetPinValue+0x78>
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	91 05       	cpc	r25, r1
    1142:	34 f4       	brge	.+12     	; 0x1150 <DIO_u8GetPinValue+0x3c>
    1144:	2c 81       	ldd	r18, Y+4	; 0x04
    1146:	3d 81       	ldd	r19, Y+5	; 0x05
    1148:	21 15       	cp	r18, r1
    114a:	31 05       	cpc	r19, r1
    114c:	61 f0       	breq	.+24     	; 0x1166 <DIO_u8GetPinValue+0x52>
    114e:	57 c0       	rjmp	.+174    	; 0x11fe <DIO_u8GetPinValue+0xea>
    1150:	4c 81       	ldd	r20, Y+4	; 0x04
    1152:	5d 81       	ldd	r21, Y+5	; 0x05
    1154:	42 30       	cpi	r20, 0x02	; 2
    1156:	51 05       	cpc	r21, r1
    1158:	61 f1       	breq	.+88     	; 0x11b2 <DIO_u8GetPinValue+0x9e>
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	91 05       	cpc	r25, r1
    1162:	d1 f1       	breq	.+116    	; 0x11d8 <DIO_u8GetPinValue+0xc4>
    1164:	4c c0       	rjmp	.+152    	; 0x11fe <DIO_u8GetPinValue+0xea>
{
case 0:
	return  GET_BIT(PINA,Pin);
    1166:	e9 e3       	ldi	r30, 0x39	; 57
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a9 01       	movw	r20, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_u8GetPinValue+0x6a>
    117a:	55 95       	asr	r21
    117c:	47 95       	ror	r20
    117e:	8a 95       	dec	r24
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_u8GetPinValue+0x66>
    1182:	ca 01       	movw	r24, r20
    1184:	58 2f       	mov	r21, r24
    1186:	51 70       	andi	r21, 0x01	; 1
    1188:	5b 83       	std	Y+3, r21	; 0x03
    118a:	3a c0       	rjmp	.+116    	; 0x1200 <DIO_u8GetPinValue+0xec>

case 1:
	return GET_BIT(PINB,Pin);
    118c:	e6 e3       	ldi	r30, 0x36	; 54
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a9 01       	movw	r20, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_u8GetPinValue+0x90>
    11a0:	55 95       	asr	r21
    11a2:	47 95       	ror	r20
    11a4:	8a 95       	dec	r24
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_u8GetPinValue+0x8c>
    11a8:	ca 01       	movw	r24, r20
    11aa:	58 2f       	mov	r21, r24
    11ac:	51 70       	andi	r21, 0x01	; 1
    11ae:	5b 83       	std	Y+3, r21	; 0x03
    11b0:	27 c0       	rjmp	.+78     	; 0x1200 <DIO_u8GetPinValue+0xec>
case 2:
	return GET_BIT(PINC,Pin);
    11b2:	e3 e3       	ldi	r30, 0x33	; 51
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a9 01       	movw	r20, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_u8GetPinValue+0xb6>
    11c6:	55 95       	asr	r21
    11c8:	47 95       	ror	r20
    11ca:	8a 95       	dec	r24
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <DIO_u8GetPinValue+0xb2>
    11ce:	ca 01       	movw	r24, r20
    11d0:	58 2f       	mov	r21, r24
    11d2:	51 70       	andi	r21, 0x01	; 1
    11d4:	5b 83       	std	Y+3, r21	; 0x03
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <DIO_u8GetPinValue+0xec>
case 3:
	return GET_BIT(PIND,Pin);
    11d8:	e0 e3       	ldi	r30, 0x30	; 48
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a9 01       	movw	r20, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_u8GetPinValue+0xdc>
    11ec:	55 95       	asr	r21
    11ee:	47 95       	ror	r20
    11f0:	8a 95       	dec	r24
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_u8GetPinValue+0xd8>
    11f4:	ca 01       	movw	r24, r20
    11f6:	58 2f       	mov	r21, r24
    11f8:	51 70       	andi	r21, 0x01	; 1
    11fa:	5b 83       	std	Y+3, r21	; 0x03
    11fc:	01 c0       	rjmp	.+2      	; 0x1200 <DIO_u8GetPinValue+0xec>
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_u8GetPinValue+0xf0>


}


}
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	8e 83       	std	Y+6, r24	; 0x06
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	26 96       	adiw	r28, 0x06	; 6
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <SERVO_voidAngle>:
 *      Author: Fly labs
 */
#include"SERVO_interface.h"

void SERVO_voidAngle(u8 angle)
{
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	c7 50       	subi	r28, 0x07	; 7
    1226:	d1 40       	sbci	r29, 0x01	; 1
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	fe 01       	movw	r30, r28
    1234:	eb 5f       	subi	r30, 0xFB	; 251
    1236:	fe 4f       	sbci	r31, 0xFE	; 254
    1238:	80 83       	st	Z, r24

	switch(angle)
    123a:	fe 01       	movw	r30, r28
    123c:	eb 5f       	subi	r30, 0xFB	; 251
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	80 81       	ld	r24, Z
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	ca 5f       	subi	r28, 0xFA	; 250
    1248:	de 4f       	sbci	r29, 0xFE	; 254
    124a:	39 83       	std	Y+1, r19	; 0x01
    124c:	28 83       	st	Y, r18
    124e:	c6 50       	subi	r28, 0x06	; 6
    1250:	d1 40       	sbci	r29, 0x01	; 1
    1252:	ca 5f       	subi	r28, 0xFA	; 250
    1254:	de 4f       	sbci	r29, 0xFE	; 254
    1256:	88 81       	ld	r24, Y
    1258:	99 81       	ldd	r25, Y+1	; 0x01
    125a:	c6 50       	subi	r28, 0x06	; 6
    125c:	d1 40       	sbci	r29, 0x01	; 1
    125e:	8a 35       	cpi	r24, 0x5A	; 90
    1260:	91 05       	cpc	r25, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <SERVO_voidAngle+0x4e>
    1264:	3e c5       	rjmp	.+2684   	; 0x1ce2 <SERVO_voidAngle+0xaca>
    1266:	ca 5f       	subi	r28, 0xFA	; 250
    1268:	de 4f       	sbci	r29, 0xFE	; 254
    126a:	e8 81       	ld	r30, Y
    126c:	f9 81       	ldd	r31, Y+1	; 0x01
    126e:	c6 50       	subi	r28, 0x06	; 6
    1270:	d1 40       	sbci	r29, 0x01	; 1
    1272:	eb 35       	cpi	r30, 0x5B	; 91
    1274:	f1 05       	cpc	r31, r1
    1276:	ac f4       	brge	.+42     	; 0x12a2 <SERVO_voidAngle+0x8a>
    1278:	ca 5f       	subi	r28, 0xFA	; 250
    127a:	de 4f       	sbci	r29, 0xFE	; 254
    127c:	28 81       	ld	r18, Y
    127e:	39 81       	ldd	r19, Y+1	; 0x01
    1280:	c6 50       	subi	r28, 0x06	; 6
    1282:	d1 40       	sbci	r29, 0x01	; 1
    1284:	21 15       	cp	r18, r1
    1286:	31 05       	cpc	r19, r1
    1288:	19 f1       	breq	.+70     	; 0x12d0 <SERVO_voidAngle+0xb8>
    128a:	ca 5f       	subi	r28, 0xFA	; 250
    128c:	de 4f       	sbci	r29, 0xFE	; 254
    128e:	88 81       	ld	r24, Y
    1290:	99 81       	ldd	r25, Y+1	; 0x01
    1292:	c6 50       	subi	r28, 0x06	; 6
    1294:	d1 40       	sbci	r29, 0x01	; 1
    1296:	8d 32       	cpi	r24, 0x2D	; 45
    1298:	91 05       	cpc	r25, r1
    129a:	09 f4       	brne	.+2      	; 0x129e <SERVO_voidAngle+0x86>
    129c:	9e c2       	rjmp	.+1340   	; 0x17da <SERVO_voidAngle+0x5c2>
    129e:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <SERVO_voidAngle+0x179c>
    12a2:	ca 5f       	subi	r28, 0xFA	; 250
    12a4:	de 4f       	sbci	r29, 0xFE	; 254
    12a6:	e8 81       	ld	r30, Y
    12a8:	f9 81       	ldd	r31, Y+1	; 0x01
    12aa:	c6 50       	subi	r28, 0x06	; 6
    12ac:	d1 40       	sbci	r29, 0x01	; 1
    12ae:	e7 38       	cpi	r30, 0x87	; 135
    12b0:	f1 05       	cpc	r31, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <SERVO_voidAngle+0x9e>
    12b4:	9a c7       	rjmp	.+3892   	; 0x21ea <SERVO_voidAngle+0xfd2>
    12b6:	ca 5f       	subi	r28, 0xFA	; 250
    12b8:	de 4f       	sbci	r29, 0xFE	; 254
    12ba:	28 81       	ld	r18, Y
    12bc:	39 81       	ldd	r19, Y+1	; 0x01
    12be:	c6 50       	subi	r28, 0x06	; 6
    12c0:	d1 40       	sbci	r29, 0x01	; 1
    12c2:	24 3b       	cpi	r18, 0xB4	; 180
    12c4:	31 05       	cpc	r19, r1
    12c6:	11 f4       	brne	.+4      	; 0x12cc <SERVO_voidAngle+0xb4>
    12c8:	0c 94 2d 13 	jmp	0x265a	; 0x265a <SERVO_voidAngle+0x1442>
    12cc:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <SERVO_voidAngle+0x179c>
	{
		case 0:
					for(u32 i=0;i<50;i++) //zero Angle
    12d0:	fe 01       	movw	r30, r28
    12d2:	ef 5f       	subi	r30, 0xFF	; 255
    12d4:	fe 4f       	sbci	r31, 0xFE	; 254
    12d6:	10 82       	st	Z, r1
    12d8:	11 82       	std	Z+1, r1	; 0x01
    12da:	12 82       	std	Z+2, r1	; 0x02
    12dc:	13 82       	std	Z+3, r1	; 0x03
    12de:	6e c2       	rjmp	.+1244   	; 0x17bc <SERVO_voidAngle+0x5a4>
					{

						DIO_voidSetPinValue(SERVO_PORT,SERVO_PIN,HIGH);
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	62 e0       	ldi	r22, 0x02	; 2
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	0e 94 2a 07 	call	0xe54	; 0xe54 <DIO_voidSetPinValue>
    12ea:	fe 01       	movw	r30, r28
    12ec:	e3 51       	subi	r30, 0x13	; 19
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a0 e7       	ldi	r26, 0x70	; 112
    12f6:	b2 e4       	ldi	r27, 0x42	; 66
    12f8:	80 83       	st	Z, r24
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	a2 83       	std	Z+2, r26	; 0x02
    12fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1300:	8e 01       	movw	r16, r28
    1302:	07 51       	subi	r16, 0x17	; 23
    1304:	1f 4f       	sbci	r17, 0xFF	; 255
    1306:	fe 01       	movw	r30, r28
    1308:	e3 51       	subi	r30, 0x13	; 19
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	60 81       	ld	r22, Z
    130e:	71 81       	ldd	r23, Z+1	; 0x01
    1310:	82 81       	ldd	r24, Z+2	; 0x02
    1312:	93 81       	ldd	r25, Z+3	; 0x03
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e8       	ldi	r20, 0x80	; 128
    131a:	50 e4       	ldi	r21, 0x40	; 64
    131c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	f8 01       	movw	r30, r16
    1326:	80 83       	st	Z, r24
    1328:	91 83       	std	Z+1, r25	; 0x01
    132a:	a2 83       	std	Z+2, r26	; 0x02
    132c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    132e:	fe 01       	movw	r30, r28
    1330:	e7 51       	subi	r30, 0x17	; 23
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e8       	ldi	r20, 0x80	; 128
    1342:	5f e3       	ldi	r21, 0x3F	; 63
    1344:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1348:	88 23       	and	r24, r24
    134a:	34 f4       	brge	.+12     	; 0x1358 <SERVO_voidAngle+0x140>
		__ticks = 1;
    134c:	fe 01       	movw	r30, r28
    134e:	e8 51       	subi	r30, 0x18	; 24
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	80 83       	st	Z, r24
    1356:	e0 c0       	rjmp	.+448    	; 0x1518 <SERVO_voidAngle+0x300>
	else if (__tmp > 255)
    1358:	fe 01       	movw	r30, r28
    135a:	e7 51       	subi	r30, 0x17	; 23
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	4f e7       	ldi	r20, 0x7F	; 127
    136c:	53 e4       	ldi	r21, 0x43	; 67
    136e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1372:	18 16       	cp	r1, r24
    1374:	0c f0       	brlt	.+2      	; 0x1378 <SERVO_voidAngle+0x160>
    1376:	c0 c0       	rjmp	.+384    	; 0x14f8 <SERVO_voidAngle+0x2e0>
	{
		_delay_ms(__us / 1000.0);
    1378:	fe 01       	movw	r30, r28
    137a:	e3 51       	subi	r30, 0x13	; 19
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	60 81       	ld	r22, Z
    1380:	71 81       	ldd	r23, Z+1	; 0x01
    1382:	82 81       	ldd	r24, Z+2	; 0x02
    1384:	93 81       	ldd	r25, Z+3	; 0x03
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	4a e7       	ldi	r20, 0x7A	; 122
    138c:	54 e4       	ldi	r21, 0x44	; 68
    138e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	fe 01       	movw	r30, r28
    1398:	ec 51       	subi	r30, 0x1C	; 28
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 83       	st	Z, r24
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	a2 83       	std	Z+2, r26	; 0x02
    13a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a4:	8e 01       	movw	r16, r28
    13a6:	00 52       	subi	r16, 0x20	; 32
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
    13aa:	fe 01       	movw	r30, r28
    13ac:	ec 51       	subi	r30, 0x1C	; 28
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	60 81       	ld	r22, Z
    13b2:	71 81       	ldd	r23, Z+1	; 0x01
    13b4:	82 81       	ldd	r24, Z+2	; 0x02
    13b6:	93 81       	ldd	r25, Z+3	; 0x03
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e8       	ldi	r19, 0x80	; 128
    13bc:	4b e3       	ldi	r20, 0x3B	; 59
    13be:	55 e4       	ldi	r21, 0x45	; 69
    13c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	f8 01       	movw	r30, r16
    13ca:	80 83       	st	Z, r24
    13cc:	91 83       	std	Z+1, r25	; 0x01
    13ce:	a2 83       	std	Z+2, r26	; 0x02
    13d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13d2:	fe 01       	movw	r30, r28
    13d4:	e0 52       	subi	r30, 0x20	; 32
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	60 81       	ld	r22, Z
    13da:	71 81       	ldd	r23, Z+1	; 0x01
    13dc:	82 81       	ldd	r24, Z+2	; 0x02
    13de:	93 81       	ldd	r25, Z+3	; 0x03
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e8       	ldi	r20, 0x80	; 128
    13e6:	5f e3       	ldi	r21, 0x3F	; 63
    13e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13ec:	88 23       	and	r24, r24
    13ee:	44 f4       	brge	.+16     	; 0x1400 <SERVO_voidAngle+0x1e8>
		__ticks = 1;
    13f0:	fe 01       	movw	r30, r28
    13f2:	e2 52       	subi	r30, 0x22	; 34
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	91 83       	std	Z+1, r25	; 0x01
    13fc:	80 83       	st	Z, r24
    13fe:	64 c0       	rjmp	.+200    	; 0x14c8 <SERVO_voidAngle+0x2b0>
	else if (__tmp > 65535)
    1400:	fe 01       	movw	r30, r28
    1402:	e0 52       	subi	r30, 0x20	; 32
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	60 81       	ld	r22, Z
    1408:	71 81       	ldd	r23, Z+1	; 0x01
    140a:	82 81       	ldd	r24, Z+2	; 0x02
    140c:	93 81       	ldd	r25, Z+3	; 0x03
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	3f ef       	ldi	r19, 0xFF	; 255
    1412:	4f e7       	ldi	r20, 0x7F	; 127
    1414:	57 e4       	ldi	r21, 0x47	; 71
    1416:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    141a:	18 16       	cp	r1, r24
    141c:	0c f0       	brlt	.+2      	; 0x1420 <SERVO_voidAngle+0x208>
    141e:	43 c0       	rjmp	.+134    	; 0x14a6 <SERVO_voidAngle+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1420:	fe 01       	movw	r30, r28
    1422:	ec 51       	subi	r30, 0x1C	; 28
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e2       	ldi	r20, 0x20	; 32
    1434:	51 e4       	ldi	r21, 0x41	; 65
    1436:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	8e 01       	movw	r16, r28
    1440:	02 52       	subi	r16, 0x22	; 34
    1442:	1f 4f       	sbci	r17, 0xFF	; 255
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	f8 01       	movw	r30, r16
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
    1456:	1f c0       	rjmp	.+62     	; 0x1496 <SERVO_voidAngle+0x27e>
    1458:	fe 01       	movw	r30, r28
    145a:	e4 52       	subi	r30, 0x24	; 36
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	8c e2       	ldi	r24, 0x2C	; 44
    1460:	91 e0       	ldi	r25, 0x01	; 1
    1462:	91 83       	std	Z+1, r25	; 0x01
    1464:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1466:	fe 01       	movw	r30, r28
    1468:	e4 52       	subi	r30, 0x24	; 36
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	80 81       	ld	r24, Z
    146e:	91 81       	ldd	r25, Z+1	; 0x01
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	f1 f7       	brne	.-4      	; 0x1470 <SERVO_voidAngle+0x258>
    1474:	fe 01       	movw	r30, r28
    1476:	e4 52       	subi	r30, 0x24	; 36
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	91 83       	std	Z+1, r25	; 0x01
    147c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147e:	de 01       	movw	r26, r28
    1480:	a2 52       	subi	r26, 0x22	; 34
    1482:	bf 4f       	sbci	r27, 0xFF	; 255
    1484:	fe 01       	movw	r30, r28
    1486:	e2 52       	subi	r30, 0x22	; 34
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	80 81       	ld	r24, Z
    148c:	91 81       	ldd	r25, Z+1	; 0x01
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	11 96       	adiw	r26, 0x01	; 1
    1492:	9c 93       	st	X, r25
    1494:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	fe 01       	movw	r30, r28
    1498:	e2 52       	subi	r30, 0x22	; 34
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	d1 f6       	brne	.-76     	; 0x1458 <SERVO_voidAngle+0x240>
    14a4:	4b c0       	rjmp	.+150    	; 0x153c <SERVO_voidAngle+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a6:	8e 01       	movw	r16, r28
    14a8:	02 52       	subi	r16, 0x22	; 34
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
    14ac:	fe 01       	movw	r30, r28
    14ae:	e0 52       	subi	r30, 0x20	; 32
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	60 81       	ld	r22, Z
    14b4:	71 81       	ldd	r23, Z+1	; 0x01
    14b6:	82 81       	ldd	r24, Z+2	; 0x02
    14b8:	93 81       	ldd	r25, Z+3	; 0x03
    14ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	f8 01       	movw	r30, r16
    14c4:	91 83       	std	Z+1, r25	; 0x01
    14c6:	80 83       	st	Z, r24
    14c8:	de 01       	movw	r26, r28
    14ca:	a6 52       	subi	r26, 0x26	; 38
    14cc:	bf 4f       	sbci	r27, 0xFF	; 255
    14ce:	fe 01       	movw	r30, r28
    14d0:	e2 52       	subi	r30, 0x22	; 34
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	80 81       	ld	r24, Z
    14d6:	91 81       	ldd	r25, Z+1	; 0x01
    14d8:	11 96       	adiw	r26, 0x01	; 1
    14da:	9c 93       	st	X, r25
    14dc:	8e 93       	st	-X, r24
    14de:	fe 01       	movw	r30, r28
    14e0:	e6 52       	subi	r30, 0x26	; 38
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	80 81       	ld	r24, Z
    14e6:	91 81       	ldd	r25, Z+1	; 0x01
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <SERVO_voidAngle+0x2d0>
    14ec:	fe 01       	movw	r30, r28
    14ee:	e6 52       	subi	r30, 0x26	; 38
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	91 83       	std	Z+1, r25	; 0x01
    14f4:	80 83       	st	Z, r24
    14f6:	22 c0       	rjmp	.+68     	; 0x153c <SERVO_voidAngle+0x324>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14f8:	8e 01       	movw	r16, r28
    14fa:	08 51       	subi	r16, 0x18	; 24
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	fe 01       	movw	r30, r28
    1500:	e7 51       	subi	r30, 0x17	; 23
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	60 81       	ld	r22, Z
    1506:	71 81       	ldd	r23, Z+1	; 0x01
    1508:	82 81       	ldd	r24, Z+2	; 0x02
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	f8 01       	movw	r30, r16
    1516:	80 83       	st	Z, r24
    1518:	de 01       	movw	r26, r28
    151a:	a7 52       	subi	r26, 0x27	; 39
    151c:	bf 4f       	sbci	r27, 0xFF	; 255
    151e:	fe 01       	movw	r30, r28
    1520:	e8 51       	subi	r30, 0x18	; 24
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	80 81       	ld	r24, Z
    1526:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1528:	fe 01       	movw	r30, r28
    152a:	e7 52       	subi	r30, 0x27	; 39
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	80 81       	ld	r24, Z
    1530:	8a 95       	dec	r24
    1532:	f1 f7       	brne	.-4      	; 0x1530 <SERVO_voidAngle+0x318>
    1534:	fe 01       	movw	r30, r28
    1536:	e7 52       	subi	r30, 0x27	; 39
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	80 83       	st	Z, r24
						_delay_us(60);
						DIO_voidSetPinValue(SERVO_PORT,SERVO_PIN,LOW);
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	62 e0       	ldi	r22, 0x02	; 2
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	0e 94 2a 07 	call	0xe54	; 0xe54 <DIO_voidSetPinValue>
    1546:	fe 01       	movw	r30, r28
    1548:	eb 52       	subi	r30, 0x2B	; 43
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	98 ec       	ldi	r25, 0xC8	; 200
    1550:	ab e9       	ldi	r26, 0x9B	; 155
    1552:	b6 e4       	ldi	r27, 0x46	; 70
    1554:	80 83       	st	Z, r24
    1556:	91 83       	std	Z+1, r25	; 0x01
    1558:	a2 83       	std	Z+2, r26	; 0x02
    155a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    155c:	8e 01       	movw	r16, r28
    155e:	0f 52       	subi	r16, 0x2F	; 47
    1560:	1f 4f       	sbci	r17, 0xFF	; 255
    1562:	fe 01       	movw	r30, r28
    1564:	eb 52       	subi	r30, 0x2B	; 43
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	60 81       	ld	r22, Z
    156a:	71 81       	ldd	r23, Z+1	; 0x01
    156c:	82 81       	ldd	r24, Z+2	; 0x02
    156e:	93 81       	ldd	r25, Z+3	; 0x03
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e8       	ldi	r20, 0x80	; 128
    1576:	50 e4       	ldi	r21, 0x40	; 64
    1578:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	f8 01       	movw	r30, r16
    1582:	80 83       	st	Z, r24
    1584:	91 83       	std	Z+1, r25	; 0x01
    1586:	a2 83       	std	Z+2, r26	; 0x02
    1588:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    158a:	fe 01       	movw	r30, r28
    158c:	ef 52       	subi	r30, 0x2F	; 47
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	93 81       	ldd	r25, Z+3	; 0x03
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15a4:	88 23       	and	r24, r24
    15a6:	34 f4       	brge	.+12     	; 0x15b4 <SERVO_voidAngle+0x39c>
		__ticks = 1;
    15a8:	fe 01       	movw	r30, r28
    15aa:	e0 53       	subi	r30, 0x30	; 48
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	80 83       	st	Z, r24
    15b2:	e0 c0       	rjmp	.+448    	; 0x1774 <SERVO_voidAngle+0x55c>
	else if (__tmp > 255)
    15b4:	fe 01       	movw	r30, r28
    15b6:	ef 52       	subi	r30, 0x2F	; 47
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	4f e7       	ldi	r20, 0x7F	; 127
    15c8:	53 e4       	ldi	r21, 0x43	; 67
    15ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15ce:	18 16       	cp	r1, r24
    15d0:	0c f0       	brlt	.+2      	; 0x15d4 <SERVO_voidAngle+0x3bc>
    15d2:	c0 c0       	rjmp	.+384    	; 0x1754 <SERVO_voidAngle+0x53c>
	{
		_delay_ms(__us / 1000.0);
    15d4:	fe 01       	movw	r30, r28
    15d6:	eb 52       	subi	r30, 0x2B	; 43
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	60 81       	ld	r22, Z
    15dc:	71 81       	ldd	r23, Z+1	; 0x01
    15de:	82 81       	ldd	r24, Z+2	; 0x02
    15e0:	93 81       	ldd	r25, Z+3	; 0x03
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	4a e7       	ldi	r20, 0x7A	; 122
    15e8:	54 e4       	ldi	r21, 0x44	; 68
    15ea:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	fe 01       	movw	r30, r28
    15f4:	e4 53       	subi	r30, 0x34	; 52
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	80 83       	st	Z, r24
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	a2 83       	std	Z+2, r26	; 0x02
    15fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1600:	8e 01       	movw	r16, r28
    1602:	08 53       	subi	r16, 0x38	; 56
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	fe 01       	movw	r30, r28
    1608:	e4 53       	subi	r30, 0x34	; 52
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e8       	ldi	r19, 0x80	; 128
    1618:	4b e3       	ldi	r20, 0x3B	; 59
    161a:	55 e4       	ldi	r21, 0x45	; 69
    161c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	f8 01       	movw	r30, r16
    1626:	80 83       	st	Z, r24
    1628:	91 83       	std	Z+1, r25	; 0x01
    162a:	a2 83       	std	Z+2, r26	; 0x02
    162c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    162e:	fe 01       	movw	r30, r28
    1630:	e8 53       	subi	r30, 0x38	; 56
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	60 81       	ld	r22, Z
    1636:	71 81       	ldd	r23, Z+1	; 0x01
    1638:	82 81       	ldd	r24, Z+2	; 0x02
    163a:	93 81       	ldd	r25, Z+3	; 0x03
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e8       	ldi	r20, 0x80	; 128
    1642:	5f e3       	ldi	r21, 0x3F	; 63
    1644:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1648:	88 23       	and	r24, r24
    164a:	44 f4       	brge	.+16     	; 0x165c <SERVO_voidAngle+0x444>
		__ticks = 1;
    164c:	fe 01       	movw	r30, r28
    164e:	ea 53       	subi	r30, 0x3A	; 58
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	80 83       	st	Z, r24
    165a:	64 c0       	rjmp	.+200    	; 0x1724 <SERVO_voidAngle+0x50c>
	else if (__tmp > 65535)
    165c:	fe 01       	movw	r30, r28
    165e:	e8 53       	subi	r30, 0x38	; 56
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	3f ef       	ldi	r19, 0xFF	; 255
    166e:	4f e7       	ldi	r20, 0x7F	; 127
    1670:	57 e4       	ldi	r21, 0x47	; 71
    1672:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1676:	18 16       	cp	r1, r24
    1678:	0c f0       	brlt	.+2      	; 0x167c <SERVO_voidAngle+0x464>
    167a:	43 c0       	rjmp	.+134    	; 0x1702 <SERVO_voidAngle+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167c:	fe 01       	movw	r30, r28
    167e:	e4 53       	subi	r30, 0x34	; 52
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	60 81       	ld	r22, Z
    1684:	71 81       	ldd	r23, Z+1	; 0x01
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e2       	ldi	r20, 0x20	; 32
    1690:	51 e4       	ldi	r21, 0x41	; 65
    1692:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	8e 01       	movw	r16, r28
    169c:	0a 53       	subi	r16, 0x3A	; 58
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	f8 01       	movw	r30, r16
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
    16b2:	1f c0       	rjmp	.+62     	; 0x16f2 <SERVO_voidAngle+0x4da>
    16b4:	fe 01       	movw	r30, r28
    16b6:	ec 53       	subi	r30, 0x3C	; 60
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	8c e2       	ldi	r24, 0x2C	; 44
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	91 83       	std	Z+1, r25	; 0x01
    16c0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16c2:	fe 01       	movw	r30, r28
    16c4:	ec 53       	subi	r30, 0x3C	; 60
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <SERVO_voidAngle+0x4b4>
    16d0:	fe 01       	movw	r30, r28
    16d2:	ec 53       	subi	r30, 0x3C	; 60
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16da:	de 01       	movw	r26, r28
    16dc:	aa 53       	subi	r26, 0x3A	; 58
    16de:	bf 4f       	sbci	r27, 0xFF	; 255
    16e0:	fe 01       	movw	r30, r28
    16e2:	ea 53       	subi	r30, 0x3A	; 58
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	80 81       	ld	r24, Z
    16e8:	91 81       	ldd	r25, Z+1	; 0x01
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	11 96       	adiw	r26, 0x01	; 1
    16ee:	9c 93       	st	X, r25
    16f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f2:	fe 01       	movw	r30, r28
    16f4:	ea 53       	subi	r30, 0x3A	; 58
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	80 81       	ld	r24, Z
    16fa:	91 81       	ldd	r25, Z+1	; 0x01
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	d1 f6       	brne	.-76     	; 0x16b4 <SERVO_voidAngle+0x49c>
    1700:	4b c0       	rjmp	.+150    	; 0x1798 <SERVO_voidAngle+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1702:	8e 01       	movw	r16, r28
    1704:	0a 53       	subi	r16, 0x3A	; 58
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
    1708:	fe 01       	movw	r30, r28
    170a:	e8 53       	subi	r30, 0x38	; 56
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	60 81       	ld	r22, Z
    1710:	71 81       	ldd	r23, Z+1	; 0x01
    1712:	82 81       	ldd	r24, Z+2	; 0x02
    1714:	93 81       	ldd	r25, Z+3	; 0x03
    1716:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	f8 01       	movw	r30, r16
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
    1724:	de 01       	movw	r26, r28
    1726:	ae 53       	subi	r26, 0x3E	; 62
    1728:	bf 4f       	sbci	r27, 0xFF	; 255
    172a:	fe 01       	movw	r30, r28
    172c:	ea 53       	subi	r30, 0x3A	; 58
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
    1734:	11 96       	adiw	r26, 0x01	; 1
    1736:	9c 93       	st	X, r25
    1738:	8e 93       	st	-X, r24
    173a:	fe 01       	movw	r30, r28
    173c:	ee 53       	subi	r30, 0x3E	; 62
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	80 81       	ld	r24, Z
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <SERVO_voidAngle+0x52c>
    1748:	fe 01       	movw	r30, r28
    174a:	ee 53       	subi	r30, 0x3E	; 62
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	80 83       	st	Z, r24
    1752:	22 c0       	rjmp	.+68     	; 0x1798 <SERVO_voidAngle+0x580>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1754:	8e 01       	movw	r16, r28
    1756:	00 53       	subi	r16, 0x30	; 48
    1758:	1f 4f       	sbci	r17, 0xFF	; 255
    175a:	fe 01       	movw	r30, r28
    175c:	ef 52       	subi	r30, 0x2F	; 47
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	f8 01       	movw	r30, r16
    1772:	80 83       	st	Z, r24
    1774:	de 01       	movw	r26, r28
    1776:	af 53       	subi	r26, 0x3F	; 63
    1778:	bf 4f       	sbci	r27, 0xFF	; 255
    177a:	fe 01       	movw	r30, r28
    177c:	e0 53       	subi	r30, 0x30	; 48
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	80 81       	ld	r24, Z
    1782:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1784:	fe 01       	movw	r30, r28
    1786:	ef 53       	subi	r30, 0x3F	; 63
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 81       	ld	r24, Z
    178c:	8a 95       	dec	r24
    178e:	f1 f7       	brne	.-4      	; 0x178c <SERVO_voidAngle+0x574>
    1790:	fe 01       	movw	r30, r28
    1792:	ef 53       	subi	r30, 0x3F	; 63
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 83       	st	Z, r24
{

	switch(angle)
	{
		case 0:
					for(u32 i=0;i<50;i++) //zero Angle
    1798:	9e 01       	movw	r18, r28
    179a:	2f 5f       	subi	r18, 0xFF	; 255
    179c:	3e 4f       	sbci	r19, 0xFE	; 254
    179e:	fe 01       	movw	r30, r28
    17a0:	ef 5f       	subi	r30, 0xFF	; 255
    17a2:	fe 4f       	sbci	r31, 0xFE	; 254
    17a4:	80 81       	ld	r24, Z
    17a6:	91 81       	ldd	r25, Z+1	; 0x01
    17a8:	a2 81       	ldd	r26, Z+2	; 0x02
    17aa:	b3 81       	ldd	r27, Z+3	; 0x03
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	a1 1d       	adc	r26, r1
    17b0:	b1 1d       	adc	r27, r1
    17b2:	f9 01       	movw	r30, r18
    17b4:	80 83       	st	Z, r24
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	a2 83       	std	Z+2, r26	; 0x02
    17ba:	b3 83       	std	Z+3, r27	; 0x03
    17bc:	fe 01       	movw	r30, r28
    17be:	ef 5f       	subi	r30, 0xFF	; 255
    17c0:	fe 4f       	sbci	r31, 0xFE	; 254
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	a2 81       	ldd	r26, Z+2	; 0x02
    17c8:	b3 81       	ldd	r27, Z+3	; 0x03
    17ca:	82 33       	cpi	r24, 0x32	; 50
    17cc:	91 05       	cpc	r25, r1
    17ce:	a1 05       	cpc	r26, r1
    17d0:	b1 05       	cpc	r27, r1
    17d2:	08 f4       	brcc	.+2      	; 0x17d6 <SERVO_voidAngle+0x5be>
    17d4:	85 cd       	rjmp	.-1270   	; 0x12e0 <SERVO_voidAngle+0xc8>
    17d6:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <SERVO_voidAngle+0x179c>
					}
		break;

		case 45:

					for(u32 i=0;i<50;i++)// angle 45
    17da:	fe 01       	movw	r30, r28
    17dc:	e3 50       	subi	r30, 0x03	; 3
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	10 82       	st	Z, r1
    17e2:	11 82       	std	Z+1, r1	; 0x01
    17e4:	12 82       	std	Z+2, r1	; 0x02
    17e6:	13 82       	std	Z+3, r1	; 0x03
    17e8:	6e c2       	rjmp	.+1244   	; 0x1cc6 <SERVO_voidAngle+0xaae>
					{
						DIO_voidSetPinValue(SERVO_PORT,SERVO_PIN,HIGH);
    17ea:	82 e0       	ldi	r24, 0x02	; 2
    17ec:	62 e0       	ldi	r22, 0x02	; 2
    17ee:	41 e0       	ldi	r20, 0x01	; 1
    17f0:	0e 94 2a 07 	call	0xe54	; 0xe54 <DIO_voidSetPinValue>
    17f4:	fe 01       	movw	r30, r28
    17f6:	e3 54       	subi	r30, 0x43	; 67
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a8 ec       	ldi	r26, 0xC8	; 200
    1800:	b2 e4       	ldi	r27, 0x42	; 66
    1802:	80 83       	st	Z, r24
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	a2 83       	std	Z+2, r26	; 0x02
    1808:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    180a:	8e 01       	movw	r16, r28
    180c:	07 54       	subi	r16, 0x47	; 71
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	fe 01       	movw	r30, r28
    1812:	e3 54       	subi	r30, 0x43	; 67
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	40 e8       	ldi	r20, 0x80	; 128
    1824:	50 e4       	ldi	r21, 0x40	; 64
    1826:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	f8 01       	movw	r30, r16
    1830:	80 83       	st	Z, r24
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	a2 83       	std	Z+2, r26	; 0x02
    1836:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1838:	fe 01       	movw	r30, r28
    183a:	e7 54       	subi	r30, 0x47	; 71
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	34 f4       	brge	.+12     	; 0x1862 <SERVO_voidAngle+0x64a>
		__ticks = 1;
    1856:	fe 01       	movw	r30, r28
    1858:	e8 54       	subi	r30, 0x48	; 72
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	80 83       	st	Z, r24
    1860:	e0 c0       	rjmp	.+448    	; 0x1a22 <SERVO_voidAngle+0x80a>
	else if (__tmp > 255)
    1862:	fe 01       	movw	r30, r28
    1864:	e7 54       	subi	r30, 0x47	; 71
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	60 81       	ld	r22, Z
    186a:	71 81       	ldd	r23, Z+1	; 0x01
    186c:	82 81       	ldd	r24, Z+2	; 0x02
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	53 e4       	ldi	r21, 0x43	; 67
    1878:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	0c f0       	brlt	.+2      	; 0x1882 <SERVO_voidAngle+0x66a>
    1880:	c0 c0       	rjmp	.+384    	; 0x1a02 <SERVO_voidAngle+0x7ea>
	{
		_delay_ms(__us / 1000.0);
    1882:	fe 01       	movw	r30, r28
    1884:	e3 54       	subi	r30, 0x43	; 67
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	4a e7       	ldi	r20, 0x7A	; 122
    1896:	54 e4       	ldi	r21, 0x44	; 68
    1898:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	fe 01       	movw	r30, r28
    18a2:	ec 54       	subi	r30, 0x4C	; 76
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 83       	st	Z, r24
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	a2 83       	std	Z+2, r26	; 0x02
    18ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ae:	8e 01       	movw	r16, r28
    18b0:	00 55       	subi	r16, 0x50	; 80
    18b2:	1f 4f       	sbci	r17, 0xFF	; 255
    18b4:	fe 01       	movw	r30, r28
    18b6:	ec 54       	subi	r30, 0x4C	; 76
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	93 81       	ldd	r25, Z+3	; 0x03
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e8       	ldi	r19, 0x80	; 128
    18c6:	4b e3       	ldi	r20, 0x3B	; 59
    18c8:	55 e4       	ldi	r21, 0x45	; 69
    18ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	f8 01       	movw	r30, r16
    18d4:	80 83       	st	Z, r24
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	a2 83       	std	Z+2, r26	; 0x02
    18da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18dc:	fe 01       	movw	r30, r28
    18de:	e0 55       	subi	r30, 0x50	; 80
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	60 81       	ld	r22, Z
    18e4:	71 81       	ldd	r23, Z+1	; 0x01
    18e6:	82 81       	ldd	r24, Z+2	; 0x02
    18e8:	93 81       	ldd	r25, Z+3	; 0x03
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e8       	ldi	r20, 0x80	; 128
    18f0:	5f e3       	ldi	r21, 0x3F	; 63
    18f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18f6:	88 23       	and	r24, r24
    18f8:	44 f4       	brge	.+16     	; 0x190a <SERVO_voidAngle+0x6f2>
		__ticks = 1;
    18fa:	fe 01       	movw	r30, r28
    18fc:	e2 55       	subi	r30, 0x52	; 82
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
    1908:	64 c0       	rjmp	.+200    	; 0x19d2 <SERVO_voidAngle+0x7ba>
	else if (__tmp > 65535)
    190a:	fe 01       	movw	r30, r28
    190c:	e0 55       	subi	r30, 0x50	; 80
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	3f ef       	ldi	r19, 0xFF	; 255
    191c:	4f e7       	ldi	r20, 0x7F	; 127
    191e:	57 e4       	ldi	r21, 0x47	; 71
    1920:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1924:	18 16       	cp	r1, r24
    1926:	0c f0       	brlt	.+2      	; 0x192a <SERVO_voidAngle+0x712>
    1928:	43 c0       	rjmp	.+134    	; 0x19b0 <SERVO_voidAngle+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192a:	fe 01       	movw	r30, r28
    192c:	ec 54       	subi	r30, 0x4C	; 76
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	8e 01       	movw	r16, r28
    194a:	02 55       	subi	r16, 0x52	; 82
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	f8 01       	movw	r30, r16
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
    1960:	1f c0       	rjmp	.+62     	; 0x19a0 <SERVO_voidAngle+0x788>
    1962:	fe 01       	movw	r30, r28
    1964:	e4 55       	subi	r30, 0x54	; 84
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	8c e2       	ldi	r24, 0x2C	; 44
    196a:	91 e0       	ldi	r25, 0x01	; 1
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1970:	fe 01       	movw	r30, r28
    1972:	e4 55       	subi	r30, 0x54	; 84
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <SERVO_voidAngle+0x762>
    197e:	fe 01       	movw	r30, r28
    1980:	e4 55       	subi	r30, 0x54	; 84
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	91 83       	std	Z+1, r25	; 0x01
    1986:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1988:	de 01       	movw	r26, r28
    198a:	a2 55       	subi	r26, 0x52	; 82
    198c:	bf 4f       	sbci	r27, 0xFF	; 255
    198e:	fe 01       	movw	r30, r28
    1990:	e2 55       	subi	r30, 0x52	; 82
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	80 81       	ld	r24, Z
    1996:	91 81       	ldd	r25, Z+1	; 0x01
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	11 96       	adiw	r26, 0x01	; 1
    199c:	9c 93       	st	X, r25
    199e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a0:	fe 01       	movw	r30, r28
    19a2:	e2 55       	subi	r30, 0x52	; 82
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	d1 f6       	brne	.-76     	; 0x1962 <SERVO_voidAngle+0x74a>
    19ae:	4b c0       	rjmp	.+150    	; 0x1a46 <SERVO_voidAngle+0x82e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b0:	8e 01       	movw	r16, r28
    19b2:	02 55       	subi	r16, 0x52	; 82
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	fe 01       	movw	r30, r28
    19b8:	e0 55       	subi	r30, 0x50	; 80
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	f8 01       	movw	r30, r16
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	de 01       	movw	r26, r28
    19d4:	a6 55       	subi	r26, 0x56	; 86
    19d6:	bf 4f       	sbci	r27, 0xFF	; 255
    19d8:	fe 01       	movw	r30, r28
    19da:	e2 55       	subi	r30, 0x52	; 82
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
    19e2:	11 96       	adiw	r26, 0x01	; 1
    19e4:	9c 93       	st	X, r25
    19e6:	8e 93       	st	-X, r24
    19e8:	fe 01       	movw	r30, r28
    19ea:	e6 55       	subi	r30, 0x56	; 86
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <SERVO_voidAngle+0x7da>
    19f6:	fe 01       	movw	r30, r28
    19f8:	e6 55       	subi	r30, 0x56	; 86
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    1a00:	22 c0       	rjmp	.+68     	; 0x1a46 <SERVO_voidAngle+0x82e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a02:	8e 01       	movw	r16, r28
    1a04:	08 54       	subi	r16, 0x48	; 72
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e7 54       	subi	r30, 0x47	; 71
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	f8 01       	movw	r30, r16
    1a20:	80 83       	st	Z, r24
    1a22:	de 01       	movw	r26, r28
    1a24:	a7 55       	subi	r26, 0x57	; 87
    1a26:	bf 4f       	sbci	r27, 0xFF	; 255
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e8 54       	subi	r30, 0x48	; 72
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 81       	ld	r24, Z
    1a30:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a32:	fe 01       	movw	r30, r28
    1a34:	e7 55       	subi	r30, 0x57	; 87
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	80 81       	ld	r24, Z
    1a3a:	8a 95       	dec	r24
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <SERVO_voidAngle+0x822>
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e7 55       	subi	r30, 0x57	; 87
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	80 83       	st	Z, r24
						_delay_us(100);
						DIO_voidSetPinValue(SERVO_PORT,SERVO_PIN,LOW);
    1a46:	82 e0       	ldi	r24, 0x02	; 2
    1a48:	62 e0       	ldi	r22, 0x02	; 2
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	0e 94 2a 07 	call	0xe54	; 0xe54 <DIO_voidSetPinValue>
    1a50:	fe 01       	movw	r30, r28
    1a52:	eb 55       	subi	r30, 0x5B	; 91
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	98 e7       	ldi	r25, 0x78	; 120
    1a5a:	ab e9       	ldi	r26, 0x9B	; 155
    1a5c:	b6 e4       	ldi	r27, 0x46	; 70
    1a5e:	80 83       	st	Z, r24
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	a2 83       	std	Z+2, r26	; 0x02
    1a64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a66:	8e 01       	movw	r16, r28
    1a68:	0f 55       	subi	r16, 0x5F	; 95
    1a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	eb 55       	subi	r30, 0x5B	; 91
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e8       	ldi	r20, 0x80	; 128
    1a80:	50 e4       	ldi	r21, 0x40	; 64
    1a82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	80 83       	st	Z, r24
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	a2 83       	std	Z+2, r26	; 0x02
    1a92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a94:	fe 01       	movw	r30, r28
    1a96:	ef 55       	subi	r30, 0x5F	; 95
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	60 81       	ld	r22, Z
    1a9c:	71 81       	ldd	r23, Z+1	; 0x01
    1a9e:	82 81       	ldd	r24, Z+2	; 0x02
    1aa0:	93 81       	ldd	r25, Z+3	; 0x03
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e8       	ldi	r20, 0x80	; 128
    1aa8:	5f e3       	ldi	r21, 0x3F	; 63
    1aaa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aae:	88 23       	and	r24, r24
    1ab0:	34 f4       	brge	.+12     	; 0x1abe <SERVO_voidAngle+0x8a6>
		__ticks = 1;
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e0 56       	subi	r30, 0x60	; 96
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	80 83       	st	Z, r24
    1abc:	e0 c0       	rjmp	.+448    	; 0x1c7e <SERVO_voidAngle+0xa66>
	else if (__tmp > 255)
    1abe:	fe 01       	movw	r30, r28
    1ac0:	ef 55       	subi	r30, 0x5F	; 95
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	53 e4       	ldi	r21, 0x43	; 67
    1ad4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	0c f0       	brlt	.+2      	; 0x1ade <SERVO_voidAngle+0x8c6>
    1adc:	c0 c0       	rjmp	.+384    	; 0x1c5e <SERVO_voidAngle+0xa46>
	{
		_delay_ms(__us / 1000.0);
    1ade:	fe 01       	movw	r30, r28
    1ae0:	eb 55       	subi	r30, 0x5B	; 91
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	4a e7       	ldi	r20, 0x7A	; 122
    1af2:	54 e4       	ldi	r21, 0x44	; 68
    1af4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	fe 01       	movw	r30, r28
    1afe:	e4 56       	subi	r30, 0x64	; 100
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	80 83       	st	Z, r24
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	a2 83       	std	Z+2, r26	; 0x02
    1b08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0a:	8e 01       	movw	r16, r28
    1b0c:	08 56       	subi	r16, 0x68	; 104
    1b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b10:	fe 01       	movw	r30, r28
    1b12:	e4 56       	subi	r30, 0x64	; 100
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e8       	ldi	r19, 0x80	; 128
    1b22:	4b e3       	ldi	r20, 0x3B	; 59
    1b24:	55 e4       	ldi	r21, 0x45	; 69
    1b26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	f8 01       	movw	r30, r16
    1b30:	80 83       	st	Z, r24
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	a2 83       	std	Z+2, r26	; 0x02
    1b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e8 56       	subi	r30, 0x68	; 104
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b52:	88 23       	and	r24, r24
    1b54:	44 f4       	brge	.+16     	; 0x1b66 <SERVO_voidAngle+0x94e>
		__ticks = 1;
    1b56:	fe 01       	movw	r30, r28
    1b58:	ea 56       	subi	r30, 0x6A	; 106
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	80 83       	st	Z, r24
    1b64:	64 c0       	rjmp	.+200    	; 0x1c2e <SERVO_voidAngle+0xa16>
	else if (__tmp > 65535)
    1b66:	fe 01       	movw	r30, r28
    1b68:	e8 56       	subi	r30, 0x68	; 104
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	0c f0       	brlt	.+2      	; 0x1b86 <SERVO_voidAngle+0x96e>
    1b84:	43 c0       	rjmp	.+134    	; 0x1c0c <SERVO_voidAngle+0x9f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b86:	fe 01       	movw	r30, r28
    1b88:	e4 56       	subi	r30, 0x64	; 100
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8e 01       	movw	r16, r28
    1ba6:	0a 56       	subi	r16, 0x6A	; 106
    1ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	80 83       	st	Z, r24
    1bbc:	1f c0       	rjmp	.+62     	; 0x1bfc <SERVO_voidAngle+0x9e4>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	ec 56       	subi	r30, 0x6C	; 108
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	8c e2       	ldi	r24, 0x2C	; 44
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bcc:	fe 01       	movw	r30, r28
    1bce:	ec 56       	subi	r30, 0x6C	; 108
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <SERVO_voidAngle+0x9be>
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ec 56       	subi	r30, 0x6C	; 108
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be4:	de 01       	movw	r26, r28
    1be6:	aa 56       	subi	r26, 0x6A	; 106
    1be8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bea:	fe 01       	movw	r30, r28
    1bec:	ea 56       	subi	r30, 0x6A	; 106
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	11 96       	adiw	r26, 0x01	; 1
    1bf8:	9c 93       	st	X, r25
    1bfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	ea 56       	subi	r30, 0x6A	; 106
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 81       	ld	r24, Z
    1c04:	91 81       	ldd	r25, Z+1	; 0x01
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	d1 f6       	brne	.-76     	; 0x1bbe <SERVO_voidAngle+0x9a6>
    1c0a:	4b c0       	rjmp	.+150    	; 0x1ca2 <SERVO_voidAngle+0xa8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	8e 01       	movw	r16, r28
    1c0e:	0a 56       	subi	r16, 0x6A	; 106
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	fe 01       	movw	r30, r28
    1c14:	e8 56       	subi	r30, 0x68	; 104
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	f8 01       	movw	r30, r16
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
    1c2e:	de 01       	movw	r26, r28
    1c30:	ae 56       	subi	r26, 0x6E	; 110
    1c32:	bf 4f       	sbci	r27, 0xFF	; 255
    1c34:	fe 01       	movw	r30, r28
    1c36:	ea 56       	subi	r30, 0x6A	; 106
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	11 96       	adiw	r26, 0x01	; 1
    1c40:	9c 93       	st	X, r25
    1c42:	8e 93       	st	-X, r24
    1c44:	fe 01       	movw	r30, r28
    1c46:	ee 56       	subi	r30, 0x6E	; 110
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <SERVO_voidAngle+0xa36>
    1c52:	fe 01       	movw	r30, r28
    1c54:	ee 56       	subi	r30, 0x6E	; 110
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
    1c5c:	22 c0       	rjmp	.+68     	; 0x1ca2 <SERVO_voidAngle+0xa8a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c5e:	8e 01       	movw	r16, r28
    1c60:	00 56       	subi	r16, 0x60	; 96
    1c62:	1f 4f       	sbci	r17, 0xFF	; 255
    1c64:	fe 01       	movw	r30, r28
    1c66:	ef 55       	subi	r30, 0x5F	; 95
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	60 81       	ld	r22, Z
    1c6c:	71 81       	ldd	r23, Z+1	; 0x01
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	80 83       	st	Z, r24
    1c7e:	de 01       	movw	r26, r28
    1c80:	af 56       	subi	r26, 0x6F	; 111
    1c82:	bf 4f       	sbci	r27, 0xFF	; 255
    1c84:	fe 01       	movw	r30, r28
    1c86:	e0 56       	subi	r30, 0x60	; 96
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 81       	ld	r24, Z
    1c8c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ef 56       	subi	r30, 0x6F	; 111
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 81       	ld	r24, Z
    1c96:	8a 95       	dec	r24
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <SERVO_voidAngle+0xa7e>
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	ef 56       	subi	r30, 0x6F	; 111
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	80 83       	st	Z, r24
					}
		break;

		case 45:

					for(u32 i=0;i<50;i++)// angle 45
    1ca2:	9e 01       	movw	r18, r28
    1ca4:	23 50       	subi	r18, 0x03	; 3
    1ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e3 50       	subi	r30, 0x03	; 3
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	a2 81       	ldd	r26, Z+2	; 0x02
    1cb4:	b3 81       	ldd	r27, Z+3	; 0x03
    1cb6:	01 96       	adiw	r24, 0x01	; 1
    1cb8:	a1 1d       	adc	r26, r1
    1cba:	b1 1d       	adc	r27, r1
    1cbc:	f9 01       	movw	r30, r18
    1cbe:	80 83       	st	Z, r24
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	a2 83       	std	Z+2, r26	; 0x02
    1cc4:	b3 83       	std	Z+3, r27	; 0x03
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e3 50       	subi	r30, 0x03	; 3
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	80 81       	ld	r24, Z
    1cce:	91 81       	ldd	r25, Z+1	; 0x01
    1cd0:	a2 81       	ldd	r26, Z+2	; 0x02
    1cd2:	b3 81       	ldd	r27, Z+3	; 0x03
    1cd4:	82 33       	cpi	r24, 0x32	; 50
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	a1 05       	cpc	r26, r1
    1cda:	b1 05       	cpc	r27, r1
    1cdc:	08 f4       	brcc	.+2      	; 0x1ce0 <SERVO_voidAngle+0xac8>
    1cde:	85 cd       	rjmp	.-1270   	; 0x17ea <SERVO_voidAngle+0x5d2>
    1ce0:	69 c6       	rjmp	.+3282   	; 0x29b4 <SERVO_voidAngle+0x179c>

				   }
		break;

		case 90:
					for(u32 i=0;i<50;i++)//angle 90
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e7 50       	subi	r30, 0x07	; 7
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	10 82       	st	Z, r1
    1cea:	11 82       	std	Z+1, r1	; 0x01
    1cec:	12 82       	std	Z+2, r1	; 0x02
    1cee:	13 82       	std	Z+3, r1	; 0x03
    1cf0:	6e c2       	rjmp	.+1244   	; 0x21ce <SERVO_voidAngle+0xfb6>
					{
						DIO_voidSetPinValue(SERVO_PORT,SERVO_PIN,HIGH);
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	62 e0       	ldi	r22, 0x02	; 2
    1cf6:	41 e0       	ldi	r20, 0x01	; 1
    1cf8:	0e 94 2a 07 	call	0xe54	; 0xe54 <DIO_voidSetPinValue>
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e3 57       	subi	r30, 0x73	; 115
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	aa e7       	ldi	r26, 0x7A	; 122
    1d08:	b4 e4       	ldi	r27, 0x44	; 68
    1d0a:	80 83       	st	Z, r24
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	a2 83       	std	Z+2, r26	; 0x02
    1d10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d12:	8e 01       	movw	r16, r28
    1d14:	07 57       	subi	r16, 0x77	; 119
    1d16:	1f 4f       	sbci	r17, 0xFF	; 255
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e3 57       	subi	r30, 0x73	; 115
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	60 81       	ld	r22, Z
    1d20:	71 81       	ldd	r23, Z+1	; 0x01
    1d22:	82 81       	ldd	r24, Z+2	; 0x02
    1d24:	93 81       	ldd	r25, Z+3	; 0x03
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	50 e4       	ldi	r21, 0x40	; 64
    1d2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	f8 01       	movw	r30, r16
    1d38:	80 83       	st	Z, r24
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	a2 83       	std	Z+2, r26	; 0x02
    1d3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d40:	fe 01       	movw	r30, r28
    1d42:	e7 57       	subi	r30, 0x77	; 119
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	60 81       	ld	r22, Z
    1d48:	71 81       	ldd	r23, Z+1	; 0x01
    1d4a:	82 81       	ldd	r24, Z+2	; 0x02
    1d4c:	93 81       	ldd	r25, Z+3	; 0x03
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	34 f4       	brge	.+12     	; 0x1d6a <SERVO_voidAngle+0xb52>
		__ticks = 1;
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e8 57       	subi	r30, 0x78	; 120
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	80 83       	st	Z, r24
    1d68:	e0 c0       	rjmp	.+448    	; 0x1f2a <SERVO_voidAngle+0xd12>
	else if (__tmp > 255)
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	e7 57       	subi	r30, 0x77	; 119
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	4f e7       	ldi	r20, 0x7F	; 127
    1d7e:	53 e4       	ldi	r21, 0x43	; 67
    1d80:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d84:	18 16       	cp	r1, r24
    1d86:	0c f0       	brlt	.+2      	; 0x1d8a <SERVO_voidAngle+0xb72>
    1d88:	c0 c0       	rjmp	.+384    	; 0x1f0a <SERVO_voidAngle+0xcf2>
	{
		_delay_ms(__us / 1000.0);
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e3 57       	subi	r30, 0x73	; 115
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	60 81       	ld	r22, Z
    1d92:	71 81       	ldd	r23, Z+1	; 0x01
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	4a e7       	ldi	r20, 0x7A	; 122
    1d9e:	54 e4       	ldi	r21, 0x44	; 68
    1da0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	fe 01       	movw	r30, r28
    1daa:	ec 57       	subi	r30, 0x7C	; 124
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 83       	st	Z, r24
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	a2 83       	std	Z+2, r26	; 0x02
    1db4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db6:	8e 01       	movw	r16, r28
    1db8:	00 58       	subi	r16, 0x80	; 128
    1dba:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	ec 57       	subi	r30, 0x7C	; 124
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	60 81       	ld	r22, Z
    1dc4:	71 81       	ldd	r23, Z+1	; 0x01
    1dc6:	82 81       	ldd	r24, Z+2	; 0x02
    1dc8:	93 81       	ldd	r25, Z+3	; 0x03
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e8       	ldi	r19, 0x80	; 128
    1dce:	4b e3       	ldi	r20, 0x3B	; 59
    1dd0:	55 e4       	ldi	r21, 0x45	; 69
    1dd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	f8 01       	movw	r30, r16
    1ddc:	80 83       	st	Z, r24
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	a2 83       	std	Z+2, r26	; 0x02
    1de2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1de4:	fe 01       	movw	r30, r28
    1de6:	e0 58       	subi	r30, 0x80	; 128
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	44 f4       	brge	.+16     	; 0x1e12 <SERVO_voidAngle+0xbfa>
		__ticks = 1;
    1e02:	fe 01       	movw	r30, r28
    1e04:	e2 58       	subi	r30, 0x82	; 130
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
    1e10:	64 c0       	rjmp	.+200    	; 0x1eda <SERVO_voidAngle+0xcc2>
	else if (__tmp > 65535)
    1e12:	fe 01       	movw	r30, r28
    1e14:	e0 58       	subi	r30, 0x80	; 128
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	60 81       	ld	r22, Z
    1e1a:	71 81       	ldd	r23, Z+1	; 0x01
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	0c f0       	brlt	.+2      	; 0x1e32 <SERVO_voidAngle+0xc1a>
    1e30:	43 c0       	rjmp	.+134    	; 0x1eb8 <SERVO_voidAngle+0xca0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e32:	fe 01       	movw	r30, r28
    1e34:	ec 57       	subi	r30, 0x7C	; 124
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e2       	ldi	r20, 0x20	; 32
    1e46:	51 e4       	ldi	r21, 0x41	; 65
    1e48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	8e 01       	movw	r16, r28
    1e52:	02 58       	subi	r16, 0x82	; 130
    1e54:	1f 4f       	sbci	r17, 0xFF	; 255
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	f8 01       	movw	r30, r16
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	80 83       	st	Z, r24
    1e68:	1f c0       	rjmp	.+62     	; 0x1ea8 <SERVO_voidAngle+0xc90>
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e4 58       	subi	r30, 0x84	; 132
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	8c e2       	ldi	r24, 0x2C	; 44
    1e72:	91 e0       	ldi	r25, 0x01	; 1
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e4 58       	subi	r30, 0x84	; 132
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 81       	ld	r24, Z
    1e80:	91 81       	ldd	r25, Z+1	; 0x01
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <SERVO_voidAngle+0xc6a>
    1e86:	fe 01       	movw	r30, r28
    1e88:	e4 58       	subi	r30, 0x84	; 132
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e90:	de 01       	movw	r26, r28
    1e92:	a2 58       	subi	r26, 0x82	; 130
    1e94:	bf 4f       	sbci	r27, 0xFF	; 255
    1e96:	fe 01       	movw	r30, r28
    1e98:	e2 58       	subi	r30, 0x82	; 130
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	80 81       	ld	r24, Z
    1e9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	11 96       	adiw	r26, 0x01	; 1
    1ea4:	9c 93       	st	X, r25
    1ea6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e2 58       	subi	r30, 0x82	; 130
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	d1 f6       	brne	.-76     	; 0x1e6a <SERVO_voidAngle+0xc52>
    1eb6:	4b c0       	rjmp	.+150    	; 0x1f4e <SERVO_voidAngle+0xd36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb8:	8e 01       	movw	r16, r28
    1eba:	02 58       	subi	r16, 0x82	; 130
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e0 58       	subi	r30, 0x80	; 128
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	80 83       	st	Z, r24
    1eda:	de 01       	movw	r26, r28
    1edc:	a6 58       	subi	r26, 0x86	; 134
    1ede:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e2 58       	subi	r30, 0x82	; 130
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	11 96       	adiw	r26, 0x01	; 1
    1eec:	9c 93       	st	X, r25
    1eee:	8e 93       	st	-X, r24
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e6 58       	subi	r30, 0x86	; 134
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <SERVO_voidAngle+0xce2>
    1efe:	fe 01       	movw	r30, r28
    1f00:	e6 58       	subi	r30, 0x86	; 134
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	80 83       	st	Z, r24
    1f08:	22 c0       	rjmp	.+68     	; 0x1f4e <SERVO_voidAngle+0xd36>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f0a:	8e 01       	movw	r16, r28
    1f0c:	08 57       	subi	r16, 0x78	; 120
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	fe 01       	movw	r30, r28
    1f12:	e7 57       	subi	r30, 0x77	; 119
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	60 81       	ld	r22, Z
    1f18:	71 81       	ldd	r23, Z+1	; 0x01
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	f8 01       	movw	r30, r16
    1f28:	80 83       	st	Z, r24
    1f2a:	de 01       	movw	r26, r28
    1f2c:	a7 58       	subi	r26, 0x87	; 135
    1f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f30:	fe 01       	movw	r30, r28
    1f32:	e8 57       	subi	r30, 0x78	; 120
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	80 81       	ld	r24, Z
    1f38:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e7 58       	subi	r30, 0x87	; 135
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	8a 95       	dec	r24
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <SERVO_voidAngle+0xd2a>
    1f46:	fe 01       	movw	r30, r28
    1f48:	e7 58       	subi	r30, 0x87	; 135
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	80 83       	st	Z, r24
						_delay_us(1000);
						DIO_voidSetPinValue(SERVO_PORT,SERVO_PIN,LOW);
    1f4e:	82 e0       	ldi	r24, 0x02	; 2
    1f50:	62 e0       	ldi	r22, 0x02	; 2
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	0e 94 2a 07 	call	0xe54	; 0xe54 <DIO_voidSetPinValue>
    1f58:	fe 01       	movw	r30, r28
    1f5a:	eb 58       	subi	r30, 0x8B	; 139
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e7       	ldi	r25, 0x70	; 112
    1f62:	a4 e9       	ldi	r26, 0x94	; 148
    1f64:	b6 e4       	ldi	r27, 0x46	; 70
    1f66:	80 83       	st	Z, r24
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	a2 83       	std	Z+2, r26	; 0x02
    1f6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f6e:	8e 01       	movw	r16, r28
    1f70:	0f 58       	subi	r16, 0x8F	; 143
    1f72:	1f 4f       	sbci	r17, 0xFF	; 255
    1f74:	fe 01       	movw	r30, r28
    1f76:	eb 58       	subi	r30, 0x8B	; 139
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	60 81       	ld	r22, Z
    1f7c:	71 81       	ldd	r23, Z+1	; 0x01
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	50 e4       	ldi	r21, 0x40	; 64
    1f8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	f8 01       	movw	r30, r16
    1f94:	80 83       	st	Z, r24
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	a2 83       	std	Z+2, r26	; 0x02
    1f9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	ef 58       	subi	r30, 0x8F	; 143
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	60 81       	ld	r22, Z
    1fa4:	71 81       	ldd	r23, Z+1	; 0x01
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	93 81       	ldd	r25, Z+3	; 0x03
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e8       	ldi	r20, 0x80	; 128
    1fb0:	5f e3       	ldi	r21, 0x3F	; 63
    1fb2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fb6:	88 23       	and	r24, r24
    1fb8:	34 f4       	brge	.+12     	; 0x1fc6 <SERVO_voidAngle+0xdae>
		__ticks = 1;
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e0 59       	subi	r30, 0x90	; 144
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	80 83       	st	Z, r24
    1fc4:	e0 c0       	rjmp	.+448    	; 0x2186 <SERVO_voidAngle+0xf6e>
	else if (__tmp > 255)
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	ef 58       	subi	r30, 0x8F	; 143
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	60 81       	ld	r22, Z
    1fce:	71 81       	ldd	r23, Z+1	; 0x01
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	4f e7       	ldi	r20, 0x7F	; 127
    1fda:	53 e4       	ldi	r21, 0x43	; 67
    1fdc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fe0:	18 16       	cp	r1, r24
    1fe2:	0c f0       	brlt	.+2      	; 0x1fe6 <SERVO_voidAngle+0xdce>
    1fe4:	c0 c0       	rjmp	.+384    	; 0x2166 <SERVO_voidAngle+0xf4e>
	{
		_delay_ms(__us / 1000.0);
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	eb 58       	subi	r30, 0x8B	; 139
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	60 81       	ld	r22, Z
    1fee:	71 81       	ldd	r23, Z+1	; 0x01
    1ff0:	82 81       	ldd	r24, Z+2	; 0x02
    1ff2:	93 81       	ldd	r25, Z+3	; 0x03
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	4a e7       	ldi	r20, 0x7A	; 122
    1ffa:	54 e4       	ldi	r21, 0x44	; 68
    1ffc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	fe 01       	movw	r30, r28
    2006:	e4 59       	subi	r30, 0x94	; 148
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	80 83       	st	Z, r24
    200c:	91 83       	std	Z+1, r25	; 0x01
    200e:	a2 83       	std	Z+2, r26	; 0x02
    2010:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2012:	8e 01       	movw	r16, r28
    2014:	08 59       	subi	r16, 0x98	; 152
    2016:	1f 4f       	sbci	r17, 0xFF	; 255
    2018:	fe 01       	movw	r30, r28
    201a:	e4 59       	subi	r30, 0x94	; 148
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e8       	ldi	r19, 0x80	; 128
    202a:	4b e3       	ldi	r20, 0x3B	; 59
    202c:	55 e4       	ldi	r21, 0x45	; 69
    202e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	f8 01       	movw	r30, r16
    2038:	80 83       	st	Z, r24
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	a2 83       	std	Z+2, r26	; 0x02
    203e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2040:	fe 01       	movw	r30, r28
    2042:	e8 59       	subi	r30, 0x98	; 152
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e8       	ldi	r20, 0x80	; 128
    2054:	5f e3       	ldi	r21, 0x3F	; 63
    2056:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    205a:	88 23       	and	r24, r24
    205c:	44 f4       	brge	.+16     	; 0x206e <SERVO_voidAngle+0xe56>
		__ticks = 1;
    205e:	fe 01       	movw	r30, r28
    2060:	ea 59       	subi	r30, 0x9A	; 154
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	80 83       	st	Z, r24
    206c:	64 c0       	rjmp	.+200    	; 0x2136 <SERVO_voidAngle+0xf1e>
	else if (__tmp > 65535)
    206e:	fe 01       	movw	r30, r28
    2070:	e8 59       	subi	r30, 0x98	; 152
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	60 81       	ld	r22, Z
    2076:	71 81       	ldd	r23, Z+1	; 0x01
    2078:	82 81       	ldd	r24, Z+2	; 0x02
    207a:	93 81       	ldd	r25, Z+3	; 0x03
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	3f ef       	ldi	r19, 0xFF	; 255
    2080:	4f e7       	ldi	r20, 0x7F	; 127
    2082:	57 e4       	ldi	r21, 0x47	; 71
    2084:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2088:	18 16       	cp	r1, r24
    208a:	0c f0       	brlt	.+2      	; 0x208e <SERVO_voidAngle+0xe76>
    208c:	43 c0       	rjmp	.+134    	; 0x2114 <SERVO_voidAngle+0xefc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	fe 01       	movw	r30, r28
    2090:	e4 59       	subi	r30, 0x94	; 148
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	60 81       	ld	r22, Z
    2096:	71 81       	ldd	r23, Z+1	; 0x01
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	93 81       	ldd	r25, Z+3	; 0x03
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e2       	ldi	r20, 0x20	; 32
    20a2:	51 e4       	ldi	r21, 0x41	; 65
    20a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	8e 01       	movw	r16, r28
    20ae:	0a 59       	subi	r16, 0x9A	; 154
    20b0:	1f 4f       	sbci	r17, 0xFF	; 255
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	f8 01       	movw	r30, r16
    20c0:	91 83       	std	Z+1, r25	; 0x01
    20c2:	80 83       	st	Z, r24
    20c4:	1f c0       	rjmp	.+62     	; 0x2104 <SERVO_voidAngle+0xeec>
    20c6:	fe 01       	movw	r30, r28
    20c8:	ec 59       	subi	r30, 0x9C	; 156
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	8c e2       	ldi	r24, 0x2C	; 44
    20ce:	91 e0       	ldi	r25, 0x01	; 1
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20d4:	fe 01       	movw	r30, r28
    20d6:	ec 59       	subi	r30, 0x9C	; 156
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <SERVO_voidAngle+0xec6>
    20e2:	fe 01       	movw	r30, r28
    20e4:	ec 59       	subi	r30, 0x9C	; 156
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	91 83       	std	Z+1, r25	; 0x01
    20ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ec:	de 01       	movw	r26, r28
    20ee:	aa 59       	subi	r26, 0x9A	; 154
    20f0:	bf 4f       	sbci	r27, 0xFF	; 255
    20f2:	fe 01       	movw	r30, r28
    20f4:	ea 59       	subi	r30, 0x9A	; 154
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	80 81       	ld	r24, Z
    20fa:	91 81       	ldd	r25, Z+1	; 0x01
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	11 96       	adiw	r26, 0x01	; 1
    2100:	9c 93       	st	X, r25
    2102:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	fe 01       	movw	r30, r28
    2106:	ea 59       	subi	r30, 0x9A	; 154
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	91 81       	ldd	r25, Z+1	; 0x01
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	d1 f6       	brne	.-76     	; 0x20c6 <SERVO_voidAngle+0xeae>
    2112:	4b c0       	rjmp	.+150    	; 0x21aa <SERVO_voidAngle+0xf92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	8e 01       	movw	r16, r28
    2116:	0a 59       	subi	r16, 0x9A	; 154
    2118:	1f 4f       	sbci	r17, 0xFF	; 255
    211a:	fe 01       	movw	r30, r28
    211c:	e8 59       	subi	r30, 0x98	; 152
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	f8 01       	movw	r30, r16
    2132:	91 83       	std	Z+1, r25	; 0x01
    2134:	80 83       	st	Z, r24
    2136:	de 01       	movw	r26, r28
    2138:	ae 59       	subi	r26, 0x9E	; 158
    213a:	bf 4f       	sbci	r27, 0xFF	; 255
    213c:	fe 01       	movw	r30, r28
    213e:	ea 59       	subi	r30, 0x9A	; 154
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 81       	ld	r24, Z
    2144:	91 81       	ldd	r25, Z+1	; 0x01
    2146:	11 96       	adiw	r26, 0x01	; 1
    2148:	9c 93       	st	X, r25
    214a:	8e 93       	st	-X, r24
    214c:	fe 01       	movw	r30, r28
    214e:	ee 59       	subi	r30, 0x9E	; 158
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 81       	ld	r24, Z
    2154:	91 81       	ldd	r25, Z+1	; 0x01
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <SERVO_voidAngle+0xf3e>
    215a:	fe 01       	movw	r30, r28
    215c:	ee 59       	subi	r30, 0x9E	; 158
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	80 83       	st	Z, r24
    2164:	22 c0       	rjmp	.+68     	; 0x21aa <SERVO_voidAngle+0xf92>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2166:	8e 01       	movw	r16, r28
    2168:	00 59       	subi	r16, 0x90	; 144
    216a:	1f 4f       	sbci	r17, 0xFF	; 255
    216c:	fe 01       	movw	r30, r28
    216e:	ef 58       	subi	r30, 0x8F	; 143
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	60 81       	ld	r22, Z
    2174:	71 81       	ldd	r23, Z+1	; 0x01
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	f8 01       	movw	r30, r16
    2184:	80 83       	st	Z, r24
    2186:	de 01       	movw	r26, r28
    2188:	af 59       	subi	r26, 0x9F	; 159
    218a:	bf 4f       	sbci	r27, 0xFF	; 255
    218c:	fe 01       	movw	r30, r28
    218e:	e0 59       	subi	r30, 0x90	; 144
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 81       	ld	r24, Z
    2194:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2196:	fe 01       	movw	r30, r28
    2198:	ef 59       	subi	r30, 0x9F	; 159
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	8a 95       	dec	r24
    21a0:	f1 f7       	brne	.-4      	; 0x219e <SERVO_voidAngle+0xf86>
    21a2:	fe 01       	movw	r30, r28
    21a4:	ef 59       	subi	r30, 0x9F	; 159
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 83       	st	Z, r24

				   }
		break;

		case 90:
					for(u32 i=0;i<50;i++)//angle 90
    21aa:	9e 01       	movw	r18, r28
    21ac:	27 50       	subi	r18, 0x07	; 7
    21ae:	3f 4f       	sbci	r19, 0xFF	; 255
    21b0:	fe 01       	movw	r30, r28
    21b2:	e7 50       	subi	r30, 0x07	; 7
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	80 81       	ld	r24, Z
    21b8:	91 81       	ldd	r25, Z+1	; 0x01
    21ba:	a2 81       	ldd	r26, Z+2	; 0x02
    21bc:	b3 81       	ldd	r27, Z+3	; 0x03
    21be:	01 96       	adiw	r24, 0x01	; 1
    21c0:	a1 1d       	adc	r26, r1
    21c2:	b1 1d       	adc	r27, r1
    21c4:	f9 01       	movw	r30, r18
    21c6:	80 83       	st	Z, r24
    21c8:	91 83       	std	Z+1, r25	; 0x01
    21ca:	a2 83       	std	Z+2, r26	; 0x02
    21cc:	b3 83       	std	Z+3, r27	; 0x03
    21ce:	fe 01       	movw	r30, r28
    21d0:	e7 50       	subi	r30, 0x07	; 7
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	80 81       	ld	r24, Z
    21d6:	91 81       	ldd	r25, Z+1	; 0x01
    21d8:	a2 81       	ldd	r26, Z+2	; 0x02
    21da:	b3 81       	ldd	r27, Z+3	; 0x03
    21dc:	82 33       	cpi	r24, 0x32	; 50
    21de:	91 05       	cpc	r25, r1
    21e0:	a1 05       	cpc	r26, r1
    21e2:	b1 05       	cpc	r27, r1
    21e4:	08 f4       	brcc	.+2      	; 0x21e8 <SERVO_voidAngle+0xfd0>
    21e6:	85 cd       	rjmp	.-1270   	; 0x1cf2 <SERVO_voidAngle+0xada>
    21e8:	e5 c3       	rjmp	.+1994   	; 0x29b4 <SERVO_voidAngle+0x179c>

					}
		break;

		case 135:
					for(u32 i=0;i<50;i++)//angle 135
    21ea:	fe 01       	movw	r30, r28
    21ec:	eb 50       	subi	r30, 0x0B	; 11
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	10 82       	st	Z, r1
    21f2:	11 82       	std	Z+1, r1	; 0x01
    21f4:	12 82       	std	Z+2, r1	; 0x02
    21f6:	13 82       	std	Z+3, r1	; 0x03
    21f8:	22 c2       	rjmp	.+1092   	; 0x263e <SERVO_voidAngle+0x1426>
					{
						DIO_voidSetPinValue(SERVO_PORT,SERVO_PIN,HIGH);
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	62 e0       	ldi	r22, 0x02	; 2
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	0e 94 2a 07 	call	0xe54	; 0xe54 <DIO_voidSetPinValue>
    2204:	fe 01       	movw	r30, r28
    2206:	e3 5a       	subi	r30, 0xA3	; 163
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e8       	ldi	r25, 0x80	; 128
    220e:	ab eb       	ldi	r26, 0xBB	; 187
    2210:	b4 e4       	ldi	r27, 0x44	; 68
    2212:	80 83       	st	Z, r24
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	a2 83       	std	Z+2, r26	; 0x02
    2218:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    221a:	8e 01       	movw	r16, r28
    221c:	07 5a       	subi	r16, 0xA7	; 167
    221e:	1f 4f       	sbci	r17, 0xFF	; 255
    2220:	fe 01       	movw	r30, r28
    2222:	e3 5a       	subi	r30, 0xA3	; 163
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	60 81       	ld	r22, Z
    2228:	71 81       	ldd	r23, Z+1	; 0x01
    222a:	82 81       	ldd	r24, Z+2	; 0x02
    222c:	93 81       	ldd	r25, Z+3	; 0x03
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e8       	ldi	r20, 0x80	; 128
    2234:	50 e4       	ldi	r21, 0x40	; 64
    2236:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	f8 01       	movw	r30, r16
    2240:	80 83       	st	Z, r24
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	a2 83       	std	Z+2, r26	; 0x02
    2246:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2248:	fe 01       	movw	r30, r28
    224a:	e7 5a       	subi	r30, 0xA7	; 167
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	60 81       	ld	r22, Z
    2250:	71 81       	ldd	r23, Z+1	; 0x01
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	93 81       	ldd	r25, Z+3	; 0x03
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e8       	ldi	r20, 0x80	; 128
    225c:	5f e3       	ldi	r21, 0x3F	; 63
    225e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2262:	88 23       	and	r24, r24
    2264:	34 f4       	brge	.+12     	; 0x2272 <SERVO_voidAngle+0x105a>
		__ticks = 1;
    2266:	fe 01       	movw	r30, r28
    2268:	e8 5a       	subi	r30, 0xA8	; 168
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 83       	st	Z, r24
    2270:	e0 c0       	rjmp	.+448    	; 0x2432 <SERVO_voidAngle+0x121a>
	else if (__tmp > 255)
    2272:	fe 01       	movw	r30, r28
    2274:	e7 5a       	subi	r30, 0xA7	; 167
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	53 e4       	ldi	r21, 0x43	; 67
    2288:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	0c f0       	brlt	.+2      	; 0x2292 <SERVO_voidAngle+0x107a>
    2290:	c0 c0       	rjmp	.+384    	; 0x2412 <SERVO_voidAngle+0x11fa>
	{
		_delay_ms(__us / 1000.0);
    2292:	fe 01       	movw	r30, r28
    2294:	e3 5a       	subi	r30, 0xA3	; 163
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a e7       	ldi	r20, 0x7A	; 122
    22a6:	54 e4       	ldi	r21, 0x44	; 68
    22a8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	fe 01       	movw	r30, r28
    22b2:	ec 5a       	subi	r30, 0xAC	; 172
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 83       	st	Z, r24
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	a2 83       	std	Z+2, r26	; 0x02
    22bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	8e 01       	movw	r16, r28
    22c0:	00 5b       	subi	r16, 0xB0	; 176
    22c2:	1f 4f       	sbci	r17, 0xFF	; 255
    22c4:	fe 01       	movw	r30, r28
    22c6:	ec 5a       	subi	r30, 0xAC	; 172
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e8       	ldi	r19, 0x80	; 128
    22d6:	4b e3       	ldi	r20, 0x3B	; 59
    22d8:	55 e4       	ldi	r21, 0x45	; 69
    22da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	f8 01       	movw	r30, r16
    22e4:	80 83       	st	Z, r24
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	a2 83       	std	Z+2, r26	; 0x02
    22ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22ec:	fe 01       	movw	r30, r28
    22ee:	e0 5b       	subi	r30, 0xB0	; 176
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	44 f4       	brge	.+16     	; 0x231a <SERVO_voidAngle+0x1102>
		__ticks = 1;
    230a:	fe 01       	movw	r30, r28
    230c:	e2 5b       	subi	r30, 0xB2	; 178
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	91 83       	std	Z+1, r25	; 0x01
    2316:	80 83       	st	Z, r24
    2318:	64 c0       	rjmp	.+200    	; 0x23e2 <SERVO_voidAngle+0x11ca>
	else if (__tmp > 65535)
    231a:	fe 01       	movw	r30, r28
    231c:	e0 5b       	subi	r30, 0xB0	; 176
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	60 81       	ld	r22, Z
    2322:	71 81       	ldd	r23, Z+1	; 0x01
    2324:	82 81       	ldd	r24, Z+2	; 0x02
    2326:	93 81       	ldd	r25, Z+3	; 0x03
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	3f ef       	ldi	r19, 0xFF	; 255
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	57 e4       	ldi	r21, 0x47	; 71
    2330:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	0c f0       	brlt	.+2      	; 0x233a <SERVO_voidAngle+0x1122>
    2338:	43 c0       	rjmp	.+134    	; 0x23c0 <SERVO_voidAngle+0x11a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233a:	fe 01       	movw	r30, r28
    233c:	ec 5a       	subi	r30, 0xAC	; 172
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	60 81       	ld	r22, Z
    2342:	71 81       	ldd	r23, Z+1	; 0x01
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	93 81       	ldd	r25, Z+3	; 0x03
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e2       	ldi	r20, 0x20	; 32
    234e:	51 e4       	ldi	r21, 0x41	; 65
    2350:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	8e 01       	movw	r16, r28
    235a:	02 5b       	subi	r16, 0xB2	; 178
    235c:	1f 4f       	sbci	r17, 0xFF	; 255
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	f8 01       	movw	r30, r16
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	80 83       	st	Z, r24
    2370:	1f c0       	rjmp	.+62     	; 0x23b0 <SERVO_voidAngle+0x1198>
    2372:	fe 01       	movw	r30, r28
    2374:	e4 5b       	subi	r30, 0xB4	; 180
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	8c e2       	ldi	r24, 0x2C	; 44
    237a:	91 e0       	ldi	r25, 0x01	; 1
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2380:	fe 01       	movw	r30, r28
    2382:	e4 5b       	subi	r30, 0xB4	; 180
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <SERVO_voidAngle+0x1172>
    238e:	fe 01       	movw	r30, r28
    2390:	e4 5b       	subi	r30, 0xB4	; 180
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2398:	de 01       	movw	r26, r28
    239a:	a2 5b       	subi	r26, 0xB2	; 178
    239c:	bf 4f       	sbci	r27, 0xFF	; 255
    239e:	fe 01       	movw	r30, r28
    23a0:	e2 5b       	subi	r30, 0xB2	; 178
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	11 96       	adiw	r26, 0x01	; 1
    23ac:	9c 93       	st	X, r25
    23ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b0:	fe 01       	movw	r30, r28
    23b2:	e2 5b       	subi	r30, 0xB2	; 178
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	d1 f6       	brne	.-76     	; 0x2372 <SERVO_voidAngle+0x115a>
    23be:	4b c0       	rjmp	.+150    	; 0x2456 <SERVO_voidAngle+0x123e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c0:	8e 01       	movw	r16, r28
    23c2:	02 5b       	subi	r16, 0xB2	; 178
    23c4:	1f 4f       	sbci	r17, 0xFF	; 255
    23c6:	fe 01       	movw	r30, r28
    23c8:	e0 5b       	subi	r30, 0xB0	; 176
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	f8 01       	movw	r30, r16
    23de:	91 83       	std	Z+1, r25	; 0x01
    23e0:	80 83       	st	Z, r24
    23e2:	de 01       	movw	r26, r28
    23e4:	a6 5b       	subi	r26, 0xB6	; 182
    23e6:	bf 4f       	sbci	r27, 0xFF	; 255
    23e8:	fe 01       	movw	r30, r28
    23ea:	e2 5b       	subi	r30, 0xB2	; 178
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	11 96       	adiw	r26, 0x01	; 1
    23f4:	9c 93       	st	X, r25
    23f6:	8e 93       	st	-X, r24
    23f8:	fe 01       	movw	r30, r28
    23fa:	e6 5b       	subi	r30, 0xB6	; 182
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 81       	ld	r24, Z
    2400:	91 81       	ldd	r25, Z+1	; 0x01
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <SERVO_voidAngle+0x11ea>
    2406:	fe 01       	movw	r30, r28
    2408:	e6 5b       	subi	r30, 0xB6	; 182
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	80 83       	st	Z, r24
    2410:	22 c0       	rjmp	.+68     	; 0x2456 <SERVO_voidAngle+0x123e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2412:	8e 01       	movw	r16, r28
    2414:	08 5a       	subi	r16, 0xA8	; 168
    2416:	1f 4f       	sbci	r17, 0xFF	; 255
    2418:	fe 01       	movw	r30, r28
    241a:	e7 5a       	subi	r30, 0xA7	; 167
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	60 81       	ld	r22, Z
    2420:	71 81       	ldd	r23, Z+1	; 0x01
    2422:	82 81       	ldd	r24, Z+2	; 0x02
    2424:	93 81       	ldd	r25, Z+3	; 0x03
    2426:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	f8 01       	movw	r30, r16
    2430:	80 83       	st	Z, r24
    2432:	de 01       	movw	r26, r28
    2434:	a7 5b       	subi	r26, 0xB7	; 183
    2436:	bf 4f       	sbci	r27, 0xFF	; 255
    2438:	fe 01       	movw	r30, r28
    243a:	e8 5a       	subi	r30, 0xA8	; 168
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 81       	ld	r24, Z
    2440:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2442:	fe 01       	movw	r30, r28
    2444:	e7 5b       	subi	r30, 0xB7	; 183
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	80 81       	ld	r24, Z
    244a:	8a 95       	dec	r24
    244c:	f1 f7       	brne	.-4      	; 0x244a <SERVO_voidAngle+0x1232>
    244e:	fe 01       	movw	r30, r28
    2450:	e7 5b       	subi	r30, 0xB7	; 183
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 83       	st	Z, r24
						_delay_us(1500);
						DIO_voidSetPinValue(SERVO_PORT,SERVO_PIN,LOW);
    2456:	82 e0       	ldi	r24, 0x02	; 2
    2458:	62 e0       	ldi	r22, 0x02	; 2
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	0e 94 2a 07 	call	0xe54	; 0xe54 <DIO_voidSetPinValue>
    2460:	fe 01       	movw	r30, r28
    2462:	eb 5b       	subi	r30, 0xBB	; 187
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	98 e8       	ldi	r25, 0x88	; 136
    246a:	a0 e9       	ldi	r26, 0x90	; 144
    246c:	b6 e4       	ldi	r27, 0x46	; 70
    246e:	80 83       	st	Z, r24
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	a2 83       	std	Z+2, r26	; 0x02
    2474:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2476:	8e 01       	movw	r16, r28
    2478:	0f 5b       	subi	r16, 0xBF	; 191
    247a:	1f 4f       	sbci	r17, 0xFF	; 255
    247c:	fe 01       	movw	r30, r28
    247e:	eb 5b       	subi	r30, 0xBB	; 187
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	50 e4       	ldi	r21, 0x40	; 64
    2492:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	f8 01       	movw	r30, r16
    249c:	80 83       	st	Z, r24
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	a2 83       	std	Z+2, r26	; 0x02
    24a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24a4:	fe 01       	movw	r30, r28
    24a6:	ef 5b       	subi	r30, 0xBF	; 191
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	60 81       	ld	r22, Z
    24ac:	71 81       	ldd	r23, Z+1	; 0x01
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	93 81       	ldd	r25, Z+3	; 0x03
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24be:	88 23       	and	r24, r24
    24c0:	34 f4       	brge	.+12     	; 0x24ce <SERVO_voidAngle+0x12b6>
		__ticks = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	fe 01       	movw	r30, r28
    24c6:	e0 5c       	subi	r30, 0xC0	; 192
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	80 83       	st	Z, r24
    24cc:	9d c0       	rjmp	.+314    	; 0x2608 <SERVO_voidAngle+0x13f0>
	else if (__tmp > 255)
    24ce:	fe 01       	movw	r30, r28
    24d0:	ef 5b       	subi	r30, 0xBF	; 191
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	60 81       	ld	r22, Z
    24d6:	71 81       	ldd	r23, Z+1	; 0x01
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4f e7       	ldi	r20, 0x7F	; 127
    24e2:	53 e4       	ldi	r21, 0x43	; 67
    24e4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	0c f0       	brlt	.+2      	; 0x24ee <SERVO_voidAngle+0x12d6>
    24ec:	7e c0       	rjmp	.+252    	; 0x25ea <SERVO_voidAngle+0x13d2>
	{
		_delay_ms(__us / 1000.0);
    24ee:	fe 01       	movw	r30, r28
    24f0:	eb 5b       	subi	r30, 0xBB	; 187
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	60 81       	ld	r22, Z
    24f6:	71 81       	ldd	r23, Z+1	; 0x01
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4a e7       	ldi	r20, 0x7A	; 122
    2502:	54 e4       	ldi	r21, 0x44	; 68
    2504:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8c af       	std	Y+60, r24	; 0x3c
    250e:	9d af       	std	Y+61, r25	; 0x3d
    2510:	ae af       	std	Y+62, r26	; 0x3e
    2512:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2514:	6c ad       	ldd	r22, Y+60	; 0x3c
    2516:	7d ad       	ldd	r23, Y+61	; 0x3d
    2518:	8e ad       	ldd	r24, Y+62	; 0x3e
    251a:	9f ad       	ldd	r25, Y+63	; 0x3f
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e8       	ldi	r19, 0x80	; 128
    2520:	4b e3       	ldi	r20, 0x3B	; 59
    2522:	55 e4       	ldi	r21, 0x45	; 69
    2524:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	88 af       	std	Y+56, r24	; 0x38
    252e:	99 af       	std	Y+57, r25	; 0x39
    2530:	aa af       	std	Y+58, r26	; 0x3a
    2532:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2534:	68 ad       	ldd	r22, Y+56	; 0x38
    2536:	79 ad       	ldd	r23, Y+57	; 0x39
    2538:	8a ad       	ldd	r24, Y+58	; 0x3a
    253a:	9b ad       	ldd	r25, Y+59	; 0x3b
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e8       	ldi	r20, 0x80	; 128
    2542:	5f e3       	ldi	r21, 0x3F	; 63
    2544:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2548:	88 23       	and	r24, r24
    254a:	2c f4       	brge	.+10     	; 0x2556 <SERVO_voidAngle+0x133e>
		__ticks = 1;
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	9f ab       	std	Y+55, r25	; 0x37
    2552:	8e ab       	std	Y+54, r24	; 0x36
    2554:	3f c0       	rjmp	.+126    	; 0x25d4 <SERVO_voidAngle+0x13bc>
	else if (__tmp > 65535)
    2556:	68 ad       	ldd	r22, Y+56	; 0x38
    2558:	79 ad       	ldd	r23, Y+57	; 0x39
    255a:	8a ad       	ldd	r24, Y+58	; 0x3a
    255c:	9b ad       	ldd	r25, Y+59	; 0x3b
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	3f ef       	ldi	r19, 0xFF	; 255
    2562:	4f e7       	ldi	r20, 0x7F	; 127
    2564:	57 e4       	ldi	r21, 0x47	; 71
    2566:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    256a:	18 16       	cp	r1, r24
    256c:	4c f5       	brge	.+82     	; 0x25c0 <SERVO_voidAngle+0x13a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2570:	7d ad       	ldd	r23, Y+61	; 0x3d
    2572:	8e ad       	ldd	r24, Y+62	; 0x3e
    2574:	9f ad       	ldd	r25, Y+63	; 0x3f
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e2       	ldi	r20, 0x20	; 32
    257c:	51 e4       	ldi	r21, 0x41	; 65
    257e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	bc 01       	movw	r22, r24
    2588:	cd 01       	movw	r24, r26
    258a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	9f ab       	std	Y+55, r25	; 0x37
    2594:	8e ab       	std	Y+54, r24	; 0x36
    2596:	0f c0       	rjmp	.+30     	; 0x25b6 <SERVO_voidAngle+0x139e>
    2598:	8c e2       	ldi	r24, 0x2C	; 44
    259a:	91 e0       	ldi	r25, 0x01	; 1
    259c:	9d ab       	std	Y+53, r25	; 0x35
    259e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25a0:	8c a9       	ldd	r24, Y+52	; 0x34
    25a2:	9d a9       	ldd	r25, Y+53	; 0x35
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <SERVO_voidAngle+0x138c>
    25a8:	9d ab       	std	Y+53, r25	; 0x35
    25aa:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ac:	8e a9       	ldd	r24, Y+54	; 0x36
    25ae:	9f a9       	ldd	r25, Y+55	; 0x37
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	9f ab       	std	Y+55, r25	; 0x37
    25b4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b6:	8e a9       	ldd	r24, Y+54	; 0x36
    25b8:	9f a9       	ldd	r25, Y+55	; 0x37
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	69 f7       	brne	.-38     	; 0x2598 <SERVO_voidAngle+0x1380>
    25be:	2d c0       	rjmp	.+90     	; 0x261a <SERVO_voidAngle+0x1402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c0:	68 ad       	ldd	r22, Y+56	; 0x38
    25c2:	79 ad       	ldd	r23, Y+57	; 0x39
    25c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    25c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    25c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	9f ab       	std	Y+55, r25	; 0x37
    25d2:	8e ab       	std	Y+54, r24	; 0x36
    25d4:	8e a9       	ldd	r24, Y+54	; 0x36
    25d6:	9f a9       	ldd	r25, Y+55	; 0x37
    25d8:	9b ab       	std	Y+51, r25	; 0x33
    25da:	8a ab       	std	Y+50, r24	; 0x32
    25dc:	8a a9       	ldd	r24, Y+50	; 0x32
    25de:	9b a9       	ldd	r25, Y+51	; 0x33
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <SERVO_voidAngle+0x13c8>
    25e4:	9b ab       	std	Y+51, r25	; 0x33
    25e6:	8a ab       	std	Y+50, r24	; 0x32
    25e8:	18 c0       	rjmp	.+48     	; 0x261a <SERVO_voidAngle+0x1402>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25ea:	fe 01       	movw	r30, r28
    25ec:	ef 5b       	subi	r30, 0xBF	; 191
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	fe 01       	movw	r30, r28
    2602:	e0 5c       	subi	r30, 0xC0	; 192
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	80 83       	st	Z, r24
    2608:	fe 01       	movw	r30, r28
    260a:	e0 5c       	subi	r30, 0xC0	; 192
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2612:	89 a9       	ldd	r24, Y+49	; 0x31
    2614:	8a 95       	dec	r24
    2616:	f1 f7       	brne	.-4      	; 0x2614 <SERVO_voidAngle+0x13fc>
    2618:	89 ab       	std	Y+49, r24	; 0x31

					}
		break;

		case 135:
					for(u32 i=0;i<50;i++)//angle 135
    261a:	9e 01       	movw	r18, r28
    261c:	2b 50       	subi	r18, 0x0B	; 11
    261e:	3f 4f       	sbci	r19, 0xFF	; 255
    2620:	fe 01       	movw	r30, r28
    2622:	eb 50       	subi	r30, 0x0B	; 11
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 81       	ld	r24, Z
    2628:	91 81       	ldd	r25, Z+1	; 0x01
    262a:	a2 81       	ldd	r26, Z+2	; 0x02
    262c:	b3 81       	ldd	r27, Z+3	; 0x03
    262e:	01 96       	adiw	r24, 0x01	; 1
    2630:	a1 1d       	adc	r26, r1
    2632:	b1 1d       	adc	r27, r1
    2634:	f9 01       	movw	r30, r18
    2636:	80 83       	st	Z, r24
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	a2 83       	std	Z+2, r26	; 0x02
    263c:	b3 83       	std	Z+3, r27	; 0x03
    263e:	fe 01       	movw	r30, r28
    2640:	eb 50       	subi	r30, 0x0B	; 11
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	a2 81       	ldd	r26, Z+2	; 0x02
    264a:	b3 81       	ldd	r27, Z+3	; 0x03
    264c:	82 33       	cpi	r24, 0x32	; 50
    264e:	91 05       	cpc	r25, r1
    2650:	a1 05       	cpc	r26, r1
    2652:	b1 05       	cpc	r27, r1
    2654:	08 f4       	brcc	.+2      	; 0x2658 <SERVO_voidAngle+0x1440>
    2656:	d1 cd       	rjmp	.-1118   	; 0x21fa <SERVO_voidAngle+0xfe2>
    2658:	ad c1       	rjmp	.+858    	; 0x29b4 <SERVO_voidAngle+0x179c>
		break;


		case 180:

					for(u32 i=0;i<50;i++)//angle 180
    265a:	fe 01       	movw	r30, r28
    265c:	ef 50       	subi	r30, 0x0F	; 15
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	10 82       	st	Z, r1
    2662:	11 82       	std	Z+1, r1	; 0x01
    2664:	12 82       	std	Z+2, r1	; 0x02
    2666:	13 82       	std	Z+3, r1	; 0x03
    2668:	98 c1       	rjmp	.+816    	; 0x299a <SERVO_voidAngle+0x1782>
					{
						DIO_voidSetPinValue(SERVO_PORT,SERVO_PIN,HIGH);
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	62 e0       	ldi	r22, 0x02	; 2
    266e:	41 e0       	ldi	r20, 0x01	; 1
    2670:	0e 94 2a 07 	call	0xe54	; 0xe54 <DIO_voidSetPinValue>
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	aa ef       	ldi	r26, 0xFA	; 250
    267a:	b4 e4       	ldi	r27, 0x44	; 68
    267c:	8d a7       	std	Y+45, r24	; 0x2d
    267e:	9e a7       	std	Y+46, r25	; 0x2e
    2680:	af a7       	std	Y+47, r26	; 0x2f
    2682:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2684:	6d a5       	ldd	r22, Y+45	; 0x2d
    2686:	7e a5       	ldd	r23, Y+46	; 0x2e
    2688:	8f a5       	ldd	r24, Y+47	; 0x2f
    268a:	98 a9       	ldd	r25, Y+48	; 0x30
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e8       	ldi	r20, 0x80	; 128
    2692:	50 e4       	ldi	r21, 0x40	; 64
    2694:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	89 a7       	std	Y+41, r24	; 0x29
    269e:	9a a7       	std	Y+42, r25	; 0x2a
    26a0:	ab a7       	std	Y+43, r26	; 0x2b
    26a2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    26a4:	69 a5       	ldd	r22, Y+41	; 0x29
    26a6:	7a a5       	ldd	r23, Y+42	; 0x2a
    26a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    26aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e8       	ldi	r20, 0x80	; 128
    26b2:	5f e3       	ldi	r21, 0x3F	; 63
    26b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26b8:	88 23       	and	r24, r24
    26ba:	1c f4       	brge	.+6      	; 0x26c2 <SERVO_voidAngle+0x14aa>
		__ticks = 1;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	88 a7       	std	Y+40, r24	; 0x28
    26c0:	91 c0       	rjmp	.+290    	; 0x27e4 <SERVO_voidAngle+0x15cc>
	else if (__tmp > 255)
    26c2:	69 a5       	ldd	r22, Y+41	; 0x29
    26c4:	7a a5       	ldd	r23, Y+42	; 0x2a
    26c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    26c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4f e7       	ldi	r20, 0x7F	; 127
    26d0:	53 e4       	ldi	r21, 0x43	; 67
    26d2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26d6:	18 16       	cp	r1, r24
    26d8:	0c f0       	brlt	.+2      	; 0x26dc <SERVO_voidAngle+0x14c4>
    26da:	7b c0       	rjmp	.+246    	; 0x27d2 <SERVO_voidAngle+0x15ba>
	{
		_delay_ms(__us / 1000.0);
    26dc:	6d a5       	ldd	r22, Y+45	; 0x2d
    26de:	7e a5       	ldd	r23, Y+46	; 0x2e
    26e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e2:	98 a9       	ldd	r25, Y+48	; 0x30
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	4a e7       	ldi	r20, 0x7A	; 122
    26ea:	54 e4       	ldi	r21, 0x44	; 68
    26ec:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	8c a3       	std	Y+36, r24	; 0x24
    26f6:	9d a3       	std	Y+37, r25	; 0x25
    26f8:	ae a3       	std	Y+38, r26	; 0x26
    26fa:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fc:	6c a1       	ldd	r22, Y+36	; 0x24
    26fe:	7d a1       	ldd	r23, Y+37	; 0x25
    2700:	8e a1       	ldd	r24, Y+38	; 0x26
    2702:	9f a1       	ldd	r25, Y+39	; 0x27
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e8       	ldi	r19, 0x80	; 128
    2708:	4b e3       	ldi	r20, 0x3B	; 59
    270a:	55 e4       	ldi	r21, 0x45	; 69
    270c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	88 a3       	std	Y+32, r24	; 0x20
    2716:	99 a3       	std	Y+33, r25	; 0x21
    2718:	aa a3       	std	Y+34, r26	; 0x22
    271a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    271c:	68 a1       	ldd	r22, Y+32	; 0x20
    271e:	79 a1       	ldd	r23, Y+33	; 0x21
    2720:	8a a1       	ldd	r24, Y+34	; 0x22
    2722:	9b a1       	ldd	r25, Y+35	; 0x23
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e8       	ldi	r20, 0x80	; 128
    272a:	5f e3       	ldi	r21, 0x3F	; 63
    272c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2730:	88 23       	and	r24, r24
    2732:	2c f4       	brge	.+10     	; 0x273e <SERVO_voidAngle+0x1526>
		__ticks = 1;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9f 8f       	std	Y+31, r25	; 0x1f
    273a:	8e 8f       	std	Y+30, r24	; 0x1e
    273c:	3f c0       	rjmp	.+126    	; 0x27bc <SERVO_voidAngle+0x15a4>
	else if (__tmp > 65535)
    273e:	68 a1       	ldd	r22, Y+32	; 0x20
    2740:	79 a1       	ldd	r23, Y+33	; 0x21
    2742:	8a a1       	ldd	r24, Y+34	; 0x22
    2744:	9b a1       	ldd	r25, Y+35	; 0x23
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	3f ef       	ldi	r19, 0xFF	; 255
    274a:	4f e7       	ldi	r20, 0x7F	; 127
    274c:	57 e4       	ldi	r21, 0x47	; 71
    274e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2752:	18 16       	cp	r1, r24
    2754:	4c f5       	brge	.+82     	; 0x27a8 <SERVO_voidAngle+0x1590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2756:	6c a1       	ldd	r22, Y+36	; 0x24
    2758:	7d a1       	ldd	r23, Y+37	; 0x25
    275a:	8e a1       	ldd	r24, Y+38	; 0x26
    275c:	9f a1       	ldd	r25, Y+39	; 0x27
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e2       	ldi	r20, 0x20	; 32
    2764:	51 e4       	ldi	r21, 0x41	; 65
    2766:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	bc 01       	movw	r22, r24
    2770:	cd 01       	movw	r24, r26
    2772:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9f 8f       	std	Y+31, r25	; 0x1f
    277c:	8e 8f       	std	Y+30, r24	; 0x1e
    277e:	0f c0       	rjmp	.+30     	; 0x279e <SERVO_voidAngle+0x1586>
    2780:	8c e2       	ldi	r24, 0x2C	; 44
    2782:	91 e0       	ldi	r25, 0x01	; 1
    2784:	9d 8f       	std	Y+29, r25	; 0x1d
    2786:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2788:	8c 8d       	ldd	r24, Y+28	; 0x1c
    278a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <SERVO_voidAngle+0x1574>
    2790:	9d 8f       	std	Y+29, r25	; 0x1d
    2792:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2794:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2796:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	9f 8f       	std	Y+31, r25	; 0x1f
    279c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	69 f7       	brne	.-38     	; 0x2780 <SERVO_voidAngle+0x1568>
    27a6:	24 c0       	rjmp	.+72     	; 0x27f0 <SERVO_voidAngle+0x15d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a8:	68 a1       	ldd	r22, Y+32	; 0x20
    27aa:	79 a1       	ldd	r23, Y+33	; 0x21
    27ac:	8a a1       	ldd	r24, Y+34	; 0x22
    27ae:	9b a1       	ldd	r25, Y+35	; 0x23
    27b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9f 8f       	std	Y+31, r25	; 0x1f
    27ba:	8e 8f       	std	Y+30, r24	; 0x1e
    27bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27c0:	9b 8f       	std	Y+27, r25	; 0x1b
    27c2:	8a 8f       	std	Y+26, r24	; 0x1a
    27c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <SERVO_voidAngle+0x15b0>
    27cc:	9b 8f       	std	Y+27, r25	; 0x1b
    27ce:	8a 8f       	std	Y+26, r24	; 0x1a
    27d0:	0f c0       	rjmp	.+30     	; 0x27f0 <SERVO_voidAngle+0x15d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27d2:	69 a5       	ldd	r22, Y+41	; 0x29
    27d4:	7a a5       	ldd	r23, Y+42	; 0x2a
    27d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    27d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    27da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	88 a7       	std	Y+40, r24	; 0x28
    27e4:	88 a5       	ldd	r24, Y+40	; 0x28
    27e6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27e8:	89 8d       	ldd	r24, Y+25	; 0x19
    27ea:	8a 95       	dec	r24
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <SERVO_voidAngle+0x15d2>
    27ee:	89 8f       	std	Y+25, r24	; 0x19
						_delay_us(2000);
						DIO_voidSetPinValue(SERVO_PORT,SERVO_PIN,LOW);
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	62 e0       	ldi	r22, 0x02	; 2
    27f4:	40 e0       	ldi	r20, 0x00	; 0
    27f6:	0e 94 2a 07 	call	0xe54	; 0xe54 <DIO_voidSetPinValue>
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	90 ea       	ldi	r25, 0xA0	; 160
    27fe:	ac e8       	ldi	r26, 0x8C	; 140
    2800:	b6 e4       	ldi	r27, 0x46	; 70
    2802:	8d 8b       	std	Y+21, r24	; 0x15
    2804:	9e 8b       	std	Y+22, r25	; 0x16
    2806:	af 8b       	std	Y+23, r26	; 0x17
    2808:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    280a:	6d 89       	ldd	r22, Y+21	; 0x15
    280c:	7e 89       	ldd	r23, Y+22	; 0x16
    280e:	8f 89       	ldd	r24, Y+23	; 0x17
    2810:	98 8d       	ldd	r25, Y+24	; 0x18
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	50 e4       	ldi	r21, 0x40	; 64
    281a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	89 8b       	std	Y+17, r24	; 0x11
    2824:	9a 8b       	std	Y+18, r25	; 0x12
    2826:	ab 8b       	std	Y+19, r26	; 0x13
    2828:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    282a:	69 89       	ldd	r22, Y+17	; 0x11
    282c:	7a 89       	ldd	r23, Y+18	; 0x12
    282e:	8b 89       	ldd	r24, Y+19	; 0x13
    2830:	9c 89       	ldd	r25, Y+20	; 0x14
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e8       	ldi	r20, 0x80	; 128
    2838:	5f e3       	ldi	r21, 0x3F	; 63
    283a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    283e:	88 23       	and	r24, r24
    2840:	1c f4       	brge	.+6      	; 0x2848 <SERVO_voidAngle+0x1630>
		__ticks = 1;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	88 8b       	std	Y+16, r24	; 0x10
    2846:	91 c0       	rjmp	.+290    	; 0x296a <SERVO_voidAngle+0x1752>
	else if (__tmp > 255)
    2848:	69 89       	ldd	r22, Y+17	; 0x11
    284a:	7a 89       	ldd	r23, Y+18	; 0x12
    284c:	8b 89       	ldd	r24, Y+19	; 0x13
    284e:	9c 89       	ldd	r25, Y+20	; 0x14
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	4f e7       	ldi	r20, 0x7F	; 127
    2856:	53 e4       	ldi	r21, 0x43	; 67
    2858:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    285c:	18 16       	cp	r1, r24
    285e:	0c f0       	brlt	.+2      	; 0x2862 <SERVO_voidAngle+0x164a>
    2860:	7b c0       	rjmp	.+246    	; 0x2958 <SERVO_voidAngle+0x1740>
	{
		_delay_ms(__us / 1000.0);
    2862:	6d 89       	ldd	r22, Y+21	; 0x15
    2864:	7e 89       	ldd	r23, Y+22	; 0x16
    2866:	8f 89       	ldd	r24, Y+23	; 0x17
    2868:	98 8d       	ldd	r25, Y+24	; 0x18
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a e7       	ldi	r20, 0x7A	; 122
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8c 87       	std	Y+12, r24	; 0x0c
    287c:	9d 87       	std	Y+13, r25	; 0x0d
    287e:	ae 87       	std	Y+14, r26	; 0x0e
    2880:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2882:	6c 85       	ldd	r22, Y+12	; 0x0c
    2884:	7d 85       	ldd	r23, Y+13	; 0x0d
    2886:	8e 85       	ldd	r24, Y+14	; 0x0e
    2888:	9f 85       	ldd	r25, Y+15	; 0x0f
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e8       	ldi	r19, 0x80	; 128
    288e:	4b e3       	ldi	r20, 0x3B	; 59
    2890:	55 e4       	ldi	r21, 0x45	; 69
    2892:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	88 87       	std	Y+8, r24	; 0x08
    289c:	99 87       	std	Y+9, r25	; 0x09
    289e:	aa 87       	std	Y+10, r26	; 0x0a
    28a0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28a2:	68 85       	ldd	r22, Y+8	; 0x08
    28a4:	79 85       	ldd	r23, Y+9	; 0x09
    28a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    28a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e8       	ldi	r20, 0x80	; 128
    28b0:	5f e3       	ldi	r21, 0x3F	; 63
    28b2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28b6:	88 23       	and	r24, r24
    28b8:	2c f4       	brge	.+10     	; 0x28c4 <SERVO_voidAngle+0x16ac>
		__ticks = 1;
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	9f 83       	std	Y+7, r25	; 0x07
    28c0:	8e 83       	std	Y+6, r24	; 0x06
    28c2:	3f c0       	rjmp	.+126    	; 0x2942 <SERVO_voidAngle+0x172a>
	else if (__tmp > 65535)
    28c4:	68 85       	ldd	r22, Y+8	; 0x08
    28c6:	79 85       	ldd	r23, Y+9	; 0x09
    28c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	3f ef       	ldi	r19, 0xFF	; 255
    28d0:	4f e7       	ldi	r20, 0x7F	; 127
    28d2:	57 e4       	ldi	r21, 0x47	; 71
    28d4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28d8:	18 16       	cp	r1, r24
    28da:	4c f5       	brge	.+82     	; 0x292e <SERVO_voidAngle+0x1716>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    28de:	7d 85       	ldd	r23, Y+13	; 0x0d
    28e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    28e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e2       	ldi	r20, 0x20	; 32
    28ea:	51 e4       	ldi	r21, 0x41	; 65
    28ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	bc 01       	movw	r22, r24
    28f6:	cd 01       	movw	r24, r26
    28f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9f 83       	std	Y+7, r25	; 0x07
    2902:	8e 83       	std	Y+6, r24	; 0x06
    2904:	0f c0       	rjmp	.+30     	; 0x2924 <SERVO_voidAngle+0x170c>
    2906:	8c e2       	ldi	r24, 0x2C	; 44
    2908:	91 e0       	ldi	r25, 0x01	; 1
    290a:	9d 83       	std	Y+5, r25	; 0x05
    290c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    290e:	8c 81       	ldd	r24, Y+4	; 0x04
    2910:	9d 81       	ldd	r25, Y+5	; 0x05
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <SERVO_voidAngle+0x16fa>
    2916:	9d 83       	std	Y+5, r25	; 0x05
    2918:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291a:	8e 81       	ldd	r24, Y+6	; 0x06
    291c:	9f 81       	ldd	r25, Y+7	; 0x07
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	9f 83       	std	Y+7, r25	; 0x07
    2922:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2924:	8e 81       	ldd	r24, Y+6	; 0x06
    2926:	9f 81       	ldd	r25, Y+7	; 0x07
    2928:	00 97       	sbiw	r24, 0x00	; 0
    292a:	69 f7       	brne	.-38     	; 0x2906 <SERVO_voidAngle+0x16ee>
    292c:	24 c0       	rjmp	.+72     	; 0x2976 <SERVO_voidAngle+0x175e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292e:	68 85       	ldd	r22, Y+8	; 0x08
    2930:	79 85       	ldd	r23, Y+9	; 0x09
    2932:	8a 85       	ldd	r24, Y+10	; 0x0a
    2934:	9b 85       	ldd	r25, Y+11	; 0x0b
    2936:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	9f 83       	std	Y+7, r25	; 0x07
    2940:	8e 83       	std	Y+6, r24	; 0x06
    2942:	8e 81       	ldd	r24, Y+6	; 0x06
    2944:	9f 81       	ldd	r25, Y+7	; 0x07
    2946:	9b 83       	std	Y+3, r25	; 0x03
    2948:	8a 83       	std	Y+2, r24	; 0x02
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	9b 81       	ldd	r25, Y+3	; 0x03
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	f1 f7       	brne	.-4      	; 0x294e <SERVO_voidAngle+0x1736>
    2952:	9b 83       	std	Y+3, r25	; 0x03
    2954:	8a 83       	std	Y+2, r24	; 0x02
    2956:	0f c0       	rjmp	.+30     	; 0x2976 <SERVO_voidAngle+0x175e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2958:	69 89       	ldd	r22, Y+17	; 0x11
    295a:	7a 89       	ldd	r23, Y+18	; 0x12
    295c:	8b 89       	ldd	r24, Y+19	; 0x13
    295e:	9c 89       	ldd	r25, Y+20	; 0x14
    2960:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	88 8b       	std	Y+16, r24	; 0x10
    296a:	88 89       	ldd	r24, Y+16	; 0x10
    296c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	8a 95       	dec	r24
    2972:	f1 f7       	brne	.-4      	; 0x2970 <SERVO_voidAngle+0x1758>
    2974:	89 83       	std	Y+1, r24	; 0x01
		break;


		case 180:

					for(u32 i=0;i<50;i++)//angle 180
    2976:	9e 01       	movw	r18, r28
    2978:	2f 50       	subi	r18, 0x0F	; 15
    297a:	3f 4f       	sbci	r19, 0xFF	; 255
    297c:	fe 01       	movw	r30, r28
    297e:	ef 50       	subi	r30, 0x0F	; 15
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 81       	ld	r24, Z
    2984:	91 81       	ldd	r25, Z+1	; 0x01
    2986:	a2 81       	ldd	r26, Z+2	; 0x02
    2988:	b3 81       	ldd	r27, Z+3	; 0x03
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	a1 1d       	adc	r26, r1
    298e:	b1 1d       	adc	r27, r1
    2990:	f9 01       	movw	r30, r18
    2992:	80 83       	st	Z, r24
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	a2 83       	std	Z+2, r26	; 0x02
    2998:	b3 83       	std	Z+3, r27	; 0x03
    299a:	fe 01       	movw	r30, r28
    299c:	ef 50       	subi	r30, 0x0F	; 15
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	a2 81       	ldd	r26, Z+2	; 0x02
    29a6:	b3 81       	ldd	r27, Z+3	; 0x03
    29a8:	82 33       	cpi	r24, 0x32	; 50
    29aa:	91 05       	cpc	r25, r1
    29ac:	a1 05       	cpc	r26, r1
    29ae:	b1 05       	cpc	r27, r1
    29b0:	08 f4       	brcc	.+2      	; 0x29b4 <SERVO_voidAngle+0x179c>
    29b2:	5b ce       	rjmp	.-842    	; 0x266a <SERVO_voidAngle+0x1452>


					}
		break;
}
}
    29b4:	c9 5f       	subi	r28, 0xF9	; 249
    29b6:	de 4f       	sbci	r29, 0xFE	; 254
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	de bf       	out	0x3e, r29	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	1f 91       	pop	r17
    29c8:	0f 91       	pop	r16
    29ca:	08 95       	ret

000029cc <main>:
#include"STD_Types.h"
#include"DIO_interface.h"
#include"SERVO_interface.h"

int main(void)
{
    29cc:	0f 93       	push	r16
    29ce:	1f 93       	push	r17
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	c6 54       	subi	r28, 0x46	; 70
    29da:	d0 40       	sbci	r29, 0x00	; 0
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDir(PORT_C,PIN_2,OUTPUT);
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	62 e0       	ldi	r22, 0x02	; 2
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDir>

while(1)
{
	SERVO_voidAngle(0);
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	0e 94 0c 09 	call	0x1218	; 0x1218 <SERVO_voidAngle>
    29f6:	fe 01       	movw	r30, r28
    29f8:	ed 5b       	subi	r30, 0xBD	; 189
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	aa e7       	ldi	r26, 0x7A	; 122
    2a02:	b4 e4       	ldi	r27, 0x44	; 68
    2a04:	80 83       	st	Z, r24
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	a2 83       	std	Z+2, r26	; 0x02
    2a0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0c:	8e 01       	movw	r16, r28
    2a0e:	01 5c       	subi	r16, 0xC1	; 193
    2a10:	1f 4f       	sbci	r17, 0xFF	; 255
    2a12:	fe 01       	movw	r30, r28
    2a14:	ed 5b       	subi	r30, 0xBD	; 189
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	60 81       	ld	r22, Z
    2a1a:	71 81       	ldd	r23, Z+1	; 0x01
    2a1c:	82 81       	ldd	r24, Z+2	; 0x02
    2a1e:	93 81       	ldd	r25, Z+3	; 0x03
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e8       	ldi	r19, 0x80	; 128
    2a24:	4b e3       	ldi	r20, 0x3B	; 59
    2a26:	55 e4       	ldi	r21, 0x45	; 69
    2a28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	f8 01       	movw	r30, r16
    2a32:	80 83       	st	Z, r24
    2a34:	91 83       	std	Z+1, r25	; 0x01
    2a36:	a2 83       	std	Z+2, r26	; 0x02
    2a38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	ff 96       	adiw	r30, 0x3f	; 63
    2a3e:	60 81       	ld	r22, Z
    2a40:	71 81       	ldd	r23, Z+1	; 0x01
    2a42:	82 81       	ldd	r24, Z+2	; 0x02
    2a44:	93 81       	ldd	r25, Z+3	; 0x03
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e8       	ldi	r20, 0x80	; 128
    2a4c:	5f e3       	ldi	r21, 0x3F	; 63
    2a4e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a52:	88 23       	and	r24, r24
    2a54:	2c f4       	brge	.+10     	; 0x2a60 <main+0x94>
		__ticks = 1;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	9e af       	std	Y+62, r25	; 0x3e
    2a5c:	8d af       	std	Y+61, r24	; 0x3d
    2a5e:	46 c0       	rjmp	.+140    	; 0x2aec <main+0x120>
	else if (__tmp > 65535)
    2a60:	fe 01       	movw	r30, r28
    2a62:	ff 96       	adiw	r30, 0x3f	; 63
    2a64:	60 81       	ld	r22, Z
    2a66:	71 81       	ldd	r23, Z+1	; 0x01
    2a68:	82 81       	ldd	r24, Z+2	; 0x02
    2a6a:	93 81       	ldd	r25, Z+3	; 0x03
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	3f ef       	ldi	r19, 0xFF	; 255
    2a70:	4f e7       	ldi	r20, 0x7F	; 127
    2a72:	57 e4       	ldi	r21, 0x47	; 71
    2a74:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a78:	18 16       	cp	r1, r24
    2a7a:	64 f5       	brge	.+88     	; 0x2ad4 <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	ed 5b       	subi	r30, 0xBD	; 189
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e2       	ldi	r20, 0x20	; 32
    2a90:	51 e4       	ldi	r21, 0x41	; 65
    2a92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	9e af       	std	Y+62, r25	; 0x3e
    2aa8:	8d af       	std	Y+61, r24	; 0x3d
    2aaa:	0f c0       	rjmp	.+30     	; 0x2aca <main+0xfe>
    2aac:	8c e2       	ldi	r24, 0x2C	; 44
    2aae:	91 e0       	ldi	r25, 0x01	; 1
    2ab0:	9c af       	std	Y+60, r25	; 0x3c
    2ab2:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ab4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ab6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <main+0xec>
    2abc:	9c af       	std	Y+60, r25	; 0x3c
    2abe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ac2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	9e af       	std	Y+62, r25	; 0x3e
    2ac8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aca:	8d ad       	ldd	r24, Y+61	; 0x3d
    2acc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	69 f7       	brne	.-38     	; 0x2aac <main+0xe0>
    2ad2:	16 c0       	rjmp	.+44     	; 0x2b00 <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	ff 96       	adiw	r30, 0x3f	; 63
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	9e af       	std	Y+62, r25	; 0x3e
    2aea:	8d af       	std	Y+61, r24	; 0x3d
    2aec:	8d ad       	ldd	r24, Y+61	; 0x3d
    2aee:	9e ad       	ldd	r25, Y+62	; 0x3e
    2af0:	9a af       	std	Y+58, r25	; 0x3a
    2af2:	89 af       	std	Y+57, r24	; 0x39
    2af4:	89 ad       	ldd	r24, Y+57	; 0x39
    2af6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <main+0x12c>
    2afc:	9a af       	std	Y+58, r25	; 0x3a
    2afe:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	SERVO_voidAngle(45);
    2b00:	8d e2       	ldi	r24, 0x2D	; 45
    2b02:	0e 94 0c 09 	call	0x1218	; 0x1218 <SERVO_voidAngle>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	aa e7       	ldi	r26, 0x7A	; 122
    2b0c:	b4 e4       	ldi	r27, 0x44	; 68
    2b0e:	8d ab       	std	Y+53, r24	; 0x35
    2b10:	9e ab       	std	Y+54, r25	; 0x36
    2b12:	af ab       	std	Y+55, r26	; 0x37
    2b14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b16:	6d a9       	ldd	r22, Y+53	; 0x35
    2b18:	7e a9       	ldd	r23, Y+54	; 0x36
    2b1a:	8f a9       	ldd	r24, Y+55	; 0x37
    2b1c:	98 ad       	ldd	r25, Y+56	; 0x38
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e8       	ldi	r19, 0x80	; 128
    2b22:	4b e3       	ldi	r20, 0x3B	; 59
    2b24:	55 e4       	ldi	r21, 0x45	; 69
    2b26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	89 ab       	std	Y+49, r24	; 0x31
    2b30:	9a ab       	std	Y+50, r25	; 0x32
    2b32:	ab ab       	std	Y+51, r26	; 0x33
    2b34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b36:	69 a9       	ldd	r22, Y+49	; 0x31
    2b38:	7a a9       	ldd	r23, Y+50	; 0x32
    2b3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e8       	ldi	r20, 0x80	; 128
    2b44:	5f e3       	ldi	r21, 0x3F	; 63
    2b46:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <main+0x18c>
		__ticks = 1;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	98 ab       	std	Y+48, r25	; 0x30
    2b54:	8f a7       	std	Y+47, r24	; 0x2f
    2b56:	3f c0       	rjmp	.+126    	; 0x2bd6 <main+0x20a>
	else if (__tmp > 65535)
    2b58:	69 a9       	ldd	r22, Y+49	; 0x31
    2b5a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b5c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b5e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	3f ef       	ldi	r19, 0xFF	; 255
    2b64:	4f e7       	ldi	r20, 0x7F	; 127
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b6c:	18 16       	cp	r1, r24
    2b6e:	4c f5       	brge	.+82     	; 0x2bc2 <main+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b70:	6d a9       	ldd	r22, Y+53	; 0x35
    2b72:	7e a9       	ldd	r23, Y+54	; 0x36
    2b74:	8f a9       	ldd	r24, Y+55	; 0x37
    2b76:	98 ad       	ldd	r25, Y+56	; 0x38
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e2       	ldi	r20, 0x20	; 32
    2b7e:	51 e4       	ldi	r21, 0x41	; 65
    2b80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	98 ab       	std	Y+48, r25	; 0x30
    2b96:	8f a7       	std	Y+47, r24	; 0x2f
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <main+0x1ec>
    2b9a:	8c e2       	ldi	r24, 0x2C	; 44
    2b9c:	91 e0       	ldi	r25, 0x01	; 1
    2b9e:	9e a7       	std	Y+46, r25	; 0x2e
    2ba0:	8d a7       	std	Y+45, r24	; 0x2d
    2ba2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ba4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <main+0x1da>
    2baa:	9e a7       	std	Y+46, r25	; 0x2e
    2bac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bae:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bb0:	98 a9       	ldd	r25, Y+48	; 0x30
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	98 ab       	std	Y+48, r25	; 0x30
    2bb6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bba:	98 a9       	ldd	r25, Y+48	; 0x30
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	69 f7       	brne	.-38     	; 0x2b9a <main+0x1ce>
    2bc0:	14 c0       	rjmp	.+40     	; 0x2bea <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    2bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    2bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    2bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    2bca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	98 ab       	std	Y+48, r25	; 0x30
    2bd4:	8f a7       	std	Y+47, r24	; 0x2f
    2bd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd8:	98 a9       	ldd	r25, Y+48	; 0x30
    2bda:	9c a7       	std	Y+44, r25	; 0x2c
    2bdc:	8b a7       	std	Y+43, r24	; 0x2b
    2bde:	8b a5       	ldd	r24, Y+43	; 0x2b
    2be0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <main+0x216>
    2be6:	9c a7       	std	Y+44, r25	; 0x2c
    2be8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	SERVO_voidAngle(90);
    2bea:	8a e5       	ldi	r24, 0x5A	; 90
    2bec:	0e 94 0c 09 	call	0x1218	; 0x1218 <SERVO_voidAngle>
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	aa e7       	ldi	r26, 0x7A	; 122
    2bf6:	b4 e4       	ldi	r27, 0x44	; 68
    2bf8:	8f a3       	std	Y+39, r24	; 0x27
    2bfa:	98 a7       	std	Y+40, r25	; 0x28
    2bfc:	a9 a7       	std	Y+41, r26	; 0x29
    2bfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c00:	6f a1       	ldd	r22, Y+39	; 0x27
    2c02:	78 a5       	ldd	r23, Y+40	; 0x28
    2c04:	89 a5       	ldd	r24, Y+41	; 0x29
    2c06:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e8       	ldi	r19, 0x80	; 128
    2c0c:	4b e3       	ldi	r20, 0x3B	; 59
    2c0e:	55 e4       	ldi	r21, 0x45	; 69
    2c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	8b a3       	std	Y+35, r24	; 0x23
    2c1a:	9c a3       	std	Y+36, r25	; 0x24
    2c1c:	ad a3       	std	Y+37, r26	; 0x25
    2c1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c20:	6b a1       	ldd	r22, Y+35	; 0x23
    2c22:	7c a1       	ldd	r23, Y+36	; 0x24
    2c24:	8d a1       	ldd	r24, Y+37	; 0x25
    2c26:	9e a1       	ldd	r25, Y+38	; 0x26
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	5f e3       	ldi	r21, 0x3F	; 63
    2c30:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c34:	88 23       	and	r24, r24
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <main+0x276>
		__ticks = 1;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9a a3       	std	Y+34, r25	; 0x22
    2c3e:	89 a3       	std	Y+33, r24	; 0x21
    2c40:	3f c0       	rjmp	.+126    	; 0x2cc0 <main+0x2f4>
	else if (__tmp > 65535)
    2c42:	6b a1       	ldd	r22, Y+35	; 0x23
    2c44:	7c a1       	ldd	r23, Y+36	; 0x24
    2c46:	8d a1       	ldd	r24, Y+37	; 0x25
    2c48:	9e a1       	ldd	r25, Y+38	; 0x26
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	3f ef       	ldi	r19, 0xFF	; 255
    2c4e:	4f e7       	ldi	r20, 0x7F	; 127
    2c50:	57 e4       	ldi	r21, 0x47	; 71
    2c52:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c56:	18 16       	cp	r1, r24
    2c58:	4c f5       	brge	.+82     	; 0x2cac <main+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e2       	ldi	r20, 0x20	; 32
    2c68:	51 e4       	ldi	r21, 0x41	; 65
    2c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9a a3       	std	Y+34, r25	; 0x22
    2c80:	89 a3       	std	Y+33, r24	; 0x21
    2c82:	0f c0       	rjmp	.+30     	; 0x2ca2 <main+0x2d6>
    2c84:	8c e2       	ldi	r24, 0x2C	; 44
    2c86:	91 e0       	ldi	r25, 0x01	; 1
    2c88:	98 a3       	std	Y+32, r25	; 0x20
    2c8a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c8e:	98 a1       	ldd	r25, Y+32	; 0x20
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <main+0x2c4>
    2c94:	98 a3       	std	Y+32, r25	; 0x20
    2c96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c98:	89 a1       	ldd	r24, Y+33	; 0x21
    2c9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9a a3       	std	Y+34, r25	; 0x22
    2ca0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ca4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	69 f7       	brne	.-38     	; 0x2c84 <main+0x2b8>
    2caa:	14 c0       	rjmp	.+40     	; 0x2cd4 <main+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cac:	6b a1       	ldd	r22, Y+35	; 0x23
    2cae:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9a a3       	std	Y+34, r25	; 0x22
    2cbe:	89 a3       	std	Y+33, r24	; 0x21
    2cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc2:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc4:	9e 8f       	std	Y+30, r25	; 0x1e
    2cc6:	8d 8f       	std	Y+29, r24	; 0x1d
    2cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <main+0x300>
    2cd0:	9e 8f       	std	Y+30, r25	; 0x1e
    2cd2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	SERVO_voidAngle(135);
    2cd4:	87 e8       	ldi	r24, 0x87	; 135
    2cd6:	0e 94 0c 09 	call	0x1218	; 0x1218 <SERVO_voidAngle>
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	aa e7       	ldi	r26, 0x7A	; 122
    2ce0:	b4 e4       	ldi	r27, 0x44	; 68
    2ce2:	89 8f       	std	Y+25, r24	; 0x19
    2ce4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ce6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ce8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cea:	69 8d       	ldd	r22, Y+25	; 0x19
    2cec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e8       	ldi	r19, 0x80	; 128
    2cf6:	4b e3       	ldi	r20, 0x3B	; 59
    2cf8:	55 e4       	ldi	r21, 0x45	; 69
    2cfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	8d 8b       	std	Y+21, r24	; 0x15
    2d04:	9e 8b       	std	Y+22, r25	; 0x16
    2d06:	af 8b       	std	Y+23, r26	; 0x17
    2d08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d10:	98 8d       	ldd	r25, Y+24	; 0x18
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	40 e8       	ldi	r20, 0x80	; 128
    2d18:	5f e3       	ldi	r21, 0x3F	; 63
    2d1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d1e:	88 23       	and	r24, r24
    2d20:	2c f4       	brge	.+10     	; 0x2d2c <main+0x360>
		__ticks = 1;
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	9c 8b       	std	Y+20, r25	; 0x14
    2d28:	8b 8b       	std	Y+19, r24	; 0x13
    2d2a:	3f c0       	rjmp	.+126    	; 0x2daa <main+0x3de>
	else if (__tmp > 65535)
    2d2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d30:	8f 89       	ldd	r24, Y+23	; 0x17
    2d32:	98 8d       	ldd	r25, Y+24	; 0x18
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	3f ef       	ldi	r19, 0xFF	; 255
    2d38:	4f e7       	ldi	r20, 0x7F	; 127
    2d3a:	57 e4       	ldi	r21, 0x47	; 71
    2d3c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d40:	18 16       	cp	r1, r24
    2d42:	4c f5       	brge	.+82     	; 0x2d96 <main+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d44:	69 8d       	ldd	r22, Y+25	; 0x19
    2d46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e2       	ldi	r20, 0x20	; 32
    2d52:	51 e4       	ldi	r21, 0x41	; 65
    2d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	9c 8b       	std	Y+20, r25	; 0x14
    2d6a:	8b 8b       	std	Y+19, r24	; 0x13
    2d6c:	0f c0       	rjmp	.+30     	; 0x2d8c <main+0x3c0>
    2d6e:	8c e2       	ldi	r24, 0x2C	; 44
    2d70:	91 e0       	ldi	r25, 0x01	; 1
    2d72:	9a 8b       	std	Y+18, r25	; 0x12
    2d74:	89 8b       	std	Y+17, r24	; 0x11
    2d76:	89 89       	ldd	r24, Y+17	; 0x11
    2d78:	9a 89       	ldd	r25, Y+18	; 0x12
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <main+0x3ae>
    2d7e:	9a 8b       	std	Y+18, r25	; 0x12
    2d80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d82:	8b 89       	ldd	r24, Y+19	; 0x13
    2d84:	9c 89       	ldd	r25, Y+20	; 0x14
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	9c 8b       	std	Y+20, r25	; 0x14
    2d8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	69 f7       	brne	.-38     	; 0x2d6e <main+0x3a2>
    2d94:	14 c0       	rjmp	.+40     	; 0x2dbe <main+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d96:	6d 89       	ldd	r22, Y+21	; 0x15
    2d98:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	9c 8b       	std	Y+20, r25	; 0x14
    2da8:	8b 8b       	std	Y+19, r24	; 0x13
    2daa:	8b 89       	ldd	r24, Y+19	; 0x13
    2dac:	9c 89       	ldd	r25, Y+20	; 0x14
    2dae:	98 8b       	std	Y+16, r25	; 0x10
    2db0:	8f 87       	std	Y+15, r24	; 0x0f
    2db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db4:	98 89       	ldd	r25, Y+16	; 0x10
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	f1 f7       	brne	.-4      	; 0x2db6 <main+0x3ea>
    2dba:	98 8b       	std	Y+16, r25	; 0x10
    2dbc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	SERVO_voidAngle(180);
    2dbe:	84 eb       	ldi	r24, 0xB4	; 180
    2dc0:	0e 94 0c 09 	call	0x1218	; 0x1218 <SERVO_voidAngle>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	aa e7       	ldi	r26, 0x7A	; 122
    2dca:	b4 e4       	ldi	r27, 0x44	; 68
    2dcc:	8b 87       	std	Y+11, r24	; 0x0b
    2dce:	9c 87       	std	Y+12, r25	; 0x0c
    2dd0:	ad 87       	std	Y+13, r26	; 0x0d
    2dd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e8       	ldi	r19, 0x80	; 128
    2de0:	4b e3       	ldi	r20, 0x3B	; 59
    2de2:	55 e4       	ldi	r21, 0x45	; 69
    2de4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	8f 83       	std	Y+7, r24	; 0x07
    2dee:	98 87       	std	Y+8, r25	; 0x08
    2df0:	a9 87       	std	Y+9, r26	; 0x09
    2df2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2df4:	6f 81       	ldd	r22, Y+7	; 0x07
    2df6:	78 85       	ldd	r23, Y+8	; 0x08
    2df8:	89 85       	ldd	r24, Y+9	; 0x09
    2dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e8       	ldi	r20, 0x80	; 128
    2e02:	5f e3       	ldi	r21, 0x3F	; 63
    2e04:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e08:	88 23       	and	r24, r24
    2e0a:	2c f4       	brge	.+10     	; 0x2e16 <main+0x44a>
		__ticks = 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	9e 83       	std	Y+6, r25	; 0x06
    2e12:	8d 83       	std	Y+5, r24	; 0x05
    2e14:	3f c0       	rjmp	.+126    	; 0x2e94 <main+0x4c8>
	else if (__tmp > 65535)
    2e16:	6f 81       	ldd	r22, Y+7	; 0x07
    2e18:	78 85       	ldd	r23, Y+8	; 0x08
    2e1a:	89 85       	ldd	r24, Y+9	; 0x09
    2e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	3f ef       	ldi	r19, 0xFF	; 255
    2e22:	4f e7       	ldi	r20, 0x7F	; 127
    2e24:	57 e4       	ldi	r21, 0x47	; 71
    2e26:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e2a:	18 16       	cp	r1, r24
    2e2c:	4c f5       	brge	.+82     	; 0x2e80 <main+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e2       	ldi	r20, 0x20	; 32
    2e3c:	51 e4       	ldi	r21, 0x41	; 65
    2e3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	bc 01       	movw	r22, r24
    2e48:	cd 01       	movw	r24, r26
    2e4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	9e 83       	std	Y+6, r25	; 0x06
    2e54:	8d 83       	std	Y+5, r24	; 0x05
    2e56:	0f c0       	rjmp	.+30     	; 0x2e76 <main+0x4aa>
    2e58:	8c e2       	ldi	r24, 0x2C	; 44
    2e5a:	91 e0       	ldi	r25, 0x01	; 1
    2e5c:	9c 83       	std	Y+4, r25	; 0x04
    2e5e:	8b 83       	std	Y+3, r24	; 0x03
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	9c 81       	ldd	r25, Y+4	; 0x04
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <main+0x498>
    2e68:	9c 83       	std	Y+4, r25	; 0x04
    2e6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	9e 83       	std	Y+6, r25	; 0x06
    2e74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e76:	8d 81       	ldd	r24, Y+5	; 0x05
    2e78:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	69 f7       	brne	.-38     	; 0x2e58 <main+0x48c>
    2e7e:	b8 cd       	rjmp	.-1168   	; 0x29f0 <main+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e80:	6f 81       	ldd	r22, Y+7	; 0x07
    2e82:	78 85       	ldd	r23, Y+8	; 0x08
    2e84:	89 85       	ldd	r24, Y+9	; 0x09
    2e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	8d 81       	ldd	r24, Y+5	; 0x05
    2e96:	9e 81       	ldd	r25, Y+6	; 0x06
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <main+0x4d4>
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	89 83       	std	Y+1, r24	; 0x01
    2ea8:	a3 cd       	rjmp	.-1210   	; 0x29f0 <main+0x24>

00002eaa <__prologue_saves__>:
    2eaa:	2f 92       	push	r2
    2eac:	3f 92       	push	r3
    2eae:	4f 92       	push	r4
    2eb0:	5f 92       	push	r5
    2eb2:	6f 92       	push	r6
    2eb4:	7f 92       	push	r7
    2eb6:	8f 92       	push	r8
    2eb8:	9f 92       	push	r9
    2eba:	af 92       	push	r10
    2ebc:	bf 92       	push	r11
    2ebe:	cf 92       	push	r12
    2ec0:	df 92       	push	r13
    2ec2:	ef 92       	push	r14
    2ec4:	ff 92       	push	r15
    2ec6:	0f 93       	push	r16
    2ec8:	1f 93       	push	r17
    2eca:	cf 93       	push	r28
    2ecc:	df 93       	push	r29
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    2ed2:	ca 1b       	sub	r28, r26
    2ed4:	db 0b       	sbc	r29, r27
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	de bf       	out	0x3e, r29	; 62
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	cd bf       	out	0x3d, r28	; 61
    2ee0:	09 94       	ijmp

00002ee2 <__epilogue_restores__>:
    2ee2:	2a 88       	ldd	r2, Y+18	; 0x12
    2ee4:	39 88       	ldd	r3, Y+17	; 0x11
    2ee6:	48 88       	ldd	r4, Y+16	; 0x10
    2ee8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eea:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eec:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eee:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ef0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ef2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ef4:	b9 84       	ldd	r11, Y+9	; 0x09
    2ef6:	c8 84       	ldd	r12, Y+8	; 0x08
    2ef8:	df 80       	ldd	r13, Y+7	; 0x07
    2efa:	ee 80       	ldd	r14, Y+6	; 0x06
    2efc:	fd 80       	ldd	r15, Y+5	; 0x05
    2efe:	0c 81       	ldd	r16, Y+4	; 0x04
    2f00:	1b 81       	ldd	r17, Y+3	; 0x03
    2f02:	aa 81       	ldd	r26, Y+2	; 0x02
    2f04:	b9 81       	ldd	r27, Y+1	; 0x01
    2f06:	ce 0f       	add	r28, r30
    2f08:	d1 1d       	adc	r29, r1
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	ed 01       	movw	r28, r26
    2f16:	08 95       	ret

00002f18 <_exit>:
    2f18:	f8 94       	cli

00002f1a <__stop_program>:
    2f1a:	ff cf       	rjmp	.-2      	; 0x2f1a <__stop_program>
