/*
 * keypad.c
 *
 *  Created on: ??þ/??þ/????
 *      Author: Fly labs
 */


#define F_CPU 12000000
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
//lcd define
#define DIR_DATA_PORT DDRC
#define DIR_CONTROL_PORT DDRD
#define DATA_PORT PORTC
#define CONTROL_PORT PORTD
#define EN PD0
#define RW PD1
#define RS PD2
//keypad define
#define  error 100
#define no_key 0xFF
/*lcd
	void LCD_init(void);
	void LCD_send_cmd(char cmd);
	void LCD_send_data(char data);
	void LCD_print_string(const char *str);
	void LCD_goto_xy(unsigned char x, unsigned char y);
	void LCD_clear(void);*/
//keypad
	unsigned char real_values[4][4]={ {'7','8','9','/'},  {'4','5','6','*'},  {'1','2','3','-'},  { 'c','0','=','+'} };
	void init_Keypad();
	unsigned char read_keypad();
	int get_num(char ch);

	/*
	 * main.c
	 *
	 *  Created on: ??þ/??þ/????
	 *      Author: Fly labs
	 */


	int main(void)
	{
		char seg[]={0b01011111,0b00000110,0b00111011,0b00101111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
		init_Keypad();
		DDRB=0xFF;
		char x;
		while(1)
		{

		x=read_keypad();
		if(x!=no_key)
		{
			PORTB=seg[x];
		}
		else
		{
			PORTB=0;
		}
		}

	return 0;
	}

/*
 calculator
    unsigned char get_character(int number );
	int nom_digits(int nom);
	char return_ASCII(char symbol);


int main(void)
{int a,b,ans,A[4],B[4],ANS[10],base,digits;
	uint8_t i,k,j,l;
	unsigned char kp,op;
    while(1)
    {a=0;b=0;
		init_Keypad();
		LCD_init();
		kp=read_keypad();
		LCD_send_data(return_ASCII(kp));
		if(kp=='c'){LCD_clear();continue;}
		i=0;j=0;base=1;
		//getting a
		while(isdigit(kp))
		{
			A[i]=get_num(kp);
			i++;
			kp=read_keypad();
		    LCD_send_data(return_ASCII(kp));if(kp=='c'){LCD_clear();continue;}
		}
		i--;
		for(k=i;k>=0;k--)
		{
			a=a+(A[k]*base);
			base=base*10;
		}
		if(kp=='c')
		{
			LCD_clear();
			continue;
		}
		op=kp;
		base=1;
		kp=read_keypad();
		LCD_send_data(return_ASCII(kp));if(kp=='c'){LCD_clear();continue;}
		//getting b
		 while(isdigit(kp))
		{
			B[j]=get_num(kp);
			j++;
			kp=read_keypad();
		    LCD_send_data(return_ASCII(kp));if(kp=='c'){LCD_clear();continue;}
		}
		j--;
		for(l=j;l>=0;l--)
		{
			b=b+(B[l]*base);
			base=base*10;
		}
		if(kp=='c')
		{LCD_clear();continue;}
		switch(op)
		{
			case '+':ans=a+b;break;
			case '-':ans=a-b;break;
			case '/':ans=a/b;break;
			case '*':ans=a*b;break;
		}

		digits = nom_digits(ans);
		for(j=0;j<digits;j++)
		{
			ANS[j]=ans%10;
			ans=ans/10;

		}
		digits--;
		for (i=digits;i>=0;i--)
		{
			LCD_send_data(return_ASCII(get_character(ANS[i])));
		}
		_delay_ms(10000);
		LCD_clear();



    }
}

//lcd functions

void LCD_init(void)
{// Initialize Direction
DIR_DATA_PORT = 0xFF;
DIR_CONTROL_PORT |= (1 << 0) | (1 << 1) | (1 << 2);
// Sending appropriate commands
LCD_send_cmd(0x01); _delay_ms(1);
LCD_send_cmd(0x38);	_delay_ms(1);
LCD_send_cmd(0x80);	_delay_ms(1);
LCD_send_cmd(0x0E); _delay_ms(1);
LCD_send_cmd(0x06);	_delay_ms(1);}

void LCD_send_cmd(char cmd)
{DATA_PORT = cmd;	CONTROL_PORT &= (~(1 << RS)) & (~(1 << RW));
CONTROL_PORT |= (1 << EN);	_delay_ms(1);
CONTROL_PORT &= (~(1 << EN));}

void LCD_send_data(char data)
{DATA_PORT = data; CONTROL_PORT |= (1 << RS); CONTROL_PORT &= (~(1 << RW));
CONTROL_PORT |= (1 << EN); _delay_ms(1); CONTROL_PORT &= (~(1 << EN));}

void LCD_print_string(const char *str)
{const char *letter = str;
for(; *letter != '\0'; letter++){LCD_send_data(*letter);} _delay_ms(100);}

void LCD_goto_xy(unsigned char x, unsigned char y)
{unsigned char row_addresses [] = {0x80, 0xC0};LCD_send_cmd(row_addresses[y - 1] + x - 1); _delay_us(100);}

void LCD_clear(void)
{LCD_send_cmd(0x01); _delay_ms(1);}*/

//keypad functions
void init_Keypad()
{DDRA = 0XF0; PORTA = 0X0F;}

unsigned char read_keypad()
{unsigned char real= error ; char i,j;
for (i=0;i<4;i++)
{PORTA = 0XFF; PORTA &= (~(1<<i)); for (j=4;j<8;j++){if((PINA & (1<<j))==0)real=real_values[i][j-4];}
_delay_ms(30);} return real;}

int get_num(char ch)
{switch(ch)
{case'0':return 0;break;
case'1':return 1;break;
case'2':return 3;break;
case'4':return 4;break;
case'5':return 5;break;
case'6':return 6;break;
case'7':return 7;break;
case'8':return 8;break;
case'9':return 9;break;	}return 0;}

//calculator function
unsigned char get_character(int number )
{
	switch(number)
{ case 0 :return '0';break;
  case 1 :return '1';break;
  case 2 :return '3';break;
  case 4 :return '4';break;
  case 5 :return '5';break;
  case 6 :return '6';break;
  case 7 :return '7';break;
  case 8 :return '8';break;
  case 9 :return '9';break;	}return 0;
}

int nom_digits(int nom)
{
	if (nom < 10) return 1;
    if (nom < 100) return 2;
    if (nom < 1000) return 3;
    if (nom < 10000) return 4;
    if (nom < 100000) return 5;
    if (nom < 1000000) return 6;
    if (nom < 10000000) return 7;
    if (nom < 100000000) return 8;
    if (nom < 1000000000) return 9;
return 0;
}

char return_ASCII(char symbol)
{
	if(symbol=='0');return 0x48;
	if(symbol=='1');return 0x49;
	if(symbol=='2');return 0x50;
	if(symbol=='3');return 0x51;
	if(symbol=='4');return 0x52;
	if(symbol=='5');return 0x53;
	if(symbol=='6');return 0x54;
	if(symbol=='7');return 0x55;
	if(symbol=='8');return 0x56;
	if(symbol=='9');return 0x57;
	if(symbol=='=');return 0x61;
	if(symbol=='+');return 0x43;
	if(symbol=='-');return 0x45;
	if(symbol=='/');return 0x47;
	if(symbol=='*');return 0x42;
	return 0;
}

