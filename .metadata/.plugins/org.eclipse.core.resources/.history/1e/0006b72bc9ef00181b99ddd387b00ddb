/*
 * main.c
 *
 *   Created on: 16/11/2018
 *      Author: Abdullah Abdelhakeem
 */
#include "STD_Types.h"
#include "macros.h"

#include "DIO_interface.h"
#include "motor.h"

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#define F_CPU 12000000



int TimerOverflow = 0;






int main (void)
{
	f64 distance=0;
	u32 count;




	/*ULTRASONIC*/
	DIO_voidSetPinDir(PORT_D,PIN_1,OUTPUT); /*trigger as output */
	//DIO_voidSetPinDir(PORT_D,PIN_6,INPUT); /*echo as input*/
	DIO_voidSetPinValue(PORT_D,PIN_6,HIGH);/*PULL UP*/

	/*BOTH IR sensors pins are declared as input*/
	DIO_voidSetPinDir(PORT_D,PIN_3,INPUT); // RIGHT SENSOR
	DIO_voidSetPinValue(PORT_D,PIN_3,HIGH);
	DIO_voidSetPinDir(PORT_D,PIN_4,INPUT);//LEFT SENSOR
	DIO_voidSetPinValue(PORT_D,PIN_4,HIGH);

	Motor_voidInit();

	sei();					/* Enable global interrupt SET_BIT(SREG,7) */
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
	TCCR1A = 0;				/* Set all bit to zero Normal operation */








while(1)
{

	PORTD |= (1 << 1);/* Give 10us trigger pulse on trig. pin to HC-SR04 */
	_delay_us(10);
	PORTD &= (~(1 << 1));


	TCNT1 = 0;			/* Clear Timer counter */
	TCCR1B = 0x41;		/* Setting for capture rising edge, No pre-scaler*/
	TIFR = 1<<ICF1;		/* Clear ICP flag (Input Capture flag) */
	TIFR = 1<<TOV1;		/* Clear Timer Overflow flag */

	/*Calculate width of Echo by Input Capture (ICP) on PortD PD6 */

	while ((TIFR & (1 << ICF1)) == 0);	/* Wait for rising edge */
	TCNT1 = 0;			/* Clear Timer counter */
	TCCR1B = 0x01;		/* Setting for capture falling edge, No pre-scaler */
	TIFR = 1<<ICF1;		/* Clear ICP flag (Input Capture flag) */
	TIFR = 1<<TOV1;		/* Clear Timer Overflow flag */
	TimerOverflow = 0;	/* Clear Timer overflow count */

	while ((TIFR & (1 << ICF1)) == 0); /* Wait for falling edge */
	count = ICR1 + (65535 * TimerOverflow);	/* Take value of capture register */
	/* 12MHz Timer freq, sound speed =343 m/s, calculation mentioned in doc. */
	distance = (double)count / 466.47;



if(distance>10)
{
	Motor_voidForward();
}

if((distance<=10) &&(GET_BIT(PIND,3)==1) &&(GET_BIT(PIND,4)==0))/*right sensor is blocked*/
{
	Motor_voidRight();
}


if((distance<=10) &&(GET_BIT(PIND,3)==0) &&(GET_BIT(PIND,4)==1))/*left sensor is blocked*/
{

	Motor_voidLeft();
}
if((distance<=10) &&(GET_BIT(PIND,3)==0) &&(GET_BIT(PIND,4)==0))/*both sensor are blocked*/
{
	Motor_voidBackword();
}

if((distance<=10) &&(GET_BIT(PIND,3)==1) &&(GET_BIT(PIND,4)==1))/*both sensor are opened*/
{
	Motor_voidLeft();
}



}


return 0;
}



ISR(TIMER1_OVF_vect)
{
	TimerOverflow++;		/* Increment Timer Overflow count */
}
