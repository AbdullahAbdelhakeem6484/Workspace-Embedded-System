/*
 * main.c
 *
 *   Created on: 27/11/2018
 *      Author: Abdullah Abdelhakeem
 */
#include "../lib/std_types.h"
#include "../lib/macros.h"
#include <avr/interrupt.h>
#include"MOTOR.h"
#include"TIMER02_interface.h"
int TimerOverflow = 0;



int main (void)
{
	f64 distance=0; //volatile f64 distance=0;
	u32 count;


	/*PWM TIMER0 AND TIMER2*/
	Timer0_voidInit(); //OC0
	Timer2_voidInit();//OC2

/*************************/
	set_timercounter0_mode(3);
	/*Timer counter 0 is set to fast pwm mode*/

	set_timercounter0_prescaler(8);
	/*Timer counter 0 frequency is set to 3.90625KHz*/

	set_timercounter0_output_mode(2);
	/*Timer counter 0 output mode is set  to non-inverting mode*/
/**************************/
	set_timercounter2_mode(3);
	/*Timer counter 2 is set to fast pwm mode*/

	set_timercounter2_prescaler(8);
	/*Timer counter 2 frequency is set to 3.90625KHz*/

	set_timercounter2_output_mode(2);
	/*Timer counter 2 output mode is set to non-inverting mode*/





	/*ULTRASONIC*/
	DIO_voidSetPinDir(PORT_D,PIN_1,OUTPUT); /*trigger as output */
	DIO_voidSetPinDir(PORT_D,PIN_6,INPUT); /*echo as input*/
	DIO_voidSetPinValue(PORT_D,PIN_6,HIGH);/*PULL UP*/

	/*BOTH IR sensors pins are declared as input*/
	DIO_voidSetPinDir(PORT_D,PIN_3,INPUT); // RIGHT SENSOR
	DIO_voidSetPinValue(PORT_D,PIN_3,HIGH);
	DIO_voidSetPinDir(PORT_D,PIN_4,INPUT);//LEFT SENSOR
	DIO_voidSetPinValue(PORT_D,PIN_4,HIGH);

	/*motors*/
	MOTOR_voidInit();

	sei();					/* Enable global interrupt SET_BIT(SREG,7) */
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
	TCCR1A = 0;				/* Set all bit to zero Normal operation */








while(1)
{

	PORTD |= (1 << 1);/* Give 10us trigger pulse on trig. pin to HC-SR04 */
	_delay_us(10);
	PORTD &= (~(1 << 1));


	TCNT1 = 0;			/* Clear Timer counter */
	TCCR1B = 0x41;		/* Setting for capture rising edge, No pre-scaler*/
	TIFR = 1<<ICF1;		/* Clear ICP flag (Input Capture flag) */
	TIFR = 1<<TOV1;		/* Clear Timer Overflow flag */

	/*Calculate width of Echo by Input Capture (ICP) on PortD PD6 */

	while ((TIFR & (1 << ICF1)) == 0);	/* Wait for rising edge */
	TCNT1 = 0;			/* Clear Timer counter */
	TCCR1B = 0x01;		/* Setting for capture falling edge, No pre-scaler */
	TIFR = 1<<ICF1;		/* Clear ICP flag (Input Capture flag) */
	TIFR = 1<<TOV1;		/* Clear Timer Overflow flag */
	TimerOverflow = 0;	/* Clear Timer overflow count */

	while ((TIFR & (1 << ICF1)) == 0); /* Wait for falling edge */
	count = ICR1 + (65535 * TimerOverflow);	/* Take value of capture register */
	/* 12MHz Timer freq, sound speed =343 m/s, calculation mentioned in doc. */
	distance = (double)count / 466.47;


	//ULTRASONIC_voidCalculateDistance();
	if(distance>20)/*FORWARD*/
		{
			set_timercounter0_compare_value(180);
			/*OCR0 register value is set to 180*/

			set_timercounter2_compare_value(180);
			/*OCR2 register value is set to 180*/
			Motor_voidFORWARD();

		}


	//ULTRASONIC_voidCalculateDistance();
	if((distance<=20) &&(GET_BIT(PIND,3)==1) &&(GET_BIT(PIND,4)==0))/*right sensor is blocked*/
		{
			set_timercounter0_compare_value(180);
			/*OCR0 register value is set to 180*/

			set_timercounter2_compare_value(180);
			/*OCR2 register value is set to 180*/

			Motor_voidRIGHT();

		}

		//ULTRASONIC_voidCalculateDistance();
	if((distance<=20) &&(GET_BIT(PIND,3)==0) &&(GET_BIT(PIND,4)==1))/*both sensor is open*/
		{
			set_timercounter0_compare_value(180);
			/*OCR0 register value is set to 180*/

			set_timercounter2_compare_value(180);
			/*OCR2 register value is set to 180*/

			Motor_voidLEFT();


		}
	if((distance<=20) &&(GET_BIT(PIND,3)==0) &&(GET_BIT(PIND,4)==0))
		    {
				set_timercounter0_compare_value(180);
				/*OCR0 register value is set to 180*/

				set_timercounter2_compare_value(180);
				/*OCR2 register value is set to 180*/
				Motor_voidBackword();
		    }

	 if((distance<=20) &&(GET_BIT(PIND,3)==1) &&(GET_BIT(PIND,4)==1))
	 {
				set_timercounter0_compare_value(180);
				/*OCR0 register value is set to 180*/

				set_timercounter2_compare_value(180);
				/*OCR2 register value is set to 180*/

				Motor_voidLEFT();
		    }
	 else{

	 }


}


return 0;
}

/*****************************************************************/


ISR(TIMER1_OVF_vect)
{
	TimerOverflow++;		/* Increment Timer Overflow count */
}
