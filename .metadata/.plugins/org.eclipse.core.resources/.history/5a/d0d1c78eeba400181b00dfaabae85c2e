/*
 * calc_prog.c
 *
 *  Created on: ??þ/??þ/????
 *      Author: Fly labs
 */


#include"STD_Types.h"
#include"macros.h"
#define F_CPU 12000000

#include "DIO_interface.h"
#include "LCD_interface.h"

#include"keypad_interface.h"
#include"keypad_config.h"
#include"calc_interface.h"


static u32 key;		     //key variable to store pressed key
static u32 op;			 //op variable to store operation ID and op_char for operation symbol
static u8 op_char;
u32 a, b;					//a & b variables to store two numbers of operation
static f64 result;			//result value should be stored in this variable
static u8 lcd_buf[16];		//lcd_buf array is the lcd buffer


/*initialize keypad and lcd*/

void cal_init(void)
{
	KEYPAD_voidInit();

	LCD_voidInit();

}
/*INITIALIZE DATABUS TO HW PORT*/

void set_port(void);

void set_port(void)
{
	DDRB |= 0X3F;	//ASSIGN DATABUS PB0-PB3, CONTROLBUS EN-PB4 RS-PB5
}
/*SWITCH BETWEEN COMMAND MODE OR DATA MODE*/

void mode_select(char m);

void mode_select(char m)
{
	if ( m == 0)
	clr_bit(PORTB,5);		// RS = 0 --> SWITCH TO LCD CONTROL REGISTER - COMMAND MODE

	if ( m == 1)
	set_bit(PORTB,5);		// RS = 1 --> SWITCH TO LCD DATA REGISTER - DATA MODE
}
/*TRIIGERS THE ENABLE BIT*/

void enb_tri(void);

void enb_tri(void)
{
	set_bit(PORTB,4);		//RAISE ENABLE EN = 1
	_delay_us(50);

	clr_bit(PORTB,4);		//TOGGLE ENABLE
	_delay_us(500);			//HIGH DELAY TO PREVENT DATA OVER FLOW
}

/*DISPLAY CHARACHTER*/

void dis_char(char data);

void dis_char(char data)
{
	char msb, lsb;

	msb = data & 0xF0;		//ASSIGN DATA MOST SIGNIFICANT BITS TO msb

	lsb = data & 0x0F;		//ASSIGN DATA LEAST SIGNIFICANT BITS TO lsb

	mode_select(1);			//SELECT DATA MODE

	port(msb>>4);			//SEND msb OVER DATABUS

	enb_tri();

	port(lsb);				//SEND lsb OVER DATABUS

	enb_tri();
}

/*SET CURSOR POSITION*/

void dis_position(char i, char j);

void dis_position(char i, char j)
{
	if (i==0)			//IF i = 0 DISPLAY IN FIRST LINE
	{					//COMMAND FOR FIRST LINE IS 0X80
		cmd(8);			//SEND COMMAND msb FIRST AND lsb SECOND
		cmd(j);			//j IS THE HORIZONTAL POSITION
	}
	else if (i==1)		//IF i = 1 DISPLAY IN SECOND LINE
	{
		cmd(12);		//COMMAND FOR SECOND LINE IS 0XC0, C = 12
		cmd(j);
	}
}
/*DISPLAY STRING*/
void dis_string(unsigned char row, unsigned char col, char *str)
{
	dis_position( row, col );

	while (*str!='\0')		//while string pointer do not point to nothing
	{
		dis_char(*str);		//call dis_char functions to display what string pointer points to

		++str;				//increment string pointer to point to the next character in the array
	}
}

/*determine calculator operation*/


void cal_op(void)
{
	 if(key==0x0D)			//operation add
	{
		key=0;
		op=1;
		op_char='+';
	}

	else if(key==0x0C)		//operation subtraction
	{
		key=0;
		op=2;
		op_char='-';
	}

	else if(key==0x0B)		//operation multiplication
	{
		key=0;
		op=3;
		op_char='x';
	}

	else if(key==0x0A)		//operation division
	{
		key=0;
		op=4;
		op_char='/';
	}

	else if(key==0x0E)		//operation execution
	{
		key=0;
		op=5;
	}

	else if(key=='0')		//allow ZERO-Bug Fix
	{
		key=0;
	}

	else if(key==0x0F)		//operation on/clear
	{
		a=0;
		b=0;
		result=0;
		op=0;
		key = 0;
		clr_dis();
	}
}

/*run the calculation process*/


void cal_run(void)
{

		if(op==0)										//if no operation is selected then store the first number
		{
			a=a*10+key;									//storing number of n digits
			sprintf(lcd_buf,"%1li",a);
			dis_string(0,0,lcd_buf);
		}
														//if Any operation is selected then start storing the second number
		else if(op==1 || op==2 || op==3 || op==4)
		{
			b=b*10+key;									//display both numbers at the same time through lcd buffer
			sprintf(lcd_buf,"%1li%c%1li",a,op_char,b);
			dis_string(0,0,lcd_buf);
		}

		else if(op==5)									//if operation execute is selected
		{
														//select between different operations
			if(op_char=='+')
				result=a+b;

			else if(op_char=='-')
				result=a-b;

			else if(op_char=='x')
				result=a*b;

			else if(op_char=='/')
				result=(float)a/b;
														//display the result
			sprintf(lcd_buf,"=%.2f",result);
			dis_string(1,0,lcd_buf);

			a=0;										//clear the memory for next calculation
			b=0;
			result=0;
			op=0;
		}
}

/*run the calculator*/


void calculate(void)
{
		key = key_scan();		//obtain key pressed

		if (key != 0)			//if key = true
		{
			cal_op();			//first check if pressed key is operation identifier
			cal_run();			//store number or apply operation
			key = 0;			//clear key for next trial
		}
}
