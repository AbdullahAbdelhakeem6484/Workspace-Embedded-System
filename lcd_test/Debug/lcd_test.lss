
lcd_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f34  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00002f34  00002fa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000243c  00000000  00000000  00002fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a5e  00000000  00000000  00005420  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000612e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a5cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 94 13 	call	0x2728	; 0x2728 <main>
      7a:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e9       	ldi	r26, 0x94	; 148
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e9       	ldi	r24, 0x94	; 148
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <pinChange>:
#endif

#include<util/delay.h>

void pinChange(int a, int b)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <pinChange+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <pinChange+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	9a 83       	std	Y+2, r25	; 0x02
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	7c 83       	std	Y+4, r23	; 0x04
     b48:	6b 83       	std	Y+3, r22	; 0x03
	if(b == 0)
     b4a:	8b 81       	ldd	r24, Y+3	; 0x03
     b4c:	9c 81       	ldd	r25, Y+4	; 0x04
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	09 f0       	breq	.+2      	; 0xb54 <pinChange+0x1e>
     b52:	a0 c1       	rjmp	.+832    	; 0xe94 <pinChange+0x35e>
	{
		if(a == eS_PORTA0)
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	41 f4       	brne	.+16     	; 0xb6c <pinChange+0x36>
		  PORTA &= ~(1<<PA0);
     b5c:	ab e3       	ldi	r26, 0x3B	; 59
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	eb e3       	ldi	r30, 0x3B	; 59
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8e 7f       	andi	r24, 0xFE	; 254
     b68:	8c 93       	st	X, r24
     b6a:	32 c3       	rjmp	.+1636   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA1)
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	81 30       	cpi	r24, 0x01	; 1
     b72:	91 05       	cpc	r25, r1
     b74:	41 f4       	brne	.+16     	; 0xb86 <pinChange+0x50>
		  PORTA &= ~(1<<PA1); 
     b76:	ab e3       	ldi	r26, 0x3B	; 59
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	eb e3       	ldi	r30, 0x3B	; 59
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8d 7f       	andi	r24, 0xFD	; 253
     b82:	8c 93       	st	X, r24
     b84:	25 c3       	rjmp	.+1610   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA2)
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	91 05       	cpc	r25, r1
     b8e:	41 f4       	brne	.+16     	; 0xba0 <pinChange+0x6a>
		  PORTA &= ~(1<<PA2);
     b90:	ab e3       	ldi	r26, 0x3B	; 59
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	eb e3       	ldi	r30, 0x3B	; 59
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	8b 7f       	andi	r24, 0xFB	; 251
     b9c:	8c 93       	st	X, r24
     b9e:	18 c3       	rjmp	.+1584   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA3)
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	9a 81       	ldd	r25, Y+2	; 0x02
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	41 f4       	brne	.+16     	; 0xbba <pinChange+0x84>
		  PORTA &= ~(1<<PA3); 
     baa:	ab e3       	ldi	r26, 0x3B	; 59
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	eb e3       	ldi	r30, 0x3B	; 59
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	87 7f       	andi	r24, 0xF7	; 247
     bb6:	8c 93       	st	X, r24
     bb8:	0b c3       	rjmp	.+1558   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA4)
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	84 30       	cpi	r24, 0x04	; 4
     bc0:	91 05       	cpc	r25, r1
     bc2:	41 f4       	brne	.+16     	; 0xbd4 <pinChange+0x9e>
		  PORTA &= ~(1<<PA4); 
     bc4:	ab e3       	ldi	r26, 0x3B	; 59
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	eb e3       	ldi	r30, 0x3B	; 59
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	8f 7e       	andi	r24, 0xEF	; 239
     bd0:	8c 93       	st	X, r24
     bd2:	fe c2       	rjmp	.+1532   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA5)
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	85 30       	cpi	r24, 0x05	; 5
     bda:	91 05       	cpc	r25, r1
     bdc:	41 f4       	brne	.+16     	; 0xbee <pinChange+0xb8>
		  PORTA &= ~(1<<PA5); 
     bde:	ab e3       	ldi	r26, 0x3B	; 59
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	eb e3       	ldi	r30, 0x3B	; 59
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	8f 7d       	andi	r24, 0xDF	; 223
     bea:	8c 93       	st	X, r24
     bec:	f1 c2       	rjmp	.+1506   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA6)
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	86 30       	cpi	r24, 0x06	; 6
     bf4:	91 05       	cpc	r25, r1
     bf6:	41 f4       	brne	.+16     	; 0xc08 <pinChange+0xd2>
		  PORTA &= ~(1<<PA6);  
     bf8:	ab e3       	ldi	r26, 0x3B	; 59
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	eb e3       	ldi	r30, 0x3B	; 59
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	8f 7b       	andi	r24, 0xBF	; 191
     c04:	8c 93       	st	X, r24
     c06:	e4 c2       	rjmp	.+1480   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA7)
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	87 30       	cpi	r24, 0x07	; 7
     c0e:	91 05       	cpc	r25, r1
     c10:	41 f4       	brne	.+16     	; 0xc22 <pinChange+0xec>
		  PORTA &= ~(1<<PA7);
     c12:	ab e3       	ldi	r26, 0x3B	; 59
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	eb e3       	ldi	r30, 0x3B	; 59
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8f 77       	andi	r24, 0x7F	; 127
     c1e:	8c 93       	st	X, r24
     c20:	d7 c2       	rjmp	.+1454   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB0)
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	9a 81       	ldd	r25, Y+2	; 0x02
     c26:	8a 30       	cpi	r24, 0x0A	; 10
     c28:	91 05       	cpc	r25, r1
     c2a:	41 f4       	brne	.+16     	; 0xc3c <pinChange+0x106>
		  PORTB &= ~(1<<PB0);  
     c2c:	a8 e3       	ldi	r26, 0x38	; 56
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e8 e3       	ldi	r30, 0x38	; 56
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	8e 7f       	andi	r24, 0xFE	; 254
     c38:	8c 93       	st	X, r24
     c3a:	ca c2       	rjmp	.+1428   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB1)
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	8b 30       	cpi	r24, 0x0B	; 11
     c42:	91 05       	cpc	r25, r1
     c44:	41 f4       	brne	.+16     	; 0xc56 <pinChange+0x120>
		  PORTB &= ~(1<<PB1);
     c46:	a8 e3       	ldi	r26, 0x38	; 56
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e8 e3       	ldi	r30, 0x38	; 56
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8d 7f       	andi	r24, 0xFD	; 253
     c52:	8c 93       	st	X, r24
     c54:	bd c2       	rjmp	.+1402   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB2)
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	8c 30       	cpi	r24, 0x0C	; 12
     c5c:	91 05       	cpc	r25, r1
     c5e:	41 f4       	brne	.+16     	; 0xc70 <pinChange+0x13a>
		  PORTB &= ~(1<<PB2);  
     c60:	a8 e3       	ldi	r26, 0x38	; 56
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e8 e3       	ldi	r30, 0x38	; 56
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	8b 7f       	andi	r24, 0xFB	; 251
     c6c:	8c 93       	st	X, r24
     c6e:	b0 c2       	rjmp	.+1376   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB3)
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	8d 30       	cpi	r24, 0x0D	; 13
     c76:	91 05       	cpc	r25, r1
     c78:	41 f4       	brne	.+16     	; 0xc8a <pinChange+0x154>
		  PORTB &= ~(1<<PB3);  
     c7a:	a8 e3       	ldi	r26, 0x38	; 56
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e8 e3       	ldi	r30, 0x38	; 56
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	87 7f       	andi	r24, 0xF7	; 247
     c86:	8c 93       	st	X, r24
     c88:	a3 c2       	rjmp	.+1350   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB4)
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	8e 30       	cpi	r24, 0x0E	; 14
     c90:	91 05       	cpc	r25, r1
     c92:	41 f4       	brne	.+16     	; 0xca4 <pinChange+0x16e>
		  PORTB &= ~(1<<PB4);  
     c94:	a8 e3       	ldi	r26, 0x38	; 56
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e8 e3       	ldi	r30, 0x38	; 56
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	8f 7e       	andi	r24, 0xEF	; 239
     ca0:	8c 93       	st	X, r24
     ca2:	96 c2       	rjmp	.+1324   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB5)
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	8f 30       	cpi	r24, 0x0F	; 15
     caa:	91 05       	cpc	r25, r1
     cac:	41 f4       	brne	.+16     	; 0xcbe <pinChange+0x188>
		  PORTB &= ~(1<<PB5);  
     cae:	a8 e3       	ldi	r26, 0x38	; 56
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e8 e3       	ldi	r30, 0x38	; 56
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8f 7d       	andi	r24, 0xDF	; 223
     cba:	8c 93       	st	X, r24
     cbc:	89 c2       	rjmp	.+1298   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB6)
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	80 31       	cpi	r24, 0x10	; 16
     cc4:	91 05       	cpc	r25, r1
     cc6:	41 f4       	brne	.+16     	; 0xcd8 <pinChange+0x1a2>
		  PORTB &= ~(1<<PB6);  
     cc8:	a8 e3       	ldi	r26, 0x38	; 56
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 7b       	andi	r24, 0xBF	; 191
     cd4:	8c 93       	st	X, r24
     cd6:	7c c2       	rjmp	.+1272   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB7)
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	9a 81       	ldd	r25, Y+2	; 0x02
     cdc:	81 31       	cpi	r24, 0x11	; 17
     cde:	91 05       	cpc	r25, r1
     ce0:	41 f4       	brne	.+16     	; 0xcf2 <pinChange+0x1bc>
		  PORTB &= ~(1<<PB7);
     ce2:	a8 e3       	ldi	r26, 0x38	; 56
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e8 e3       	ldi	r30, 0x38	; 56
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8f 77       	andi	r24, 0x7F	; 127
     cee:	8c 93       	st	X, r24
     cf0:	6f c2       	rjmp	.+1246   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC0)
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	9a 81       	ldd	r25, Y+2	; 0x02
     cf6:	84 31       	cpi	r24, 0x14	; 20
     cf8:	91 05       	cpc	r25, r1
     cfa:	41 f4       	brne	.+16     	; 0xd0c <pinChange+0x1d6>
		  PORTC &= ~(1<<PC0);   
     cfc:	a5 e3       	ldi	r26, 0x35	; 53
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e5 e3       	ldi	r30, 0x35	; 53
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	8e 7f       	andi	r24, 0xFE	; 254
     d08:	8c 93       	st	X, r24
     d0a:	62 c2       	rjmp	.+1220   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC1)
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	85 31       	cpi	r24, 0x15	; 21
     d12:	91 05       	cpc	r25, r1
     d14:	41 f4       	brne	.+16     	; 0xd26 <pinChange+0x1f0>
		  PORTC &= ~(1<<PC1); 
     d16:	a5 e3       	ldi	r26, 0x35	; 53
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e5 e3       	ldi	r30, 0x35	; 53
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	8d 7f       	andi	r24, 0xFD	; 253
     d22:	8c 93       	st	X, r24
     d24:	55 c2       	rjmp	.+1194   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC2)
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	9a 81       	ldd	r25, Y+2	; 0x02
     d2a:	86 31       	cpi	r24, 0x16	; 22
     d2c:	91 05       	cpc	r25, r1
     d2e:	41 f4       	brne	.+16     	; 0xd40 <pinChange+0x20a>
		  PORTC &= ~(1<<PC2);
     d30:	a5 e3       	ldi	r26, 0x35	; 53
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e5 e3       	ldi	r30, 0x35	; 53
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8b 7f       	andi	r24, 0xFB	; 251
     d3c:	8c 93       	st	X, r24
     d3e:	48 c2       	rjmp	.+1168   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC3)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	87 31       	cpi	r24, 0x17	; 23
     d46:	91 05       	cpc	r25, r1
     d48:	41 f4       	brne	.+16     	; 0xd5a <pinChange+0x224>
		  PORTC &= ~(1<<PC3);   
     d4a:	a5 e3       	ldi	r26, 0x35	; 53
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e5 e3       	ldi	r30, 0x35	; 53
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	87 7f       	andi	r24, 0xF7	; 247
     d56:	8c 93       	st	X, r24
     d58:	3b c2       	rjmp	.+1142   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC4)
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	88 31       	cpi	r24, 0x18	; 24
     d60:	91 05       	cpc	r25, r1
     d62:	41 f4       	brne	.+16     	; 0xd74 <pinChange+0x23e>
		  PORTC &= ~(1<<PC4);  
     d64:	a5 e3       	ldi	r26, 0x35	; 53
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e5 e3       	ldi	r30, 0x35	; 53
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8f 7e       	andi	r24, 0xEF	; 239
     d70:	8c 93       	st	X, r24
     d72:	2e c2       	rjmp	.+1116   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC5)
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	89 31       	cpi	r24, 0x19	; 25
     d7a:	91 05       	cpc	r25, r1
     d7c:	41 f4       	brne	.+16     	; 0xd8e <pinChange+0x258>
		  PORTC &= ~(1<<PC5);  
     d7e:	a5 e3       	ldi	r26, 0x35	; 53
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e5 e3       	ldi	r30, 0x35	; 53
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8f 7d       	andi	r24, 0xDF	; 223
     d8a:	8c 93       	st	X, r24
     d8c:	21 c2       	rjmp	.+1090   	; 0x11d0 <pinChange+0x69a>
        else if(a == eS_PORTC6)
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	8a 31       	cpi	r24, 0x1A	; 26
     d94:	91 05       	cpc	r25, r1
     d96:	41 f4       	brne	.+16     	; 0xda8 <pinChange+0x272>
          PORTC &= ~(1<<PC6);		
     d98:	a5 e3       	ldi	r26, 0x35	; 53
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e5 e3       	ldi	r30, 0x35	; 53
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8f 7b       	andi	r24, 0xBF	; 191
     da4:	8c 93       	st	X, r24
     da6:	14 c2       	rjmp	.+1064   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC7)
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	8b 31       	cpi	r24, 0x1B	; 27
     dae:	91 05       	cpc	r25, r1
     db0:	41 f4       	brne	.+16     	; 0xdc2 <pinChange+0x28c>
		  PORTC &= ~(1<<PC7);
     db2:	a5 e3       	ldi	r26, 0x35	; 53
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e5 e3       	ldi	r30, 0x35	; 53
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8f 77       	andi	r24, 0x7F	; 127
     dbe:	8c 93       	st	X, r24
     dc0:	07 c2       	rjmp	.+1038   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD0)
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	9a 81       	ldd	r25, Y+2	; 0x02
     dc6:	8e 31       	cpi	r24, 0x1E	; 30
     dc8:	91 05       	cpc	r25, r1
     dca:	41 f4       	brne	.+16     	; 0xddc <pinChange+0x2a6>
		  PORTD &= ~(1<<PD0);
     dcc:	a2 e3       	ldi	r26, 0x32	; 50
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e2 e3       	ldi	r30, 0x32	; 50
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	8e 7f       	andi	r24, 0xFE	; 254
     dd8:	8c 93       	st	X, r24
     dda:	fa c1       	rjmp	.+1012   	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD1)
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	8f 31       	cpi	r24, 0x1F	; 31
     de2:	91 05       	cpc	r25, r1
     de4:	41 f4       	brne	.+16     	; 0xdf6 <pinChange+0x2c0>
		  PORTD &= ~(1<<PD1);  
     de6:	a2 e3       	ldi	r26, 0x32	; 50
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e2 e3       	ldi	r30, 0x32	; 50
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	8d 7f       	andi	r24, 0xFD	; 253
     df2:	8c 93       	st	X, r24
     df4:	ed c1       	rjmp	.+986    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD2)
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	9a 81       	ldd	r25, Y+2	; 0x02
     dfa:	80 32       	cpi	r24, 0x20	; 32
     dfc:	91 05       	cpc	r25, r1
     dfe:	41 f4       	brne	.+16     	; 0xe10 <pinChange+0x2da>
		  PORTD &= ~(1<<PD2);
     e00:	a2 e3       	ldi	r26, 0x32	; 50
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e2 e3       	ldi	r30, 0x32	; 50
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8b 7f       	andi	r24, 0xFB	; 251
     e0c:	8c 93       	st	X, r24
     e0e:	e0 c1       	rjmp	.+960    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD3)
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	81 32       	cpi	r24, 0x21	; 33
     e16:	91 05       	cpc	r25, r1
     e18:	41 f4       	brne	.+16     	; 0xe2a <pinChange+0x2f4>
		  PORTD &= ~(1<<PD3);
     e1a:	a2 e3       	ldi	r26, 0x32	; 50
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e2 e3       	ldi	r30, 0x32	; 50
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	87 7f       	andi	r24, 0xF7	; 247
     e26:	8c 93       	st	X, r24
     e28:	d3 c1       	rjmp	.+934    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD4)
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	82 32       	cpi	r24, 0x22	; 34
     e30:	91 05       	cpc	r25, r1
     e32:	41 f4       	brne	.+16     	; 0xe44 <pinChange+0x30e>
		  PORTD &= ~(1<<PD4);
     e34:	a2 e3       	ldi	r26, 0x32	; 50
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e2 e3       	ldi	r30, 0x32	; 50
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	8f 7e       	andi	r24, 0xEF	; 239
     e40:	8c 93       	st	X, r24
     e42:	c6 c1       	rjmp	.+908    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD5)
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	83 32       	cpi	r24, 0x23	; 35
     e4a:	91 05       	cpc	r25, r1
     e4c:	41 f4       	brne	.+16     	; 0xe5e <pinChange+0x328>
		  PORTD &= ~(1<<PD5);
     e4e:	a2 e3       	ldi	r26, 0x32	; 50
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e2 e3       	ldi	r30, 0x32	; 50
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8f 7d       	andi	r24, 0xDF	; 223
     e5a:	8c 93       	st	X, r24
     e5c:	b9 c1       	rjmp	.+882    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD6)
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	84 32       	cpi	r24, 0x24	; 36
     e64:	91 05       	cpc	r25, r1
     e66:	41 f4       	brne	.+16     	; 0xe78 <pinChange+0x342>
		  PORTD &= ~(1<<PD6);   
     e68:	a2 e3       	ldi	r26, 0x32	; 50
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e2 e3       	ldi	r30, 0x32	; 50
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8f 7b       	andi	r24, 0xBF	; 191
     e74:	8c 93       	st	X, r24
     e76:	ac c1       	rjmp	.+856    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD7)
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	85 32       	cpi	r24, 0x25	; 37
     e7e:	91 05       	cpc	r25, r1
     e80:	09 f0       	breq	.+2      	; 0xe84 <pinChange+0x34e>
     e82:	a6 c1       	rjmp	.+844    	; 0x11d0 <pinChange+0x69a>
		  PORTD &= ~(1<<PD7);           
     e84:	a2 e3       	ldi	r26, 0x32	; 50
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e2 e3       	ldi	r30, 0x32	; 50
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	8f 77       	andi	r24, 0x7F	; 127
     e90:	8c 93       	st	X, r24
     e92:	9e c1       	rjmp	.+828    	; 0x11d0 <pinChange+0x69a>
	}
	else
	{
		if(a == eS_PORTA0)
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	41 f4       	brne	.+16     	; 0xeac <pinChange+0x376>
		  PORTA |= (1<<PA0);
     e9c:	ab e3       	ldi	r26, 0x3B	; 59
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	eb e3       	ldi	r30, 0x3B	; 59
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	81 60       	ori	r24, 0x01	; 1
     ea8:	8c 93       	st	X, r24
     eaa:	92 c1       	rjmp	.+804    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA1)
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	41 f4       	brne	.+16     	; 0xec6 <pinChange+0x390>
		  PORTA |= (1<<PA1);
     eb6:	ab e3       	ldi	r26, 0x3B	; 59
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	eb e3       	ldi	r30, 0x3B	; 59
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	82 60       	ori	r24, 0x02	; 2
     ec2:	8c 93       	st	X, r24
     ec4:	85 c1       	rjmp	.+778    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA2)
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	91 05       	cpc	r25, r1
     ece:	41 f4       	brne	.+16     	; 0xee0 <pinChange+0x3aa>
		  PORTA |= (1<<PA2);
     ed0:	ab e3       	ldi	r26, 0x3B	; 59
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	eb e3       	ldi	r30, 0x3B	; 59
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	84 60       	ori	r24, 0x04	; 4
     edc:	8c 93       	st	X, r24
     ede:	78 c1       	rjmp	.+752    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA3)
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	91 05       	cpc	r25, r1
     ee8:	41 f4       	brne	.+16     	; 0xefa <pinChange+0x3c4>
		  PORTA |= (1<<PA3);
     eea:	ab e3       	ldi	r26, 0x3B	; 59
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	eb e3       	ldi	r30, 0x3B	; 59
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 60       	ori	r24, 0x08	; 8
     ef6:	8c 93       	st	X, r24
     ef8:	6b c1       	rjmp	.+726    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA4)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	91 05       	cpc	r25, r1
     f02:	41 f4       	brne	.+16     	; 0xf14 <pinChange+0x3de>
		  PORTA |= (1<<PA4);
     f04:	ab e3       	ldi	r26, 0x3B	; 59
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	eb e3       	ldi	r30, 0x3B	; 59
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	80 61       	ori	r24, 0x10	; 16
     f10:	8c 93       	st	X, r24
     f12:	5e c1       	rjmp	.+700    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA5)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	85 30       	cpi	r24, 0x05	; 5
     f1a:	91 05       	cpc	r25, r1
     f1c:	41 f4       	brne	.+16     	; 0xf2e <pinChange+0x3f8>
		  PORTA |= (1<<PA5);
     f1e:	ab e3       	ldi	r26, 0x3B	; 59
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	eb e3       	ldi	r30, 0x3B	; 59
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 62       	ori	r24, 0x20	; 32
     f2a:	8c 93       	st	X, r24
     f2c:	51 c1       	rjmp	.+674    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA6)
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	86 30       	cpi	r24, 0x06	; 6
     f34:	91 05       	cpc	r25, r1
     f36:	41 f4       	brne	.+16     	; 0xf48 <pinChange+0x412>
		  PORTA |= (1<<PA6);
     f38:	ab e3       	ldi	r26, 0x3B	; 59
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	eb e3       	ldi	r30, 0x3B	; 59
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 64       	ori	r24, 0x40	; 64
     f44:	8c 93       	st	X, r24
     f46:	44 c1       	rjmp	.+648    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTA7)
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	87 30       	cpi	r24, 0x07	; 7
     f4e:	91 05       	cpc	r25, r1
     f50:	41 f4       	brne	.+16     	; 0xf62 <pinChange+0x42c>
		  PORTA |= (1<<PA7);
     f52:	ab e3       	ldi	r26, 0x3B	; 59
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e3       	ldi	r30, 0x3B	; 59
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 68       	ori	r24, 0x80	; 128
     f5e:	8c 93       	st	X, r24
     f60:	37 c1       	rjmp	.+622    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB0)
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	8a 30       	cpi	r24, 0x0A	; 10
     f68:	91 05       	cpc	r25, r1
     f6a:	41 f4       	brne	.+16     	; 0xf7c <pinChange+0x446>
	  	  PORTB |= (1<<PB0);
     f6c:	a8 e3       	ldi	r26, 0x38	; 56
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e8 e3       	ldi	r30, 0x38	; 56
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	81 60       	ori	r24, 0x01	; 1
     f78:	8c 93       	st	X, r24
     f7a:	2a c1       	rjmp	.+596    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB1)
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	8b 30       	cpi	r24, 0x0B	; 11
     f82:	91 05       	cpc	r25, r1
     f84:	41 f4       	brne	.+16     	; 0xf96 <pinChange+0x460>
		  PORTB |= (1<<PB1);
     f86:	a8 e3       	ldi	r26, 0x38	; 56
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e8 e3       	ldi	r30, 0x38	; 56
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	82 60       	ori	r24, 0x02	; 2
     f92:	8c 93       	st	X, r24
     f94:	1d c1       	rjmp	.+570    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB2)
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	8c 30       	cpi	r24, 0x0C	; 12
     f9c:	91 05       	cpc	r25, r1
     f9e:	41 f4       	brne	.+16     	; 0xfb0 <pinChange+0x47a>
		  PORTB |= (1<<PB2);
     fa0:	a8 e3       	ldi	r26, 0x38	; 56
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e8 e3       	ldi	r30, 0x38	; 56
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	84 60       	ori	r24, 0x04	; 4
     fac:	8c 93       	st	X, r24
     fae:	10 c1       	rjmp	.+544    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB3)
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	8d 30       	cpi	r24, 0x0D	; 13
     fb6:	91 05       	cpc	r25, r1
     fb8:	41 f4       	brne	.+16     	; 0xfca <pinChange+0x494>
		  PORTB |= (1<<PB3);
     fba:	a8 e3       	ldi	r26, 0x38	; 56
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e8 e3       	ldi	r30, 0x38	; 56
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	88 60       	ori	r24, 0x08	; 8
     fc6:	8c 93       	st	X, r24
     fc8:	03 c1       	rjmp	.+518    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB4)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	8e 30       	cpi	r24, 0x0E	; 14
     fd0:	91 05       	cpc	r25, r1
     fd2:	41 f4       	brne	.+16     	; 0xfe4 <pinChange+0x4ae>
		  PORTB |= (1<<PB4);
     fd4:	a8 e3       	ldi	r26, 0x38	; 56
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e8 e3       	ldi	r30, 0x38	; 56
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	80 61       	ori	r24, 0x10	; 16
     fe0:	8c 93       	st	X, r24
     fe2:	f6 c0       	rjmp	.+492    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB5)
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	8f 30       	cpi	r24, 0x0F	; 15
     fea:	91 05       	cpc	r25, r1
     fec:	41 f4       	brne	.+16     	; 0xffe <pinChange+0x4c8>
		  PORTB |= (1<<PB5);
     fee:	a8 e3       	ldi	r26, 0x38	; 56
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e8 e3       	ldi	r30, 0x38	; 56
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 62       	ori	r24, 0x20	; 32
     ffa:	8c 93       	st	X, r24
     ffc:	e9 c0       	rjmp	.+466    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB6)
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	80 31       	cpi	r24, 0x10	; 16
    1004:	91 05       	cpc	r25, r1
    1006:	41 f4       	brne	.+16     	; 0x1018 <pinChange+0x4e2>
		  PORTB |= (1<<PB6);
    1008:	a8 e3       	ldi	r26, 0x38	; 56
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e8 e3       	ldi	r30, 0x38	; 56
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 64       	ori	r24, 0x40	; 64
    1014:	8c 93       	st	X, r24
    1016:	dc c0       	rjmp	.+440    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTB7)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	9a 81       	ldd	r25, Y+2	; 0x02
    101c:	81 31       	cpi	r24, 0x11	; 17
    101e:	91 05       	cpc	r25, r1
    1020:	41 f4       	brne	.+16     	; 0x1032 <pinChange+0x4fc>
		  PORTB |= (1<<PB7);
    1022:	a8 e3       	ldi	r26, 0x38	; 56
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e8 e3       	ldi	r30, 0x38	; 56
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	80 68       	ori	r24, 0x80	; 128
    102e:	8c 93       	st	X, r24
    1030:	cf c0       	rjmp	.+414    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC0)
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	84 31       	cpi	r24, 0x14	; 20
    1038:	91 05       	cpc	r25, r1
    103a:	41 f4       	brne	.+16     	; 0x104c <pinChange+0x516>
		  PORTC |= (1<<PC0);
    103c:	a5 e3       	ldi	r26, 0x35	; 53
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e5 e3       	ldi	r30, 0x35	; 53
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	81 60       	ori	r24, 0x01	; 1
    1048:	8c 93       	st	X, r24
    104a:	c2 c0       	rjmp	.+388    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC1)
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	85 31       	cpi	r24, 0x15	; 21
    1052:	91 05       	cpc	r25, r1
    1054:	41 f4       	brne	.+16     	; 0x1066 <pinChange+0x530>
		  PORTC |= (1<<PC1);
    1056:	a5 e3       	ldi	r26, 0x35	; 53
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e5 e3       	ldi	r30, 0x35	; 53
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	82 60       	ori	r24, 0x02	; 2
    1062:	8c 93       	st	X, r24
    1064:	b5 c0       	rjmp	.+362    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC2)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	86 31       	cpi	r24, 0x16	; 22
    106c:	91 05       	cpc	r25, r1
    106e:	41 f4       	brne	.+16     	; 0x1080 <pinChange+0x54a>
	  	  PORTC |= (1<<PC2);
    1070:	a5 e3       	ldi	r26, 0x35	; 53
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e5 e3       	ldi	r30, 0x35	; 53
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	84 60       	ori	r24, 0x04	; 4
    107c:	8c 93       	st	X, r24
    107e:	a8 c0       	rjmp	.+336    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC3)
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	9a 81       	ldd	r25, Y+2	; 0x02
    1084:	87 31       	cpi	r24, 0x17	; 23
    1086:	91 05       	cpc	r25, r1
    1088:	41 f4       	brne	.+16     	; 0x109a <pinChange+0x564>
		  PORTC |= (1<<PC3);
    108a:	a5 e3       	ldi	r26, 0x35	; 53
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e5 e3       	ldi	r30, 0x35	; 53
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	88 60       	ori	r24, 0x08	; 8
    1096:	8c 93       	st	X, r24
    1098:	9b c0       	rjmp	.+310    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC4)
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	88 31       	cpi	r24, 0x18	; 24
    10a0:	91 05       	cpc	r25, r1
    10a2:	41 f4       	brne	.+16     	; 0x10b4 <pinChange+0x57e>
		  PORTC |= (1<<PC4);
    10a4:	a5 e3       	ldi	r26, 0x35	; 53
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e5 e3       	ldi	r30, 0x35	; 53
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	80 61       	ori	r24, 0x10	; 16
    10b0:	8c 93       	st	X, r24
    10b2:	8e c0       	rjmp	.+284    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC5)
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	89 31       	cpi	r24, 0x19	; 25
    10ba:	91 05       	cpc	r25, r1
    10bc:	41 f4       	brne	.+16     	; 0x10ce <pinChange+0x598>
		  PORTC |= (1<<PC5);
    10be:	a5 e3       	ldi	r26, 0x35	; 53
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e3       	ldi	r30, 0x35	; 53
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	80 62       	ori	r24, 0x20	; 32
    10ca:	8c 93       	st	X, r24
    10cc:	81 c0       	rjmp	.+258    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC6)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	8a 31       	cpi	r24, 0x1A	; 26
    10d4:	91 05       	cpc	r25, r1
    10d6:	41 f4       	brne	.+16     	; 0x10e8 <pinChange+0x5b2>
		  PORTC |= (1<<PC6);  
    10d8:	a5 e3       	ldi	r26, 0x35	; 53
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e3       	ldi	r30, 0x35	; 53
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 64       	ori	r24, 0x40	; 64
    10e4:	8c 93       	st	X, r24
    10e6:	74 c0       	rjmp	.+232    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTC7)
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	8b 31       	cpi	r24, 0x1B	; 27
    10ee:	91 05       	cpc	r25, r1
    10f0:	41 f4       	brne	.+16     	; 0x1102 <pinChange+0x5cc>
		  PORTC |= (1<<PC7);
    10f2:	a5 e3       	ldi	r26, 0x35	; 53
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e5 e3       	ldi	r30, 0x35	; 53
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	80 68       	ori	r24, 0x80	; 128
    10fe:	8c 93       	st	X, r24
    1100:	67 c0       	rjmp	.+206    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD0)
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	8e 31       	cpi	r24, 0x1E	; 30
    1108:	91 05       	cpc	r25, r1
    110a:	41 f4       	brne	.+16     	; 0x111c <pinChange+0x5e6>
		  PORTD |= (1<<PD0);
    110c:	a2 e3       	ldi	r26, 0x32	; 50
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e2 e3       	ldi	r30, 0x32	; 50
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	81 60       	ori	r24, 0x01	; 1
    1118:	8c 93       	st	X, r24
    111a:	5a c0       	rjmp	.+180    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD1)
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	9a 81       	ldd	r25, Y+2	; 0x02
    1120:	8f 31       	cpi	r24, 0x1F	; 31
    1122:	91 05       	cpc	r25, r1
    1124:	41 f4       	brne	.+16     	; 0x1136 <pinChange+0x600>
		  PORTD |= (1<<PD1);
    1126:	a2 e3       	ldi	r26, 0x32	; 50
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	82 60       	ori	r24, 0x02	; 2
    1132:	8c 93       	st	X, r24
    1134:	4d c0       	rjmp	.+154    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD2)
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	80 32       	cpi	r24, 0x20	; 32
    113c:	91 05       	cpc	r25, r1
    113e:	41 f4       	brne	.+16     	; 0x1150 <pinChange+0x61a>
		  PORTD |= (1<<PD2);
    1140:	a2 e3       	ldi	r26, 0x32	; 50
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e2 e3       	ldi	r30, 0x32	; 50
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	84 60       	ori	r24, 0x04	; 4
    114c:	8c 93       	st	X, r24
    114e:	40 c0       	rjmp	.+128    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD3)
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	81 32       	cpi	r24, 0x21	; 33
    1156:	91 05       	cpc	r25, r1
    1158:	41 f4       	brne	.+16     	; 0x116a <pinChange+0x634>
		  PORTD |= (1<<PD3);
    115a:	a2 e3       	ldi	r26, 0x32	; 50
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e2 e3       	ldi	r30, 0x32	; 50
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	88 60       	ori	r24, 0x08	; 8
    1166:	8c 93       	st	X, r24
    1168:	33 c0       	rjmp	.+102    	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD4)
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	82 32       	cpi	r24, 0x22	; 34
    1170:	91 05       	cpc	r25, r1
    1172:	41 f4       	brne	.+16     	; 0x1184 <pinChange+0x64e>
		  PORTD |= (1<<PD4);
    1174:	a2 e3       	ldi	r26, 0x32	; 50
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e2 e3       	ldi	r30, 0x32	; 50
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 61       	ori	r24, 0x10	; 16
    1180:	8c 93       	st	X, r24
    1182:	26 c0       	rjmp	.+76     	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD5)
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	83 32       	cpi	r24, 0x23	; 35
    118a:	91 05       	cpc	r25, r1
    118c:	41 f4       	brne	.+16     	; 0x119e <pinChange+0x668>
		  PORTD |= (1<<PD5);
    118e:	a2 e3       	ldi	r26, 0x32	; 50
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e2 e3       	ldi	r30, 0x32	; 50
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 62       	ori	r24, 0x20	; 32
    119a:	8c 93       	st	X, r24
    119c:	19 c0       	rjmp	.+50     	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD6)
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	84 32       	cpi	r24, 0x24	; 36
    11a4:	91 05       	cpc	r25, r1
    11a6:	41 f4       	brne	.+16     	; 0x11b8 <pinChange+0x682>
		  PORTD |= (1<<PD6);
    11a8:	a2 e3       	ldi	r26, 0x32	; 50
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e2 e3       	ldi	r30, 0x32	; 50
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	80 64       	ori	r24, 0x40	; 64
    11b4:	8c 93       	st	X, r24
    11b6:	0c c0       	rjmp	.+24     	; 0x11d0 <pinChange+0x69a>
		else if(a == eS_PORTD7)
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	85 32       	cpi	r24, 0x25	; 37
    11be:	91 05       	cpc	r25, r1
    11c0:	39 f4       	brne	.+14     	; 0x11d0 <pinChange+0x69a>
		  PORTD |= (1<<PD7);
    11c2:	a2 e3       	ldi	r26, 0x32	; 50
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e2 e3       	ldi	r30, 0x32	; 50
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 68       	ori	r24, 0x80	; 128
    11ce:	8c 93       	st	X, r24
	}
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <Lcd8_Port>:



//LCD 8 Bit Interfacing Functions
void Lcd8_Port(char a)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
	if(a & 1)
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	81 70       	andi	r24, 0x01	; 1
    11f2:	90 70       	andi	r25, 0x00	; 0
    11f4:	88 23       	and	r24, r24
    11f6:	39 f0       	breq	.+14     	; 0x1206 <Lcd8_Port+0x28>
	pinChange(D0,1);
    11f8:	8e e1       	ldi	r24, 0x1E	; 30
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	61 e0       	ldi	r22, 0x01	; 1
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <Lcd8_Port+0x34>
	else
	pinChange(D0,0);
    1206:	8e e1       	ldi	r24, 0x1E	; 30
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	
	if(a & 2)
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	82 70       	andi	r24, 0x02	; 2
    121a:	90 70       	andi	r25, 0x00	; 0
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	39 f0       	breq	.+14     	; 0x122e <Lcd8_Port+0x50>
	pinChange(D1,1);
    1220:	8f e1       	ldi	r24, 0x1F	; 31
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    122c:	06 c0       	rjmp	.+12     	; 0x123a <Lcd8_Port+0x5c>
	else
	pinChange(D1,0);
    122e:	8f e1       	ldi	r24, 0x1F	; 31
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	
	if(a & 4)
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	84 70       	andi	r24, 0x04	; 4
    1242:	90 70       	andi	r25, 0x00	; 0
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	39 f0       	breq	.+14     	; 0x1256 <Lcd8_Port+0x78>
	pinChange(D2,1);
    1248:	80 e2       	ldi	r24, 0x20	; 32
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	61 e0       	ldi	r22, 0x01	; 1
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    1254:	06 c0       	rjmp	.+12     	; 0x1262 <Lcd8_Port+0x84>
	else
	pinChange(D2,0);
    1256:	80 e2       	ldi	r24, 0x20	; 32
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	
	if(a & 8)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	88 2f       	mov	r24, r24
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	88 70       	andi	r24, 0x08	; 8
    126a:	90 70       	andi	r25, 0x00	; 0
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	39 f0       	breq	.+14     	; 0x127e <Lcd8_Port+0xa0>
	pinChange(D3,1);
    1270:	81 e2       	ldi	r24, 0x21	; 33
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    127c:	06 c0       	rjmp	.+12     	; 0x128a <Lcd8_Port+0xac>
	else
	pinChange(D3,0);
    127e:	81 e2       	ldi	r24, 0x21	; 33
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	
	if(a & 16)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	80 71       	andi	r24, 0x10	; 16
    1292:	90 70       	andi	r25, 0x00	; 0
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	39 f0       	breq	.+14     	; 0x12a6 <Lcd8_Port+0xc8>
	pinChange(D4,1);
    1298:	82 e2       	ldi	r24, 0x22	; 34
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	61 e0       	ldi	r22, 0x01	; 1
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    12a4:	06 c0       	rjmp	.+12     	; 0x12b2 <Lcd8_Port+0xd4>
	else
	pinChange(D4,0);
    12a6:	82 e2       	ldi	r24, 0x22	; 34
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>

	if(a & 32)
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	80 72       	andi	r24, 0x20	; 32
    12ba:	90 70       	andi	r25, 0x00	; 0
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	39 f0       	breq	.+14     	; 0x12ce <Lcd8_Port+0xf0>
	pinChange(D5,1);
    12c0:	83 e2       	ldi	r24, 0x23	; 35
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	61 e0       	ldi	r22, 0x01	; 1
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    12cc:	06 c0       	rjmp	.+12     	; 0x12da <Lcd8_Port+0xfc>
	else
	pinChange(D5,0);
    12ce:	83 e2       	ldi	r24, 0x23	; 35
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	
	if(a & 64)
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	80 74       	andi	r24, 0x40	; 64
    12e2:	90 70       	andi	r25, 0x00	; 0
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	39 f0       	breq	.+14     	; 0x12f6 <Lcd8_Port+0x118>
	pinChange(D6,1);
    12e8:	84 e2       	ldi	r24, 0x24	; 36
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    12f4:	06 c0       	rjmp	.+12     	; 0x1302 <Lcd8_Port+0x124>
	else
	pinChange(D6,0);
    12f6:	84 e2       	ldi	r24, 0x24	; 36
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	
	if(a & 128)
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	88 23       	and	r24, r24
    1306:	3c f4       	brge	.+14     	; 0x1316 <Lcd8_Port+0x138>
	pinChange(D7,1);
    1308:	85 e2       	ldi	r24, 0x25	; 37
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <Lcd8_Port+0x144>
	else
	pinChange(D7,0);
    1316:	85 e2       	ldi	r24, 0x25	; 37
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
}
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <Lcd8_Cmd>:
void Lcd8_Cmd(char a)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	6d 97       	sbiw	r28, 0x1d	; 29
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	8d 8f       	std	Y+29, r24	; 0x1d
	pinChange(RS,0);             // => RS = 0
    1340:	8a e1       	ldi	r24, 0x1A	; 26
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	Lcd8_Port(a);             //Data transfer
    134c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    134e:	0e 94 ef 08 	call	0x11de	; 0x11de <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
    1352:	8b e1       	ldi	r24, 0x1B	; 27
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	61 e0       	ldi	r22, 0x01	; 1
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	a0 e8       	ldi	r26, 0x80	; 128
    1364:	bf e3       	ldi	r27, 0x3F	; 63
    1366:	89 8f       	std	Y+25, r24	; 0x19
    1368:	9a 8f       	std	Y+26, r25	; 0x1a
    136a:	ab 8f       	std	Y+27, r26	; 0x1b
    136c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136e:	69 8d       	ldd	r22, Y+25	; 0x19
    1370:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1372:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1374:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e8       	ldi	r19, 0x80	; 128
    137a:	4b e3       	ldi	r20, 0x3B	; 59
    137c:	55 e4       	ldi	r21, 0x45	; 69
    137e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	8d 8b       	std	Y+21, r24	; 0x15
    1388:	9e 8b       	std	Y+22, r25	; 0x16
    138a:	af 8b       	std	Y+23, r26	; 0x17
    138c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    138e:	6d 89       	ldd	r22, Y+21	; 0x15
    1390:	7e 89       	ldd	r23, Y+22	; 0x16
    1392:	8f 89       	ldd	r24, Y+23	; 0x17
    1394:	98 8d       	ldd	r25, Y+24	; 0x18
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e8       	ldi	r20, 0x80	; 128
    139c:	5f e3       	ldi	r21, 0x3F	; 63
    139e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13a2:	88 23       	and	r24, r24
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <Lcd8_Cmd+0x86>
		__ticks = 1;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9c 8b       	std	Y+20, r25	; 0x14
    13ac:	8b 8b       	std	Y+19, r24	; 0x13
    13ae:	3f c0       	rjmp	.+126    	; 0x142e <Lcd8_Cmd+0x104>
	else if (__tmp > 65535)
    13b0:	6d 89       	ldd	r22, Y+21	; 0x15
    13b2:	7e 89       	ldd	r23, Y+22	; 0x16
    13b4:	8f 89       	ldd	r24, Y+23	; 0x17
    13b6:	98 8d       	ldd	r25, Y+24	; 0x18
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	3f ef       	ldi	r19, 0xFF	; 255
    13bc:	4f e7       	ldi	r20, 0x7F	; 127
    13be:	57 e4       	ldi	r21, 0x47	; 71
    13c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13c4:	18 16       	cp	r1, r24
    13c6:	4c f5       	brge	.+82     	; 0x141a <Lcd8_Cmd+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c8:	69 8d       	ldd	r22, Y+25	; 0x19
    13ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e2       	ldi	r20, 0x20	; 32
    13d6:	51 e4       	ldi	r21, 0x41	; 65
    13d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	bc 01       	movw	r22, r24
    13e2:	cd 01       	movw	r24, r26
    13e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	9c 8b       	std	Y+20, r25	; 0x14
    13ee:	8b 8b       	std	Y+19, r24	; 0x13
    13f0:	0f c0       	rjmp	.+30     	; 0x1410 <Lcd8_Cmd+0xe6>
    13f2:	8c e2       	ldi	r24, 0x2C	; 44
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	9a 8b       	std	Y+18, r25	; 0x12
    13f8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13fa:	89 89       	ldd	r24, Y+17	; 0x11
    13fc:	9a 89       	ldd	r25, Y+18	; 0x12
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <Lcd8_Cmd+0xd4>
    1402:	9a 8b       	std	Y+18, r25	; 0x12
    1404:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1406:	8b 89       	ldd	r24, Y+19	; 0x13
    1408:	9c 89       	ldd	r25, Y+20	; 0x14
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	9c 8b       	std	Y+20, r25	; 0x14
    140e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1410:	8b 89       	ldd	r24, Y+19	; 0x13
    1412:	9c 89       	ldd	r25, Y+20	; 0x14
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	69 f7       	brne	.-38     	; 0x13f2 <Lcd8_Cmd+0xc8>
    1418:	14 c0       	rjmp	.+40     	; 0x1442 <Lcd8_Cmd+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141a:	6d 89       	ldd	r22, Y+21	; 0x15
    141c:	7e 89       	ldd	r23, Y+22	; 0x16
    141e:	8f 89       	ldd	r24, Y+23	; 0x17
    1420:	98 8d       	ldd	r25, Y+24	; 0x18
    1422:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	9c 8b       	std	Y+20, r25	; 0x14
    142c:	8b 8b       	std	Y+19, r24	; 0x13
    142e:	8b 89       	ldd	r24, Y+19	; 0x13
    1430:	9c 89       	ldd	r25, Y+20	; 0x14
    1432:	98 8b       	std	Y+16, r25	; 0x10
    1434:	8f 87       	std	Y+15, r24	; 0x0f
    1436:	8f 85       	ldd	r24, Y+15	; 0x0f
    1438:	98 89       	ldd	r25, Y+16	; 0x10
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <Lcd8_Cmd+0x110>
    143e:	98 8b       	std	Y+16, r25	; 0x10
    1440:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
    1442:	8b e1       	ldi	r24, 0x1B	; 27
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a0 e8       	ldi	r26, 0x80	; 128
    1454:	bf e3       	ldi	r27, 0x3F	; 63
    1456:	8b 87       	std	Y+11, r24	; 0x0b
    1458:	9c 87       	std	Y+12, r25	; 0x0c
    145a:	ad 87       	std	Y+13, r26	; 0x0d
    145c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1460:	7c 85       	ldd	r23, Y+12	; 0x0c
    1462:	8d 85       	ldd	r24, Y+13	; 0x0d
    1464:	9e 85       	ldd	r25, Y+14	; 0x0e
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e8       	ldi	r19, 0x80	; 128
    146a:	4b e3       	ldi	r20, 0x3B	; 59
    146c:	55 e4       	ldi	r21, 0x45	; 69
    146e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	8f 83       	std	Y+7, r24	; 0x07
    1478:	98 87       	std	Y+8, r25	; 0x08
    147a:	a9 87       	std	Y+9, r26	; 0x09
    147c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    147e:	6f 81       	ldd	r22, Y+7	; 0x07
    1480:	78 85       	ldd	r23, Y+8	; 0x08
    1482:	89 85       	ldd	r24, Y+9	; 0x09
    1484:	9a 85       	ldd	r25, Y+10	; 0x0a
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e8       	ldi	r20, 0x80	; 128
    148c:	5f e3       	ldi	r21, 0x3F	; 63
    148e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1492:	88 23       	and	r24, r24
    1494:	2c f4       	brge	.+10     	; 0x14a0 <Lcd8_Cmd+0x176>
		__ticks = 1;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	8d 83       	std	Y+5, r24	; 0x05
    149e:	3f c0       	rjmp	.+126    	; 0x151e <Lcd8_Cmd+0x1f4>
	else if (__tmp > 65535)
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	3f ef       	ldi	r19, 0xFF	; 255
    14ac:	4f e7       	ldi	r20, 0x7F	; 127
    14ae:	57 e4       	ldi	r21, 0x47	; 71
    14b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14b4:	18 16       	cp	r1, r24
    14b6:	4c f5       	brge	.+82     	; 0x150a <Lcd8_Cmd+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    14bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14be:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e2       	ldi	r20, 0x20	; 32
    14c6:	51 e4       	ldi	r21, 0x41	; 65
    14c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	bc 01       	movw	r22, r24
    14d2:	cd 01       	movw	r24, r26
    14d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	9e 83       	std	Y+6, r25	; 0x06
    14de:	8d 83       	std	Y+5, r24	; 0x05
    14e0:	0f c0       	rjmp	.+30     	; 0x1500 <Lcd8_Cmd+0x1d6>
    14e2:	8c e2       	ldi	r24, 0x2C	; 44
    14e4:	91 e0       	ldi	r25, 0x01	; 1
    14e6:	9c 83       	std	Y+4, r25	; 0x04
    14e8:	8b 83       	std	Y+3, r24	; 0x03
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <Lcd8_Cmd+0x1c4>
    14f2:	9c 83       	std	Y+4, r25	; 0x04
    14f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	69 f7       	brne	.-38     	; 0x14e2 <Lcd8_Cmd+0x1b8>
    1508:	14 c0       	rjmp	.+40     	; 0x1532 <Lcd8_Cmd+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150a:	6f 81       	ldd	r22, Y+7	; 0x07
    150c:	78 85       	ldd	r23, Y+8	; 0x08
    150e:	89 85       	ldd	r24, Y+9	; 0x09
    1510:	9a 85       	ldd	r25, Y+10	; 0x0a
    1512:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	9e 83       	std	Y+6, r25	; 0x06
    151c:	8d 83       	std	Y+5, r24	; 0x05
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	9a 83       	std	Y+2, r25	; 0x02
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <Lcd8_Cmd+0x200>
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1532:	6d 96       	adiw	r28, 0x1d	; 29
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <Lcd8_Clear>:

void Lcd8_Clear()
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
	Lcd8_Cmd(1);
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	0e 94 95 09 	call	0x132a	; 0x132a <Lcd8_Cmd>
}
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <Lcd8_Set_Cursor>:

void Lcd8_Set_Cursor(char a, char b)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <Lcd8_Set_Cursor+0x6>
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	6a 83       	std	Y+2, r22	; 0x02
	if(a == 1)
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	29 f4       	brne	.+10     	; 0x1576 <Lcd8_Set_Cursor+0x1e>
	Lcd8_Cmd(0x80 + b);
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	80 58       	subi	r24, 0x80	; 128
    1570:	0e 94 95 09 	call	0x132a	; 0x132a <Lcd8_Cmd>
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <Lcd8_Set_Cursor+0x2c>
	else if(a == 2)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	21 f4       	brne	.+8      	; 0x1584 <Lcd8_Set_Cursor+0x2c>
	Lcd8_Cmd(0xC0 + b);
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	80 54       	subi	r24, 0x40	; 64
    1580:	0e 94 95 09 	call	0x132a	; 0x132a <Lcd8_Cmd>
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <Lcd8_Init>:

void Lcd8_Init()
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	e8 97       	sbiw	r28, 0x38	; 56
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
	pinChange(RS,0);
    15a2:	8a e1       	ldi	r24, 0x1A	; 26
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	pinChange(EN,0);
    15ae:	8b e1       	ldi	r24, 0x1B	; 27
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a0 ea       	ldi	r26, 0xA0	; 160
    15c0:	b1 e4       	ldi	r27, 0x41	; 65
    15c2:	8d ab       	std	Y+53, r24	; 0x35
    15c4:	9e ab       	std	Y+54, r25	; 0x36
    15c6:	af ab       	std	Y+55, r26	; 0x37
    15c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ca:	6d a9       	ldd	r22, Y+53	; 0x35
    15cc:	7e a9       	ldd	r23, Y+54	; 0x36
    15ce:	8f a9       	ldd	r24, Y+55	; 0x37
    15d0:	98 ad       	ldd	r25, Y+56	; 0x38
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e8       	ldi	r19, 0x80	; 128
    15d6:	4b e3       	ldi	r20, 0x3B	; 59
    15d8:	55 e4       	ldi	r21, 0x45	; 69
    15da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	89 ab       	std	Y+49, r24	; 0x31
    15e4:	9a ab       	std	Y+50, r25	; 0x32
    15e6:	ab ab       	std	Y+51, r26	; 0x33
    15e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15ea:	69 a9       	ldd	r22, Y+49	; 0x31
    15ec:	7a a9       	ldd	r23, Y+50	; 0x32
    15ee:	8b a9       	ldd	r24, Y+51	; 0x33
    15f0:	9c a9       	ldd	r25, Y+52	; 0x34
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e8       	ldi	r20, 0x80	; 128
    15f8:	5f e3       	ldi	r21, 0x3F	; 63
    15fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15fe:	88 23       	and	r24, r24
    1600:	2c f4       	brge	.+10     	; 0x160c <Lcd8_Init+0x7e>
		__ticks = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	98 ab       	std	Y+48, r25	; 0x30
    1608:	8f a7       	std	Y+47, r24	; 0x2f
    160a:	3f c0       	rjmp	.+126    	; 0x168a <Lcd8_Init+0xfc>
	else if (__tmp > 65535)
    160c:	69 a9       	ldd	r22, Y+49	; 0x31
    160e:	7a a9       	ldd	r23, Y+50	; 0x32
    1610:	8b a9       	ldd	r24, Y+51	; 0x33
    1612:	9c a9       	ldd	r25, Y+52	; 0x34
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	3f ef       	ldi	r19, 0xFF	; 255
    1618:	4f e7       	ldi	r20, 0x7F	; 127
    161a:	57 e4       	ldi	r21, 0x47	; 71
    161c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1620:	18 16       	cp	r1, r24
    1622:	4c f5       	brge	.+82     	; 0x1676 <Lcd8_Init+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1624:	6d a9       	ldd	r22, Y+53	; 0x35
    1626:	7e a9       	ldd	r23, Y+54	; 0x36
    1628:	8f a9       	ldd	r24, Y+55	; 0x37
    162a:	98 ad       	ldd	r25, Y+56	; 0x38
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e2       	ldi	r20, 0x20	; 32
    1632:	51 e4       	ldi	r21, 0x41	; 65
    1634:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	98 ab       	std	Y+48, r25	; 0x30
    164a:	8f a7       	std	Y+47, r24	; 0x2f
    164c:	0f c0       	rjmp	.+30     	; 0x166c <Lcd8_Init+0xde>
    164e:	8c e2       	ldi	r24, 0x2C	; 44
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	9e a7       	std	Y+46, r25	; 0x2e
    1654:	8d a7       	std	Y+45, r24	; 0x2d
    1656:	8d a5       	ldd	r24, Y+45	; 0x2d
    1658:	9e a5       	ldd	r25, Y+46	; 0x2e
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <Lcd8_Init+0xcc>
    165e:	9e a7       	std	Y+46, r25	; 0x2e
    1660:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1662:	8f a5       	ldd	r24, Y+47	; 0x2f
    1664:	98 a9       	ldd	r25, Y+48	; 0x30
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	98 ab       	std	Y+48, r25	; 0x30
    166a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166c:	8f a5       	ldd	r24, Y+47	; 0x2f
    166e:	98 a9       	ldd	r25, Y+48	; 0x30
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	69 f7       	brne	.-38     	; 0x164e <Lcd8_Init+0xc0>
    1674:	14 c0       	rjmp	.+40     	; 0x169e <Lcd8_Init+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1676:	69 a9       	ldd	r22, Y+49	; 0x31
    1678:	7a a9       	ldd	r23, Y+50	; 0x32
    167a:	8b a9       	ldd	r24, Y+51	; 0x33
    167c:	9c a9       	ldd	r25, Y+52	; 0x34
    167e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	98 ab       	std	Y+48, r25	; 0x30
    1688:	8f a7       	std	Y+47, r24	; 0x2f
    168a:	8f a5       	ldd	r24, Y+47	; 0x2f
    168c:	98 a9       	ldd	r25, Y+48	; 0x30
    168e:	9c a7       	std	Y+44, r25	; 0x2c
    1690:	8b a7       	std	Y+43, r24	; 0x2b
    1692:	8b a5       	ldd	r24, Y+43	; 0x2b
    1694:	9c a5       	ldd	r25, Y+44	; 0x2c
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <Lcd8_Init+0x108>
    169a:	9c a7       	std	Y+44, r25	; 0x2c
    169c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd8_Cmd(0x30);
    169e:	80 e3       	ldi	r24, 0x30	; 48
    16a0:	0e 94 95 09 	call	0x132a	; 0x132a <Lcd8_Cmd>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a0 ea       	ldi	r26, 0xA0	; 160
    16aa:	b0 e4       	ldi	r27, 0x40	; 64
    16ac:	8f a3       	std	Y+39, r24	; 0x27
    16ae:	98 a7       	std	Y+40, r25	; 0x28
    16b0:	a9 a7       	std	Y+41, r26	; 0x29
    16b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b4:	6f a1       	ldd	r22, Y+39	; 0x27
    16b6:	78 a5       	ldd	r23, Y+40	; 0x28
    16b8:	89 a5       	ldd	r24, Y+41	; 0x29
    16ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e8       	ldi	r19, 0x80	; 128
    16c0:	4b e3       	ldi	r20, 0x3B	; 59
    16c2:	55 e4       	ldi	r21, 0x45	; 69
    16c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8b a3       	std	Y+35, r24	; 0x23
    16ce:	9c a3       	std	Y+36, r25	; 0x24
    16d0:	ad a3       	std	Y+37, r26	; 0x25
    16d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16d4:	6b a1       	ldd	r22, Y+35	; 0x23
    16d6:	7c a1       	ldd	r23, Y+36	; 0x24
    16d8:	8d a1       	ldd	r24, Y+37	; 0x25
    16da:	9e a1       	ldd	r25, Y+38	; 0x26
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	2c f4       	brge	.+10     	; 0x16f6 <Lcd8_Init+0x168>
		__ticks = 1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9a a3       	std	Y+34, r25	; 0x22
    16f2:	89 a3       	std	Y+33, r24	; 0x21
    16f4:	3f c0       	rjmp	.+126    	; 0x1774 <Lcd8_Init+0x1e6>
	else if (__tmp > 65535)
    16f6:	6b a1       	ldd	r22, Y+35	; 0x23
    16f8:	7c a1       	ldd	r23, Y+36	; 0x24
    16fa:	8d a1       	ldd	r24, Y+37	; 0x25
    16fc:	9e a1       	ldd	r25, Y+38	; 0x26
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	4f e7       	ldi	r20, 0x7F	; 127
    1704:	57 e4       	ldi	r21, 0x47	; 71
    1706:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    170a:	18 16       	cp	r1, r24
    170c:	4c f5       	brge	.+82     	; 0x1760 <Lcd8_Init+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170e:	6f a1       	ldd	r22, Y+39	; 0x27
    1710:	78 a5       	ldd	r23, Y+40	; 0x28
    1712:	89 a5       	ldd	r24, Y+41	; 0x29
    1714:	9a a5       	ldd	r25, Y+42	; 0x2a
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e2       	ldi	r20, 0x20	; 32
    171c:	51 e4       	ldi	r21, 0x41	; 65
    171e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9a a3       	std	Y+34, r25	; 0x22
    1734:	89 a3       	std	Y+33, r24	; 0x21
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <Lcd8_Init+0x1c8>
    1738:	8c e2       	ldi	r24, 0x2C	; 44
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	98 a3       	std	Y+32, r25	; 0x20
    173e:	8f 8f       	std	Y+31, r24	; 0x1f
    1740:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1742:	98 a1       	ldd	r25, Y+32	; 0x20
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <Lcd8_Init+0x1b6>
    1748:	98 a3       	std	Y+32, r25	; 0x20
    174a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174c:	89 a1       	ldd	r24, Y+33	; 0x21
    174e:	9a a1       	ldd	r25, Y+34	; 0x22
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	9a a3       	std	Y+34, r25	; 0x22
    1754:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1756:	89 a1       	ldd	r24, Y+33	; 0x21
    1758:	9a a1       	ldd	r25, Y+34	; 0x22
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	69 f7       	brne	.-38     	; 0x1738 <Lcd8_Init+0x1aa>
    175e:	14 c0       	rjmp	.+40     	; 0x1788 <Lcd8_Init+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1760:	6b a1       	ldd	r22, Y+35	; 0x23
    1762:	7c a1       	ldd	r23, Y+36	; 0x24
    1764:	8d a1       	ldd	r24, Y+37	; 0x25
    1766:	9e a1       	ldd	r25, Y+38	; 0x26
    1768:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9a a3       	std	Y+34, r25	; 0x22
    1772:	89 a3       	std	Y+33, r24	; 0x21
    1774:	89 a1       	ldd	r24, Y+33	; 0x21
    1776:	9a a1       	ldd	r25, Y+34	; 0x22
    1778:	9e 8f       	std	Y+30, r25	; 0x1e
    177a:	8d 8f       	std	Y+29, r24	; 0x1d
    177c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    177e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <Lcd8_Init+0x1f2>
    1784:	9e 8f       	std	Y+30, r25	; 0x1e
    1786:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	Lcd8_Cmd(0x30);
    1788:	80 e3       	ldi	r24, 0x30	; 48
    178a:	0e 94 95 09 	call	0x132a	; 0x132a <Lcd8_Cmd>
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	a0 e8       	ldi	r26, 0x80	; 128
    1794:	bf e3       	ldi	r27, 0x3F	; 63
    1796:	89 8f       	std	Y+25, r24	; 0x19
    1798:	9a 8f       	std	Y+26, r25	; 0x1a
    179a:	ab 8f       	std	Y+27, r26	; 0x1b
    179c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179e:	69 8d       	ldd	r22, Y+25	; 0x19
    17a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e8       	ldi	r19, 0x80	; 128
    17aa:	4b e3       	ldi	r20, 0x3B	; 59
    17ac:	55 e4       	ldi	r21, 0x45	; 69
    17ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	8d 8b       	std	Y+21, r24	; 0x15
    17b8:	9e 8b       	std	Y+22, r25	; 0x16
    17ba:	af 8b       	std	Y+23, r26	; 0x17
    17bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17be:	6d 89       	ldd	r22, Y+21	; 0x15
    17c0:	7e 89       	ldd	r23, Y+22	; 0x16
    17c2:	8f 89       	ldd	r24, Y+23	; 0x17
    17c4:	98 8d       	ldd	r25, Y+24	; 0x18
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e8       	ldi	r20, 0x80	; 128
    17cc:	5f e3       	ldi	r21, 0x3F	; 63
    17ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17d2:	88 23       	and	r24, r24
    17d4:	2c f4       	brge	.+10     	; 0x17e0 <Lcd8_Init+0x252>
		__ticks = 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	9c 8b       	std	Y+20, r25	; 0x14
    17dc:	8b 8b       	std	Y+19, r24	; 0x13
    17de:	3f c0       	rjmp	.+126    	; 0x185e <Lcd8_Init+0x2d0>
	else if (__tmp > 65535)
    17e0:	6d 89       	ldd	r22, Y+21	; 0x15
    17e2:	7e 89       	ldd	r23, Y+22	; 0x16
    17e4:	8f 89       	ldd	r24, Y+23	; 0x17
    17e6:	98 8d       	ldd	r25, Y+24	; 0x18
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	3f ef       	ldi	r19, 0xFF	; 255
    17ec:	4f e7       	ldi	r20, 0x7F	; 127
    17ee:	57 e4       	ldi	r21, 0x47	; 71
    17f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17f4:	18 16       	cp	r1, r24
    17f6:	4c f5       	brge	.+82     	; 0x184a <Lcd8_Init+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f8:	69 8d       	ldd	r22, Y+25	; 0x19
    17fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e2       	ldi	r20, 0x20	; 32
    1806:	51 e4       	ldi	r21, 0x41	; 65
    1808:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	bc 01       	movw	r22, r24
    1812:	cd 01       	movw	r24, r26
    1814:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	9c 8b       	std	Y+20, r25	; 0x14
    181e:	8b 8b       	std	Y+19, r24	; 0x13
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <Lcd8_Init+0x2b2>
    1822:	8c e2       	ldi	r24, 0x2C	; 44
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	9a 8b       	std	Y+18, r25	; 0x12
    1828:	89 8b       	std	Y+17, r24	; 0x11
    182a:	89 89       	ldd	r24, Y+17	; 0x11
    182c:	9a 89       	ldd	r25, Y+18	; 0x12
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <Lcd8_Init+0x2a0>
    1832:	9a 8b       	std	Y+18, r25	; 0x12
    1834:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1836:	8b 89       	ldd	r24, Y+19	; 0x13
    1838:	9c 89       	ldd	r25, Y+20	; 0x14
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1840:	8b 89       	ldd	r24, Y+19	; 0x13
    1842:	9c 89       	ldd	r25, Y+20	; 0x14
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	69 f7       	brne	.-38     	; 0x1822 <Lcd8_Init+0x294>
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <Lcd8_Init+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184a:	6d 89       	ldd	r22, Y+21	; 0x15
    184c:	7e 89       	ldd	r23, Y+22	; 0x16
    184e:	8f 89       	ldd	r24, Y+23	; 0x17
    1850:	98 8d       	ldd	r25, Y+24	; 0x18
    1852:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9c 8b       	std	Y+20, r25	; 0x14
    185c:	8b 8b       	std	Y+19, r24	; 0x13
    185e:	8b 89       	ldd	r24, Y+19	; 0x13
    1860:	9c 89       	ldd	r25, Y+20	; 0x14
    1862:	98 8b       	std	Y+16, r25	; 0x10
    1864:	8f 87       	std	Y+15, r24	; 0x0f
    1866:	8f 85       	ldd	r24, Y+15	; 0x0f
    1868:	98 89       	ldd	r25, Y+16	; 0x10
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <Lcd8_Init+0x2dc>
    186e:	98 8b       	std	Y+16, r25	; 0x10
    1870:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd8_Cmd(0x30);
    1872:	80 e3       	ldi	r24, 0x30	; 48
    1874:	0e 94 95 09 	call	0x132a	; 0x132a <Lcd8_Cmd>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a0 e2       	ldi	r26, 0x20	; 32
    187e:	b1 e4       	ldi	r27, 0x41	; 65
    1880:	8b 87       	std	Y+11, r24	; 0x0b
    1882:	9c 87       	std	Y+12, r25	; 0x0c
    1884:	ad 87       	std	Y+13, r26	; 0x0d
    1886:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1888:	6b 85       	ldd	r22, Y+11	; 0x0b
    188a:	7c 85       	ldd	r23, Y+12	; 0x0c
    188c:	8d 85       	ldd	r24, Y+13	; 0x0d
    188e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e8       	ldi	r19, 0x80	; 128
    1894:	4b e3       	ldi	r20, 0x3B	; 59
    1896:	55 e4       	ldi	r21, 0x45	; 69
    1898:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	8f 83       	std	Y+7, r24	; 0x07
    18a2:	98 87       	std	Y+8, r25	; 0x08
    18a4:	a9 87       	std	Y+9, r26	; 0x09
    18a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18a8:	6f 81       	ldd	r22, Y+7	; 0x07
    18aa:	78 85       	ldd	r23, Y+8	; 0x08
    18ac:	89 85       	ldd	r24, Y+9	; 0x09
    18ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e8       	ldi	r20, 0x80	; 128
    18b6:	5f e3       	ldi	r21, 0x3F	; 63
    18b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18bc:	88 23       	and	r24, r24
    18be:	2c f4       	brge	.+10     	; 0x18ca <Lcd8_Init+0x33c>
		__ticks = 1;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9e 83       	std	Y+6, r25	; 0x06
    18c6:	8d 83       	std	Y+5, r24	; 0x05
    18c8:	3f c0       	rjmp	.+126    	; 0x1948 <Lcd8_Init+0x3ba>
	else if (__tmp > 65535)
    18ca:	6f 81       	ldd	r22, Y+7	; 0x07
    18cc:	78 85       	ldd	r23, Y+8	; 0x08
    18ce:	89 85       	ldd	r24, Y+9	; 0x09
    18d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	3f ef       	ldi	r19, 0xFF	; 255
    18d6:	4f e7       	ldi	r20, 0x7F	; 127
    18d8:	57 e4       	ldi	r21, 0x47	; 71
    18da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18de:	18 16       	cp	r1, r24
    18e0:	4c f5       	brge	.+82     	; 0x1934 <Lcd8_Init+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e2       	ldi	r20, 0x20	; 32
    18f0:	51 e4       	ldi	r21, 0x41	; 65
    18f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	9e 83       	std	Y+6, r25	; 0x06
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	0f c0       	rjmp	.+30     	; 0x192a <Lcd8_Init+0x39c>
    190c:	8c e2       	ldi	r24, 0x2C	; 44
    190e:	91 e0       	ldi	r25, 0x01	; 1
    1910:	9c 83       	std	Y+4, r25	; 0x04
    1912:	8b 83       	std	Y+3, r24	; 0x03
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	9c 81       	ldd	r25, Y+4	; 0x04
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <Lcd8_Init+0x38a>
    191c:	9c 83       	std	Y+4, r25	; 0x04
    191e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	9e 81       	ldd	r25, Y+6	; 0x06
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	69 f7       	brne	.-38     	; 0x190c <Lcd8_Init+0x37e>
    1932:	14 c0       	rjmp	.+40     	; 0x195c <Lcd8_Init+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1934:	6f 81       	ldd	r22, Y+7	; 0x07
    1936:	78 85       	ldd	r23, Y+8	; 0x08
    1938:	89 85       	ldd	r24, Y+9	; 0x09
    193a:	9a 85       	ldd	r25, Y+10	; 0x0a
    193c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	9e 81       	ldd	r25, Y+6	; 0x06
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	9a 81       	ldd	r25, Y+2	; 0x02
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <Lcd8_Init+0x3c6>
    1958:	9a 83       	std	Y+2, r25	; 0x02
    195a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	/////////////////////////////////////////////////////
	Lcd8_Cmd(0x38);    //function set
    195c:	88 e3       	ldi	r24, 0x38	; 56
    195e:	0e 94 95 09 	call	0x132a	; 0x132a <Lcd8_Cmd>
	Lcd8_Cmd(0x0C);    //display on,cursor off,blink off
    1962:	8c e0       	ldi	r24, 0x0C	; 12
    1964:	0e 94 95 09 	call	0x132a	; 0x132a <Lcd8_Cmd>
	Lcd8_Cmd(0x01);    //clear display
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	0e 94 95 09 	call	0x132a	; 0x132a <Lcd8_Cmd>
	Lcd8_Cmd(0x06);    //entry mode, set increment
    196e:	86 e0       	ldi	r24, 0x06	; 6
    1970:	0e 94 95 09 	call	0x132a	; 0x132a <Lcd8_Cmd>
}
    1974:	e8 96       	adiw	r28, 0x38	; 56
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <Lcd8_Write_Char>:

void Lcd8_Write_Char(char a)
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	6d 97       	sbiw	r28, 0x1d	; 29
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	8d 8f       	std	Y+29, r24	; 0x1d
	pinChange(RS,1);             // => RS = 1
    199c:	8a e1       	ldi	r24, 0x1A	; 26
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	61 e0       	ldi	r22, 0x01	; 1
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	Lcd8_Port(a);             //Data transfer
    19a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19aa:	0e 94 ef 08 	call	0x11de	; 0x11de <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
    19ae:	8b e1       	ldi	r24, 0x1B	; 27
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	61 e0       	ldi	r22, 0x01	; 1
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	a0 e8       	ldi	r26, 0x80	; 128
    19c0:	bf e3       	ldi	r27, 0x3F	; 63
    19c2:	89 8f       	std	Y+25, r24	; 0x19
    19c4:	9a 8f       	std	Y+26, r25	; 0x1a
    19c6:	ab 8f       	std	Y+27, r26	; 0x1b
    19c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ca:	69 8d       	ldd	r22, Y+25	; 0x19
    19cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e8       	ldi	r19, 0x80	; 128
    19d6:	4b e3       	ldi	r20, 0x3B	; 59
    19d8:	55 e4       	ldi	r21, 0x45	; 69
    19da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	8d 8b       	std	Y+21, r24	; 0x15
    19e4:	9e 8b       	std	Y+22, r25	; 0x16
    19e6:	af 8b       	std	Y+23, r26	; 0x17
    19e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ea:	6d 89       	ldd	r22, Y+21	; 0x15
    19ec:	7e 89       	ldd	r23, Y+22	; 0x16
    19ee:	8f 89       	ldd	r24, Y+23	; 0x17
    19f0:	98 8d       	ldd	r25, Y+24	; 0x18
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e8       	ldi	r20, 0x80	; 128
    19f8:	5f e3       	ldi	r21, 0x3F	; 63
    19fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19fe:	88 23       	and	r24, r24
    1a00:	2c f4       	brge	.+10     	; 0x1a0c <Lcd8_Write_Char+0x86>
		__ticks = 1;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9c 8b       	std	Y+20, r25	; 0x14
    1a08:	8b 8b       	std	Y+19, r24	; 0x13
    1a0a:	3f c0       	rjmp	.+126    	; 0x1a8a <Lcd8_Write_Char+0x104>
	else if (__tmp > 65535)
    1a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a10:	8f 89       	ldd	r24, Y+23	; 0x17
    1a12:	98 8d       	ldd	r25, Y+24	; 0x18
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	3f ef       	ldi	r19, 0xFF	; 255
    1a18:	4f e7       	ldi	r20, 0x7F	; 127
    1a1a:	57 e4       	ldi	r21, 0x47	; 71
    1a1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	4c f5       	brge	.+82     	; 0x1a76 <Lcd8_Write_Char+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a24:	69 8d       	ldd	r22, Y+25	; 0x19
    1a26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e2       	ldi	r20, 0x20	; 32
    1a32:	51 e4       	ldi	r21, 0x41	; 65
    1a34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9c 8b       	std	Y+20, r25	; 0x14
    1a4a:	8b 8b       	std	Y+19, r24	; 0x13
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <Lcd8_Write_Char+0xe6>
    1a4e:	8c e2       	ldi	r24, 0x2C	; 44
    1a50:	91 e0       	ldi	r25, 0x01	; 1
    1a52:	9a 8b       	std	Y+18, r25	; 0x12
    1a54:	89 8b       	std	Y+17, r24	; 0x11
    1a56:	89 89       	ldd	r24, Y+17	; 0x11
    1a58:	9a 89       	ldd	r25, Y+18	; 0x12
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <Lcd8_Write_Char+0xd4>
    1a5e:	9a 8b       	std	Y+18, r25	; 0x12
    1a60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a62:	8b 89       	ldd	r24, Y+19	; 0x13
    1a64:	9c 89       	ldd	r25, Y+20	; 0x14
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	9c 8b       	std	Y+20, r25	; 0x14
    1a6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	69 f7       	brne	.-38     	; 0x1a4e <Lcd8_Write_Char+0xc8>
    1a74:	14 c0       	rjmp	.+40     	; 0x1a9e <Lcd8_Write_Char+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a76:	6d 89       	ldd	r22, Y+21	; 0x15
    1a78:	7e 89       	ldd	r23, Y+22	; 0x16
    1a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9c 8b       	std	Y+20, r25	; 0x14
    1a88:	8b 8b       	std	Y+19, r24	; 0x13
    1a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8e:	98 8b       	std	Y+16, r25	; 0x10
    1a90:	8f 87       	std	Y+15, r24	; 0x0f
    1a92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a94:	98 89       	ldd	r25, Y+16	; 0x10
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <Lcd8_Write_Char+0x110>
    1a9a:	98 8b       	std	Y+16, r25	; 0x10
    1a9c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	pinChange(EN,0);             // => E = 04
    1a9e:	8b e1       	ldi	r24, 0x1B	; 27
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a0 e8       	ldi	r26, 0x80	; 128
    1ab0:	bf e3       	ldi	r27, 0x3F	; 63
    1ab2:	8b 87       	std	Y+11, r24	; 0x0b
    1ab4:	9c 87       	std	Y+12, r25	; 0x0c
    1ab6:	ad 87       	std	Y+13, r26	; 0x0d
    1ab8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e8       	ldi	r19, 0x80	; 128
    1ac6:	4b e3       	ldi	r20, 0x3B	; 59
    1ac8:	55 e4       	ldi	r21, 0x45	; 69
    1aca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	8f 83       	std	Y+7, r24	; 0x07
    1ad4:	98 87       	std	Y+8, r25	; 0x08
    1ad6:	a9 87       	std	Y+9, r26	; 0x09
    1ad8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ada:	6f 81       	ldd	r22, Y+7	; 0x07
    1adc:	78 85       	ldd	r23, Y+8	; 0x08
    1ade:	89 85       	ldd	r24, Y+9	; 0x09
    1ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	2c f4       	brge	.+10     	; 0x1afc <Lcd8_Write_Char+0x176>
		__ticks = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <Lcd8_Write_Char+0x1f4>
	else if (__tmp > 65535)
    1afc:	6f 81       	ldd	r22, Y+7	; 0x07
    1afe:	78 85       	ldd	r23, Y+8	; 0x08
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	3f ef       	ldi	r19, 0xFF	; 255
    1b08:	4f e7       	ldi	r20, 0x7F	; 127
    1b0a:	57 e4       	ldi	r21, 0x47	; 71
    1b0c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b10:	18 16       	cp	r1, r24
    1b12:	4c f5       	brge	.+82     	; 0x1b66 <Lcd8_Write_Char+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <Lcd8_Write_Char+0x1d6>
    1b3e:	8c e2       	ldi	r24, 0x2C	; 44
    1b40:	91 e0       	ldi	r25, 0x01	; 1
    1b42:	9c 83       	std	Y+4, r25	; 0x04
    1b44:	8b 83       	std	Y+3, r24	; 0x03
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <Lcd8_Write_Char+0x1c4>
    1b4e:	9c 83       	std	Y+4, r25	; 0x04
    1b50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f7       	brne	.-38     	; 0x1b3e <Lcd8_Write_Char+0x1b8>
    1b64:	14 c0       	rjmp	.+40     	; 0x1b8e <Lcd8_Write_Char+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b66:	6f 81       	ldd	r22, Y+7	; 0x07
    1b68:	78 85       	ldd	r23, Y+8	; 0x08
    1b6a:	89 85       	ldd	r24, Y+9	; 0x09
    1b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	8d 83       	std	Y+5, r24	; 0x05
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7e:	9a 83       	std	Y+2, r25	; 0x02
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <Lcd8_Write_Char+0x200>
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1b8e:	6d 96       	adiw	r28, 0x1d	; 29
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <Lcd8_Write_String>:

void Lcd8_Write_String(char *a)
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <Lcd8_Write_String+0x6>
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <Lcd8_Write_String+0x8>
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	9c 83       	std	Y+4, r25	; 0x04
    1bae:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;a[i]!='\0';i++)
    1bb0:	1a 82       	std	Y+2, r1	; 0x02
    1bb2:	19 82       	std	Y+1, r1	; 0x01
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <Lcd8_Write_String+0x34>
	Lcd8_Write_Char(a[i]);
    1bb6:	29 81       	ldd	r18, Y+1	; 0x01
    1bb8:	3a 81       	ldd	r19, Y+2	; 0x02
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	e2 0f       	add	r30, r18
    1bc2:	f3 1f       	adc	r31, r19
    1bc4:	80 81       	ld	r24, Z
    1bc6:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
}

void Lcd8_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	9a 83       	std	Y+2, r25	; 0x02
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	29 81       	ldd	r18, Y+1	; 0x01
    1bd6:	3a 81       	ldd	r19, Y+2	; 0x02
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	fc 01       	movw	r30, r24
    1bde:	e2 0f       	add	r30, r18
    1be0:	f3 1f       	adc	r31, r19
    1be2:	80 81       	ld	r24, Z
    1be4:	88 23       	and	r24, r24
    1be6:	39 f7       	brne	.-50     	; 0x1bb6 <Lcd8_Write_String+0x16>
	Lcd8_Write_Char(a[i]);
}
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <Lcd8_Shift_Right>:

void Lcd8_Shift_Right()
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
	Lcd8_Cmd(0x1C);
    1bfe:	8c e1       	ldi	r24, 0x1C	; 28
    1c00:	0e 94 95 09 	call	0x132a	; 0x132a <Lcd8_Cmd>
}
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <Lcd8_Shift_Left>:

void Lcd8_Shift_Left()
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
	Lcd8_Cmd(0x18);
    1c12:	88 e1       	ldi	r24, 0x18	; 24
    1c14:	0e 94 95 09 	call	0x132a	; 0x132a <Lcd8_Cmd>
}
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	0f 92       	push	r0
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	89 83       	std	Y+1, r24	; 0x01
	if(a & 1)
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	81 70       	andi	r24, 0x01	; 1
    1c32:	90 70       	andi	r25, 0x00	; 0
    1c34:	88 23       	and	r24, r24
    1c36:	39 f0       	breq	.+14     	; 0x1c46 <Lcd4_Port+0x28>
	pinChange(D4,1);
    1c38:	82 e2       	ldi	r24, 0x22	; 34
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    1c44:	06 c0       	rjmp	.+12     	; 0x1c52 <Lcd4_Port+0x34>
	else
	pinChange(D4,0);
    1c46:	82 e2       	ldi	r24, 0x22	; 34
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	
	if(a & 2)
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	82 70       	andi	r24, 0x02	; 2
    1c5a:	90 70       	andi	r25, 0x00	; 0
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	39 f0       	breq	.+14     	; 0x1c6e <Lcd4_Port+0x50>
	pinChange(D5,1);
    1c60:	83 e2       	ldi	r24, 0x23	; 35
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    1c6c:	06 c0       	rjmp	.+12     	; 0x1c7a <Lcd4_Port+0x5c>
	else
	pinChange(D5,0);
    1c6e:	83 e2       	ldi	r24, 0x23	; 35
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	
	if(a & 4)
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	84 70       	andi	r24, 0x04	; 4
    1c82:	90 70       	andi	r25, 0x00	; 0
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	39 f0       	breq	.+14     	; 0x1c96 <Lcd4_Port+0x78>
	pinChange(D6,1);
    1c88:	84 e2       	ldi	r24, 0x24	; 36
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	61 e0       	ldi	r22, 0x01	; 1
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <Lcd4_Port+0x84>
	else
	pinChange(D6,0);
    1c96:	84 e2       	ldi	r24, 0x24	; 36
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	
	if(a & 8)
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	88 70       	andi	r24, 0x08	; 8
    1caa:	90 70       	andi	r25, 0x00	; 0
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	39 f0       	breq	.+14     	; 0x1cbe <Lcd4_Port+0xa0>
	pinChange(D7,1);
    1cb0:	85 e2       	ldi	r24, 0x25	; 37
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    1cbc:	06 c0       	rjmp	.+12     	; 0x1cca <Lcd4_Port+0xac>
	else
	pinChange(D7,0);
    1cbe:	85 e2       	ldi	r24, 0x25	; 37
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
}
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	6d 97       	sbiw	r28, 0x1d	; 29
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	8d 8f       	std	Y+29, r24	; 0x1d
	pinChange(RS,0);             // => RS = 0
    1ce8:	8a e1       	ldi	r24, 0x1A	; 26
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	Lcd4_Port(a);
    1cf4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cf6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
    1cfa:	8b e1       	ldi	r24, 0x1B	; 27
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	61 e0       	ldi	r22, 0x01	; 1
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	a0 e8       	ldi	r26, 0x80	; 128
    1d0c:	bf e3       	ldi	r27, 0x3F	; 63
    1d0e:	89 8f       	std	Y+25, r24	; 0x19
    1d10:	9a 8f       	std	Y+26, r25	; 0x1a
    1d12:	ab 8f       	std	Y+27, r26	; 0x1b
    1d14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d16:	69 8d       	ldd	r22, Y+25	; 0x19
    1d18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e8       	ldi	r19, 0x80	; 128
    1d22:	4b e3       	ldi	r20, 0x3B	; 59
    1d24:	55 e4       	ldi	r21, 0x45	; 69
    1d26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	8d 8b       	std	Y+21, r24	; 0x15
    1d30:	9e 8b       	std	Y+22, r25	; 0x16
    1d32:	af 8b       	std	Y+23, r26	; 0x17
    1d34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d36:	6d 89       	ldd	r22, Y+21	; 0x15
    1d38:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e8       	ldi	r20, 0x80	; 128
    1d44:	5f e3       	ldi	r21, 0x3F	; 63
    1d46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d4a:	88 23       	and	r24, r24
    1d4c:	2c f4       	brge	.+10     	; 0x1d58 <Lcd4_Cmd+0x86>
		__ticks = 1;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9c 8b       	std	Y+20, r25	; 0x14
    1d54:	8b 8b       	std	Y+19, r24	; 0x13
    1d56:	3f c0       	rjmp	.+126    	; 0x1dd6 <Lcd4_Cmd+0x104>
	else if (__tmp > 65535)
    1d58:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	3f ef       	ldi	r19, 0xFF	; 255
    1d64:	4f e7       	ldi	r20, 0x7F	; 127
    1d66:	57 e4       	ldi	r21, 0x47	; 71
    1d68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d6c:	18 16       	cp	r1, r24
    1d6e:	4c f5       	brge	.+82     	; 0x1dc2 <Lcd4_Cmd+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d70:	69 8d       	ldd	r22, Y+25	; 0x19
    1d72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	51 e4       	ldi	r21, 0x41	; 65
    1d80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9c 8b       	std	Y+20, r25	; 0x14
    1d96:	8b 8b       	std	Y+19, r24	; 0x13
    1d98:	0f c0       	rjmp	.+30     	; 0x1db8 <Lcd4_Cmd+0xe6>
    1d9a:	8c e2       	ldi	r24, 0x2C	; 44
    1d9c:	91 e0       	ldi	r25, 0x01	; 1
    1d9e:	9a 8b       	std	Y+18, r25	; 0x12
    1da0:	89 8b       	std	Y+17, r24	; 0x11
    1da2:	89 89       	ldd	r24, Y+17	; 0x11
    1da4:	9a 89       	ldd	r25, Y+18	; 0x12
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <Lcd4_Cmd+0xd4>
    1daa:	9a 8b       	std	Y+18, r25	; 0x12
    1dac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dae:	8b 89       	ldd	r24, Y+19	; 0x13
    1db0:	9c 89       	ldd	r25, Y+20	; 0x14
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	9c 8b       	std	Y+20, r25	; 0x14
    1db6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dba:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	69 f7       	brne	.-38     	; 0x1d9a <Lcd4_Cmd+0xc8>
    1dc0:	14 c0       	rjmp	.+40     	; 0x1dea <Lcd4_Cmd+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9c 8b       	std	Y+20, r25	; 0x14
    1dd4:	8b 8b       	std	Y+19, r24	; 0x13
    1dd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dda:	98 8b       	std	Y+16, r25	; 0x10
    1ddc:	8f 87       	std	Y+15, r24	; 0x0f
    1dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de0:	98 89       	ldd	r25, Y+16	; 0x10
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <Lcd4_Cmd+0x110>
    1de6:	98 8b       	std	Y+16, r25	; 0x10
    1de8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
    1dea:	8b e1       	ldi	r24, 0x1B	; 27
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	70 e0       	ldi	r23, 0x00	; 0
    1df2:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	a0 e8       	ldi	r26, 0x80	; 128
    1dfc:	bf e3       	ldi	r27, 0x3F	; 63
    1dfe:	8b 87       	std	Y+11, r24	; 0x0b
    1e00:	9c 87       	std	Y+12, r25	; 0x0c
    1e02:	ad 87       	std	Y+13, r26	; 0x0d
    1e04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e8       	ldi	r19, 0x80	; 128
    1e12:	4b e3       	ldi	r20, 0x3B	; 59
    1e14:	55 e4       	ldi	r21, 0x45	; 69
    1e16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	8f 83       	std	Y+7, r24	; 0x07
    1e20:	98 87       	std	Y+8, r25	; 0x08
    1e22:	a9 87       	std	Y+9, r26	; 0x09
    1e24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e26:	6f 81       	ldd	r22, Y+7	; 0x07
    1e28:	78 85       	ldd	r23, Y+8	; 0x08
    1e2a:	89 85       	ldd	r24, Y+9	; 0x09
    1e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	5f e3       	ldi	r21, 0x3F	; 63
    1e36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e3a:	88 23       	and	r24, r24
    1e3c:	2c f4       	brge	.+10     	; 0x1e48 <Lcd4_Cmd+0x176>
		__ticks = 1;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9e 83       	std	Y+6, r25	; 0x06
    1e44:	8d 83       	std	Y+5, r24	; 0x05
    1e46:	3f c0       	rjmp	.+126    	; 0x1ec6 <Lcd4_Cmd+0x1f4>
	else if (__tmp > 65535)
    1e48:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4a:	78 85       	ldd	r23, Y+8	; 0x08
    1e4c:	89 85       	ldd	r24, Y+9	; 0x09
    1e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	57 e4       	ldi	r21, 0x47	; 71
    1e58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	4c f5       	brge	.+82     	; 0x1eb2 <Lcd4_Cmd+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e2       	ldi	r20, 0x20	; 32
    1e6e:	51 e4       	ldi	r21, 0x41	; 65
    1e70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <Lcd4_Cmd+0x1d6>
    1e8a:	8c e2       	ldi	r24, 0x2C	; 44
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	9c 83       	std	Y+4, r25	; 0x04
    1e90:	8b 83       	std	Y+3, r24	; 0x03
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <Lcd4_Cmd+0x1c4>
    1e9a:	9c 83       	std	Y+4, r25	; 0x04
    1e9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	69 f7       	brne	.-38     	; 0x1e8a <Lcd4_Cmd+0x1b8>
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <Lcd4_Cmd+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb4:	78 85       	ldd	r23, Y+8	; 0x08
    1eb6:	89 85       	ldd	r24, Y+9	; 0x09
    1eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9e 83       	std	Y+6, r25	; 0x06
    1ec4:	8d 83       	std	Y+5, r24	; 0x05
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <Lcd4_Cmd+0x200>
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1eda:	6d 96       	adiw	r28, 0x1d	; 29
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <Lcd4_Clear>:

void Lcd4_Clear()
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
	Lcd4_Cmd(0);
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
	Lcd4_Cmd(1);
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
}
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <Lcd4_Set_Cursor>:

void Lcd4_Set_Cursor(char a, char b)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <Lcd4_Set_Cursor+0x6>
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <Lcd4_Set_Cursor+0x8>
    1f0e:	0f 92       	push	r0
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	8c 83       	std	Y+4, r24	; 0x04
    1f16:	6d 83       	std	Y+5, r22	; 0x05
	char temp,z,y;
	if(a == 1)
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	91 f4       	brne	.+36     	; 0x1f42 <Lcd4_Set_Cursor+0x3c>
	{
		temp = 0x80 + b;
    1f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f20:	80 58       	subi	r24, 0x80	; 128
    1f22:	8b 83       	std	Y+3, r24	; 0x03
		z = temp>>4;
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	82 95       	swap	r24
    1f28:	8f 70       	andi	r24, 0x0F	; 15
    1f2a:	8a 83       	std	Y+2, r24	; 0x02
		y = (0x80+b) & 0x0F;
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	80 58       	subi	r24, 0x80	; 128
    1f30:	8f 70       	andi	r24, 0x0F	; 15
    1f32:	89 83       	std	Y+1, r24	; 0x01
		Lcd4_Cmd(z);
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
		Lcd4_Cmd(y);
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
    1f40:	14 c0       	rjmp	.+40     	; 0x1f6a <Lcd4_Set_Cursor+0x64>
	}
	else if(a == 2)
    1f42:	8c 81       	ldd	r24, Y+4	; 0x04
    1f44:	82 30       	cpi	r24, 0x02	; 2
    1f46:	89 f4       	brne	.+34     	; 0x1f6a <Lcd4_Set_Cursor+0x64>
	{
		temp = 0xC0 + b;
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	80 54       	subi	r24, 0x40	; 64
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
		z = temp>>4;
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	82 95       	swap	r24
    1f52:	8f 70       	andi	r24, 0x0F	; 15
    1f54:	8a 83       	std	Y+2, r24	; 0x02
		y = (0xC0+b) & 0x0F;
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	80 54       	subi	r24, 0x40	; 64
    1f5a:	8f 70       	andi	r24, 0x0F	; 15
    1f5c:	89 83       	std	Y+1, r24	; 0x01
		Lcd4_Cmd(z);
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
		Lcd4_Cmd(y);
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
	}
}
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <Lcd4_Init>:

void Lcd4_Init()
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	aa 97       	sbiw	r28, 0x2a	; 42
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
	Lcd4_Port(0x00);
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Lcd4_Port>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a0 ea       	ldi	r26, 0xA0	; 160
    1f9a:	b1 e4       	ldi	r27, 0x41	; 65
    1f9c:	8f a3       	std	Y+39, r24	; 0x27
    1f9e:	98 a7       	std	Y+40, r25	; 0x28
    1fa0:	a9 a7       	std	Y+41, r26	; 0x29
    1fa2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fa6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fa8:	89 a5       	ldd	r24, Y+41	; 0x29
    1faa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e8       	ldi	r19, 0x80	; 128
    1fb0:	4b e3       	ldi	r20, 0x3B	; 59
    1fb2:	55 e4       	ldi	r21, 0x45	; 69
    1fb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	8b a3       	std	Y+35, r24	; 0x23
    1fbe:	9c a3       	std	Y+36, r25	; 0x24
    1fc0:	ad a3       	std	Y+37, r26	; 0x25
    1fc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fca:	9e a1       	ldd	r25, Y+38	; 0x26
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e8       	ldi	r20, 0x80	; 128
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fd8:	88 23       	and	r24, r24
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <Lcd4_Init+0x6c>
		__ticks = 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9a a3       	std	Y+34, r25	; 0x22
    1fe2:	89 a3       	std	Y+33, r24	; 0x21
    1fe4:	3f c0       	rjmp	.+126    	; 0x2064 <Lcd4_Init+0xea>
	else if (__tmp > 65535)
    1fe6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fea:	8d a1       	ldd	r24, Y+37	; 0x25
    1fec:	9e a1       	ldd	r25, Y+38	; 0x26
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	57 e4       	ldi	r21, 0x47	; 71
    1ff6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	4c f5       	brge	.+82     	; 0x2050 <Lcd4_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffe:	6f a1       	ldd	r22, Y+39	; 0x27
    2000:	78 a5       	ldd	r23, Y+40	; 0x28
    2002:	89 a5       	ldd	r24, Y+41	; 0x29
    2004:	9a a5       	ldd	r25, Y+42	; 0x2a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e2       	ldi	r20, 0x20	; 32
    200c:	51 e4       	ldi	r21, 0x41	; 65
    200e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9a a3       	std	Y+34, r25	; 0x22
    2024:	89 a3       	std	Y+33, r24	; 0x21
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <Lcd4_Init+0xcc>
    2028:	8c e2       	ldi	r24, 0x2C	; 44
    202a:	91 e0       	ldi	r25, 0x01	; 1
    202c:	98 a3       	std	Y+32, r25	; 0x20
    202e:	8f 8f       	std	Y+31, r24	; 0x1f
    2030:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2032:	98 a1       	ldd	r25, Y+32	; 0x20
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <Lcd4_Init+0xba>
    2038:	98 a3       	std	Y+32, r25	; 0x20
    203a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203c:	89 a1       	ldd	r24, Y+33	; 0x21
    203e:	9a a1       	ldd	r25, Y+34	; 0x22
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	9a a3       	std	Y+34, r25	; 0x22
    2044:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2046:	89 a1       	ldd	r24, Y+33	; 0x21
    2048:	9a a1       	ldd	r25, Y+34	; 0x22
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	69 f7       	brne	.-38     	; 0x2028 <Lcd4_Init+0xae>
    204e:	14 c0       	rjmp	.+40     	; 0x2078 <Lcd4_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2050:	6b a1       	ldd	r22, Y+35	; 0x23
    2052:	7c a1       	ldd	r23, Y+36	; 0x24
    2054:	8d a1       	ldd	r24, Y+37	; 0x25
    2056:	9e a1       	ldd	r25, Y+38	; 0x26
    2058:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	9a a3       	std	Y+34, r25	; 0x22
    2062:	89 a3       	std	Y+33, r24	; 0x21
    2064:	89 a1       	ldd	r24, Y+33	; 0x21
    2066:	9a a1       	ldd	r25, Y+34	; 0x22
    2068:	9e 8f       	std	Y+30, r25	; 0x1e
    206a:	8d 8f       	std	Y+29, r24	; 0x1d
    206c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    206e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <Lcd4_Init+0xf6>
    2074:	9e 8f       	std	Y+30, r25	; 0x1e
    2076:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
    2078:	83 e0       	ldi	r24, 0x03	; 3
    207a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a0 ea       	ldi	r26, 0xA0	; 160
    2084:	b0 e4       	ldi	r27, 0x40	; 64
    2086:	89 8f       	std	Y+25, r24	; 0x19
    2088:	9a 8f       	std	Y+26, r25	; 0x1a
    208a:	ab 8f       	std	Y+27, r26	; 0x1b
    208c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208e:	69 8d       	ldd	r22, Y+25	; 0x19
    2090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e8       	ldi	r19, 0x80	; 128
    209a:	4b e3       	ldi	r20, 0x3B	; 59
    209c:	55 e4       	ldi	r21, 0x45	; 69
    209e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	8d 8b       	std	Y+21, r24	; 0x15
    20a8:	9e 8b       	std	Y+22, r25	; 0x16
    20aa:	af 8b       	std	Y+23, r26	; 0x17
    20ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ae:	6d 89       	ldd	r22, Y+21	; 0x15
    20b0:	7e 89       	ldd	r23, Y+22	; 0x16
    20b2:	8f 89       	ldd	r24, Y+23	; 0x17
    20b4:	98 8d       	ldd	r25, Y+24	; 0x18
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e8       	ldi	r20, 0x80	; 128
    20bc:	5f e3       	ldi	r21, 0x3F	; 63
    20be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	2c f4       	brge	.+10     	; 0x20d0 <Lcd4_Init+0x156>
		__ticks = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9c 8b       	std	Y+20, r25	; 0x14
    20cc:	8b 8b       	std	Y+19, r24	; 0x13
    20ce:	3f c0       	rjmp	.+126    	; 0x214e <Lcd4_Init+0x1d4>
	else if (__tmp > 65535)
    20d0:	6d 89       	ldd	r22, Y+21	; 0x15
    20d2:	7e 89       	ldd	r23, Y+22	; 0x16
    20d4:	8f 89       	ldd	r24, Y+23	; 0x17
    20d6:	98 8d       	ldd	r25, Y+24	; 0x18
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	3f ef       	ldi	r19, 0xFF	; 255
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	57 e4       	ldi	r21, 0x47	; 71
    20e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	4c f5       	brge	.+82     	; 0x213a <Lcd4_Init+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e2       	ldi	r20, 0x20	; 32
    20f6:	51 e4       	ldi	r21, 0x41	; 65
    20f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9c 8b       	std	Y+20, r25	; 0x14
    210e:	8b 8b       	std	Y+19, r24	; 0x13
    2110:	0f c0       	rjmp	.+30     	; 0x2130 <Lcd4_Init+0x1b6>
    2112:	8c e2       	ldi	r24, 0x2C	; 44
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	9a 8b       	std	Y+18, r25	; 0x12
    2118:	89 8b       	std	Y+17, r24	; 0x11
    211a:	89 89       	ldd	r24, Y+17	; 0x11
    211c:	9a 89       	ldd	r25, Y+18	; 0x12
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <Lcd4_Init+0x1a4>
    2122:	9a 8b       	std	Y+18, r25	; 0x12
    2124:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2126:	8b 89       	ldd	r24, Y+19	; 0x13
    2128:	9c 89       	ldd	r25, Y+20	; 0x14
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	9c 8b       	std	Y+20, r25	; 0x14
    212e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2130:	8b 89       	ldd	r24, Y+19	; 0x13
    2132:	9c 89       	ldd	r25, Y+20	; 0x14
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	69 f7       	brne	.-38     	; 0x2112 <Lcd4_Init+0x198>
    2138:	14 c0       	rjmp	.+40     	; 0x2162 <Lcd4_Init+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213a:	6d 89       	ldd	r22, Y+21	; 0x15
    213c:	7e 89       	ldd	r23, Y+22	; 0x16
    213e:	8f 89       	ldd	r24, Y+23	; 0x17
    2140:	98 8d       	ldd	r25, Y+24	; 0x18
    2142:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9c 8b       	std	Y+20, r25	; 0x14
    214c:	8b 8b       	std	Y+19, r24	; 0x13
    214e:	8b 89       	ldd	r24, Y+19	; 0x13
    2150:	9c 89       	ldd	r25, Y+20	; 0x14
    2152:	98 8b       	std	Y+16, r25	; 0x10
    2154:	8f 87       	std	Y+15, r24	; 0x0f
    2156:	8f 85       	ldd	r24, Y+15	; 0x0f
    2158:	98 89       	ldd	r25, Y+16	; 0x10
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <Lcd4_Init+0x1e0>
    215e:	98 8b       	std	Y+16, r25	; 0x10
    2160:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	Lcd4_Cmd(0x03);
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	a0 e3       	ldi	r26, 0x30	; 48
    216e:	b1 e4       	ldi	r27, 0x41	; 65
    2170:	8b 87       	std	Y+11, r24	; 0x0b
    2172:	9c 87       	std	Y+12, r25	; 0x0c
    2174:	ad 87       	std	Y+13, r26	; 0x0d
    2176:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2178:	6b 85       	ldd	r22, Y+11	; 0x0b
    217a:	7c 85       	ldd	r23, Y+12	; 0x0c
    217c:	8d 85       	ldd	r24, Y+13	; 0x0d
    217e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e8       	ldi	r19, 0x80	; 128
    2184:	4b e3       	ldi	r20, 0x3B	; 59
    2186:	55 e4       	ldi	r21, 0x45	; 69
    2188:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	8f 83       	std	Y+7, r24	; 0x07
    2192:	98 87       	std	Y+8, r25	; 0x08
    2194:	a9 87       	std	Y+9, r26	; 0x09
    2196:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2198:	6f 81       	ldd	r22, Y+7	; 0x07
    219a:	78 85       	ldd	r23, Y+8	; 0x08
    219c:	89 85       	ldd	r24, Y+9	; 0x09
    219e:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21ac:	88 23       	and	r24, r24
    21ae:	2c f4       	brge	.+10     	; 0x21ba <Lcd4_Init+0x240>
		__ticks = 1;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
    21b8:	3f c0       	rjmp	.+126    	; 0x2238 <Lcd4_Init+0x2be>
	else if (__tmp > 65535)
    21ba:	6f 81       	ldd	r22, Y+7	; 0x07
    21bc:	78 85       	ldd	r23, Y+8	; 0x08
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	3f ef       	ldi	r19, 0xFF	; 255
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	57 e4       	ldi	r21, 0x47	; 71
    21ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21ce:	18 16       	cp	r1, r24
    21d0:	4c f5       	brge	.+82     	; 0x2224 <Lcd4_Init+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e2       	ldi	r20, 0x20	; 32
    21e0:	51 e4       	ldi	r21, 0x41	; 65
    21e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	0f c0       	rjmp	.+30     	; 0x221a <Lcd4_Init+0x2a0>
    21fc:	8c e2       	ldi	r24, 0x2C	; 44
    21fe:	91 e0       	ldi	r25, 0x01	; 1
    2200:	9c 83       	std	Y+4, r25	; 0x04
    2202:	8b 83       	std	Y+3, r24	; 0x03
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <Lcd4_Init+0x28e>
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2210:	8d 81       	ldd	r24, Y+5	; 0x05
    2212:	9e 81       	ldd	r25, Y+6	; 0x06
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	9e 83       	std	Y+6, r25	; 0x06
    2218:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	9e 81       	ldd	r25, Y+6	; 0x06
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	69 f7       	brne	.-38     	; 0x21fc <Lcd4_Init+0x282>
    2222:	14 c0       	rjmp	.+40     	; 0x224c <Lcd4_Init+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2224:	6f 81       	ldd	r22, Y+7	; 0x07
    2226:	78 85       	ldd	r23, Y+8	; 0x08
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <Lcd4_Init+0x2ca>
    2248:	9a 83       	std	Y+2, r25	; 0x02
    224a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(11);
	Lcd4_Cmd(0x03);
    224c:	83 e0       	ldi	r24, 0x03	; 3
    224e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
    2258:	82 e0       	ldi	r24, 0x02	; 2
    225a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
    225e:	88 e0       	ldi	r24, 0x08	; 8
    2260:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
    226a:	8c e0       	ldi	r24, 0x0C	; 12
    226c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
    2276:	86 e0       	ldi	r24, 0x06	; 6
    2278:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
}
    227c:	aa 96       	adiw	r28, 0x2a	; 42
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <Lcd4_Write_Char>:

void Lcd4_Write_Char(char a)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	eb 97       	sbiw	r28, 0x3b	; 59
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	8b af       	std	Y+59, r24	; 0x3b
	char temp,y;
	temp = a&0x0F;
    22a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    22a6:	8f 70       	andi	r24, 0x0F	; 15
    22a8:	8a af       	std	Y+58, r24	; 0x3a
	y = a&0xF0;
    22aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    22ac:	80 7f       	andi	r24, 0xF0	; 240
    22ae:	89 af       	std	Y+57, r24	; 0x39
	pinChange(RS,1);             // => RS = 1
    22b0:	8a e1       	ldi	r24, 0x1A	; 26
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	61 e0       	ldi	r22, 0x01	; 1
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
    22bc:	89 ad       	ldd	r24, Y+57	; 0x39
    22be:	82 95       	swap	r24
    22c0:	8f 70       	andi	r24, 0x0F	; 15
    22c2:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Lcd4_Port>
	pinChange(EN,1);
    22c6:	8b e1       	ldi	r24, 0x1B	; 27
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	61 e0       	ldi	r22, 0x01	; 1
    22cc:	70 e0       	ldi	r23, 0x00	; 0
    22ce:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a0 e8       	ldi	r26, 0x80	; 128
    22d8:	bf e3       	ldi	r27, 0x3F	; 63
    22da:	8d ab       	std	Y+53, r24	; 0x35
    22dc:	9e ab       	std	Y+54, r25	; 0x36
    22de:	af ab       	std	Y+55, r26	; 0x37
    22e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e2:	6d a9       	ldd	r22, Y+53	; 0x35
    22e4:	7e a9       	ldd	r23, Y+54	; 0x36
    22e6:	8f a9       	ldd	r24, Y+55	; 0x37
    22e8:	98 ad       	ldd	r25, Y+56	; 0x38
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e8       	ldi	r19, 0x80	; 128
    22ee:	4b e3       	ldi	r20, 0x3B	; 59
    22f0:	55 e4       	ldi	r21, 0x45	; 69
    22f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	89 ab       	std	Y+49, r24	; 0x31
    22fc:	9a ab       	std	Y+50, r25	; 0x32
    22fe:	ab ab       	std	Y+51, r26	; 0x33
    2300:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2302:	69 a9       	ldd	r22, Y+49	; 0x31
    2304:	7a a9       	ldd	r23, Y+50	; 0x32
    2306:	8b a9       	ldd	r24, Y+51	; 0x33
    2308:	9c a9       	ldd	r25, Y+52	; 0x34
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f e3       	ldi	r21, 0x3F	; 63
    2312:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2316:	88 23       	and	r24, r24
    2318:	2c f4       	brge	.+10     	; 0x2324 <Lcd4_Write_Char+0x96>
		__ticks = 1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	98 ab       	std	Y+48, r25	; 0x30
    2320:	8f a7       	std	Y+47, r24	; 0x2f
    2322:	3f c0       	rjmp	.+126    	; 0x23a2 <Lcd4_Write_Char+0x114>
	else if (__tmp > 65535)
    2324:	69 a9       	ldd	r22, Y+49	; 0x31
    2326:	7a a9       	ldd	r23, Y+50	; 0x32
    2328:	8b a9       	ldd	r24, Y+51	; 0x33
    232a:	9c a9       	ldd	r25, Y+52	; 0x34
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	3f ef       	ldi	r19, 0xFF	; 255
    2330:	4f e7       	ldi	r20, 0x7F	; 127
    2332:	57 e4       	ldi	r21, 0x47	; 71
    2334:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2338:	18 16       	cp	r1, r24
    233a:	4c f5       	brge	.+82     	; 0x238e <Lcd4_Write_Char+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233c:	6d a9       	ldd	r22, Y+53	; 0x35
    233e:	7e a9       	ldd	r23, Y+54	; 0x36
    2340:	8f a9       	ldd	r24, Y+55	; 0x37
    2342:	98 ad       	ldd	r25, Y+56	; 0x38
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e2       	ldi	r20, 0x20	; 32
    234a:	51 e4       	ldi	r21, 0x41	; 65
    234c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	98 ab       	std	Y+48, r25	; 0x30
    2362:	8f a7       	std	Y+47, r24	; 0x2f
    2364:	0f c0       	rjmp	.+30     	; 0x2384 <Lcd4_Write_Char+0xf6>
    2366:	8c e2       	ldi	r24, 0x2C	; 44
    2368:	91 e0       	ldi	r25, 0x01	; 1
    236a:	9e a7       	std	Y+46, r25	; 0x2e
    236c:	8d a7       	std	Y+45, r24	; 0x2d
    236e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2370:	9e a5       	ldd	r25, Y+46	; 0x2e
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	f1 f7       	brne	.-4      	; 0x2372 <Lcd4_Write_Char+0xe4>
    2376:	9e a7       	std	Y+46, r25	; 0x2e
    2378:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237a:	8f a5       	ldd	r24, Y+47	; 0x2f
    237c:	98 a9       	ldd	r25, Y+48	; 0x30
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	98 ab       	std	Y+48, r25	; 0x30
    2382:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2384:	8f a5       	ldd	r24, Y+47	; 0x2f
    2386:	98 a9       	ldd	r25, Y+48	; 0x30
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	69 f7       	brne	.-38     	; 0x2366 <Lcd4_Write_Char+0xd8>
    238c:	14 c0       	rjmp	.+40     	; 0x23b6 <Lcd4_Write_Char+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238e:	69 a9       	ldd	r22, Y+49	; 0x31
    2390:	7a a9       	ldd	r23, Y+50	; 0x32
    2392:	8b a9       	ldd	r24, Y+51	; 0x33
    2394:	9c a9       	ldd	r25, Y+52	; 0x34
    2396:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	98 ab       	std	Y+48, r25	; 0x30
    23a0:	8f a7       	std	Y+47, r24	; 0x2f
    23a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a4:	98 a9       	ldd	r25, Y+48	; 0x30
    23a6:	9c a7       	std	Y+44, r25	; 0x2c
    23a8:	8b a7       	std	Y+43, r24	; 0x2b
    23aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <Lcd4_Write_Char+0x120>
    23b2:	9c a7       	std	Y+44, r25	; 0x2c
    23b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	pinChange(EN,0);
    23b6:	8b e1       	ldi	r24, 0x1B	; 27
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a0 e8       	ldi	r26, 0x80	; 128
    23c8:	bf e3       	ldi	r27, 0x3F	; 63
    23ca:	8f a3       	std	Y+39, r24	; 0x27
    23cc:	98 a7       	std	Y+40, r25	; 0x28
    23ce:	a9 a7       	std	Y+41, r26	; 0x29
    23d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d2:	6f a1       	ldd	r22, Y+39	; 0x27
    23d4:	78 a5       	ldd	r23, Y+40	; 0x28
    23d6:	89 a5       	ldd	r24, Y+41	; 0x29
    23d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e8       	ldi	r19, 0x80	; 128
    23de:	4b e3       	ldi	r20, 0x3B	; 59
    23e0:	55 e4       	ldi	r21, 0x45	; 69
    23e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	8b a3       	std	Y+35, r24	; 0x23
    23ec:	9c a3       	std	Y+36, r25	; 0x24
    23ee:	ad a3       	std	Y+37, r26	; 0x25
    23f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23f2:	6b a1       	ldd	r22, Y+35	; 0x23
    23f4:	7c a1       	ldd	r23, Y+36	; 0x24
    23f6:	8d a1       	ldd	r24, Y+37	; 0x25
    23f8:	9e a1       	ldd	r25, Y+38	; 0x26
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2406:	88 23       	and	r24, r24
    2408:	2c f4       	brge	.+10     	; 0x2414 <Lcd4_Write_Char+0x186>
		__ticks = 1;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9a a3       	std	Y+34, r25	; 0x22
    2410:	89 a3       	std	Y+33, r24	; 0x21
    2412:	3f c0       	rjmp	.+126    	; 0x2492 <Lcd4_Write_Char+0x204>
	else if (__tmp > 65535)
    2414:	6b a1       	ldd	r22, Y+35	; 0x23
    2416:	7c a1       	ldd	r23, Y+36	; 0x24
    2418:	8d a1       	ldd	r24, Y+37	; 0x25
    241a:	9e a1       	ldd	r25, Y+38	; 0x26
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	3f ef       	ldi	r19, 0xFF	; 255
    2420:	4f e7       	ldi	r20, 0x7F	; 127
    2422:	57 e4       	ldi	r21, 0x47	; 71
    2424:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2428:	18 16       	cp	r1, r24
    242a:	4c f5       	brge	.+82     	; 0x247e <Lcd4_Write_Char+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	6f a1       	ldd	r22, Y+39	; 0x27
    242e:	78 a5       	ldd	r23, Y+40	; 0x28
    2430:	89 a5       	ldd	r24, Y+41	; 0x29
    2432:	9a a5       	ldd	r25, Y+42	; 0x2a
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e2       	ldi	r20, 0x20	; 32
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9a a3       	std	Y+34, r25	; 0x22
    2452:	89 a3       	std	Y+33, r24	; 0x21
    2454:	0f c0       	rjmp	.+30     	; 0x2474 <Lcd4_Write_Char+0x1e6>
    2456:	8c e2       	ldi	r24, 0x2C	; 44
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	98 a3       	std	Y+32, r25	; 0x20
    245c:	8f 8f       	std	Y+31, r24	; 0x1f
    245e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2460:	98 a1       	ldd	r25, Y+32	; 0x20
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <Lcd4_Write_Char+0x1d4>
    2466:	98 a3       	std	Y+32, r25	; 0x20
    2468:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246a:	89 a1       	ldd	r24, Y+33	; 0x21
    246c:	9a a1       	ldd	r25, Y+34	; 0x22
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	9a a3       	std	Y+34, r25	; 0x22
    2472:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2474:	89 a1       	ldd	r24, Y+33	; 0x21
    2476:	9a a1       	ldd	r25, Y+34	; 0x22
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	69 f7       	brne	.-38     	; 0x2456 <Lcd4_Write_Char+0x1c8>
    247c:	14 c0       	rjmp	.+40     	; 0x24a6 <Lcd4_Write_Char+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247e:	6b a1       	ldd	r22, Y+35	; 0x23
    2480:	7c a1       	ldd	r23, Y+36	; 0x24
    2482:	8d a1       	ldd	r24, Y+37	; 0x25
    2484:	9e a1       	ldd	r25, Y+38	; 0x26
    2486:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9a a3       	std	Y+34, r25	; 0x22
    2490:	89 a3       	std	Y+33, r24	; 0x21
    2492:	89 a1       	ldd	r24, Y+33	; 0x21
    2494:	9a a1       	ldd	r25, Y+34	; 0x22
    2496:	9e 8f       	std	Y+30, r25	; 0x1e
    2498:	8d 8f       	std	Y+29, r24	; 0x1d
    249a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    249c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <Lcd4_Write_Char+0x210>
    24a2:	9e 8f       	std	Y+30, r25	; 0x1e
    24a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd4_Port(temp);
    24a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    24a8:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Lcd4_Port>
	pinChange(EN,1);
    24ac:	8b e1       	ldi	r24, 0x1B	; 27
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	61 e0       	ldi	r22, 0x01	; 1
    24b2:	70 e0       	ldi	r23, 0x00	; 0
    24b4:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a0 e8       	ldi	r26, 0x80	; 128
    24be:	bf e3       	ldi	r27, 0x3F	; 63
    24c0:	89 8f       	std	Y+25, r24	; 0x19
    24c2:	9a 8f       	std	Y+26, r25	; 0x1a
    24c4:	ab 8f       	std	Y+27, r26	; 0x1b
    24c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c8:	69 8d       	ldd	r22, Y+25	; 0x19
    24ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e8       	ldi	r19, 0x80	; 128
    24d4:	4b e3       	ldi	r20, 0x3B	; 59
    24d6:	55 e4       	ldi	r21, 0x45	; 69
    24d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	8d 8b       	std	Y+21, r24	; 0x15
    24e2:	9e 8b       	std	Y+22, r25	; 0x16
    24e4:	af 8b       	std	Y+23, r26	; 0x17
    24e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24e8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ea:	7e 89       	ldd	r23, Y+22	; 0x16
    24ec:	8f 89       	ldd	r24, Y+23	; 0x17
    24ee:	98 8d       	ldd	r25, Y+24	; 0x18
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e8       	ldi	r20, 0x80	; 128
    24f6:	5f e3       	ldi	r21, 0x3F	; 63
    24f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24fc:	88 23       	and	r24, r24
    24fe:	2c f4       	brge	.+10     	; 0x250a <Lcd4_Write_Char+0x27c>
		__ticks = 1;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	9c 8b       	std	Y+20, r25	; 0x14
    2506:	8b 8b       	std	Y+19, r24	; 0x13
    2508:	3f c0       	rjmp	.+126    	; 0x2588 <Lcd4_Write_Char+0x2fa>
	else if (__tmp > 65535)
    250a:	6d 89       	ldd	r22, Y+21	; 0x15
    250c:	7e 89       	ldd	r23, Y+22	; 0x16
    250e:	8f 89       	ldd	r24, Y+23	; 0x17
    2510:	98 8d       	ldd	r25, Y+24	; 0x18
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	3f ef       	ldi	r19, 0xFF	; 255
    2516:	4f e7       	ldi	r20, 0x7F	; 127
    2518:	57 e4       	ldi	r21, 0x47	; 71
    251a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    251e:	18 16       	cp	r1, r24
    2520:	4c f5       	brge	.+82     	; 0x2574 <Lcd4_Write_Char+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2522:	69 8d       	ldd	r22, Y+25	; 0x19
    2524:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2526:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2528:	9c 8d       	ldd	r25, Y+28	; 0x1c
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e2       	ldi	r20, 0x20	; 32
    2530:	51 e4       	ldi	r21, 0x41	; 65
    2532:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	bc 01       	movw	r22, r24
    253c:	cd 01       	movw	r24, r26
    253e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9c 8b       	std	Y+20, r25	; 0x14
    2548:	8b 8b       	std	Y+19, r24	; 0x13
    254a:	0f c0       	rjmp	.+30     	; 0x256a <Lcd4_Write_Char+0x2dc>
    254c:	8c e2       	ldi	r24, 0x2C	; 44
    254e:	91 e0       	ldi	r25, 0x01	; 1
    2550:	9a 8b       	std	Y+18, r25	; 0x12
    2552:	89 8b       	std	Y+17, r24	; 0x11
    2554:	89 89       	ldd	r24, Y+17	; 0x11
    2556:	9a 89       	ldd	r25, Y+18	; 0x12
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <Lcd4_Write_Char+0x2ca>
    255c:	9a 8b       	std	Y+18, r25	; 0x12
    255e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2560:	8b 89       	ldd	r24, Y+19	; 0x13
    2562:	9c 89       	ldd	r25, Y+20	; 0x14
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	9c 8b       	std	Y+20, r25	; 0x14
    2568:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256a:	8b 89       	ldd	r24, Y+19	; 0x13
    256c:	9c 89       	ldd	r25, Y+20	; 0x14
    256e:	00 97       	sbiw	r24, 0x00	; 0
    2570:	69 f7       	brne	.-38     	; 0x254c <Lcd4_Write_Char+0x2be>
    2572:	14 c0       	rjmp	.+40     	; 0x259c <Lcd4_Write_Char+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2574:	6d 89       	ldd	r22, Y+21	; 0x15
    2576:	7e 89       	ldd	r23, Y+22	; 0x16
    2578:	8f 89       	ldd	r24, Y+23	; 0x17
    257a:	98 8d       	ldd	r25, Y+24	; 0x18
    257c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9c 8b       	std	Y+20, r25	; 0x14
    2586:	8b 8b       	std	Y+19, r24	; 0x13
    2588:	8b 89       	ldd	r24, Y+19	; 0x13
    258a:	9c 89       	ldd	r25, Y+20	; 0x14
    258c:	98 8b       	std	Y+16, r25	; 0x10
    258e:	8f 87       	std	Y+15, r24	; 0x0f
    2590:	8f 85       	ldd	r24, Y+15	; 0x0f
    2592:	98 89       	ldd	r25, Y+16	; 0x10
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <Lcd4_Write_Char+0x306>
    2598:	98 8b       	std	Y+16, r25	; 0x10
    259a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	pinChange(EN,0);
    259c:	8b e1       	ldi	r24, 0x1B	; 27
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	70 e0       	ldi	r23, 0x00	; 0
    25a4:	0e 94 9b 05 	call	0xb36	; 0xb36 <pinChange>
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	a0 e8       	ldi	r26, 0x80	; 128
    25ae:	bf e3       	ldi	r27, 0x3F	; 63
    25b0:	8b 87       	std	Y+11, r24	; 0x0b
    25b2:	9c 87       	std	Y+12, r25	; 0x0c
    25b4:	ad 87       	std	Y+13, r26	; 0x0d
    25b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    25bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25be:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e8       	ldi	r19, 0x80	; 128
    25c4:	4b e3       	ldi	r20, 0x3B	; 59
    25c6:	55 e4       	ldi	r21, 0x45	; 69
    25c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	8f 83       	std	Y+7, r24	; 0x07
    25d2:	98 87       	std	Y+8, r25	; 0x08
    25d4:	a9 87       	std	Y+9, r26	; 0x09
    25d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25d8:	6f 81       	ldd	r22, Y+7	; 0x07
    25da:	78 85       	ldd	r23, Y+8	; 0x08
    25dc:	89 85       	ldd	r24, Y+9	; 0x09
    25de:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e8       	ldi	r20, 0x80	; 128
    25e6:	5f e3       	ldi	r21, 0x3F	; 63
    25e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25ec:	88 23       	and	r24, r24
    25ee:	2c f4       	brge	.+10     	; 0x25fa <Lcd4_Write_Char+0x36c>
		__ticks = 1;
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	8d 83       	std	Y+5, r24	; 0x05
    25f8:	3f c0       	rjmp	.+126    	; 0x2678 <Lcd4_Write_Char+0x3ea>
	else if (__tmp > 65535)
    25fa:	6f 81       	ldd	r22, Y+7	; 0x07
    25fc:	78 85       	ldd	r23, Y+8	; 0x08
    25fe:	89 85       	ldd	r24, Y+9	; 0x09
    2600:	9a 85       	ldd	r25, Y+10	; 0x0a
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	3f ef       	ldi	r19, 0xFF	; 255
    2606:	4f e7       	ldi	r20, 0x7F	; 127
    2608:	57 e4       	ldi	r21, 0x47	; 71
    260a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    260e:	18 16       	cp	r1, r24
    2610:	4c f5       	brge	.+82     	; 0x2664 <Lcd4_Write_Char+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2612:	6b 85       	ldd	r22, Y+11	; 0x0b
    2614:	7c 85       	ldd	r23, Y+12	; 0x0c
    2616:	8d 85       	ldd	r24, Y+13	; 0x0d
    2618:	9e 85       	ldd	r25, Y+14	; 0x0e
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e2       	ldi	r20, 0x20	; 32
    2620:	51 e4       	ldi	r21, 0x41	; 65
    2622:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	bc 01       	movw	r22, r24
    262c:	cd 01       	movw	r24, r26
    262e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	8d 83       	std	Y+5, r24	; 0x05
    263a:	0f c0       	rjmp	.+30     	; 0x265a <Lcd4_Write_Char+0x3cc>
    263c:	8c e2       	ldi	r24, 0x2C	; 44
    263e:	91 e0       	ldi	r25, 0x01	; 1
    2640:	9c 83       	std	Y+4, r25	; 0x04
    2642:	8b 83       	std	Y+3, r24	; 0x03
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	9c 81       	ldd	r25, Y+4	; 0x04
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <Lcd4_Write_Char+0x3ba>
    264c:	9c 83       	std	Y+4, r25	; 0x04
    264e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265a:	8d 81       	ldd	r24, Y+5	; 0x05
    265c:	9e 81       	ldd	r25, Y+6	; 0x06
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	69 f7       	brne	.-38     	; 0x263c <Lcd4_Write_Char+0x3ae>
    2662:	14 c0       	rjmp	.+40     	; 0x268c <Lcd4_Write_Char+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2664:	6f 81       	ldd	r22, Y+7	; 0x07
    2666:	78 85       	ldd	r23, Y+8	; 0x08
    2668:	89 85       	ldd	r24, Y+9	; 0x09
    266a:	9a 85       	ldd	r25, Y+10	; 0x0a
    266c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9e 83       	std	Y+6, r25	; 0x06
    2676:	8d 83       	std	Y+5, r24	; 0x05
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	9a 83       	std	Y+2, r25	; 0x02
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	9a 81       	ldd	r25, Y+2	; 0x02
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	f1 f7       	brne	.-4      	; 0x2684 <Lcd4_Write_Char+0x3f6>
    2688:	9a 83       	std	Y+2, r25	; 0x02
    268a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    268c:	eb 96       	adiw	r28, 0x3b	; 59
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <Lcd4_Write_String+0x6>
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <Lcd4_Write_String+0x8>
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	9c 83       	std	Y+4, r25	; 0x04
    26ac:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;a[i]!='\0';i++)
    26ae:	1a 82       	std	Y+2, r1	; 0x02
    26b0:	19 82       	std	Y+1, r1	; 0x01
    26b2:	0f c0       	rjmp	.+30     	; 0x26d2 <Lcd4_Write_String+0x34>
	Lcd4_Write_Char(a[i]);
    26b4:	29 81       	ldd	r18, Y+1	; 0x01
    26b6:	3a 81       	ldd	r19, Y+2	; 0x02
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	9c 81       	ldd	r25, Y+4	; 0x04
    26bc:	fc 01       	movw	r30, r24
    26be:	e2 0f       	add	r30, r18
    26c0:	f3 1f       	adc	r31, r19
    26c2:	80 81       	ld	r24, Z
    26c4:	0e 94 47 11 	call	0x228e	; 0x228e <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	01 96       	adiw	r24, 0x01	; 1
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	29 81       	ldd	r18, Y+1	; 0x01
    26d4:	3a 81       	ldd	r19, Y+2	; 0x02
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	fc 01       	movw	r30, r24
    26dc:	e2 0f       	add	r30, r18
    26de:	f3 1f       	adc	r31, r19
    26e0:	80 81       	ld	r24, Z
    26e2:	88 23       	and	r24, r24
    26e4:	39 f7       	brne	.-50     	; 0x26b4 <Lcd4_Write_String+0x16>
	Lcd4_Write_Char(a[i]);
}
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <Lcd4_Shift_Right>:

void Lcd4_Shift_Right()
{
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
	Lcd4_Cmd(0x01);
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
    2702:	8c e0       	ldi	r24, 0x0C	; 12
    2704:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
}
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <Lcd4_Shift_Left>:

void Lcd4_Shift_Left()
{
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
	Lcd4_Cmd(0x01);
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
    271c:	88 e0       	ldi	r24, 0x08	; 8
    271e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Lcd4_Cmd>
}
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"
int main(void)
{
    2728:	0f 93       	push	r16
    272a:	1f 93       	push	r17
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	c6 55       	subi	r28, 0x56	; 86
    2736:	d0 40       	sbci	r29, 0x00	; 0
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    DDRD = 0xFF;
    2742:	e1 e3       	ldi	r30, 0x31	; 49
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	8f ef       	ldi	r24, 0xFF	; 255
    2748:	80 83       	st	Z, r24
	DDRC = 0xFF;
    274a:	e4 e3       	ldi	r30, 0x34	; 52
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	8f ef       	ldi	r24, 0xFF	; 255
    2750:	80 83       	st	Z, r24
	int i;
	Lcd8_Init();
    2752:	0e 94 c7 0a 	call	0x158e	; 0x158e <Lcd8_Init>
	while(1)
	{
		Lcd8_Set_Cursor(1,1);
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	61 e0       	ldi	r22, 0x01	; 1
    275a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Lcd8_Set_Cursor>
		Lcd8_Write_String("Abdullah Abdelhakeem Amer IMT ");
    275e:	80 e6       	ldi	r24, 0x60	; 96
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <Lcd8_Write_String>
		for(i=0;i<15;i++)
    2766:	fe 01       	movw	r30, r28
    2768:	eb 5a       	subi	r30, 0xAB	; 171
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	11 82       	std	Z+1, r1	; 0x01
    276e:	10 82       	st	Z, r1
    2770:	c1 c0       	rjmp	.+386    	; 0x28f4 <main+0x1cc>
    2772:	fe 01       	movw	r30, r28
    2774:	ef 5a       	subi	r30, 0xAF	; 175
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	aa ef       	ldi	r26, 0xFA	; 250
    277e:	b3 e4       	ldi	r27, 0x43	; 67
    2780:	80 83       	st	Z, r24
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	a2 83       	std	Z+2, r26	; 0x02
    2786:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2788:	8e 01       	movw	r16, r28
    278a:	03 5b       	subi	r16, 0xB3	; 179
    278c:	1f 4f       	sbci	r17, 0xFF	; 255
    278e:	fe 01       	movw	r30, r28
    2790:	ef 5a       	subi	r30, 0xAF	; 175
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	60 81       	ld	r22, Z
    2796:	71 81       	ldd	r23, Z+1	; 0x01
    2798:	82 81       	ldd	r24, Z+2	; 0x02
    279a:	93 81       	ldd	r25, Z+3	; 0x03
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e8       	ldi	r19, 0x80	; 128
    27a0:	4b e3       	ldi	r20, 0x3B	; 59
    27a2:	55 e4       	ldi	r21, 0x45	; 69
    27a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	f8 01       	movw	r30, r16
    27ae:	80 83       	st	Z, r24
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	a2 83       	std	Z+2, r26	; 0x02
    27b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27b6:	fe 01       	movw	r30, r28
    27b8:	e3 5b       	subi	r30, 0xB3	; 179
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	60 81       	ld	r22, Z
    27be:	71 81       	ldd	r23, Z+1	; 0x01
    27c0:	82 81       	ldd	r24, Z+2	; 0x02
    27c2:	93 81       	ldd	r25, Z+3	; 0x03
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e8       	ldi	r20, 0x80	; 128
    27ca:	5f e3       	ldi	r21, 0x3F	; 63
    27cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27d0:	88 23       	and	r24, r24
    27d2:	44 f4       	brge	.+16     	; 0x27e4 <main+0xbc>
		__ticks = 1;
    27d4:	fe 01       	movw	r30, r28
    27d6:	e5 5b       	subi	r30, 0xB5	; 181
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
    27e2:	64 c0       	rjmp	.+200    	; 0x28ac <main+0x184>
	else if (__tmp > 65535)
    27e4:	fe 01       	movw	r30, r28
    27e6:	e3 5b       	subi	r30, 0xB3	; 179
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	60 81       	ld	r22, Z
    27ec:	71 81       	ldd	r23, Z+1	; 0x01
    27ee:	82 81       	ldd	r24, Z+2	; 0x02
    27f0:	93 81       	ldd	r25, Z+3	; 0x03
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	3f ef       	ldi	r19, 0xFF	; 255
    27f6:	4f e7       	ldi	r20, 0x7F	; 127
    27f8:	57 e4       	ldi	r21, 0x47	; 71
    27fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27fe:	18 16       	cp	r1, r24
    2800:	0c f0       	brlt	.+2      	; 0x2804 <main+0xdc>
    2802:	43 c0       	rjmp	.+134    	; 0x288a <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2804:	fe 01       	movw	r30, r28
    2806:	ef 5a       	subi	r30, 0xAF	; 175
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e2       	ldi	r20, 0x20	; 32
    2818:	51 e4       	ldi	r21, 0x41	; 65
    281a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	8e 01       	movw	r16, r28
    2824:	05 5b       	subi	r16, 0xB5	; 181
    2826:	1f 4f       	sbci	r17, 0xFF	; 255
    2828:	bc 01       	movw	r22, r24
    282a:	cd 01       	movw	r24, r26
    282c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	f8 01       	movw	r30, r16
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	80 83       	st	Z, r24
    283a:	1f c0       	rjmp	.+62     	; 0x287a <main+0x152>
    283c:	fe 01       	movw	r30, r28
    283e:	e7 5b       	subi	r30, 0xB7	; 183
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	8c e2       	ldi	r24, 0x2C	; 44
    2844:	91 e0       	ldi	r25, 0x01	; 1
    2846:	91 83       	std	Z+1, r25	; 0x01
    2848:	80 83       	st	Z, r24
    284a:	fe 01       	movw	r30, r28
    284c:	e7 5b       	subi	r30, 0xB7	; 183
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 81       	ld	r24, Z
    2852:	91 81       	ldd	r25, Z+1	; 0x01
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <main+0x12c>
    2858:	fe 01       	movw	r30, r28
    285a:	e7 5b       	subi	r30, 0xB7	; 183
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2862:	de 01       	movw	r26, r28
    2864:	a5 5b       	subi	r26, 0xB5	; 181
    2866:	bf 4f       	sbci	r27, 0xFF	; 255
    2868:	fe 01       	movw	r30, r28
    286a:	e5 5b       	subi	r30, 0xB5	; 181
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	91 81       	ldd	r25, Z+1	; 0x01
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	11 96       	adiw	r26, 0x01	; 1
    2876:	9c 93       	st	X, r25
    2878:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287a:	fe 01       	movw	r30, r28
    287c:	e5 5b       	subi	r30, 0xB5	; 181
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	80 81       	ld	r24, Z
    2882:	91 81       	ldd	r25, Z+1	; 0x01
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	d1 f6       	brne	.-76     	; 0x283c <main+0x114>
    2888:	27 c0       	rjmp	.+78     	; 0x28d8 <main+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288a:	8e 01       	movw	r16, r28
    288c:	05 5b       	subi	r16, 0xB5	; 181
    288e:	1f 4f       	sbci	r17, 0xFF	; 255
    2890:	fe 01       	movw	r30, r28
    2892:	e3 5b       	subi	r30, 0xB3	; 179
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	60 81       	ld	r22, Z
    2898:	71 81       	ldd	r23, Z+1	; 0x01
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	93 81       	ldd	r25, Z+3	; 0x03
    289e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	f8 01       	movw	r30, r16
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
    28ac:	de 01       	movw	r26, r28
    28ae:	a9 5b       	subi	r26, 0xB9	; 185
    28b0:	bf 4f       	sbci	r27, 0xFF	; 255
    28b2:	fe 01       	movw	r30, r28
    28b4:	e5 5b       	subi	r30, 0xB5	; 181
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	80 81       	ld	r24, Z
    28ba:	91 81       	ldd	r25, Z+1	; 0x01
    28bc:	8d 93       	st	X+, r24
    28be:	9c 93       	st	X, r25
    28c0:	fe 01       	movw	r30, r28
    28c2:	e9 5b       	subi	r30, 0xB9	; 185
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	80 81       	ld	r24, Z
    28c8:	91 81       	ldd	r25, Z+1	; 0x01
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <main+0x1a2>
    28ce:	fe 01       	movw	r30, r28
    28d0:	e9 5b       	subi	r30, 0xB9	; 185
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
		{
			_delay_ms(500);
			Lcd8_Shift_Left();
    28d8:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <Lcd8_Shift_Left>
	Lcd8_Init();
	while(1)
	{
		Lcd8_Set_Cursor(1,1);
		Lcd8_Write_String("Abdullah Abdelhakeem Amer IMT ");
		for(i=0;i<15;i++)
    28dc:	de 01       	movw	r26, r28
    28de:	ab 5a       	subi	r26, 0xAB	; 171
    28e0:	bf 4f       	sbci	r27, 0xFF	; 255
    28e2:	fe 01       	movw	r30, r28
    28e4:	eb 5a       	subi	r30, 0xAB	; 171
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	11 96       	adiw	r26, 0x01	; 1
    28f0:	9c 93       	st	X, r25
    28f2:	8e 93       	st	-X, r24
    28f4:	fe 01       	movw	r30, r28
    28f6:	eb 5a       	subi	r30, 0xAB	; 171
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	80 81       	ld	r24, Z
    28fc:	91 81       	ldd	r25, Z+1	; 0x01
    28fe:	8f 30       	cpi	r24, 0x0F	; 15
    2900:	91 05       	cpc	r25, r1
    2902:	0c f4       	brge	.+2      	; 0x2906 <main+0x1de>
    2904:	36 cf       	rjmp	.-404    	; 0x2772 <main+0x4a>
		{
			_delay_ms(500);
			Lcd8_Shift_Left();
		}
		for(i=0;i<15;i++)
    2906:	fe 01       	movw	r30, r28
    2908:	eb 5a       	subi	r30, 0xAB	; 171
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	11 82       	std	Z+1, r1	; 0x01
    290e:	10 82       	st	Z, r1
    2910:	93 c0       	rjmp	.+294    	; 0x2a38 <main+0x310>
    2912:	fe 01       	movw	r30, r28
    2914:	ed 5b       	subi	r30, 0xBD	; 189
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	aa ef       	ldi	r26, 0xFA	; 250
    291e:	b3 e4       	ldi	r27, 0x43	; 67
    2920:	80 83       	st	Z, r24
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	a2 83       	std	Z+2, r26	; 0x02
    2926:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2928:	8e 01       	movw	r16, r28
    292a:	01 5c       	subi	r16, 0xC1	; 193
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	fe 01       	movw	r30, r28
    2930:	ed 5b       	subi	r30, 0xBD	; 189
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e8       	ldi	r19, 0x80	; 128
    2940:	4b e3       	ldi	r20, 0x3B	; 59
    2942:	55 e4       	ldi	r21, 0x45	; 69
    2944:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	f8 01       	movw	r30, r16
    294e:	80 83       	st	Z, r24
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	a2 83       	std	Z+2, r26	; 0x02
    2954:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2956:	fe 01       	movw	r30, r28
    2958:	ff 96       	adiw	r30, 0x3f	; 63
    295a:	60 81       	ld	r22, Z
    295c:	71 81       	ldd	r23, Z+1	; 0x01
    295e:	82 81       	ldd	r24, Z+2	; 0x02
    2960:	93 81       	ldd	r25, Z+3	; 0x03
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e8       	ldi	r20, 0x80	; 128
    2968:	5f e3       	ldi	r21, 0x3F	; 63
    296a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    296e:	88 23       	and	r24, r24
    2970:	2c f4       	brge	.+10     	; 0x297c <main+0x254>
		__ticks = 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9e af       	std	Y+62, r25	; 0x3e
    2978:	8d af       	std	Y+61, r24	; 0x3d
    297a:	46 c0       	rjmp	.+140    	; 0x2a08 <main+0x2e0>
	else if (__tmp > 65535)
    297c:	fe 01       	movw	r30, r28
    297e:	ff 96       	adiw	r30, 0x3f	; 63
    2980:	60 81       	ld	r22, Z
    2982:	71 81       	ldd	r23, Z+1	; 0x01
    2984:	82 81       	ldd	r24, Z+2	; 0x02
    2986:	93 81       	ldd	r25, Z+3	; 0x03
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	3f ef       	ldi	r19, 0xFF	; 255
    298c:	4f e7       	ldi	r20, 0x7F	; 127
    298e:	57 e4       	ldi	r21, 0x47	; 71
    2990:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2994:	18 16       	cp	r1, r24
    2996:	64 f5       	brge	.+88     	; 0x29f0 <main+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2998:	fe 01       	movw	r30, r28
    299a:	ed 5b       	subi	r30, 0xBD	; 189
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	60 81       	ld	r22, Z
    29a0:	71 81       	ldd	r23, Z+1	; 0x01
    29a2:	82 81       	ldd	r24, Z+2	; 0x02
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e2       	ldi	r20, 0x20	; 32
    29ac:	51 e4       	ldi	r21, 0x41	; 65
    29ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9e af       	std	Y+62, r25	; 0x3e
    29c4:	8d af       	std	Y+61, r24	; 0x3d
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <main+0x2be>
    29c8:	8c e2       	ldi	r24, 0x2C	; 44
    29ca:	91 e0       	ldi	r25, 0x01	; 1
    29cc:	9c af       	std	Y+60, r25	; 0x3c
    29ce:	8b af       	std	Y+59, r24	; 0x3b
    29d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    29d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <main+0x2ac>
    29d8:	9c af       	std	Y+60, r25	; 0x3c
    29da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    29de:	9e ad       	ldd	r25, Y+62	; 0x3e
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	9e af       	std	Y+62, r25	; 0x3e
    29e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	69 f7       	brne	.-38     	; 0x29c8 <main+0x2a0>
    29ee:	16 c0       	rjmp	.+44     	; 0x2a1c <main+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	fe 01       	movw	r30, r28
    29f2:	ff 96       	adiw	r30, 0x3f	; 63
    29f4:	60 81       	ld	r22, Z
    29f6:	71 81       	ldd	r23, Z+1	; 0x01
    29f8:	82 81       	ldd	r24, Z+2	; 0x02
    29fa:	93 81       	ldd	r25, Z+3	; 0x03
    29fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	9e af       	std	Y+62, r25	; 0x3e
    2a06:	8d af       	std	Y+61, r24	; 0x3d
    2a08:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a0c:	9a af       	std	Y+58, r25	; 0x3a
    2a0e:	89 af       	std	Y+57, r24	; 0x39
    2a10:	89 ad       	ldd	r24, Y+57	; 0x39
    2a12:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <main+0x2ec>
    2a18:	9a af       	std	Y+58, r25	; 0x3a
    2a1a:	89 af       	std	Y+57, r24	; 0x39
		{
			_delay_ms(500);
			Lcd8_Shift_Right();
    2a1c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd8_Shift_Right>
		for(i=0;i<15;i++)
		{
			_delay_ms(500);
			Lcd8_Shift_Left();
		}
		for(i=0;i<15;i++)
    2a20:	de 01       	movw	r26, r28
    2a22:	ab 5a       	subi	r26, 0xAB	; 171
    2a24:	bf 4f       	sbci	r27, 0xFF	; 255
    2a26:	fe 01       	movw	r30, r28
    2a28:	eb 5a       	subi	r30, 0xAB	; 171
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	91 81       	ldd	r25, Z+1	; 0x01
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	11 96       	adiw	r26, 0x01	; 1
    2a34:	9c 93       	st	X, r25
    2a36:	8e 93       	st	-X, r24
    2a38:	fe 01       	movw	r30, r28
    2a3a:	eb 5a       	subi	r30, 0xAB	; 171
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	80 81       	ld	r24, Z
    2a40:	91 81       	ldd	r25, Z+1	; 0x01
    2a42:	8f 30       	cpi	r24, 0x0F	; 15
    2a44:	91 05       	cpc	r25, r1
    2a46:	0c f4       	brge	.+2      	; 0x2a4a <main+0x322>
    2a48:	64 cf       	rjmp	.-312    	; 0x2912 <main+0x1ea>
		{
			_delay_ms(500);
			Lcd8_Shift_Right();
		}
		Lcd8_Clear();
    2a4a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Lcd8_Clear>
		Lcd8_Write_Char('E');
    2a4e:	85 e4       	ldi	r24, 0x45	; 69
    2a50:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('M');
    2a54:	8d e4       	ldi	r24, 0x4D	; 77
    2a56:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('B');
    2a5a:	82 e4       	ldi	r24, 0x42	; 66
    2a5c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('E');
    2a60:	85 e4       	ldi	r24, 0x45	; 69
    2a62:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('D');
    2a66:	84 e4       	ldi	r24, 0x44	; 68
    2a68:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('D');
    2a6c:	84 e4       	ldi	r24, 0x44	; 68
    2a6e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('E');
    2a72:	85 e4       	ldi	r24, 0x45	; 69
    2a74:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('D');
    2a78:	84 e4       	ldi	r24, 0x44	; 68
    2a7a:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('_');
    2a7e:	8f e5       	ldi	r24, 0x5F	; 95
    2a80:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('S');
    2a84:	83 e5       	ldi	r24, 0x53	; 83
    2a86:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('Y');
    2a8a:	89 e5       	ldi	r24, 0x59	; 89
    2a8c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('S');
    2a90:	83 e5       	ldi	r24, 0x53	; 83
    2a92:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('T');
    2a96:	84 e5       	ldi	r24, 0x54	; 84
    2a98:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('E');
    2a9c:	85 e4       	ldi	r24, 0x45	; 69
    2a9e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
		Lcd8_Write_Char('M');
    2aa2:	8d e4       	ldi	r24, 0x4D	; 77
    2aa4:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Lcd8_Write_Char>
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	aa ef       	ldi	r26, 0xFA	; 250
    2aae:	b4 e4       	ldi	r27, 0x44	; 68
    2ab0:	8d ab       	std	Y+53, r24	; 0x35
    2ab2:	9e ab       	std	Y+54, r25	; 0x36
    2ab4:	af ab       	std	Y+55, r26	; 0x37
    2ab6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab8:	6d a9       	ldd	r22, Y+53	; 0x35
    2aba:	7e a9       	ldd	r23, Y+54	; 0x36
    2abc:	8f a9       	ldd	r24, Y+55	; 0x37
    2abe:	98 ad       	ldd	r25, Y+56	; 0x38
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e8       	ldi	r19, 0x80	; 128
    2ac4:	4b e3       	ldi	r20, 0x3B	; 59
    2ac6:	55 e4       	ldi	r21, 0x45	; 69
    2ac8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	89 ab       	std	Y+49, r24	; 0x31
    2ad2:	9a ab       	std	Y+50, r25	; 0x32
    2ad4:	ab ab       	std	Y+51, r26	; 0x33
    2ad6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ad8:	69 a9       	ldd	r22, Y+49	; 0x31
    2ada:	7a a9       	ldd	r23, Y+50	; 0x32
    2adc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ade:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e8       	ldi	r20, 0x80	; 128
    2ae6:	5f e3       	ldi	r21, 0x3F	; 63
    2ae8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2aec:	88 23       	and	r24, r24
    2aee:	2c f4       	brge	.+10     	; 0x2afa <main+0x3d2>
		__ticks = 1;
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	98 ab       	std	Y+48, r25	; 0x30
    2af6:	8f a7       	std	Y+47, r24	; 0x2f
    2af8:	3f c0       	rjmp	.+126    	; 0x2b78 <main+0x450>
	else if (__tmp > 65535)
    2afa:	69 a9       	ldd	r22, Y+49	; 0x31
    2afc:	7a a9       	ldd	r23, Y+50	; 0x32
    2afe:	8b a9       	ldd	r24, Y+51	; 0x33
    2b00:	9c a9       	ldd	r25, Y+52	; 0x34
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	3f ef       	ldi	r19, 0xFF	; 255
    2b06:	4f e7       	ldi	r20, 0x7F	; 127
    2b08:	57 e4       	ldi	r21, 0x47	; 71
    2b0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b0e:	18 16       	cp	r1, r24
    2b10:	4c f5       	brge	.+82     	; 0x2b64 <main+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b12:	6d a9       	ldd	r22, Y+53	; 0x35
    2b14:	7e a9       	ldd	r23, Y+54	; 0x36
    2b16:	8f a9       	ldd	r24, Y+55	; 0x37
    2b18:	98 ad       	ldd	r25, Y+56	; 0x38
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e2       	ldi	r20, 0x20	; 32
    2b20:	51 e4       	ldi	r21, 0x41	; 65
    2b22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	98 ab       	std	Y+48, r25	; 0x30
    2b38:	8f a7       	std	Y+47, r24	; 0x2f
    2b3a:	0f c0       	rjmp	.+30     	; 0x2b5a <main+0x432>
    2b3c:	8c e2       	ldi	r24, 0x2C	; 44
    2b3e:	91 e0       	ldi	r25, 0x01	; 1
    2b40:	9e a7       	std	Y+46, r25	; 0x2e
    2b42:	8d a7       	std	Y+45, r24	; 0x2d
    2b44:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b46:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <main+0x420>
    2b4c:	9e a7       	std	Y+46, r25	; 0x2e
    2b4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b52:	98 a9       	ldd	r25, Y+48	; 0x30
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	98 ab       	std	Y+48, r25	; 0x30
    2b58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	69 f7       	brne	.-38     	; 0x2b3c <main+0x414>
    2b62:	14 c0       	rjmp	.+40     	; 0x2b8c <main+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b64:	69 a9       	ldd	r22, Y+49	; 0x31
    2b66:	7a a9       	ldd	r23, Y+50	; 0x32
    2b68:	8b a9       	ldd	r24, Y+51	; 0x33
    2b6a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	98 ab       	std	Y+48, r25	; 0x30
    2b76:	8f a7       	std	Y+47, r24	; 0x2f
    2b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b7c:	9c a7       	std	Y+44, r25	; 0x2c
    2b7e:	8b a7       	std	Y+43, r24	; 0x2b
    2b80:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b82:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <main+0x45c>
    2b88:	9c a7       	std	Y+44, r25	; 0x2c
    2b8a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2000);

		Lcd8_Set_Cursor(2,1);
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	61 e0       	ldi	r22, 0x01	; 1
    2b90:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Lcd8_Set_Cursor>
		Lcd8_Write_String("N290618EB->Eng/Omar ");
    2b94:	8f e7       	ldi	r24, 0x7F	; 127
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <Lcd8_Write_String>
		for(i=0;i<15;i++)
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	eb 5a       	subi	r30, 0xAB	; 171
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	11 82       	std	Z+1, r1	; 0x01
    2ba4:	10 82       	st	Z, r1
    2ba6:	80 c0       	rjmp	.+256    	; 0x2ca8 <main+0x580>
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	aa ef       	ldi	r26, 0xFA	; 250
    2bae:	b3 e4       	ldi	r27, 0x43	; 67
    2bb0:	8f a3       	std	Y+39, r24	; 0x27
    2bb2:	98 a7       	std	Y+40, r25	; 0x28
    2bb4:	a9 a7       	std	Y+41, r26	; 0x29
    2bb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb8:	6f a1       	ldd	r22, Y+39	; 0x27
    2bba:	78 a5       	ldd	r23, Y+40	; 0x28
    2bbc:	89 a5       	ldd	r24, Y+41	; 0x29
    2bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e8       	ldi	r19, 0x80	; 128
    2bc4:	4b e3       	ldi	r20, 0x3B	; 59
    2bc6:	55 e4       	ldi	r21, 0x45	; 69
    2bc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	8b a3       	std	Y+35, r24	; 0x23
    2bd2:	9c a3       	std	Y+36, r25	; 0x24
    2bd4:	ad a3       	std	Y+37, r26	; 0x25
    2bd6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bd8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bda:	7c a1       	ldd	r23, Y+36	; 0x24
    2bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    2bde:	9e a1       	ldd	r25, Y+38	; 0x26
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e8       	ldi	r20, 0x80	; 128
    2be6:	5f e3       	ldi	r21, 0x3F	; 63
    2be8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bec:	88 23       	and	r24, r24
    2bee:	2c f4       	brge	.+10     	; 0x2bfa <main+0x4d2>
		__ticks = 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9a a3       	std	Y+34, r25	; 0x22
    2bf6:	89 a3       	std	Y+33, r24	; 0x21
    2bf8:	3f c0       	rjmp	.+126    	; 0x2c78 <main+0x550>
	else if (__tmp > 65535)
    2bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    2bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    2bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    2c00:	9e a1       	ldd	r25, Y+38	; 0x26
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	3f ef       	ldi	r19, 0xFF	; 255
    2c06:	4f e7       	ldi	r20, 0x7F	; 127
    2c08:	57 e4       	ldi	r21, 0x47	; 71
    2c0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c0e:	18 16       	cp	r1, r24
    2c10:	4c f5       	brge	.+82     	; 0x2c64 <main+0x53c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c12:	6f a1       	ldd	r22, Y+39	; 0x27
    2c14:	78 a5       	ldd	r23, Y+40	; 0x28
    2c16:	89 a5       	ldd	r24, Y+41	; 0x29
    2c18:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e2       	ldi	r20, 0x20	; 32
    2c20:	51 e4       	ldi	r21, 0x41	; 65
    2c22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9a a3       	std	Y+34, r25	; 0x22
    2c38:	89 a3       	std	Y+33, r24	; 0x21
    2c3a:	0f c0       	rjmp	.+30     	; 0x2c5a <main+0x532>
    2c3c:	8c e2       	ldi	r24, 0x2C	; 44
    2c3e:	91 e0       	ldi	r25, 0x01	; 1
    2c40:	98 a3       	std	Y+32, r25	; 0x20
    2c42:	8f 8f       	std	Y+31, r24	; 0x1f
    2c44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c46:	98 a1       	ldd	r25, Y+32	; 0x20
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <main+0x520>
    2c4c:	98 a3       	std	Y+32, r25	; 0x20
    2c4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c50:	89 a1       	ldd	r24, Y+33	; 0x21
    2c52:	9a a1       	ldd	r25, Y+34	; 0x22
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	9a a3       	std	Y+34, r25	; 0x22
    2c58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	69 f7       	brne	.-38     	; 0x2c3c <main+0x514>
    2c62:	14 c0       	rjmp	.+40     	; 0x2c8c <main+0x564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c64:	6b a1       	ldd	r22, Y+35	; 0x23
    2c66:	7c a1       	ldd	r23, Y+36	; 0x24
    2c68:	8d a1       	ldd	r24, Y+37	; 0x25
    2c6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	9a a3       	std	Y+34, r25	; 0x22
    2c76:	89 a3       	std	Y+33, r24	; 0x21
    2c78:	89 a1       	ldd	r24, Y+33	; 0x21
    2c7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c7c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c7e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <main+0x55c>
    2c88:	9e 8f       	std	Y+30, r25	; 0x1e
    2c8a:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(500);
			Lcd8_Shift_Left();
    2c8c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <Lcd8_Shift_Left>
		Lcd8_Write_Char('M');
		_delay_ms(2000);

		Lcd8_Set_Cursor(2,1);
		Lcd8_Write_String("N290618EB->Eng/Omar ");
		for(i=0;i<15;i++)
    2c90:	de 01       	movw	r26, r28
    2c92:	ab 5a       	subi	r26, 0xAB	; 171
    2c94:	bf 4f       	sbci	r27, 0xFF	; 255
    2c96:	fe 01       	movw	r30, r28
    2c98:	eb 5a       	subi	r30, 0xAB	; 171
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	80 81       	ld	r24, Z
    2c9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ca0:	01 96       	adiw	r24, 0x01	; 1
    2ca2:	11 96       	adiw	r26, 0x01	; 1
    2ca4:	9c 93       	st	X, r25
    2ca6:	8e 93       	st	-X, r24
    2ca8:	fe 01       	movw	r30, r28
    2caa:	eb 5a       	subi	r30, 0xAB	; 171
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	91 81       	ldd	r25, Z+1	; 0x01
    2cb2:	8f 30       	cpi	r24, 0x0F	; 15
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	0c f4       	brge	.+2      	; 0x2cba <main+0x592>
    2cb8:	77 cf       	rjmp	.-274    	; 0x2ba8 <main+0x480>
		{
			_delay_ms(500);
			Lcd8_Shift_Left();
		}
		for(i=0;i<15;i++)
    2cba:	fe 01       	movw	r30, r28
    2cbc:	eb 5a       	subi	r30, 0xAB	; 171
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	11 82       	std	Z+1, r1	; 0x01
    2cc2:	10 82       	st	Z, r1
    2cc4:	80 c0       	rjmp	.+256    	; 0x2dc6 <main+0x69e>
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	aa ef       	ldi	r26, 0xFA	; 250
    2ccc:	b3 e4       	ldi	r27, 0x43	; 67
    2cce:	89 8f       	std	Y+25, r24	; 0x19
    2cd0:	9a 8f       	std	Y+26, r25	; 0x1a
    2cd2:	ab 8f       	std	Y+27, r26	; 0x1b
    2cd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd6:	69 8d       	ldd	r22, Y+25	; 0x19
    2cd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e8       	ldi	r19, 0x80	; 128
    2ce2:	4b e3       	ldi	r20, 0x3B	; 59
    2ce4:	55 e4       	ldi	r21, 0x45	; 69
    2ce6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	8d 8b       	std	Y+21, r24	; 0x15
    2cf0:	9e 8b       	std	Y+22, r25	; 0x16
    2cf2:	af 8b       	std	Y+23, r26	; 0x17
    2cf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e8       	ldi	r20, 0x80	; 128
    2d04:	5f e3       	ldi	r21, 0x3F	; 63
    2d06:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d0a:	88 23       	and	r24, r24
    2d0c:	2c f4       	brge	.+10     	; 0x2d18 <main+0x5f0>
		__ticks = 1;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	9c 8b       	std	Y+20, r25	; 0x14
    2d14:	8b 8b       	std	Y+19, r24	; 0x13
    2d16:	3f c0       	rjmp	.+126    	; 0x2d96 <main+0x66e>
	else if (__tmp > 65535)
    2d18:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	3f ef       	ldi	r19, 0xFF	; 255
    2d24:	4f e7       	ldi	r20, 0x7F	; 127
    2d26:	57 e4       	ldi	r21, 0x47	; 71
    2d28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d2c:	18 16       	cp	r1, r24
    2d2e:	4c f5       	brge	.+82     	; 0x2d82 <main+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d30:	69 8d       	ldd	r22, Y+25	; 0x19
    2d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e2       	ldi	r20, 0x20	; 32
    2d3e:	51 e4       	ldi	r21, 0x41	; 65
    2d40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	bc 01       	movw	r22, r24
    2d4a:	cd 01       	movw	r24, r26
    2d4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	9c 8b       	std	Y+20, r25	; 0x14
    2d56:	8b 8b       	std	Y+19, r24	; 0x13
    2d58:	0f c0       	rjmp	.+30     	; 0x2d78 <main+0x650>
    2d5a:	8c e2       	ldi	r24, 0x2C	; 44
    2d5c:	91 e0       	ldi	r25, 0x01	; 1
    2d5e:	9a 8b       	std	Y+18, r25	; 0x12
    2d60:	89 8b       	std	Y+17, r24	; 0x11
    2d62:	89 89       	ldd	r24, Y+17	; 0x11
    2d64:	9a 89       	ldd	r25, Y+18	; 0x12
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <main+0x63e>
    2d6a:	9a 8b       	std	Y+18, r25	; 0x12
    2d6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d70:	9c 89       	ldd	r25, Y+20	; 0x14
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	9c 8b       	std	Y+20, r25	; 0x14
    2d76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d78:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	69 f7       	brne	.-38     	; 0x2d5a <main+0x632>
    2d80:	14 c0       	rjmp	.+40     	; 0x2daa <main+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d82:	6d 89       	ldd	r22, Y+21	; 0x15
    2d84:	7e 89       	ldd	r23, Y+22	; 0x16
    2d86:	8f 89       	ldd	r24, Y+23	; 0x17
    2d88:	98 8d       	ldd	r25, Y+24	; 0x18
    2d8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	9c 8b       	std	Y+20, r25	; 0x14
    2d94:	8b 8b       	std	Y+19, r24	; 0x13
    2d96:	8b 89       	ldd	r24, Y+19	; 0x13
    2d98:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9a:	98 8b       	std	Y+16, r25	; 0x10
    2d9c:	8f 87       	std	Y+15, r24	; 0x0f
    2d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da0:	98 89       	ldd	r25, Y+16	; 0x10
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <main+0x67a>
    2da6:	98 8b       	std	Y+16, r25	; 0x10
    2da8:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(500);
			Lcd8_Shift_Right();
    2daa:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Lcd8_Shift_Right>
		for(i=0;i<15;i++)
		{
			_delay_ms(500);
			Lcd8_Shift_Left();
		}
		for(i=0;i<15;i++)
    2dae:	de 01       	movw	r26, r28
    2db0:	ab 5a       	subi	r26, 0xAB	; 171
    2db2:	bf 4f       	sbci	r27, 0xFF	; 255
    2db4:	fe 01       	movw	r30, r28
    2db6:	eb 5a       	subi	r30, 0xAB	; 171
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	80 81       	ld	r24, Z
    2dbc:	91 81       	ldd	r25, Z+1	; 0x01
    2dbe:	01 96       	adiw	r24, 0x01	; 1
    2dc0:	11 96       	adiw	r26, 0x01	; 1
    2dc2:	9c 93       	st	X, r25
    2dc4:	8e 93       	st	-X, r24
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	eb 5a       	subi	r30, 0xAB	; 171
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	80 81       	ld	r24, Z
    2dce:	91 81       	ldd	r25, Z+1	; 0x01
    2dd0:	8f 30       	cpi	r24, 0x0F	; 15
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	0c f4       	brge	.+2      	; 0x2dd8 <main+0x6b0>
    2dd6:	77 cf       	rjmp	.-274    	; 0x2cc6 <main+0x59e>
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	aa ef       	ldi	r26, 0xFA	; 250
    2dde:	b4 e4       	ldi	r27, 0x44	; 68
    2de0:	8b 87       	std	Y+11, r24	; 0x0b
    2de2:	9c 87       	std	Y+12, r25	; 0x0c
    2de4:	ad 87       	std	Y+13, r26	; 0x0d
    2de6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e8       	ldi	r19, 0x80	; 128
    2df4:	4b e3       	ldi	r20, 0x3B	; 59
    2df6:	55 e4       	ldi	r21, 0x45	; 69
    2df8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	8f 83       	std	Y+7, r24	; 0x07
    2e02:	98 87       	std	Y+8, r25	; 0x08
    2e04:	a9 87       	std	Y+9, r26	; 0x09
    2e06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e08:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0a:	78 85       	ldd	r23, Y+8	; 0x08
    2e0c:	89 85       	ldd	r24, Y+9	; 0x09
    2e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e8       	ldi	r20, 0x80	; 128
    2e16:	5f e3       	ldi	r21, 0x3F	; 63
    2e18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e1c:	88 23       	and	r24, r24
    2e1e:	2c f4       	brge	.+10     	; 0x2e2a <main+0x702>
		__ticks = 1;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
    2e28:	3f c0       	rjmp	.+126    	; 0x2ea8 <main+0x780>
	else if (__tmp > 65535)
    2e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2c:	78 85       	ldd	r23, Y+8	; 0x08
    2e2e:	89 85       	ldd	r24, Y+9	; 0x09
    2e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	3f ef       	ldi	r19, 0xFF	; 255
    2e36:	4f e7       	ldi	r20, 0x7F	; 127
    2e38:	57 e4       	ldi	r21, 0x47	; 71
    2e3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e3e:	18 16       	cp	r1, r24
    2e40:	4c f5       	brge	.+82     	; 0x2e94 <main+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e2       	ldi	r20, 0x20	; 32
    2e50:	51 e4       	ldi	r21, 0x41	; 65
    2e52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <main+0x762>
    2e6c:	8c e2       	ldi	r24, 0x2C	; 44
    2e6e:	91 e0       	ldi	r25, 0x01	; 1
    2e70:	9c 83       	std	Y+4, r25	; 0x04
    2e72:	8b 83       	std	Y+3, r24	; 0x03
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	9c 81       	ldd	r25, Y+4	; 0x04
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <main+0x750>
    2e7c:	9c 83       	std	Y+4, r25	; 0x04
    2e7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e80:	8d 81       	ldd	r24, Y+5	; 0x05
    2e82:	9e 81       	ldd	r25, Y+6	; 0x06
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	9e 83       	std	Y+6, r25	; 0x06
    2e88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	69 f7       	brne	.-38     	; 0x2e6c <main+0x744>
    2e92:	14 c0       	rjmp	.+40     	; 0x2ebc <main+0x794>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e94:	6f 81       	ldd	r22, Y+7	; 0x07
    2e96:	78 85       	ldd	r23, Y+8	; 0x08
    2e98:	89 85       	ldd	r24, Y+9	; 0x09
    2e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	9e 83       	std	Y+6, r25	; 0x06
    2ea6:	8d 83       	std	Y+5, r24	; 0x05
    2ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    2eac:	9a 83       	std	Y+2, r25	; 0x02
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <main+0x78c>
    2eb8:	9a 83       	std	Y+2, r25	; 0x02
    2eba:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(500);
			Lcd8_Shift_Right();
		}
		_delay_ms(2000);
		Lcd8_Clear();
    2ebc:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Lcd8_Clear>
    2ec0:	4a cc       	rjmp	.-1900   	; 0x2756 <main+0x2e>

00002ec2 <__prologue_saves__>:
    2ec2:	2f 92       	push	r2
    2ec4:	3f 92       	push	r3
    2ec6:	4f 92       	push	r4
    2ec8:	5f 92       	push	r5
    2eca:	6f 92       	push	r6
    2ecc:	7f 92       	push	r7
    2ece:	8f 92       	push	r8
    2ed0:	9f 92       	push	r9
    2ed2:	af 92       	push	r10
    2ed4:	bf 92       	push	r11
    2ed6:	cf 92       	push	r12
    2ed8:	df 92       	push	r13
    2eda:	ef 92       	push	r14
    2edc:	ff 92       	push	r15
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	cf 93       	push	r28
    2ee4:	df 93       	push	r29
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	ca 1b       	sub	r28, r26
    2eec:	db 0b       	sbc	r29, r27
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	09 94       	ijmp

00002efa <__epilogue_restores__>:
    2efa:	2a 88       	ldd	r2, Y+18	; 0x12
    2efc:	39 88       	ldd	r3, Y+17	; 0x11
    2efe:	48 88       	ldd	r4, Y+16	; 0x10
    2f00:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f02:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f04:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f06:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f08:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f0c:	b9 84       	ldd	r11, Y+9	; 0x09
    2f0e:	c8 84       	ldd	r12, Y+8	; 0x08
    2f10:	df 80       	ldd	r13, Y+7	; 0x07
    2f12:	ee 80       	ldd	r14, Y+6	; 0x06
    2f14:	fd 80       	ldd	r15, Y+5	; 0x05
    2f16:	0c 81       	ldd	r16, Y+4	; 0x04
    2f18:	1b 81       	ldd	r17, Y+3	; 0x03
    2f1a:	aa 81       	ldd	r26, Y+2	; 0x02
    2f1c:	b9 81       	ldd	r27, Y+1	; 0x01
    2f1e:	ce 0f       	add	r28, r30
    2f20:	d1 1d       	adc	r29, r1
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	ed 01       	movw	r28, r26
    2f2e:	08 95       	ret

00002f30 <_exit>:
    2f30:	f8 94       	cli

00002f32 <__stop_program>:
    2f32:	ff cf       	rjmp	.-2      	; 0x2f32 <__stop_program>
