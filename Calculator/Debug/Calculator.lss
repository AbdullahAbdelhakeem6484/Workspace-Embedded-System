
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  000029f6  00002a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008001a6  008001a6  00002bd0  2**0
                  ALLOC
  3 .stab         000019c8  00000000  00000000  00002bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ef2  00000000  00000000  00004598  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000548a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000562a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000581c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00008fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a184  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a344  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000afa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3c       	cpi	r26, 0xCB	; 203
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <main>
      8a:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e9       	ldi	r26, 0x9D	; 157
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e9       	ldi	r24, 0x9D	; 157
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e9       	ldi	r22, 0x9D	; 157
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 45 12 	jmp	0x248a	; 0x248a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 45 12 	jmp	0x248a	; 0x248a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	eb 55       	subi	r30, 0x5B	; 91
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_voidSetPinDir>:




void DIO_voidSetPinDir(u8 Port,u8 Pin,u8 Dir)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <DIO_voidSetPinDir+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <DIO_voidSetPinDir+0x8>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	6a 83       	std	Y+2, r22	; 0x02
     e40:	4b 83       	std	Y+3, r20	; 0x03

switch(Port)
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	3d 83       	std	Y+5, r19	; 0x05
     e4a:	2c 83       	std	Y+4, r18	; 0x04
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	9d 81       	ldd	r25, Y+5	; 0x05
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	91 05       	cpc	r25, r1
     e54:	09 f4       	brne	.+2      	; 0xe58 <DIO_voidSetPinDir+0x2a>
     e56:	43 c0       	rjmp	.+134    	; 0xede <DIO_voidSetPinDir+0xb0>
     e58:	2c 81       	ldd	r18, Y+4	; 0x04
     e5a:	3d 81       	ldd	r19, Y+5	; 0x05
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	2c f4       	brge	.+10     	; 0xe6c <DIO_voidSetPinDir+0x3e>
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	9d 81       	ldd	r25, Y+5	; 0x05
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	71 f0       	breq	.+28     	; 0xe86 <DIO_voidSetPinDir+0x58>
     e6a:	bc c0       	rjmp	.+376    	; 0xfe4 <DIO_voidSetPinDir+0x1b6>
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <DIO_voidSetPinDir+0x4a>
     e76:	5f c0       	rjmp	.+190    	; 0xf36 <DIO_voidSetPinDir+0x108>
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	9d 81       	ldd	r25, Y+5	; 0x05
     e7c:	83 30       	cpi	r24, 0x03	; 3
     e7e:	91 05       	cpc	r25, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <DIO_voidSetPinDir+0x56>
     e82:	85 c0       	rjmp	.+266    	; 0xf8e <DIO_voidSetPinDir+0x160>
     e84:	af c0       	rjmp	.+350    	; 0xfe4 <DIO_voidSetPinDir+0x1b6>
{
	case 0:
		if(Dir==0)
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	88 23       	and	r24, r24
     e8a:	a9 f4       	brne	.+42     	; 0xeb6 <DIO_voidSetPinDir+0x88>
		{
			CLEAR_BIT(DDRA,Pin);
     e8c:	aa e3       	ldi	r26, 0x3A	; 58
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ea e3       	ldi	r30, 0x3A	; 58
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_voidSetPinDir+0x7c>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_voidSetPinDir+0x78>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	97 c0       	rjmp	.+302    	; 0xfe4 <DIO_voidSetPinDir+0x1b6>

		}
		else
		{
			SET_BIT(DDRA,Pin);
     eb6:	aa e3       	ldi	r26, 0x3A	; 58
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	ea e3       	ldi	r30, 0x3A	; 58
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_voidSetPinDir+0xa6>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_voidSetPinDir+0xa2>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	83 c0       	rjmp	.+262    	; 0xfe4 <DIO_voidSetPinDir+0x1b6>



		break;
	case 1:
		if(Dir==0)
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	88 23       	and	r24, r24
     ee2:	a9 f4       	brne	.+42     	; 0xf0e <DIO_voidSetPinDir+0xe0>
				{
					CLEAR_BIT(DDRB,Pin);
     ee4:	a7 e3       	ldi	r26, 0x37	; 55
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e3       	ldi	r30, 0x37	; 55
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_voidSetPinDir+0xd4>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_voidSetPinDir+0xd0>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	6b c0       	rjmp	.+214    	; 0xfe4 <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRB,Pin);
     f0e:	a7 e3       	ldi	r26, 0x37	; 55
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e3       	ldi	r30, 0x37	; 55
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_voidSetPinDir+0xfe>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_voidSetPinDir+0xfa>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	57 c0       	rjmp	.+174    	; 0xfe4 <DIO_voidSetPinDir+0x1b6>
				}


		break;
	case 2:
		if(Dir==0)
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	88 23       	and	r24, r24
     f3a:	a9 f4       	brne	.+42     	; 0xf66 <DIO_voidSetPinDir+0x138>
				{
					CLEAR_BIT(DDRC,Pin);
     f3c:	a4 e3       	ldi	r26, 0x34	; 52
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e4 e3       	ldi	r30, 0x34	; 52
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_voidSetPinDir+0x12c>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_voidSetPinDir+0x128>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	3f c0       	rjmp	.+126    	; 0xfe4 <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRC,Pin);
     f66:	a4 e3       	ldi	r26, 0x34	; 52
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e4 e3       	ldi	r30, 0x34	; 52
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_voidSetPinDir+0x156>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_voidSetPinDir+0x152>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	2b c0       	rjmp	.+86     	; 0xfe4 <DIO_voidSetPinDir+0x1b6>


		break;

	case 3:
		if(Dir==0)
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	88 23       	and	r24, r24
     f92:	a9 f4       	brne	.+42     	; 0xfbe <DIO_voidSetPinDir+0x190>
				{
					CLEAR_BIT(DDRD,Pin);
     f94:	a1 e3       	ldi	r26, 0x31	; 49
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e1 e3       	ldi	r30, 0x31	; 49
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_voidSetPinDir+0x184>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_voidSetPinDir+0x180>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	13 c0       	rjmp	.+38     	; 0xfe4 <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRD,Pin);
     fbe:	a1 e3       	ldi	r26, 0x31	; 49
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e1 e3       	ldi	r30, 0x31	; 49
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_voidSetPinDir+0x1ae>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_voidSetPinDir+0x1aa>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24

		break;
}


}
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Port,u8 Pin,u8 Value)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <DIO_voidSetPinValue+0x6>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <DIO_voidSetPinValue+0x8>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	6a 83       	std	Y+2, r22	; 0x02
    1006:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	3d 83       	std	Y+5, r19	; 0x05
    1010:	2c 83       	std	Y+4, r18	; 0x04
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	91 05       	cpc	r25, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <DIO_voidSetPinValue+0x2a>
    101c:	43 c0       	rjmp	.+134    	; 0x10a4 <DIO_voidSetPinValue+0xb0>
    101e:	2c 81       	ldd	r18, Y+4	; 0x04
    1020:	3d 81       	ldd	r19, Y+5	; 0x05
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	31 05       	cpc	r19, r1
    1026:	2c f4       	brge	.+10     	; 0x1032 <DIO_voidSetPinValue+0x3e>
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	71 f0       	breq	.+28     	; 0x104c <DIO_voidSetPinValue+0x58>
    1030:	bc c0       	rjmp	.+376    	; 0x11aa <DIO_voidSetPinValue+0x1b6>
    1032:	2c 81       	ldd	r18, Y+4	; 0x04
    1034:	3d 81       	ldd	r19, Y+5	; 0x05
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	09 f4       	brne	.+2      	; 0x103e <DIO_voidSetPinValue+0x4a>
    103c:	5f c0       	rjmp	.+190    	; 0x10fc <DIO_voidSetPinValue+0x108>
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	83 30       	cpi	r24, 0x03	; 3
    1044:	91 05       	cpc	r25, r1
    1046:	09 f4       	brne	.+2      	; 0x104a <DIO_voidSetPinValue+0x56>
    1048:	85 c0       	rjmp	.+266    	; 0x1154 <DIO_voidSetPinValue+0x160>
    104a:	af c0       	rjmp	.+350    	; 0x11aa <DIO_voidSetPinValue+0x1b6>
	{
		case 0:
			if(Value==0)
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	88 23       	and	r24, r24
    1050:	a9 f4       	brne	.+42     	; 0x107c <DIO_voidSetPinValue+0x88>
					{
						CLEAR_BIT(PORTA,Pin);
    1052:	ab e3       	ldi	r26, 0x3B	; 59
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	eb e3       	ldi	r30, 0x3B	; 59
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_voidSetPinValue+0x7c>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_voidSetPinValue+0x78>
    1074:	80 95       	com	r24
    1076:	84 23       	and	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	97 c0       	rjmp	.+302    	; 0x11aa <DIO_voidSetPinValue+0x1b6>

					}
					else
					{
						SET_BIT(PORTA,Pin);
    107c:	ab e3       	ldi	r26, 0x3B	; 59
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e3       	ldi	r30, 0x3B	; 59
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_voidSetPinValue+0xa6>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_voidSetPinValue+0xa2>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	83 c0       	rjmp	.+262    	; 0x11aa <DIO_voidSetPinValue+0x1b6>
					}


			break;
		case 1:
			if(Value==0)
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 23       	and	r24, r24
    10a8:	a9 f4       	brne	.+42     	; 0x10d4 <DIO_voidSetPinValue+0xe0>
				{
				CLEAR_BIT(PORTB,Pin);
    10aa:	a8 e3       	ldi	r26, 0x38	; 56
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e8 e3       	ldi	r30, 0x38	; 56
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_voidSetPinValue+0xd4>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_voidSetPinValue+0xd0>
    10cc:	80 95       	com	r24
    10ce:	84 23       	and	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	6b c0       	rjmp	.+214    	; 0x11aa <DIO_voidSetPinValue+0x1b6>

				}
				else
				{
				SET_BIT(PORTB,Pin);
    10d4:	a8 e3       	ldi	r26, 0x38	; 56
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e8 e3       	ldi	r30, 0x38	; 56
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_voidSetPinValue+0xfe>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_voidSetPinValue+0xfa>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	57 c0       	rjmp	.+174    	; 0x11aa <DIO_voidSetPinValue+0x1b6>
				}

			break;
		case 2:
			if(Value==0)
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	88 23       	and	r24, r24
    1100:	a9 f4       	brne	.+42     	; 0x112c <DIO_voidSetPinValue+0x138>
				{
				CLEAR_BIT(PORTC,Pin);
    1102:	a5 e3       	ldi	r26, 0x35	; 53
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e3       	ldi	r30, 0x35	; 53
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_voidSetPinValue+0x12c>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_voidSetPinValue+0x128>
    1124:	80 95       	com	r24
    1126:	84 23       	and	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	3f c0       	rjmp	.+126    	; 0x11aa <DIO_voidSetPinValue+0x1b6>

				}
				else
				{
					SET_BIT(PORTC,Pin);
    112c:	a5 e3       	ldi	r26, 0x35	; 53
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e3       	ldi	r30, 0x35	; 53
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_voidSetPinValue+0x156>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_voidSetPinValue+0x152>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	2b c0       	rjmp	.+86     	; 0x11aa <DIO_voidSetPinValue+0x1b6>
				}
			break;

		case 3:
			if(Value==0)
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	88 23       	and	r24, r24
    1158:	a9 f4       	brne	.+42     	; 0x1184 <DIO_voidSetPinValue+0x190>
					{
					CLEAR_BIT(PORTD,Pin);
    115a:	a2 e3       	ldi	r26, 0x32	; 50
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e2 e3       	ldi	r30, 0x32	; 50
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_voidSetPinValue+0x184>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_voidSetPinValue+0x180>
    117c:	80 95       	com	r24
    117e:	84 23       	and	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	13 c0       	rjmp	.+38     	; 0x11aa <DIO_voidSetPinValue+0x1b6>

					}
					else
					{
						SET_BIT(PORTD,Pin);
    1184:	a2 e3       	ldi	r26, 0x32	; 50
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e2 e3       	ldi	r30, 0x32	; 50
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_voidSetPinValue+0x1ae>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_voidSetPinValue+0x1aa>
    11a6:	84 2b       	or	r24, r20
    11a8:	8c 93       	st	X, r24

			break;
	}


}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue(u8 Port,u8 Pin)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <DIO_voidTogglePinValue+0x6>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <DIO_voidTogglePinValue+0x8>
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3c 83       	std	Y+4, r19	; 0x04
    11d2:	2b 83       	std	Y+3, r18	; 0x03
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	91 05       	cpc	r25, r1
    11dc:	49 f1       	breq	.+82     	; 0x1230 <DIO_voidTogglePinValue+0x76>
    11de:	2b 81       	ldd	r18, Y+3	; 0x03
    11e0:	3c 81       	ldd	r19, Y+4	; 0x04
    11e2:	22 30       	cpi	r18, 0x02	; 2
    11e4:	31 05       	cpc	r19, r1
    11e6:	2c f4       	brge	.+10     	; 0x11f2 <DIO_voidTogglePinValue+0x38>
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	61 f0       	breq	.+24     	; 0x1208 <DIO_voidTogglePinValue+0x4e>
    11f0:	5a c0       	rjmp	.+180    	; 0x12a6 <DIO_voidTogglePinValue+0xec>
    11f2:	2b 81       	ldd	r18, Y+3	; 0x03
    11f4:	3c 81       	ldd	r19, Y+4	; 0x04
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	71 f1       	breq	.+92     	; 0x1258 <DIO_voidTogglePinValue+0x9e>
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	91 05       	cpc	r25, r1
    1204:	e9 f1       	breq	.+122    	; 0x1280 <DIO_voidTogglePinValue+0xc6>
    1206:	4f c0       	rjmp	.+158    	; 0x12a6 <DIO_voidTogglePinValue+0xec>
	{
	case 0:
		TOGGLE_BIT(PORTA,Pin);
    1208:	ab e3       	ldi	r26, 0x3B	; 59
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	eb e3       	ldi	r30, 0x3B	; 59
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_voidTogglePinValue+0x6c>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_voidTogglePinValue+0x68>
    122a:	84 27       	eor	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	3b c0       	rjmp	.+118    	; 0x12a6 <DIO_voidTogglePinValue+0xec>

		break;
	case 1:
		TOGGLE_BIT(PORTB,Pin);
    1230:	a8 e3       	ldi	r26, 0x38	; 56
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e8 e3       	ldi	r30, 0x38	; 56
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_voidTogglePinValue+0x94>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_voidTogglePinValue+0x90>
    1252:	84 27       	eor	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	27 c0       	rjmp	.+78     	; 0x12a6 <DIO_voidTogglePinValue+0xec>

		break;
	case 2:
		TOGGLE_BIT(PORTC,Pin);
    1258:	a5 e3       	ldi	r26, 0x35	; 53
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e3       	ldi	r30, 0x35	; 53
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_voidTogglePinValue+0xbc>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_voidTogglePinValue+0xb8>
    127a:	84 27       	eor	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	13 c0       	rjmp	.+38     	; 0x12a6 <DIO_voidTogglePinValue+0xec>

		break;

	case 3:
		TOGGLE_BIT(PORTD,Pin);
    1280:	a2 e3       	ldi	r26, 0x32	; 50
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e2 e3       	ldi	r30, 0x32	; 50
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_voidTogglePinValue+0xe4>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO_voidTogglePinValue+0xe0>
    12a2:	84 27       	eor	r24, r20
    12a4:	8c 93       	st	X, r24

		break;

	}

}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <port>:
/********************************************************************************************************/

/*SEND DATA TO HW PORT*/

void port(char cmd_port)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	0f 92       	push	r0
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	89 83       	std	Y+1, r24	; 0x01
	if(cmd_port&1)
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	81 70       	andi	r24, 0x01	; 1
    12c8:	90 70       	andi	r25, 0x00	; 0
    12ca:	88 23       	and	r24, r24
    12cc:	41 f0       	breq	.+16     	; 0x12de <port+0x2a>
		SET_BIT(PORTB,0);		//IF 1ST BIT = 1 RAISE PB0
    12ce:	a8 e3       	ldi	r26, 0x38	; 56
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e8 e3       	ldi	r30, 0x38	; 56
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	81 60       	ori	r24, 0x01	; 1
    12da:	8c 93       	st	X, r24
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <port+0x38>
	else
		CLEAR_BIT(PORTB,0);		//IF 1ST BIT = 0 CLR PB0
    12de:	a8 e3       	ldi	r26, 0x38	; 56
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e8 e3       	ldi	r30, 0x38	; 56
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8e 7f       	andi	r24, 0xFE	; 254
    12ea:	8c 93       	st	X, r24

	if(cmd_port&2)
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	82 70       	andi	r24, 0x02	; 2
    12f4:	90 70       	andi	r25, 0x00	; 0
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	41 f0       	breq	.+16     	; 0x130a <port+0x56>
		SET_BIT(PORTB,1);		//IF 2ND BIT = 1 RAISE PB1
    12fa:	a8 e3       	ldi	r26, 0x38	; 56
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e8 e3       	ldi	r30, 0x38	; 56
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	82 60       	ori	r24, 0x02	; 2
    1306:	8c 93       	st	X, r24
    1308:	07 c0       	rjmp	.+14     	; 0x1318 <port+0x64>
	else
		CLEAR_BIT(PORTB,1);		//IF 2ND BIT = 0 CLR PB1
    130a:	a8 e3       	ldi	r26, 0x38	; 56
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e8 e3       	ldi	r30, 0x38	; 56
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	8d 7f       	andi	r24, 0xFD	; 253
    1316:	8c 93       	st	X, r24

	if(cmd_port&4)
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	84 70       	andi	r24, 0x04	; 4
    1320:	90 70       	andi	r25, 0x00	; 0
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	41 f0       	breq	.+16     	; 0x1336 <port+0x82>
		SET_BIT(PORTB,2);		//IF 3RD BIT = 1 RAISE PB2
    1326:	a8 e3       	ldi	r26, 0x38	; 56
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e8 e3       	ldi	r30, 0x38	; 56
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	84 60       	ori	r24, 0x04	; 4
    1332:	8c 93       	st	X, r24
    1334:	07 c0       	rjmp	.+14     	; 0x1344 <port+0x90>
	else
		CLEAR_BIT(PORTB,2);		//IF 3RD BIT = 0 CLR PB2
    1336:	a8 e3       	ldi	r26, 0x38	; 56
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e8 e3       	ldi	r30, 0x38	; 56
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8b 7f       	andi	r24, 0xFB	; 251
    1342:	8c 93       	st	X, r24

	if(cmd_port&8)
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	88 70       	andi	r24, 0x08	; 8
    134c:	90 70       	andi	r25, 0x00	; 0
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	41 f0       	breq	.+16     	; 0x1362 <port+0xae>
		SET_BIT(PORTB,3);		//IF 4TH BIT = 1 RAISE PB3
    1352:	a8 e3       	ldi	r26, 0x38	; 56
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e8 e3       	ldi	r30, 0x38	; 56
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	88 60       	ori	r24, 0x08	; 8
    135e:	8c 93       	st	X, r24
    1360:	07 c0       	rjmp	.+14     	; 0x1370 <port+0xbc>
	else
		CLEAR_BIT(PORTB,3);		//IF 4TH BIT = 0 CLR PB3
    1362:	a8 e3       	ldi	r26, 0x38	; 56
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e8 e3       	ldi	r30, 0x38	; 56
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	87 7f       	andi	r24, 0xF7	; 247
    136e:	8c 93       	st	X, r24
}
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <mode_select>:
/*SWITCH BETWEEN COMMAND MODE OR DATA MODE*/



void mode_select(char m)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	0f 92       	push	r0
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	89 83       	std	Y+1, r24	; 0x01
	if ( m == 0)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	88 23       	and	r24, r24
    1388:	39 f4       	brne	.+14     	; 0x1398 <mode_select+0x20>
		CLEAR_BIT(PORTB,5);		// RS = 0 --> SWITCH TO LCD CONTROL REGISTER - COMMAND MODE
    138a:	a8 e3       	ldi	r26, 0x38	; 56
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e8 e3       	ldi	r30, 0x38	; 56
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8f 7d       	andi	r24, 0xDF	; 223
    1396:	8c 93       	st	X, r24

	if ( m == 1)
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	39 f4       	brne	.+14     	; 0x13ac <mode_select+0x34>
		SET_BIT(PORTB,5);		   // RS = 1 --> SWITCH TO LCD DATA REGISTER - DATA MODE
    139e:	a8 e3       	ldi	r26, 0x38	; 56
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e8 e3       	ldi	r30, 0x38	; 56
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	80 62       	ori	r24, 0x20	; 32
    13aa:	8c 93       	st	X, r24
}
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <enb_tri>:

/*TRIIGERS THE ENABLE BIT*/
void enb_tri(void)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	e0 97       	sbiw	r28, 0x30	; 48
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(PORTB,4);		//RAISE ENABLE EN = 1
    13c8:	a8 e3       	ldi	r26, 0x38	; 56
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e8 e3       	ldi	r30, 0x38	; 56
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	80 61       	ori	r24, 0x10	; 16
    13d4:	8c 93       	st	X, r24
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	a8 e4       	ldi	r26, 0x48	; 72
    13dc:	b2 e4       	ldi	r27, 0x42	; 66
    13de:	8d a7       	std	Y+45, r24	; 0x2d
    13e0:	9e a7       	std	Y+46, r25	; 0x2e
    13e2:	af a7       	std	Y+47, r26	; 0x2f
    13e4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13e6:	6d a5       	ldd	r22, Y+45	; 0x2d
    13e8:	7e a5       	ldd	r23, Y+46	; 0x2e
    13ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ec:	98 a9       	ldd	r25, Y+48	; 0x30
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e8       	ldi	r20, 0x80	; 128
    13f4:	50 e4       	ldi	r21, 0x40	; 64
    13f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	89 a7       	std	Y+41, r24	; 0x29
    1400:	9a a7       	std	Y+42, r25	; 0x2a
    1402:	ab a7       	std	Y+43, r26	; 0x2b
    1404:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1406:	69 a5       	ldd	r22, Y+41	; 0x29
    1408:	7a a5       	ldd	r23, Y+42	; 0x2a
    140a:	8b a5       	ldd	r24, Y+43	; 0x2b
    140c:	9c a5       	ldd	r25, Y+44	; 0x2c
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e8       	ldi	r20, 0x80	; 128
    1414:	5f e3       	ldi	r21, 0x3F	; 63
    1416:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    141a:	88 23       	and	r24, r24
    141c:	1c f4       	brge	.+6      	; 0x1424 <enb_tri+0x70>
		__ticks = 1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	88 a7       	std	Y+40, r24	; 0x28
    1422:	91 c0       	rjmp	.+290    	; 0x1546 <enb_tri+0x192>
	else if (__tmp > 255)
    1424:	69 a5       	ldd	r22, Y+41	; 0x29
    1426:	7a a5       	ldd	r23, Y+42	; 0x2a
    1428:	8b a5       	ldd	r24, Y+43	; 0x2b
    142a:	9c a5       	ldd	r25, Y+44	; 0x2c
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4f e7       	ldi	r20, 0x7F	; 127
    1432:	53 e4       	ldi	r21, 0x43	; 67
    1434:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1438:	18 16       	cp	r1, r24
    143a:	0c f0       	brlt	.+2      	; 0x143e <enb_tri+0x8a>
    143c:	7b c0       	rjmp	.+246    	; 0x1534 <enb_tri+0x180>
	{
		_delay_ms(__us / 1000.0);
    143e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1440:	7e a5       	ldd	r23, Y+46	; 0x2e
    1442:	8f a5       	ldd	r24, Y+47	; 0x2f
    1444:	98 a9       	ldd	r25, Y+48	; 0x30
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4a e7       	ldi	r20, 0x7A	; 122
    144c:	54 e4       	ldi	r21, 0x44	; 68
    144e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	8c a3       	std	Y+36, r24	; 0x24
    1458:	9d a3       	std	Y+37, r25	; 0x25
    145a:	ae a3       	std	Y+38, r26	; 0x26
    145c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145e:	6c a1       	ldd	r22, Y+36	; 0x24
    1460:	7d a1       	ldd	r23, Y+37	; 0x25
    1462:	8e a1       	ldd	r24, Y+38	; 0x26
    1464:	9f a1       	ldd	r25, Y+39	; 0x27
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e8       	ldi	r19, 0x80	; 128
    146a:	4b e3       	ldi	r20, 0x3B	; 59
    146c:	55 e4       	ldi	r21, 0x45	; 69
    146e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	88 a3       	std	Y+32, r24	; 0x20
    1478:	99 a3       	std	Y+33, r25	; 0x21
    147a:	aa a3       	std	Y+34, r26	; 0x22
    147c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    147e:	68 a1       	ldd	r22, Y+32	; 0x20
    1480:	79 a1       	ldd	r23, Y+33	; 0x21
    1482:	8a a1       	ldd	r24, Y+34	; 0x22
    1484:	9b a1       	ldd	r25, Y+35	; 0x23
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e8       	ldi	r20, 0x80	; 128
    148c:	5f e3       	ldi	r21, 0x3F	; 63
    148e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1492:	88 23       	and	r24, r24
    1494:	2c f4       	brge	.+10     	; 0x14a0 <enb_tri+0xec>
		__ticks = 1;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	9f 8f       	std	Y+31, r25	; 0x1f
    149c:	8e 8f       	std	Y+30, r24	; 0x1e
    149e:	3f c0       	rjmp	.+126    	; 0x151e <enb_tri+0x16a>
	else if (__tmp > 65535)
    14a0:	68 a1       	ldd	r22, Y+32	; 0x20
    14a2:	79 a1       	ldd	r23, Y+33	; 0x21
    14a4:	8a a1       	ldd	r24, Y+34	; 0x22
    14a6:	9b a1       	ldd	r25, Y+35	; 0x23
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	3f ef       	ldi	r19, 0xFF	; 255
    14ac:	4f e7       	ldi	r20, 0x7F	; 127
    14ae:	57 e4       	ldi	r21, 0x47	; 71
    14b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14b4:	18 16       	cp	r1, r24
    14b6:	4c f5       	brge	.+82     	; 0x150a <enb_tri+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b8:	6c a1       	ldd	r22, Y+36	; 0x24
    14ba:	7d a1       	ldd	r23, Y+37	; 0x25
    14bc:	8e a1       	ldd	r24, Y+38	; 0x26
    14be:	9f a1       	ldd	r25, Y+39	; 0x27
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e2       	ldi	r20, 0x20	; 32
    14c6:	51 e4       	ldi	r21, 0x41	; 65
    14c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	bc 01       	movw	r22, r24
    14d2:	cd 01       	movw	r24, r26
    14d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	9f 8f       	std	Y+31, r25	; 0x1f
    14de:	8e 8f       	std	Y+30, r24	; 0x1e
    14e0:	0f c0       	rjmp	.+30     	; 0x1500 <enb_tri+0x14c>
    14e2:	8c e2       	ldi	r24, 0x2C	; 44
    14e4:	91 e0       	ldi	r25, 0x01	; 1
    14e6:	9d 8f       	std	Y+29, r25	; 0x1d
    14e8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <enb_tri+0x13a>
    14f2:	9d 8f       	std	Y+29, r25	; 0x1d
    14f4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	9f 8f       	std	Y+31, r25	; 0x1f
    14fe:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1500:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1502:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	69 f7       	brne	.-38     	; 0x14e2 <enb_tri+0x12e>
    1508:	24 c0       	rjmp	.+72     	; 0x1552 <enb_tri+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150a:	68 a1       	ldd	r22, Y+32	; 0x20
    150c:	79 a1       	ldd	r23, Y+33	; 0x21
    150e:	8a a1       	ldd	r24, Y+34	; 0x22
    1510:	9b a1       	ldd	r25, Y+35	; 0x23
    1512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	9f 8f       	std	Y+31, r25	; 0x1f
    151c:	8e 8f       	std	Y+30, r24	; 0x1e
    151e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1520:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1522:	9b 8f       	std	Y+27, r25	; 0x1b
    1524:	8a 8f       	std	Y+26, r24	; 0x1a
    1526:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1528:	9b 8d       	ldd	r25, Y+27	; 0x1b
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <enb_tri+0x176>
    152e:	9b 8f       	std	Y+27, r25	; 0x1b
    1530:	8a 8f       	std	Y+26, r24	; 0x1a
    1532:	0f c0       	rjmp	.+30     	; 0x1552 <enb_tri+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1534:	69 a5       	ldd	r22, Y+41	; 0x29
    1536:	7a a5       	ldd	r23, Y+42	; 0x2a
    1538:	8b a5       	ldd	r24, Y+43	; 0x2b
    153a:	9c a5       	ldd	r25, Y+44	; 0x2c
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	88 a7       	std	Y+40, r24	; 0x28
    1546:	88 a5       	ldd	r24, Y+40	; 0x28
    1548:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    154a:	89 8d       	ldd	r24, Y+25	; 0x19
    154c:	8a 95       	dec	r24
    154e:	f1 f7       	brne	.-4      	; 0x154c <enb_tri+0x198>
    1550:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);

	CLEAR_BIT(PORTB,4);		//TOGGLE ENABLE
    1552:	a8 e3       	ldi	r26, 0x38	; 56
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e8 e3       	ldi	r30, 0x38	; 56
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8f 7e       	andi	r24, 0xEF	; 239
    155e:	8c 93       	st	X, r24
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	aa ef       	ldi	r26, 0xFA	; 250
    1566:	b3 e4       	ldi	r27, 0x43	; 67
    1568:	8d 8b       	std	Y+21, r24	; 0x15
    156a:	9e 8b       	std	Y+22, r25	; 0x16
    156c:	af 8b       	std	Y+23, r26	; 0x17
    156e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1570:	6d 89       	ldd	r22, Y+21	; 0x15
    1572:	7e 89       	ldd	r23, Y+22	; 0x16
    1574:	8f 89       	ldd	r24, Y+23	; 0x17
    1576:	98 8d       	ldd	r25, Y+24	; 0x18
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	50 e4       	ldi	r21, 0x40	; 64
    1580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	89 8b       	std	Y+17, r24	; 0x11
    158a:	9a 8b       	std	Y+18, r25	; 0x12
    158c:	ab 8b       	std	Y+19, r26	; 0x13
    158e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1590:	69 89       	ldd	r22, Y+17	; 0x11
    1592:	7a 89       	ldd	r23, Y+18	; 0x12
    1594:	8b 89       	ldd	r24, Y+19	; 0x13
    1596:	9c 89       	ldd	r25, Y+20	; 0x14
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15a4:	88 23       	and	r24, r24
    15a6:	1c f4       	brge	.+6      	; 0x15ae <enb_tri+0x1fa>
		__ticks = 1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	88 8b       	std	Y+16, r24	; 0x10
    15ac:	91 c0       	rjmp	.+290    	; 0x16d0 <enb_tri+0x31c>
	else if (__tmp > 255)
    15ae:	69 89       	ldd	r22, Y+17	; 0x11
    15b0:	7a 89       	ldd	r23, Y+18	; 0x12
    15b2:	8b 89       	ldd	r24, Y+19	; 0x13
    15b4:	9c 89       	ldd	r25, Y+20	; 0x14
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	4f e7       	ldi	r20, 0x7F	; 127
    15bc:	53 e4       	ldi	r21, 0x43	; 67
    15be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15c2:	18 16       	cp	r1, r24
    15c4:	0c f0       	brlt	.+2      	; 0x15c8 <enb_tri+0x214>
    15c6:	7b c0       	rjmp	.+246    	; 0x16be <enb_tri+0x30a>
	{
		_delay_ms(__us / 1000.0);
    15c8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ca:	7e 89       	ldd	r23, Y+22	; 0x16
    15cc:	8f 89       	ldd	r24, Y+23	; 0x17
    15ce:	98 8d       	ldd	r25, Y+24	; 0x18
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	4a e7       	ldi	r20, 0x7A	; 122
    15d6:	54 e4       	ldi	r21, 0x44	; 68
    15d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	8c 87       	std	Y+12, r24	; 0x0c
    15e2:	9d 87       	std	Y+13, r25	; 0x0d
    15e4:	ae 87       	std	Y+14, r26	; 0x0e
    15e6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    15ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    15ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e8       	ldi	r19, 0x80	; 128
    15f4:	4b e3       	ldi	r20, 0x3B	; 59
    15f6:	55 e4       	ldi	r21, 0x45	; 69
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	88 87       	std	Y+8, r24	; 0x08
    1602:	99 87       	std	Y+9, r25	; 0x09
    1604:	aa 87       	std	Y+10, r26	; 0x0a
    1606:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1608:	68 85       	ldd	r22, Y+8	; 0x08
    160a:	79 85       	ldd	r23, Y+9	; 0x09
    160c:	8a 85       	ldd	r24, Y+10	; 0x0a
    160e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e8       	ldi	r20, 0x80	; 128
    1616:	5f e3       	ldi	r21, 0x3F	; 63
    1618:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    161c:	88 23       	and	r24, r24
    161e:	2c f4       	brge	.+10     	; 0x162a <enb_tri+0x276>
		__ticks = 1;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9f 83       	std	Y+7, r25	; 0x07
    1626:	8e 83       	std	Y+6, r24	; 0x06
    1628:	3f c0       	rjmp	.+126    	; 0x16a8 <enb_tri+0x2f4>
	else if (__tmp > 65535)
    162a:	68 85       	ldd	r22, Y+8	; 0x08
    162c:	79 85       	ldd	r23, Y+9	; 0x09
    162e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1630:	9b 85       	ldd	r25, Y+11	; 0x0b
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	3f ef       	ldi	r19, 0xFF	; 255
    1636:	4f e7       	ldi	r20, 0x7F	; 127
    1638:	57 e4       	ldi	r21, 0x47	; 71
    163a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    163e:	18 16       	cp	r1, r24
    1640:	4c f5       	brge	.+82     	; 0x1694 <enb_tri+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1642:	6c 85       	ldd	r22, Y+12	; 0x0c
    1644:	7d 85       	ldd	r23, Y+13	; 0x0d
    1646:	8e 85       	ldd	r24, Y+14	; 0x0e
    1648:	9f 85       	ldd	r25, Y+15	; 0x0f
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e2       	ldi	r20, 0x20	; 32
    1650:	51 e4       	ldi	r21, 0x41	; 65
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	9f 83       	std	Y+7, r25	; 0x07
    1668:	8e 83       	std	Y+6, r24	; 0x06
    166a:	0f c0       	rjmp	.+30     	; 0x168a <enb_tri+0x2d6>
    166c:	8c e2       	ldi	r24, 0x2C	; 44
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	9d 83       	std	Y+5, r25	; 0x05
    1672:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1674:	8c 81       	ldd	r24, Y+4	; 0x04
    1676:	9d 81       	ldd	r25, Y+5	; 0x05
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <enb_tri+0x2c4>
    167c:	9d 83       	std	Y+5, r25	; 0x05
    167e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1680:	8e 81       	ldd	r24, Y+6	; 0x06
    1682:	9f 81       	ldd	r25, Y+7	; 0x07
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	9f 83       	std	Y+7, r25	; 0x07
    1688:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168a:	8e 81       	ldd	r24, Y+6	; 0x06
    168c:	9f 81       	ldd	r25, Y+7	; 0x07
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	69 f7       	brne	.-38     	; 0x166c <enb_tri+0x2b8>
    1692:	24 c0       	rjmp	.+72     	; 0x16dc <enb_tri+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1694:	68 85       	ldd	r22, Y+8	; 0x08
    1696:	79 85       	ldd	r23, Y+9	; 0x09
    1698:	8a 85       	ldd	r24, Y+10	; 0x0a
    169a:	9b 85       	ldd	r25, Y+11	; 0x0b
    169c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	9f 83       	std	Y+7, r25	; 0x07
    16a6:	8e 83       	std	Y+6, r24	; 0x06
    16a8:	8e 81       	ldd	r24, Y+6	; 0x06
    16aa:	9f 81       	ldd	r25, Y+7	; 0x07
    16ac:	9b 83       	std	Y+3, r25	; 0x03
    16ae:	8a 83       	std	Y+2, r24	; 0x02
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	9b 81       	ldd	r25, Y+3	; 0x03
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <enb_tri+0x300>
    16b8:	9b 83       	std	Y+3, r25	; 0x03
    16ba:	8a 83       	std	Y+2, r24	; 0x02
    16bc:	0f c0       	rjmp	.+30     	; 0x16dc <enb_tri+0x328>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16be:	69 89       	ldd	r22, Y+17	; 0x11
    16c0:	7a 89       	ldd	r23, Y+18	; 0x12
    16c2:	8b 89       	ldd	r24, Y+19	; 0x13
    16c4:	9c 89       	ldd	r25, Y+20	; 0x14
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	88 8b       	std	Y+16, r24	; 0x10
    16d0:	88 89       	ldd	r24, Y+16	; 0x10
    16d2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	8a 95       	dec	r24
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <enb_tri+0x322>
    16da:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(500);			//HIGH DELAY TO PREVENT DATA OVER FLOW
}
    16dc:	e0 96       	adiw	r28, 0x30	; 48
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <set_port>:

/*INITIALIZE DATABUS TO HW PORT*/
void set_port(void)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
	DDRB |= 0X3F;	//ASSIGN DATABUS PB0-PB3, CONTROLBUS EN-PB4 RS-PB5
    16f6:	a7 e3       	ldi	r26, 0x37	; 55
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e7 e3       	ldi	r30, 0x37	; 55
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8f 63       	ori	r24, 0x3F	; 63
    1702:	8c 93       	st	X, r24
}
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <cmd>:
/*SEND COMMANDS OVER DATA BUS*/



void cmd(char cmd_data)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
	mode_select(0);			//SELECT COMMAND MODE
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	0e 94 bc 09 	call	0x1378	; 0x1378 <mode_select>

	port(cmd_data);			//SEND COMAND TO PORT (DATABUS)
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <port>

	enb_tri();				//ENABLE TRIGGER
    1722:	0e 94 da 09 	call	0x13b4	; 0x13b4 <enb_tri>
}
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <lcd_init>:
/*INTIALLIZE LCD*/



void lcd_init(void)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
	set_port();		//SET DATABUS
    1736:	0e 94 77 0b 	call	0x16ee	; 0x16ee <set_port>

	cmd(0);			//RETURN CURSOR TO HOME POISTION - COMMAND 0X02
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
	cmd(2);
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>

	cmd(2);			//DISPLAY IN 2-LINES AND 4-BIT DATA MODE - COMMAND 0X28
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
	cmd(8);
    174c:	88 e0       	ldi	r24, 0x08	; 8
    174e:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>

	cmd(0);			//DISPLAY NO CURSOR AND NO BLINK - COMMAND 0X0C
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
	cmd(12);
    1758:	8c e0       	ldi	r24, 0x0C	; 12
    175a:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>

	cmd(0);			//DD RAM ADDRESS WITH NO OFFSET - COMMAND 0X06
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
	cmd(6);
    1764:	86 e0       	ldi	r24, 0x06	; 6
    1766:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
}
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <dis_char>:
/*DISPLAY CHARACHTER*/



void dis_char(char data)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <dis_char+0x6>
    1776:	0f 92       	push	r0
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	8b 83       	std	Y+3, r24	; 0x03
	char msb, lsb;

	msb = data & 0xF0;		//ASSIGN DATA MOST SIGNIFICANT BITS TO msb
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	80 7f       	andi	r24, 0xF0	; 240
    1782:	8a 83       	std	Y+2, r24	; 0x02

	lsb = data & 0x0F;		//ASSIGN DATA LEAST SIGNIFICANT BITS TO lsb
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	8f 70       	andi	r24, 0x0F	; 15
    1788:	89 83       	std	Y+1, r24	; 0x01

	mode_select(1);			//SELECT DATA MODE
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	0e 94 bc 09 	call	0x1378	; 0x1378 <mode_select>

	port(msb>>4);			//SEND msb OVER DATABUS
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	82 95       	swap	r24
    1794:	8f 70       	andi	r24, 0x0F	; 15
    1796:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <port>

	enb_tri();
    179a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <enb_tri>

	port(lsb);				//SEND lsb OVER DATABUS
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <port>

	enb_tri();
    17a4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <enb_tri>
}
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <dis_position>:
/*SET CURSOR POSITION*/



void dis_position(char i, char j)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <dis_position+0x6>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	6a 83       	std	Y+2, r22	; 0x02
	if (i==0)			//IF i = 0 DISPLAY IN FIRST LINE
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	88 23       	and	r24, r24
    17c6:	39 f4       	brne	.+14     	; 0x17d6 <dis_position+0x22>
	{					//COMMAND FOR FIRST LINE IS 0X80
		cmd(8);			//SEND COMMAND msb FIRST AND lsb SECOND
    17c8:	88 e0       	ldi	r24, 0x08	; 8
    17ca:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
		cmd(j);			//j IS THE HORIZONTAL POSITION
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
    17d4:	09 c0       	rjmp	.+18     	; 0x17e8 <dis_position+0x34>
	}
	else if (i==1)		//IF i = 1 DISPLAY IN SECOND LINE
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	31 f4       	brne	.+12     	; 0x17e8 <dis_position+0x34>
	{
		cmd(12);		//COMMAND FOR SECOND LINE IS 0XC0, C = 12
    17dc:	8c e0       	ldi	r24, 0x0C	; 12
    17de:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
		cmd(j);
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
	}
}
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <clr_dis>:
/*CLEAR LCD*/



void clr_dis(void)
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
	cmd(0);		//CLEAR DISPLAY COMMAND 0X01
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
	cmd(1);
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>

	cmd(0);		//RETTURN CURSOR HOME COMMAND 0X02
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
	cmd(2);
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
}
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <dis_string>:
/*DISPLAY STRING*/



void dis_string(unsigned char row, unsigned char col, char *str)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <dis_string+0x6>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <dis_string+0x8>
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	6a 83       	std	Y+2, r22	; 0x02
    1828:	5c 83       	std	Y+4, r21	; 0x04
    182a:	4b 83       	std	Y+3, r20	; 0x03
	dis_position( row, col );
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	6a 81       	ldd	r22, Y+2	; 0x02
    1830:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <dis_position>
    1834:	0a c0       	rjmp	.+20     	; 0x184a <dis_string+0x32>

	while (*str!='\0')		//while string pointer do not point to nothing
	{
		dis_char(*str);		//call dis_char functions to display what string pointer points to
    1836:	eb 81       	ldd	r30, Y+3	; 0x03
    1838:	fc 81       	ldd	r31, Y+4	; 0x04
    183a:	80 81       	ld	r24, Z
    183c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <dis_char>

		++str;				//increment string pointer to point to the next character in the array
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	9c 83       	std	Y+4, r25	; 0x04
    1848:	8b 83       	std	Y+3, r24	; 0x03

void dis_string(unsigned char row, unsigned char col, char *str)
{
	dis_position( row, col );

	while (*str!='\0')		//while string pointer do not point to nothing
    184a:	eb 81       	ldd	r30, Y+3	; 0x03
    184c:	fc 81       	ldd	r31, Y+4	; 0x04
    184e:	80 81       	ld	r24, Z
    1850:	88 23       	and	r24, r24
    1852:	89 f7       	brne	.-30     	; 0x1836 <dis_string+0x1e>
	{
		dis_char(*str);		//call dis_char functions to display what string pointer points to

		++str;				//increment string pointer to point to the next character in the array
	}
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <dis_shift>:
/*DISPLAY SHIFTTING*/



void dis_shift(char dir)
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	0f 92       	push	r0
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	89 83       	std	Y+1, r24	; 0x01
	if ( dir == 'R' )
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	82 35       	cpi	r24, 0x52	; 82
    1872:	39 f4       	brne	.+14     	; 0x1882 <dis_shift+0x20>
	{
		cmd(1);				//SHIFT RIGHT COMMAND 0X18
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
		cmd(8);
    187a:	88 e0       	ldi	r24, 0x08	; 8
    187c:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
    1880:	09 c0       	rjmp	.+18     	; 0x1894 <dis_shift+0x32>
	}
	else if ( dir == 'L' )
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	8c 34       	cpi	r24, 0x4C	; 76
    1886:	31 f4       	brne	.+12     	; 0x1894 <dis_shift+0x32>
	{
		cmd(1);				//SHIFT LEFT COMMAND 0X1C
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
		cmd(12);
    188e:	8c e0       	ldi	r24, 0x0C	; 12
    1890:	0e 94 85 0b 	call	0x170a	; 0x170a <cmd>
	}
}
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <cal_init>:


/*initialize keypad and lcd*/

void cal_init(void)
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	Key_init();
    18a4:	0e 94 c5 10 	call	0x218a	; 0x218a <Key_init>

	lcd_init();
    18a8:	0e 94 97 0b 	call	0x172e	; 0x172e <lcd_init>

}
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <cal_op>:

/*determine calculator operation*/


void cal_op(void)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
	 if(key==0x0D)			//operation add
    18ba:	80 91 a6 01 	lds	r24, 0x01A6
    18be:	90 91 a7 01 	lds	r25, 0x01A7
    18c2:	a0 91 a8 01 	lds	r26, 0x01A8
    18c6:	b0 91 a9 01 	lds	r27, 0x01A9
    18ca:	8d 30       	cpi	r24, 0x0D	; 13
    18cc:	91 05       	cpc	r25, r1
    18ce:	a1 05       	cpc	r26, r1
    18d0:	b1 05       	cpc	r27, r1
    18d2:	c1 f4       	brne	.+48     	; 0x1904 <cal_op+0x52>
	{
		key=0;
    18d4:	10 92 a6 01 	sts	0x01A6, r1
    18d8:	10 92 a7 01 	sts	0x01A7, r1
    18dc:	10 92 a8 01 	sts	0x01A8, r1
    18e0:	10 92 a9 01 	sts	0x01A9, r1
		op=1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e0       	ldi	r26, 0x00	; 0
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	80 93 aa 01 	sts	0x01AA, r24
    18f0:	90 93 ab 01 	sts	0x01AB, r25
    18f4:	a0 93 ac 01 	sts	0x01AC, r26
    18f8:	b0 93 ad 01 	sts	0x01AD, r27
		op_char='+';
    18fc:	8b e2       	ldi	r24, 0x2B	; 43
    18fe:	80 93 ae 01 	sts	0x01AE, r24
    1902:	e2 c0       	rjmp	.+452    	; 0x1ac8 <cal_op+0x216>
	}

	else if(key==0x0C)		//operation subtraction
    1904:	80 91 a6 01 	lds	r24, 0x01A6
    1908:	90 91 a7 01 	lds	r25, 0x01A7
    190c:	a0 91 a8 01 	lds	r26, 0x01A8
    1910:	b0 91 a9 01 	lds	r27, 0x01A9
    1914:	8c 30       	cpi	r24, 0x0C	; 12
    1916:	91 05       	cpc	r25, r1
    1918:	a1 05       	cpc	r26, r1
    191a:	b1 05       	cpc	r27, r1
    191c:	c1 f4       	brne	.+48     	; 0x194e <cal_op+0x9c>
	{
		key=0;
    191e:	10 92 a6 01 	sts	0x01A6, r1
    1922:	10 92 a7 01 	sts	0x01A7, r1
    1926:	10 92 a8 01 	sts	0x01A8, r1
    192a:	10 92 a9 01 	sts	0x01A9, r1
		op=2;
    192e:	82 e0       	ldi	r24, 0x02	; 2
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a0 e0       	ldi	r26, 0x00	; 0
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	80 93 aa 01 	sts	0x01AA, r24
    193a:	90 93 ab 01 	sts	0x01AB, r25
    193e:	a0 93 ac 01 	sts	0x01AC, r26
    1942:	b0 93 ad 01 	sts	0x01AD, r27
		op_char='-';
    1946:	8d e2       	ldi	r24, 0x2D	; 45
    1948:	80 93 ae 01 	sts	0x01AE, r24
    194c:	bd c0       	rjmp	.+378    	; 0x1ac8 <cal_op+0x216>
	}

	else if(key==0x0B)		//operation multiplication
    194e:	80 91 a6 01 	lds	r24, 0x01A6
    1952:	90 91 a7 01 	lds	r25, 0x01A7
    1956:	a0 91 a8 01 	lds	r26, 0x01A8
    195a:	b0 91 a9 01 	lds	r27, 0x01A9
    195e:	8b 30       	cpi	r24, 0x0B	; 11
    1960:	91 05       	cpc	r25, r1
    1962:	a1 05       	cpc	r26, r1
    1964:	b1 05       	cpc	r27, r1
    1966:	c1 f4       	brne	.+48     	; 0x1998 <cal_op+0xe6>
	{
		key=0;
    1968:	10 92 a6 01 	sts	0x01A6, r1
    196c:	10 92 a7 01 	sts	0x01A7, r1
    1970:	10 92 a8 01 	sts	0x01A8, r1
    1974:	10 92 a9 01 	sts	0x01A9, r1
		op=3;
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a0 e0       	ldi	r26, 0x00	; 0
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	80 93 aa 01 	sts	0x01AA, r24
    1984:	90 93 ab 01 	sts	0x01AB, r25
    1988:	a0 93 ac 01 	sts	0x01AC, r26
    198c:	b0 93 ad 01 	sts	0x01AD, r27
		op_char='x';
    1990:	88 e7       	ldi	r24, 0x78	; 120
    1992:	80 93 ae 01 	sts	0x01AE, r24
    1996:	98 c0       	rjmp	.+304    	; 0x1ac8 <cal_op+0x216>
	}

	else if(key==0x0A)		//operation division
    1998:	80 91 a6 01 	lds	r24, 0x01A6
    199c:	90 91 a7 01 	lds	r25, 0x01A7
    19a0:	a0 91 a8 01 	lds	r26, 0x01A8
    19a4:	b0 91 a9 01 	lds	r27, 0x01A9
    19a8:	8a 30       	cpi	r24, 0x0A	; 10
    19aa:	91 05       	cpc	r25, r1
    19ac:	a1 05       	cpc	r26, r1
    19ae:	b1 05       	cpc	r27, r1
    19b0:	c1 f4       	brne	.+48     	; 0x19e2 <cal_op+0x130>
	{
		key=0;
    19b2:	10 92 a6 01 	sts	0x01A6, r1
    19b6:	10 92 a7 01 	sts	0x01A7, r1
    19ba:	10 92 a8 01 	sts	0x01A8, r1
    19be:	10 92 a9 01 	sts	0x01A9, r1
		op=4;
    19c2:	84 e0       	ldi	r24, 0x04	; 4
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a0 e0       	ldi	r26, 0x00	; 0
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	80 93 aa 01 	sts	0x01AA, r24
    19ce:	90 93 ab 01 	sts	0x01AB, r25
    19d2:	a0 93 ac 01 	sts	0x01AC, r26
    19d6:	b0 93 ad 01 	sts	0x01AD, r27
		op_char='/';
    19da:	8f e2       	ldi	r24, 0x2F	; 47
    19dc:	80 93 ae 01 	sts	0x01AE, r24
    19e0:	73 c0       	rjmp	.+230    	; 0x1ac8 <cal_op+0x216>
	}

	else if(key==0x0E)		//operation execution
    19e2:	80 91 a6 01 	lds	r24, 0x01A6
    19e6:	90 91 a7 01 	lds	r25, 0x01A7
    19ea:	a0 91 a8 01 	lds	r26, 0x01A8
    19ee:	b0 91 a9 01 	lds	r27, 0x01A9
    19f2:	8e 30       	cpi	r24, 0x0E	; 14
    19f4:	91 05       	cpc	r25, r1
    19f6:	a1 05       	cpc	r26, r1
    19f8:	b1 05       	cpc	r27, r1
    19fa:	a9 f4       	brne	.+42     	; 0x1a26 <cal_op+0x174>
	{
		key=0;
    19fc:	10 92 a6 01 	sts	0x01A6, r1
    1a00:	10 92 a7 01 	sts	0x01A7, r1
    1a04:	10 92 a8 01 	sts	0x01A8, r1
    1a08:	10 92 a9 01 	sts	0x01A9, r1
		op=5;
    1a0c:	85 e0       	ldi	r24, 0x05	; 5
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	a0 e0       	ldi	r26, 0x00	; 0
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	80 93 aa 01 	sts	0x01AA, r24
    1a18:	90 93 ab 01 	sts	0x01AB, r25
    1a1c:	a0 93 ac 01 	sts	0x01AC, r26
    1a20:	b0 93 ad 01 	sts	0x01AD, r27
    1a24:	51 c0       	rjmp	.+162    	; 0x1ac8 <cal_op+0x216>
	}

	else if(key=='0')		//allow ZERO-Bug Fix
    1a26:	80 91 a6 01 	lds	r24, 0x01A6
    1a2a:	90 91 a7 01 	lds	r25, 0x01A7
    1a2e:	a0 91 a8 01 	lds	r26, 0x01A8
    1a32:	b0 91 a9 01 	lds	r27, 0x01A9
    1a36:	80 33       	cpi	r24, 0x30	; 48
    1a38:	91 05       	cpc	r25, r1
    1a3a:	a1 05       	cpc	r26, r1
    1a3c:	b1 05       	cpc	r27, r1
    1a3e:	49 f4       	brne	.+18     	; 0x1a52 <cal_op+0x1a0>
	{
		key=0;
    1a40:	10 92 a6 01 	sts	0x01A6, r1
    1a44:	10 92 a7 01 	sts	0x01A7, r1
    1a48:	10 92 a8 01 	sts	0x01A8, r1
    1a4c:	10 92 a9 01 	sts	0x01A9, r1
    1a50:	3b c0       	rjmp	.+118    	; 0x1ac8 <cal_op+0x216>
	}

	else if(key==0x0F)		//operation on/clear
    1a52:	80 91 a6 01 	lds	r24, 0x01A6
    1a56:	90 91 a7 01 	lds	r25, 0x01A7
    1a5a:	a0 91 a8 01 	lds	r26, 0x01A8
    1a5e:	b0 91 a9 01 	lds	r27, 0x01A9
    1a62:	8f 30       	cpi	r24, 0x0F	; 15
    1a64:	91 05       	cpc	r25, r1
    1a66:	a1 05       	cpc	r26, r1
    1a68:	b1 05       	cpc	r27, r1
    1a6a:	71 f5       	brne	.+92     	; 0x1ac8 <cal_op+0x216>
	{
		a=0;
    1a6c:	10 92 c7 01 	sts	0x01C7, r1
    1a70:	10 92 c8 01 	sts	0x01C8, r1
    1a74:	10 92 c9 01 	sts	0x01C9, r1
    1a78:	10 92 ca 01 	sts	0x01CA, r1
		b=0;
    1a7c:	10 92 c3 01 	sts	0x01C3, r1
    1a80:	10 92 c4 01 	sts	0x01C4, r1
    1a84:	10 92 c5 01 	sts	0x01C5, r1
    1a88:	10 92 c6 01 	sts	0x01C6, r1
		result=0;
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e0       	ldi	r26, 0x00	; 0
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	80 93 af 01 	sts	0x01AF, r24
    1a98:	90 93 b0 01 	sts	0x01B0, r25
    1a9c:	a0 93 b1 01 	sts	0x01B1, r26
    1aa0:	b0 93 b2 01 	sts	0x01B2, r27
		op=0;
    1aa4:	10 92 aa 01 	sts	0x01AA, r1
    1aa8:	10 92 ab 01 	sts	0x01AB, r1
    1aac:	10 92 ac 01 	sts	0x01AC, r1
    1ab0:	10 92 ad 01 	sts	0x01AD, r1
		key = 0;
    1ab4:	10 92 a6 01 	sts	0x01A6, r1
    1ab8:	10 92 a7 01 	sts	0x01A7, r1
    1abc:	10 92 a8 01 	sts	0x01A8, r1
    1ac0:	10 92 a9 01 	sts	0x01A9, r1
		clr_dis();
    1ac4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <clr_dis>
	}
}
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <cal_run>:

/*run the calculation process*/


void cal_run(void)
{
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62

		if(op==0)										//if no operation is selected then store the first number
    1ade:	80 91 aa 01 	lds	r24, 0x01AA
    1ae2:	90 91 ab 01 	lds	r25, 0x01AB
    1ae6:	a0 91 ac 01 	lds	r26, 0x01AC
    1aea:	b0 91 ad 01 	lds	r27, 0x01AD
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	a1 05       	cpc	r26, r1
    1af2:	b1 05       	cpc	r27, r1
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <cal_run+0x2a>
    1af6:	58 c0       	rjmp	.+176    	; 0x1ba8 <cal_run+0xda>
		{
			a=a*10+key;									//storing number of n digits
    1af8:	80 91 c7 01 	lds	r24, 0x01C7
    1afc:	90 91 c8 01 	lds	r25, 0x01C8
    1b00:	a0 91 c9 01 	lds	r26, 0x01C9
    1b04:	b0 91 ca 01 	lds	r27, 0x01CA
    1b08:	2a e0       	ldi	r18, 0x0A	; 10
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 02 12 	call	0x2404	; 0x2404 <__mulsi3>
    1b18:	9b 01       	movw	r18, r22
    1b1a:	ac 01       	movw	r20, r24
    1b1c:	80 91 a6 01 	lds	r24, 0x01A6
    1b20:	90 91 a7 01 	lds	r25, 0x01A7
    1b24:	a0 91 a8 01 	lds	r26, 0x01A8
    1b28:	b0 91 a9 01 	lds	r27, 0x01A9
    1b2c:	82 0f       	add	r24, r18
    1b2e:	93 1f       	adc	r25, r19
    1b30:	a4 1f       	adc	r26, r20
    1b32:	b5 1f       	adc	r27, r21
    1b34:	80 93 c7 01 	sts	0x01C7, r24
    1b38:	90 93 c8 01 	sts	0x01C8, r25
    1b3c:	a0 93 c9 01 	sts	0x01C9, r26
    1b40:	b0 93 ca 01 	sts	0x01CA, r27
			sprintf(lcd_buf,"%1li",a);
    1b44:	20 91 c7 01 	lds	r18, 0x01C7
    1b48:	30 91 c8 01 	lds	r19, 0x01C8
    1b4c:	40 91 c9 01 	lds	r20, 0x01C9
    1b50:	50 91 ca 01 	lds	r21, 0x01CA
    1b54:	0d b7       	in	r16, 0x3d	; 61
    1b56:	1e b7       	in	r17, 0x3e	; 62
    1b58:	08 50       	subi	r16, 0x08	; 8
    1b5a:	10 40       	sbci	r17, 0x00	; 0
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	1e bf       	out	0x3e, r17	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	0d bf       	out	0x3d, r16	; 61
    1b66:	ed b7       	in	r30, 0x3d	; 61
    1b68:	fe b7       	in	r31, 0x3e	; 62
    1b6a:	31 96       	adiw	r30, 0x01	; 1
    1b6c:	83 eb       	ldi	r24, 0xB3	; 179
    1b6e:	91 e0       	ldi	r25, 0x01	; 1
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	80 83       	st	Z, r24
    1b74:	80 e6       	ldi	r24, 0x60	; 96
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	93 83       	std	Z+3, r25	; 0x03
    1b7a:	82 83       	std	Z+2, r24	; 0x02
    1b7c:	24 83       	std	Z+4, r18	; 0x04
    1b7e:	35 83       	std	Z+5, r19	; 0x05
    1b80:	46 83       	std	Z+6, r20	; 0x06
    1b82:	57 83       	std	Z+7, r21	; 0x07
    1b84:	0e 94 58 12 	call	0x24b0	; 0x24b0 <sprintf>
    1b88:	8d b7       	in	r24, 0x3d	; 61
    1b8a:	9e b7       	in	r25, 0x3e	; 62
    1b8c:	08 96       	adiw	r24, 0x08	; 8
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	9e bf       	out	0x3e, r25	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	8d bf       	out	0x3d, r24	; 61
			dis_string(0,0,lcd_buf);
    1b98:	23 eb       	ldi	r18, 0xB3	; 179
    1b9a:	31 e0       	ldi	r19, 0x01	; 1
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	a9 01       	movw	r20, r18
    1ba2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <dis_string>
    1ba6:	ab c1       	rjmp	.+854    	; 0x1efe <cal_run+0x430>
		}
														//if Any operation is selected then start storing the second number
		else if(op==1 || op==2 || op==3 || op==4)
    1ba8:	80 91 aa 01 	lds	r24, 0x01AA
    1bac:	90 91 ab 01 	lds	r25, 0x01AB
    1bb0:	a0 91 ac 01 	lds	r26, 0x01AC
    1bb4:	b0 91 ad 01 	lds	r27, 0x01AD
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	a1 05       	cpc	r26, r1
    1bbe:	b1 05       	cpc	r27, r1
    1bc0:	41 f1       	breq	.+80     	; 0x1c12 <cal_run+0x144>
    1bc2:	80 91 aa 01 	lds	r24, 0x01AA
    1bc6:	90 91 ab 01 	lds	r25, 0x01AB
    1bca:	a0 91 ac 01 	lds	r26, 0x01AC
    1bce:	b0 91 ad 01 	lds	r27, 0x01AD
    1bd2:	82 30       	cpi	r24, 0x02	; 2
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	a1 05       	cpc	r26, r1
    1bd8:	b1 05       	cpc	r27, r1
    1bda:	d9 f0       	breq	.+54     	; 0x1c12 <cal_run+0x144>
    1bdc:	80 91 aa 01 	lds	r24, 0x01AA
    1be0:	90 91 ab 01 	lds	r25, 0x01AB
    1be4:	a0 91 ac 01 	lds	r26, 0x01AC
    1be8:	b0 91 ad 01 	lds	r27, 0x01AD
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	91 05       	cpc	r25, r1
    1bf0:	a1 05       	cpc	r26, r1
    1bf2:	b1 05       	cpc	r27, r1
    1bf4:	71 f0       	breq	.+28     	; 0x1c12 <cal_run+0x144>
    1bf6:	80 91 aa 01 	lds	r24, 0x01AA
    1bfa:	90 91 ab 01 	lds	r25, 0x01AB
    1bfe:	a0 91 ac 01 	lds	r26, 0x01AC
    1c02:	b0 91 ad 01 	lds	r27, 0x01AD
    1c06:	84 30       	cpi	r24, 0x04	; 4
    1c08:	91 05       	cpc	r25, r1
    1c0a:	a1 05       	cpc	r26, r1
    1c0c:	b1 05       	cpc	r27, r1
    1c0e:	09 f0       	breq	.+2      	; 0x1c12 <cal_run+0x144>
    1c10:	6a c0       	rjmp	.+212    	; 0x1ce6 <cal_run+0x218>
		{
			b=b*10+key;									//display both numbers at the same time through lcd buffer
    1c12:	80 91 c3 01 	lds	r24, 0x01C3
    1c16:	90 91 c4 01 	lds	r25, 0x01C4
    1c1a:	a0 91 c5 01 	lds	r26, 0x01C5
    1c1e:	b0 91 c6 01 	lds	r27, 0x01C6
    1c22:	2a e0       	ldi	r18, 0x0A	; 10
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 02 12 	call	0x2404	; 0x2404 <__mulsi3>
    1c32:	9b 01       	movw	r18, r22
    1c34:	ac 01       	movw	r20, r24
    1c36:	80 91 a6 01 	lds	r24, 0x01A6
    1c3a:	90 91 a7 01 	lds	r25, 0x01A7
    1c3e:	a0 91 a8 01 	lds	r26, 0x01A8
    1c42:	b0 91 a9 01 	lds	r27, 0x01A9
    1c46:	82 0f       	add	r24, r18
    1c48:	93 1f       	adc	r25, r19
    1c4a:	a4 1f       	adc	r26, r20
    1c4c:	b5 1f       	adc	r27, r21
    1c4e:	80 93 c3 01 	sts	0x01C3, r24
    1c52:	90 93 c4 01 	sts	0x01C4, r25
    1c56:	a0 93 c5 01 	sts	0x01C5, r26
    1c5a:	b0 93 c6 01 	sts	0x01C6, r27
			sprintf(lcd_buf,"%1li%c%1li",a,op_char,b);
    1c5e:	20 91 c7 01 	lds	r18, 0x01C7
    1c62:	30 91 c8 01 	lds	r19, 0x01C8
    1c66:	40 91 c9 01 	lds	r20, 0x01C9
    1c6a:	50 91 ca 01 	lds	r21, 0x01CA
    1c6e:	80 91 ae 01 	lds	r24, 0x01AE
    1c72:	68 2f       	mov	r22, r24
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	e0 90 c3 01 	lds	r14, 0x01C3
    1c7a:	f0 90 c4 01 	lds	r15, 0x01C4
    1c7e:	00 91 c5 01 	lds	r16, 0x01C5
    1c82:	10 91 c6 01 	lds	r17, 0x01C6
    1c86:	8d b7       	in	r24, 0x3d	; 61
    1c88:	9e b7       	in	r25, 0x3e	; 62
    1c8a:	0e 97       	sbiw	r24, 0x0e	; 14
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	9e bf       	out	0x3e, r25	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	8d bf       	out	0x3d, r24	; 61
    1c96:	ed b7       	in	r30, 0x3d	; 61
    1c98:	fe b7       	in	r31, 0x3e	; 62
    1c9a:	31 96       	adiw	r30, 0x01	; 1
    1c9c:	83 eb       	ldi	r24, 0xB3	; 179
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
    1ca4:	85 e6       	ldi	r24, 0x65	; 101
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	93 83       	std	Z+3, r25	; 0x03
    1caa:	82 83       	std	Z+2, r24	; 0x02
    1cac:	24 83       	std	Z+4, r18	; 0x04
    1cae:	35 83       	std	Z+5, r19	; 0x05
    1cb0:	46 83       	std	Z+6, r20	; 0x06
    1cb2:	57 83       	std	Z+7, r21	; 0x07
    1cb4:	71 87       	std	Z+9, r23	; 0x09
    1cb6:	60 87       	std	Z+8, r22	; 0x08
    1cb8:	e2 86       	std	Z+10, r14	; 0x0a
    1cba:	f3 86       	std	Z+11, r15	; 0x0b
    1cbc:	04 87       	std	Z+12, r16	; 0x0c
    1cbe:	15 87       	std	Z+13, r17	; 0x0d
    1cc0:	0e 94 58 12 	call	0x24b0	; 0x24b0 <sprintf>
    1cc4:	0d b7       	in	r16, 0x3d	; 61
    1cc6:	1e b7       	in	r17, 0x3e	; 62
    1cc8:	02 5f       	subi	r16, 0xF2	; 242
    1cca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	1e bf       	out	0x3e, r17	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	0d bf       	out	0x3d, r16	; 61
			dis_string(0,0,lcd_buf);
    1cd6:	23 eb       	ldi	r18, 0xB3	; 179
    1cd8:	31 e0       	ldi	r19, 0x01	; 1
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	a9 01       	movw	r20, r18
    1ce0:	0e 94 0c 0c 	call	0x1818	; 0x1818 <dis_string>
    1ce4:	0c c1       	rjmp	.+536    	; 0x1efe <cal_run+0x430>
		}

		else if(op==5)									//if operation execute is selected
    1ce6:	80 91 aa 01 	lds	r24, 0x01AA
    1cea:	90 91 ab 01 	lds	r25, 0x01AB
    1cee:	a0 91 ac 01 	lds	r26, 0x01AC
    1cf2:	b0 91 ad 01 	lds	r27, 0x01AD
    1cf6:	85 30       	cpi	r24, 0x05	; 5
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	a1 05       	cpc	r26, r1
    1cfc:	b1 05       	cpc	r27, r1
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <cal_run+0x234>
    1d00:	fe c0       	rjmp	.+508    	; 0x1efe <cal_run+0x430>
		{
														//select between different operations
			if(op_char=='+')
    1d02:	80 91 ae 01 	lds	r24, 0x01AE
    1d06:	8b 32       	cpi	r24, 0x2B	; 43
    1d08:	19 f5       	brne	.+70     	; 0x1d50 <cal_run+0x282>
				result=a+b;
    1d0a:	20 91 c7 01 	lds	r18, 0x01C7
    1d0e:	30 91 c8 01 	lds	r19, 0x01C8
    1d12:	40 91 c9 01 	lds	r20, 0x01C9
    1d16:	50 91 ca 01 	lds	r21, 0x01CA
    1d1a:	80 91 c3 01 	lds	r24, 0x01C3
    1d1e:	90 91 c4 01 	lds	r25, 0x01C4
    1d22:	a0 91 c5 01 	lds	r26, 0x01C5
    1d26:	b0 91 c6 01 	lds	r27, 0x01C6
    1d2a:	82 0f       	add	r24, r18
    1d2c:	93 1f       	adc	r25, r19
    1d2e:	a4 1f       	adc	r26, r20
    1d30:	b5 1f       	adc	r27, r21
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	80 93 af 01 	sts	0x01AF, r24
    1d42:	90 93 b0 01 	sts	0x01B0, r25
    1d46:	a0 93 b1 01 	sts	0x01B1, r26
    1d4a:	b0 93 b2 01 	sts	0x01B2, r27
    1d4e:	82 c0       	rjmp	.+260    	; 0x1e54 <cal_run+0x386>

			else if(op_char=='-')
    1d50:	80 91 ae 01 	lds	r24, 0x01AE
    1d54:	8d 32       	cpi	r24, 0x2D	; 45
    1d56:	39 f5       	brne	.+78     	; 0x1da6 <cal_run+0x2d8>
				result=a-b;
    1d58:	20 91 c7 01 	lds	r18, 0x01C7
    1d5c:	30 91 c8 01 	lds	r19, 0x01C8
    1d60:	40 91 c9 01 	lds	r20, 0x01C9
    1d64:	50 91 ca 01 	lds	r21, 0x01CA
    1d68:	80 91 c3 01 	lds	r24, 0x01C3
    1d6c:	90 91 c4 01 	lds	r25, 0x01C4
    1d70:	a0 91 c5 01 	lds	r26, 0x01C5
    1d74:	b0 91 c6 01 	lds	r27, 0x01C6
    1d78:	79 01       	movw	r14, r18
    1d7a:	8a 01       	movw	r16, r20
    1d7c:	e8 1a       	sub	r14, r24
    1d7e:	f9 0a       	sbc	r15, r25
    1d80:	0a 0b       	sbc	r16, r26
    1d82:	1b 0b       	sbc	r17, r27
    1d84:	d8 01       	movw	r26, r16
    1d86:	c7 01       	movw	r24, r14
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	80 93 af 01 	sts	0x01AF, r24
    1d98:	90 93 b0 01 	sts	0x01B0, r25
    1d9c:	a0 93 b1 01 	sts	0x01B1, r26
    1da0:	b0 93 b2 01 	sts	0x01B2, r27
    1da4:	57 c0       	rjmp	.+174    	; 0x1e54 <cal_run+0x386>

			else if(op_char=='x')
    1da6:	80 91 ae 01 	lds	r24, 0x01AE
    1daa:	88 37       	cpi	r24, 0x78	; 120
    1dac:	29 f5       	brne	.+74     	; 0x1df8 <cal_run+0x32a>
				result=a*b;
    1dae:	80 91 c7 01 	lds	r24, 0x01C7
    1db2:	90 91 c8 01 	lds	r25, 0x01C8
    1db6:	a0 91 c9 01 	lds	r26, 0x01C9
    1dba:	b0 91 ca 01 	lds	r27, 0x01CA
    1dbe:	20 91 c3 01 	lds	r18, 0x01C3
    1dc2:	30 91 c4 01 	lds	r19, 0x01C4
    1dc6:	40 91 c5 01 	lds	r20, 0x01C5
    1dca:	50 91 c6 01 	lds	r21, 0x01C6
    1dce:	bc 01       	movw	r22, r24
    1dd0:	cd 01       	movw	r24, r26
    1dd2:	0e 94 02 12 	call	0x2404	; 0x2404 <__mulsi3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	80 93 af 01 	sts	0x01AF, r24
    1dea:	90 93 b0 01 	sts	0x01B0, r25
    1dee:	a0 93 b1 01 	sts	0x01B1, r26
    1df2:	b0 93 b2 01 	sts	0x01B2, r27
    1df6:	2e c0       	rjmp	.+92     	; 0x1e54 <cal_run+0x386>

			else if(op_char=='/')
    1df8:	80 91 ae 01 	lds	r24, 0x01AE
    1dfc:	8f 32       	cpi	r24, 0x2F	; 47
    1dfe:	51 f5       	brne	.+84     	; 0x1e54 <cal_run+0x386>
				result=(float)a/b;
    1e00:	80 91 c7 01 	lds	r24, 0x01C7
    1e04:	90 91 c8 01 	lds	r25, 0x01C8
    1e08:	a0 91 c9 01 	lds	r26, 0x01C9
    1e0c:	b0 91 ca 01 	lds	r27, 0x01CA
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1e18:	7b 01       	movw	r14, r22
    1e1a:	8c 01       	movw	r16, r24
    1e1c:	80 91 c3 01 	lds	r24, 0x01C3
    1e20:	90 91 c4 01 	lds	r25, 0x01C4
    1e24:	a0 91 c5 01 	lds	r26, 0x01C5
    1e28:	b0 91 c6 01 	lds	r27, 0x01C6
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1e34:	9b 01       	movw	r18, r22
    1e36:	ac 01       	movw	r20, r24
    1e38:	c8 01       	movw	r24, r16
    1e3a:	b7 01       	movw	r22, r14
    1e3c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	80 93 af 01 	sts	0x01AF, r24
    1e48:	90 93 b0 01 	sts	0x01B0, r25
    1e4c:	a0 93 b1 01 	sts	0x01B1, r26
    1e50:	b0 93 b2 01 	sts	0x01B2, r27
														//display the result
			sprintf(lcd_buf,"=%.2f",result);
    1e54:	20 91 af 01 	lds	r18, 0x01AF
    1e58:	30 91 b0 01 	lds	r19, 0x01B0
    1e5c:	40 91 b1 01 	lds	r20, 0x01B1
    1e60:	50 91 b2 01 	lds	r21, 0x01B2
    1e64:	0d b7       	in	r16, 0x3d	; 61
    1e66:	1e b7       	in	r17, 0x3e	; 62
    1e68:	08 50       	subi	r16, 0x08	; 8
    1e6a:	10 40       	sbci	r17, 0x00	; 0
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	1e bf       	out	0x3e, r17	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	0d bf       	out	0x3d, r16	; 61
    1e76:	ed b7       	in	r30, 0x3d	; 61
    1e78:	fe b7       	in	r31, 0x3e	; 62
    1e7a:	31 96       	adiw	r30, 0x01	; 1
    1e7c:	83 eb       	ldi	r24, 0xB3	; 179
    1e7e:	91 e0       	ldi	r25, 0x01	; 1
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	80 83       	st	Z, r24
    1e84:	80 e7       	ldi	r24, 0x70	; 112
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	93 83       	std	Z+3, r25	; 0x03
    1e8a:	82 83       	std	Z+2, r24	; 0x02
    1e8c:	24 83       	std	Z+4, r18	; 0x04
    1e8e:	35 83       	std	Z+5, r19	; 0x05
    1e90:	46 83       	std	Z+6, r20	; 0x06
    1e92:	57 83       	std	Z+7, r21	; 0x07
    1e94:	0e 94 58 12 	call	0x24b0	; 0x24b0 <sprintf>
    1e98:	8d b7       	in	r24, 0x3d	; 61
    1e9a:	9e b7       	in	r25, 0x3e	; 62
    1e9c:	08 96       	adiw	r24, 0x08	; 8
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	9e bf       	out	0x3e, r25	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	8d bf       	out	0x3d, r24	; 61
			dis_string(1,0,lcd_buf);
    1ea8:	23 eb       	ldi	r18, 0xB3	; 179
    1eaa:	31 e0       	ldi	r19, 0x01	; 1
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	a9 01       	movw	r20, r18
    1eb2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <dis_string>

			a=0;										//clear the memory for next calculation
    1eb6:	10 92 c7 01 	sts	0x01C7, r1
    1eba:	10 92 c8 01 	sts	0x01C8, r1
    1ebe:	10 92 c9 01 	sts	0x01C9, r1
    1ec2:	10 92 ca 01 	sts	0x01CA, r1
			b=0;
    1ec6:	10 92 c3 01 	sts	0x01C3, r1
    1eca:	10 92 c4 01 	sts	0x01C4, r1
    1ece:	10 92 c5 01 	sts	0x01C5, r1
    1ed2:	10 92 c6 01 	sts	0x01C6, r1
			result=0;
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e0       	ldi	r26, 0x00	; 0
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	80 93 af 01 	sts	0x01AF, r24
    1ee2:	90 93 b0 01 	sts	0x01B0, r25
    1ee6:	a0 93 b1 01 	sts	0x01B1, r26
    1eea:	b0 93 b2 01 	sts	0x01B2, r27
			op=0;
    1eee:	10 92 aa 01 	sts	0x01AA, r1
    1ef2:	10 92 ab 01 	sts	0x01AB, r1
    1ef6:	10 92 ac 01 	sts	0x01AC, r1
    1efa:	10 92 ad 01 	sts	0x01AD, r1
		}
}
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	08 95       	ret

00001f0c <calculate>:

/*run the calculator*/


void calculate(void)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
		key = key_scan();		//obtain key pressed
    1f14:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <key_scan>
    1f18:	88 2f       	mov	r24, r24
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 e0       	ldi	r26, 0x00	; 0
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	80 93 a6 01 	sts	0x01A6, r24
    1f24:	90 93 a7 01 	sts	0x01A7, r25
    1f28:	a0 93 a8 01 	sts	0x01A8, r26
    1f2c:	b0 93 a9 01 	sts	0x01A9, r27

		if (key != 0)			//if key = true
    1f30:	80 91 a6 01 	lds	r24, 0x01A6
    1f34:	90 91 a7 01 	lds	r25, 0x01A7
    1f38:	a0 91 a8 01 	lds	r26, 0x01A8
    1f3c:	b0 91 a9 01 	lds	r27, 0x01A9
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	a1 05       	cpc	r26, r1
    1f44:	b1 05       	cpc	r27, r1
    1f46:	61 f0       	breq	.+24     	; 0x1f60 <calculate+0x54>
		{
			cal_op();			//first check if pressed key is operation identifier
    1f48:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <cal_op>
			cal_run();			//store number or apply operation
    1f4c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <cal_run>
			key = 0;			//clear key for next trial
    1f50:	10 92 a6 01 	sts	0x01A6, r1
    1f54:	10 92 a7 01 	sts	0x01A7, r1
    1f58:	10 92 a8 01 	sts	0x01A8, r1
    1f5c:	10 92 a9 01 	sts	0x01A9, r1
		}
}
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <main>:




int main(void)
{
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	6e 97       	sbiw	r28, 0x1e	; 30
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
		cal_init();
    1f7a:	0e 94 4e 0c 	call	0x189c	; 0x189c <cal_init>

			dis_string(0,0,"When      Come    ;)");
    1f7e:	26 e7       	ldi	r18, 0x76	; 118
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	a9 01       	movw	r20, r18
    1f88:	0e 94 0c 0c 	call	0x1818	; 0x1818 <dis_string>
			dis_string(1,4,"Dreams    True ;)");
    1f8c:	2b e8       	ldi	r18, 0x8B	; 139
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	64 e0       	ldi	r22, 0x04	; 4
    1f94:	a9 01       	movw	r20, r18
    1f96:	0e 94 0c 0c 	call	0x1818	; 0x1818 <dis_string>
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	a8 e4       	ldi	r26, 0x48	; 72
    1fa0:	b2 e4       	ldi	r27, 0x42	; 66
    1fa2:	89 8f       	std	Y+25, r24	; 0x19
    1fa4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fa6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fa8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1faa:	69 8d       	ldd	r22, Y+25	; 0x19
    1fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e8       	ldi	r19, 0x80	; 128
    1fb6:	4b e3       	ldi	r20, 0x3B	; 59
    1fb8:	55 e4       	ldi	r21, 0x45	; 69
    1fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	8d 8b       	std	Y+21, r24	; 0x15
    1fc4:	9e 8b       	std	Y+22, r25	; 0x16
    1fc6:	af 8b       	std	Y+23, r26	; 0x17
    1fc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fca:	6d 89       	ldd	r22, Y+21	; 0x15
    1fcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fce:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e8       	ldi	r20, 0x80	; 128
    1fd8:	5f e3       	ldi	r21, 0x3F	; 63
    1fda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fde:	88 23       	and	r24, r24
    1fe0:	2c f4       	brge	.+10     	; 0x1fec <main+0x86>
		__ticks = 1;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9c 8b       	std	Y+20, r25	; 0x14
    1fe8:	8b 8b       	std	Y+19, r24	; 0x13
    1fea:	3f c0       	rjmp	.+126    	; 0x206a <main+0x104>
	else if (__tmp > 65535)
    1fec:	6d 89       	ldd	r22, Y+21	; 0x15
    1fee:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	3f ef       	ldi	r19, 0xFF	; 255
    1ff8:	4f e7       	ldi	r20, 0x7F	; 127
    1ffa:	57 e4       	ldi	r21, 0x47	; 71
    1ffc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2000:	18 16       	cp	r1, r24
    2002:	4c f5       	brge	.+82     	; 0x2056 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2004:	69 8d       	ldd	r22, Y+25	; 0x19
    2006:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2008:	8b 8d       	ldd	r24, Y+27	; 0x1b
    200a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e2       	ldi	r20, 0x20	; 32
    2012:	51 e4       	ldi	r21, 0x41	; 65
    2014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	bc 01       	movw	r22, r24
    201e:	cd 01       	movw	r24, r26
    2020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9c 8b       	std	Y+20, r25	; 0x14
    202a:	8b 8b       	std	Y+19, r24	; 0x13
    202c:	0f c0       	rjmp	.+30     	; 0x204c <main+0xe6>
    202e:	8c e2       	ldi	r24, 0x2C	; 44
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	9a 8b       	std	Y+18, r25	; 0x12
    2034:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2036:	89 89       	ldd	r24, Y+17	; 0x11
    2038:	9a 89       	ldd	r25, Y+18	; 0x12
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <main+0xd4>
    203e:	9a 8b       	std	Y+18, r25	; 0x12
    2040:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2042:	8b 89       	ldd	r24, Y+19	; 0x13
    2044:	9c 89       	ldd	r25, Y+20	; 0x14
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	9c 8b       	std	Y+20, r25	; 0x14
    204a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204c:	8b 89       	ldd	r24, Y+19	; 0x13
    204e:	9c 89       	ldd	r25, Y+20	; 0x14
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	69 f7       	brne	.-38     	; 0x202e <main+0xc8>
    2054:	14 c0       	rjmp	.+40     	; 0x207e <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2056:	6d 89       	ldd	r22, Y+21	; 0x15
    2058:	7e 89       	ldd	r23, Y+22	; 0x16
    205a:	8f 89       	ldd	r24, Y+23	; 0x17
    205c:	98 8d       	ldd	r25, Y+24	; 0x18
    205e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	9c 8b       	std	Y+20, r25	; 0x14
    2068:	8b 8b       	std	Y+19, r24	; 0x13
    206a:	8b 89       	ldd	r24, Y+19	; 0x13
    206c:	9c 89       	ldd	r25, Y+20	; 0x14
    206e:	98 8b       	std	Y+16, r25	; 0x10
    2070:	8f 87       	std	Y+15, r24	; 0x0f
    2072:	8f 85       	ldd	r24, Y+15	; 0x0f
    2074:	98 89       	ldd	r25, Y+16	; 0x10
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <main+0x110>
    207a:	98 8b       	std	Y+16, r25	; 0x10
    207c:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(50);

			for (int start = 0;start < 25; ++start)
    207e:	1e 8e       	std	Y+30, r1	; 0x1e
    2080:	1d 8e       	std	Y+29, r1	; 0x1d
    2082:	7a c0       	rjmp	.+244    	; 0x2178 <main+0x212>
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	a0 ea       	ldi	r26, 0xA0	; 160
    208a:	b0 e4       	ldi	r27, 0x40	; 64
    208c:	8b 87       	std	Y+11, r24	; 0x0b
    208e:	9c 87       	std	Y+12, r25	; 0x0c
    2090:	ad 87       	std	Y+13, r26	; 0x0d
    2092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2094:	6b 85       	ldd	r22, Y+11	; 0x0b
    2096:	7c 85       	ldd	r23, Y+12	; 0x0c
    2098:	8d 85       	ldd	r24, Y+13	; 0x0d
    209a:	9e 85       	ldd	r25, Y+14	; 0x0e
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e8       	ldi	r19, 0x80	; 128
    20a0:	4b e3       	ldi	r20, 0x3B	; 59
    20a2:	55 e4       	ldi	r21, 0x45	; 69
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	8f 83       	std	Y+7, r24	; 0x07
    20ae:	98 87       	std	Y+8, r25	; 0x08
    20b0:	a9 87       	std	Y+9, r26	; 0x09
    20b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b4:	6f 81       	ldd	r22, Y+7	; 0x07
    20b6:	78 85       	ldd	r23, Y+8	; 0x08
    20b8:	89 85       	ldd	r24, Y+9	; 0x09
    20ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c8:	88 23       	and	r24, r24
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <main+0x170>
		__ticks = 1;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	3f c0       	rjmp	.+126    	; 0x2154 <main+0x1ee>
	else if (__tmp > 65535)
    20d6:	6f 81       	ldd	r22, Y+7	; 0x07
    20d8:	78 85       	ldd	r23, Y+8	; 0x08
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	3f ef       	ldi	r19, 0xFF	; 255
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	57 e4       	ldi	r21, 0x47	; 71
    20e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ea:	18 16       	cp	r1, r24
    20ec:	4c f5       	brge	.+82     	; 0x2140 <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9e 83       	std	Y+6, r25	; 0x06
    2114:	8d 83       	std	Y+5, r24	; 0x05
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <main+0x1d0>
    2118:	8c e2       	ldi	r24, 0x2C	; 44
    211a:	91 e0       	ldi	r25, 0x01	; 1
    211c:	9c 83       	std	Y+4, r25	; 0x04
    211e:	8b 83       	std	Y+3, r24	; 0x03
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <main+0x1be>
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	69 f7       	brne	.-38     	; 0x2118 <main+0x1b2>
    213e:	14 c0       	rjmp	.+40     	; 0x2168 <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2140:	6f 81       	ldd	r22, Y+7	; 0x07
    2142:	78 85       	ldd	r23, Y+8	; 0x08
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	9a 85       	ldd	r25, Y+10	; 0x0a
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9e 83       	std	Y+6, r25	; 0x06
    2152:	8d 83       	std	Y+5, r24	; 0x05
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <main+0x1fa>
    2164:	9a 83       	std	Y+2, r25	; 0x02
    2166:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(5);
				dis_shift('L');
    2168:	8c e4       	ldi	r24, 0x4C	; 76
    216a:	0e 94 31 0c 	call	0x1862	; 0x1862 <dis_shift>
			dis_string(0,0,"When      Come    ;)");
			dis_string(1,4,"Dreams    True ;)");

			_delay_ms(50);

			for (int start = 0;start < 25; ++start)
    216e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2170:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2172:	01 96       	adiw	r24, 0x01	; 1
    2174:	9e 8f       	std	Y+30, r25	; 0x1e
    2176:	8d 8f       	std	Y+29, r24	; 0x1d
    2178:	8d 8d       	ldd	r24, Y+29	; 0x1d
    217a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    217c:	89 31       	cpi	r24, 0x19	; 25
    217e:	91 05       	cpc	r25, r1
    2180:	0c f4       	brge	.+2      	; 0x2184 <main+0x21e>
    2182:	80 cf       	rjmp	.-256    	; 0x2084 <main+0x11e>
				dis_shift('L');
			}

    	while(1)
    	{
			calculate();
    2184:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <calculate>
    2188:	fd cf       	rjmp	.-6      	; 0x2184 <main+0x21e>

0000218a <Key_init>:
#include"STD_Types.h"
#include"macros.h"


 void Key_init(void)//initialize keypad
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x0F;			//assign rows bits PA0-PA3 as outputs and columns bits PA4-PA7 as inputs
    2192:	ea e3       	ldi	r30, 0x3A	; 58
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	8f e0       	ldi	r24, 0x0F	; 15
    2198:	80 83       	st	Z, r24
}
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <key_scan>:
  u8  key_scan(void)              //scan pressed key and return it
{
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	2d 97       	sbiw	r28, 0x0d	; 13
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
	u8 cnt, key;

for ( cnt = 0 ; cnt < 4 ; ++cnt )
    21b4:	1a 82       	std	Y+2, r1	; 0x02
    21b6:	42 c0       	rjmp	.+132    	; 0x223c <key_scan+0x9c>
	{   PORTA = 0XFF;				//first level check rows one by one
    21b8:	eb e3       	ldi	r30, 0x3B	; 59
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	8f ef       	ldi	r24, 0xFF	; 255
    21be:	80 83       	st	Z, r24
		if ( cnt == 0 )
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	88 23       	and	r24, r24
    21c4:	39 f4       	brne	.+14     	; 0x21d4 <key_scan+0x34>
			CLEAR_BIT(PORTA,0);		//first row check
    21c6:	ab e3       	ldi	r26, 0x3B	; 59
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	eb e3       	ldi	r30, 0x3B	; 59
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	8e 7f       	andi	r24, 0xFE	; 254
    21d2:	8c 93       	st	X, r24
		if ( cnt == 1 )
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	39 f4       	brne	.+14     	; 0x21e8 <key_scan+0x48>
			CLEAR_BIT(PORTA,1);		//second row check
    21da:	ab e3       	ldi	r26, 0x3B	; 59
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	eb e3       	ldi	r30, 0x3B	; 59
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	8d 7f       	andi	r24, 0xFD	; 253
    21e6:	8c 93       	st	X, r24
		if ( cnt == 2 )
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	82 30       	cpi	r24, 0x02	; 2
    21ec:	39 f4       	brne	.+14     	; 0x21fc <key_scan+0x5c>
			CLEAR_BIT(PORTA,2);		//third row check
    21ee:	ab e3       	ldi	r26, 0x3B	; 59
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	eb e3       	ldi	r30, 0x3B	; 59
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	8b 7f       	andi	r24, 0xFB	; 251
    21fa:	8c 93       	st	X, r24
		if ( cnt == 3 )
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	83 30       	cpi	r24, 0x03	; 3
    2200:	39 f4       	brne	.+14     	; 0x2210 <key_scan+0x70>
			CLEAR_BIT(PORTA,3);		//fourth row check
    2202:	ab e3       	ldi	r26, 0x3B	; 59
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	eb e3       	ldi	r30, 0x3B	; 59
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	87 7f       	andi	r24, 0xF7	; 247
    220e:	8c 93       	st	X, r24
		key = PINA & 0xF0;			//check if any key is pressed
    2210:	e9 e3       	ldi	r30, 0x39	; 57
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	80 7f       	andi	r24, 0xF0	; 240
    2218:	89 83       	std	Y+1, r24	; 0x01
		if ( key != 0xF0 )			//if any key pressed go to the second level
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	80 3f       	cpi	r24, 0xF0	; 240
    221e:	59 f0       	breq	.+22     	; 0x2236 <key_scan+0x96>
		{
			while ( ( PINA & 0xF0 ) != 0xF0 );
    2220:	e9 e3       	ldi	r30, 0x39	; 57
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	88 2f       	mov	r24, r24
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	80 7f       	andi	r24, 0xF0	; 240
    222c:	90 70       	andi	r25, 0x00	; 0
    222e:	80 3f       	cpi	r24, 0xF0	; 240
    2230:	91 05       	cpc	r25, r1
    2232:	b1 f7       	brne	.-20     	; 0x2220 <key_scan+0x80>
    2234:	07 c0       	rjmp	.+14     	; 0x2244 <key_scan+0xa4>
}
  u8  key_scan(void)              //scan pressed key and return it
{
	u8 cnt, key;

for ( cnt = 0 ; cnt < 4 ; ++cnt )
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	8f 5f       	subi	r24, 0xFF	; 255
    223a:	8a 83       	std	Y+2, r24	; 0x02
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	84 30       	cpi	r24, 0x04	; 4
    2240:	08 f4       	brcc	.+2      	; 0x2244 <key_scan+0xa4>
    2242:	ba cf       	rjmp	.-140    	; 0x21b8 <key_scan+0x18>
			while ( ( PINA & 0xF0 ) != 0xF0 );
			break;
		}
	}

		if ( cnt == 4 )					//end of first level scan loop
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	84 30       	cpi	r24, 0x04	; 4
    2248:	11 f4       	brne	.+4      	; 0x224e <key_scan+0xae>
		return 0;
    224a:	1d 86       	std	Y+13, r1	; 0x0d
    224c:	d1 c0       	rjmp	.+418    	; 0x23f0 <key_scan+0x250>

	switch ( cnt )					//scan columns
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	3c 87       	std	Y+12, r19	; 0x0c
    2256:	2b 87       	std	Y+11, r18	; 0x0b
    2258:	8b 85       	ldd	r24, Y+11	; 0x0b
    225a:	9c 85       	ldd	r25, Y+12	; 0x0c
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	91 05       	cpc	r25, r1
    2260:	09 f4       	brne	.+2      	; 0x2264 <key_scan+0xc4>
    2262:	43 c0       	rjmp	.+134    	; 0x22ea <key_scan+0x14a>
    2264:	2b 85       	ldd	r18, Y+11	; 0x0b
    2266:	3c 85       	ldd	r19, Y+12	; 0x0c
    2268:	22 30       	cpi	r18, 0x02	; 2
    226a:	31 05       	cpc	r19, r1
    226c:	2c f4       	brge	.+10     	; 0x2278 <key_scan+0xd8>
    226e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2270:	9c 85       	ldd	r25, Y+12	; 0x0c
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	71 f0       	breq	.+28     	; 0x2292 <key_scan+0xf2>
    2276:	bb c0       	rjmp	.+374    	; 0x23ee <key_scan+0x24e>
    2278:	2b 85       	ldd	r18, Y+11	; 0x0b
    227a:	3c 85       	ldd	r19, Y+12	; 0x0c
    227c:	22 30       	cpi	r18, 0x02	; 2
    227e:	31 05       	cpc	r19, r1
    2280:	09 f4       	brne	.+2      	; 0x2284 <key_scan+0xe4>
    2282:	5f c0       	rjmp	.+190    	; 0x2342 <key_scan+0x1a2>
    2284:	8b 85       	ldd	r24, Y+11	; 0x0b
    2286:	9c 85       	ldd	r25, Y+12	; 0x0c
    2288:	83 30       	cpi	r24, 0x03	; 3
    228a:	91 05       	cpc	r25, r1
    228c:	09 f4       	brne	.+2      	; 0x2290 <key_scan+0xf0>
    228e:	84 c0       	rjmp	.+264    	; 0x2398 <key_scan+0x1f8>
    2290:	ae c0       	rjmp	.+348    	; 0x23ee <key_scan+0x24e>
	{
		case 0:						//case 0 for first row
			switch ( key ) {
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	3a 87       	std	Y+10, r19	; 0x0a
    229a:	29 87       	std	Y+9, r18	; 0x09
    229c:	89 85       	ldd	r24, Y+9	; 0x09
    229e:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a0:	80 3b       	cpi	r24, 0xB0	; 176
    22a2:	91 05       	cpc	r25, r1
    22a4:	e1 f0       	breq	.+56     	; 0x22de <key_scan+0x13e>
    22a6:	29 85       	ldd	r18, Y+9	; 0x09
    22a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    22aa:	21 3b       	cpi	r18, 0xB1	; 177
    22ac:	31 05       	cpc	r19, r1
    22ae:	34 f4       	brge	.+12     	; 0x22bc <key_scan+0x11c>
    22b0:	89 85       	ldd	r24, Y+9	; 0x09
    22b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b4:	80 37       	cpi	r24, 0x70	; 112
    22b6:	91 05       	cpc	r25, r1
    22b8:	a9 f0       	breq	.+42     	; 0x22e4 <key_scan+0x144>
    22ba:	99 c0       	rjmp	.+306    	; 0x23ee <key_scan+0x24e>
    22bc:	29 85       	ldd	r18, Y+9	; 0x09
    22be:	3a 85       	ldd	r19, Y+10	; 0x0a
    22c0:	20 3d       	cpi	r18, 0xD0	; 208
    22c2:	31 05       	cpc	r19, r1
    22c4:	49 f0       	breq	.+18     	; 0x22d8 <key_scan+0x138>
    22c6:	89 85       	ldd	r24, Y+9	; 0x09
    22c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ca:	80 3e       	cpi	r24, 0xE0	; 224
    22cc:	91 05       	cpc	r25, r1
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <key_scan+0x132>
    22d0:	8e c0       	rjmp	.+284    	; 0x23ee <key_scan+0x24e>
					case 0xE0:		//Check if row 1 col 1 --> ( 7 )
					return 0x07;
    22d2:	97 e0       	ldi	r25, 0x07	; 7
    22d4:	9d 87       	std	Y+13, r25	; 0x0d
    22d6:	8c c0       	rjmp	.+280    	; 0x23f0 <key_scan+0x250>
					break;
					case 0xD0:		//Check if row 1 col 2 --> ( 8 )
					return 0x08;
    22d8:	28 e0       	ldi	r18, 0x08	; 8
    22da:	2d 87       	std	Y+13, r18	; 0x0d
    22dc:	89 c0       	rjmp	.+274    	; 0x23f0 <key_scan+0x250>
					break;
					case 0xB0:		//Check if row 1 col 3 --> ( 9 )
					return 0x09;
    22de:	39 e0       	ldi	r19, 0x09	; 9
    22e0:	3d 87       	std	Y+13, r19	; 0x0d
    22e2:	86 c0       	rjmp	.+268    	; 0x23f0 <key_scan+0x250>
					break;
					case 0x70:		//Check if row 1 col 4 --> ( A )
					return 0x0A;
    22e4:	8a e0       	ldi	r24, 0x0A	; 10
    22e6:	8d 87       	std	Y+13, r24	; 0x0d
    22e8:	83 c0       	rjmp	.+262    	; 0x23f0 <key_scan+0x250>
					break; }
		break;

		case 1:						//case 1 for second row

			switch ( key )
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	38 87       	std	Y+8, r19	; 0x08
    22f2:	2f 83       	std	Y+7, r18	; 0x07
    22f4:	8f 81       	ldd	r24, Y+7	; 0x07
    22f6:	98 85       	ldd	r25, Y+8	; 0x08
    22f8:	80 3b       	cpi	r24, 0xB0	; 176
    22fa:	91 05       	cpc	r25, r1
    22fc:	e1 f0       	breq	.+56     	; 0x2336 <key_scan+0x196>
    22fe:	2f 81       	ldd	r18, Y+7	; 0x07
    2300:	38 85       	ldd	r19, Y+8	; 0x08
    2302:	21 3b       	cpi	r18, 0xB1	; 177
    2304:	31 05       	cpc	r19, r1
    2306:	34 f4       	brge	.+12     	; 0x2314 <key_scan+0x174>
    2308:	8f 81       	ldd	r24, Y+7	; 0x07
    230a:	98 85       	ldd	r25, Y+8	; 0x08
    230c:	80 37       	cpi	r24, 0x70	; 112
    230e:	91 05       	cpc	r25, r1
    2310:	a9 f0       	breq	.+42     	; 0x233c <key_scan+0x19c>
    2312:	6d c0       	rjmp	.+218    	; 0x23ee <key_scan+0x24e>
    2314:	2f 81       	ldd	r18, Y+7	; 0x07
    2316:	38 85       	ldd	r19, Y+8	; 0x08
    2318:	20 3d       	cpi	r18, 0xD0	; 208
    231a:	31 05       	cpc	r19, r1
    231c:	49 f0       	breq	.+18     	; 0x2330 <key_scan+0x190>
    231e:	8f 81       	ldd	r24, Y+7	; 0x07
    2320:	98 85       	ldd	r25, Y+8	; 0x08
    2322:	80 3e       	cpi	r24, 0xE0	; 224
    2324:	91 05       	cpc	r25, r1
    2326:	09 f0       	breq	.+2      	; 0x232a <key_scan+0x18a>
    2328:	62 c0       	rjmp	.+196    	; 0x23ee <key_scan+0x24e>
				{
					case 0xE0:		//Check if row 2 col 1 --> ( 4 )
					return 0x04;
    232a:	94 e0       	ldi	r25, 0x04	; 4
    232c:	9d 87       	std	Y+13, r25	; 0x0d
    232e:	60 c0       	rjmp	.+192    	; 0x23f0 <key_scan+0x250>
					break;

					case 0xD0:		//Check if row 2 col 2 --> ( 5 )
					return 0x05;
    2330:	25 e0       	ldi	r18, 0x05	; 5
    2332:	2d 87       	std	Y+13, r18	; 0x0d
    2334:	5d c0       	rjmp	.+186    	; 0x23f0 <key_scan+0x250>
					break;

					case 0xB0:		//Check if row 2 col 3 --> ( 6 )
					return 0x06;
    2336:	36 e0       	ldi	r19, 0x06	; 6
    2338:	3d 87       	std	Y+13, r19	; 0x0d
    233a:	5a c0       	rjmp	.+180    	; 0x23f0 <key_scan+0x250>
					break;

					case 0x70:		//Check if row 2 col 4 --> ( B )
					return 0x0B;
    233c:	8b e0       	ldi	r24, 0x0B	; 11
    233e:	8d 87       	std	Y+13, r24	; 0x0d
    2340:	57 c0       	rjmp	.+174    	; 0x23f0 <key_scan+0x250>
				}
		break;

		case 2:						//case 2 for third row

			switch ( key )
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	3e 83       	std	Y+6, r19	; 0x06
    234a:	2d 83       	std	Y+5, r18	; 0x05
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	80 3b       	cpi	r24, 0xB0	; 176
    2352:	91 05       	cpc	r25, r1
    2354:	d9 f0       	breq	.+54     	; 0x238c <key_scan+0x1ec>
    2356:	2d 81       	ldd	r18, Y+5	; 0x05
    2358:	3e 81       	ldd	r19, Y+6	; 0x06
    235a:	21 3b       	cpi	r18, 0xB1	; 177
    235c:	31 05       	cpc	r19, r1
    235e:	34 f4       	brge	.+12     	; 0x236c <key_scan+0x1cc>
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	80 37       	cpi	r24, 0x70	; 112
    2366:	91 05       	cpc	r25, r1
    2368:	a1 f0       	breq	.+40     	; 0x2392 <key_scan+0x1f2>
    236a:	41 c0       	rjmp	.+130    	; 0x23ee <key_scan+0x24e>
    236c:	2d 81       	ldd	r18, Y+5	; 0x05
    236e:	3e 81       	ldd	r19, Y+6	; 0x06
    2370:	20 3d       	cpi	r18, 0xD0	; 208
    2372:	31 05       	cpc	r19, r1
    2374:	41 f0       	breq	.+16     	; 0x2386 <key_scan+0x1e6>
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	9e 81       	ldd	r25, Y+6	; 0x06
    237a:	80 3e       	cpi	r24, 0xE0	; 224
    237c:	91 05       	cpc	r25, r1
    237e:	b9 f5       	brne	.+110    	; 0x23ee <key_scan+0x24e>
				{
					case 0xE0:		//Check if row 3 col 1 --> ( 1 )
					return 0x01;
    2380:	91 e0       	ldi	r25, 0x01	; 1
    2382:	9d 87       	std	Y+13, r25	; 0x0d
    2384:	35 c0       	rjmp	.+106    	; 0x23f0 <key_scan+0x250>
					break;

					case 0xD0:		//Check if row 3 col 2 --> ( 2 )
					return 0x02;
    2386:	22 e0       	ldi	r18, 0x02	; 2
    2388:	2d 87       	std	Y+13, r18	; 0x0d
    238a:	32 c0       	rjmp	.+100    	; 0x23f0 <key_scan+0x250>
					break;

					case 0xB0:		//Check if row 3 col 3 --> ( 3 )
					return 0x03;
    238c:	33 e0       	ldi	r19, 0x03	; 3
    238e:	3d 87       	std	Y+13, r19	; 0x0d
    2390:	2f c0       	rjmp	.+94     	; 0x23f0 <key_scan+0x250>
					break;

					case 0x70:		//Check if row 3 col 4 --> ( C )
					return 0x0C;
    2392:	8c e0       	ldi	r24, 0x0C	; 12
    2394:	8d 87       	std	Y+13, r24	; 0x0d
    2396:	2c c0       	rjmp	.+88     	; 0x23f0 <key_scan+0x250>
				}
		break;

		case 3:						//case 3 for fourth row

			switch ( key )
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	3c 83       	std	Y+4, r19	; 0x04
    23a0:	2b 83       	std	Y+3, r18	; 0x03
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	80 3b       	cpi	r24, 0xB0	; 176
    23a8:	91 05       	cpc	r25, r1
    23aa:	d9 f0       	breq	.+54     	; 0x23e2 <key_scan+0x242>
    23ac:	2b 81       	ldd	r18, Y+3	; 0x03
    23ae:	3c 81       	ldd	r19, Y+4	; 0x04
    23b0:	21 3b       	cpi	r18, 0xB1	; 177
    23b2:	31 05       	cpc	r19, r1
    23b4:	34 f4       	brge	.+12     	; 0x23c2 <key_scan+0x222>
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ba:	80 37       	cpi	r24, 0x70	; 112
    23bc:	91 05       	cpc	r25, r1
    23be:	a1 f0       	breq	.+40     	; 0x23e8 <key_scan+0x248>
    23c0:	16 c0       	rjmp	.+44     	; 0x23ee <key_scan+0x24e>
    23c2:	2b 81       	ldd	r18, Y+3	; 0x03
    23c4:	3c 81       	ldd	r19, Y+4	; 0x04
    23c6:	20 3d       	cpi	r18, 0xD0	; 208
    23c8:	31 05       	cpc	r19, r1
    23ca:	41 f0       	breq	.+16     	; 0x23dc <key_scan+0x23c>
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	80 3e       	cpi	r24, 0xE0	; 224
    23d2:	91 05       	cpc	r25, r1
    23d4:	61 f4       	brne	.+24     	; 0x23ee <key_scan+0x24e>
			{
					case 0xE0:		//Check if row 4 col 1 --> ( F )
					return 0x0F;
    23d6:	9f e0       	ldi	r25, 0x0F	; 15
    23d8:	9d 87       	std	Y+13, r25	; 0x0d
    23da:	0a c0       	rjmp	.+20     	; 0x23f0 <key_scan+0x250>
					break;

		case 0xD0:		//Check if row 4 col 2 --> ( 0 )
					return '0';
    23dc:	20 e3       	ldi	r18, 0x30	; 48
    23de:	2d 87       	std	Y+13, r18	; 0x0d
    23e0:	07 c0       	rjmp	.+14     	; 0x23f0 <key_scan+0x250>
					break;

					case 0xB0:		//Check if row 4 col 3 --> ( E )
					return 0x0E;
    23e2:	3e e0       	ldi	r19, 0x0E	; 14
    23e4:	3d 87       	std	Y+13, r19	; 0x0d
    23e6:	04 c0       	rjmp	.+8      	; 0x23f0 <key_scan+0x250>
					break;

					case 0x70:		//Check if row 4 col 4 --> ( D )
					return 0x0D;
    23e8:	8d e0       	ldi	r24, 0x0D	; 13
    23ea:	8d 87       	std	Y+13, r24	; 0x0d
    23ec:	01 c0       	rjmp	.+2      	; 0x23f0 <key_scan+0x250>
					break;
			}
		break;
	}

	return 0;
    23ee:	1d 86       	std	Y+13, r1	; 0x0d
    23f0:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    23f2:	2d 96       	adiw	r28, 0x0d	; 13
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <__mulsi3>:
    2404:	62 9f       	mul	r22, r18
    2406:	d0 01       	movw	r26, r0
    2408:	73 9f       	mul	r23, r19
    240a:	f0 01       	movw	r30, r0
    240c:	82 9f       	mul	r24, r18
    240e:	e0 0d       	add	r30, r0
    2410:	f1 1d       	adc	r31, r1
    2412:	64 9f       	mul	r22, r20
    2414:	e0 0d       	add	r30, r0
    2416:	f1 1d       	adc	r31, r1
    2418:	92 9f       	mul	r25, r18
    241a:	f0 0d       	add	r31, r0
    241c:	83 9f       	mul	r24, r19
    241e:	f0 0d       	add	r31, r0
    2420:	74 9f       	mul	r23, r20
    2422:	f0 0d       	add	r31, r0
    2424:	65 9f       	mul	r22, r21
    2426:	f0 0d       	add	r31, r0
    2428:	99 27       	eor	r25, r25
    242a:	72 9f       	mul	r23, r18
    242c:	b0 0d       	add	r27, r0
    242e:	e1 1d       	adc	r30, r1
    2430:	f9 1f       	adc	r31, r25
    2432:	63 9f       	mul	r22, r19
    2434:	b0 0d       	add	r27, r0
    2436:	e1 1d       	adc	r30, r1
    2438:	f9 1f       	adc	r31, r25
    243a:	bd 01       	movw	r22, r26
    243c:	cf 01       	movw	r24, r30
    243e:	11 24       	eor	r1, r1
    2440:	08 95       	ret

00002442 <__prologue_saves__>:
    2442:	2f 92       	push	r2
    2444:	3f 92       	push	r3
    2446:	4f 92       	push	r4
    2448:	5f 92       	push	r5
    244a:	6f 92       	push	r6
    244c:	7f 92       	push	r7
    244e:	8f 92       	push	r8
    2450:	9f 92       	push	r9
    2452:	af 92       	push	r10
    2454:	bf 92       	push	r11
    2456:	cf 92       	push	r12
    2458:	df 92       	push	r13
    245a:	ef 92       	push	r14
    245c:	ff 92       	push	r15
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	ca 1b       	sub	r28, r26
    246c:	db 0b       	sbc	r29, r27
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	09 94       	ijmp

0000247a <__epilogue_restores__>:
    247a:	2a 88       	ldd	r2, Y+18	; 0x12
    247c:	39 88       	ldd	r3, Y+17	; 0x11
    247e:	48 88       	ldd	r4, Y+16	; 0x10
    2480:	5f 84       	ldd	r5, Y+15	; 0x0f
    2482:	6e 84       	ldd	r6, Y+14	; 0x0e
    2484:	7d 84       	ldd	r7, Y+13	; 0x0d
    2486:	8c 84       	ldd	r8, Y+12	; 0x0c
    2488:	9b 84       	ldd	r9, Y+11	; 0x0b
    248a:	aa 84       	ldd	r10, Y+10	; 0x0a
    248c:	b9 84       	ldd	r11, Y+9	; 0x09
    248e:	c8 84       	ldd	r12, Y+8	; 0x08
    2490:	df 80       	ldd	r13, Y+7	; 0x07
    2492:	ee 80       	ldd	r14, Y+6	; 0x06
    2494:	fd 80       	ldd	r15, Y+5	; 0x05
    2496:	0c 81       	ldd	r16, Y+4	; 0x04
    2498:	1b 81       	ldd	r17, Y+3	; 0x03
    249a:	aa 81       	ldd	r26, Y+2	; 0x02
    249c:	b9 81       	ldd	r27, Y+1	; 0x01
    249e:	ce 0f       	add	r28, r30
    24a0:	d1 1d       	adc	r29, r1
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	ed 01       	movw	r28, r26
    24ae:	08 95       	ret

000024b0 <sprintf>:
    24b0:	ae e0       	ldi	r26, 0x0E	; 14
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	ee e5       	ldi	r30, 0x5E	; 94
    24b6:	f2 e1       	ldi	r31, 0x12	; 18
    24b8:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__prologue_saves__+0x1c>
    24bc:	0d 89       	ldd	r16, Y+21	; 0x15
    24be:	1e 89       	ldd	r17, Y+22	; 0x16
    24c0:	86 e0       	ldi	r24, 0x06	; 6
    24c2:	8c 83       	std	Y+4, r24	; 0x04
    24c4:	1a 83       	std	Y+2, r17	; 0x02
    24c6:	09 83       	std	Y+1, r16	; 0x01
    24c8:	8f ef       	ldi	r24, 0xFF	; 255
    24ca:	9f e7       	ldi	r25, 0x7F	; 127
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	9e 01       	movw	r18, r28
    24d2:	27 5e       	subi	r18, 0xE7	; 231
    24d4:	3f 4f       	sbci	r19, 0xFF	; 255
    24d6:	ce 01       	movw	r24, r28
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	6f 89       	ldd	r22, Y+23	; 0x17
    24dc:	78 8d       	ldd	r23, Y+24	; 0x18
    24de:	a9 01       	movw	r20, r18
    24e0:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <vfprintf>
    24e4:	2f 81       	ldd	r18, Y+7	; 0x07
    24e6:	38 85       	ldd	r19, Y+8	; 0x08
    24e8:	02 0f       	add	r16, r18
    24ea:	13 1f       	adc	r17, r19
    24ec:	f8 01       	movw	r30, r16
    24ee:	10 82       	st	Z, r1
    24f0:	2e 96       	adiw	r28, 0x0e	; 14
    24f2:	e4 e0       	ldi	r30, 0x04	; 4
    24f4:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__epilogue_restores__+0x1c>

000024f8 <vfprintf>:
    24f8:	ab e0       	ldi	r26, 0x0B	; 11
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e2 e8       	ldi	r30, 0x82	; 130
    24fe:	f2 e1       	ldi	r31, 0x12	; 18
    2500:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__prologue_saves__>
    2504:	3c 01       	movw	r6, r24
    2506:	2b 01       	movw	r4, r22
    2508:	5a 01       	movw	r10, r20
    250a:	fc 01       	movw	r30, r24
    250c:	17 82       	std	Z+7, r1	; 0x07
    250e:	16 82       	std	Z+6, r1	; 0x06
    2510:	83 81       	ldd	r24, Z+3	; 0x03
    2512:	81 fd       	sbrc	r24, 1
    2514:	03 c0       	rjmp	.+6      	; 0x251c <vfprintf+0x24>
    2516:	6f ef       	ldi	r22, 0xFF	; 255
    2518:	7f ef       	ldi	r23, 0xFF	; 255
    251a:	c6 c1       	rjmp	.+908    	; 0x28a8 <vfprintf+0x3b0>
    251c:	9a e0       	ldi	r25, 0x0A	; 10
    251e:	89 2e       	mov	r8, r25
    2520:	1e 01       	movw	r2, r28
    2522:	08 94       	sec
    2524:	21 1c       	adc	r2, r1
    2526:	31 1c       	adc	r3, r1
    2528:	f3 01       	movw	r30, r6
    252a:	23 81       	ldd	r18, Z+3	; 0x03
    252c:	f2 01       	movw	r30, r4
    252e:	23 fd       	sbrc	r18, 3
    2530:	85 91       	lpm	r24, Z+
    2532:	23 ff       	sbrs	r18, 3
    2534:	81 91       	ld	r24, Z+
    2536:	2f 01       	movw	r4, r30
    2538:	88 23       	and	r24, r24
    253a:	09 f4       	brne	.+2      	; 0x253e <vfprintf+0x46>
    253c:	b2 c1       	rjmp	.+868    	; 0x28a2 <vfprintf+0x3aa>
    253e:	85 32       	cpi	r24, 0x25	; 37
    2540:	39 f4       	brne	.+14     	; 0x2550 <vfprintf+0x58>
    2542:	23 fd       	sbrc	r18, 3
    2544:	85 91       	lpm	r24, Z+
    2546:	23 ff       	sbrs	r18, 3
    2548:	81 91       	ld	r24, Z+
    254a:	2f 01       	movw	r4, r30
    254c:	85 32       	cpi	r24, 0x25	; 37
    254e:	29 f4       	brne	.+10     	; 0x255a <vfprintf+0x62>
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	b3 01       	movw	r22, r6
    2554:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2558:	e7 cf       	rjmp	.-50     	; 0x2528 <vfprintf+0x30>
    255a:	98 2f       	mov	r25, r24
    255c:	ff 24       	eor	r15, r15
    255e:	ee 24       	eor	r14, r14
    2560:	99 24       	eor	r9, r9
    2562:	ff e1       	ldi	r31, 0x1F	; 31
    2564:	ff 15       	cp	r31, r15
    2566:	d0 f0       	brcs	.+52     	; 0x259c <vfprintf+0xa4>
    2568:	9b 32       	cpi	r25, 0x2B	; 43
    256a:	69 f0       	breq	.+26     	; 0x2586 <vfprintf+0x8e>
    256c:	9c 32       	cpi	r25, 0x2C	; 44
    256e:	28 f4       	brcc	.+10     	; 0x257a <vfprintf+0x82>
    2570:	90 32       	cpi	r25, 0x20	; 32
    2572:	59 f0       	breq	.+22     	; 0x258a <vfprintf+0x92>
    2574:	93 32       	cpi	r25, 0x23	; 35
    2576:	91 f4       	brne	.+36     	; 0x259c <vfprintf+0xa4>
    2578:	0e c0       	rjmp	.+28     	; 0x2596 <vfprintf+0x9e>
    257a:	9d 32       	cpi	r25, 0x2D	; 45
    257c:	49 f0       	breq	.+18     	; 0x2590 <vfprintf+0x98>
    257e:	90 33       	cpi	r25, 0x30	; 48
    2580:	69 f4       	brne	.+26     	; 0x259c <vfprintf+0xa4>
    2582:	41 e0       	ldi	r20, 0x01	; 1
    2584:	24 c0       	rjmp	.+72     	; 0x25ce <vfprintf+0xd6>
    2586:	52 e0       	ldi	r21, 0x02	; 2
    2588:	f5 2a       	or	r15, r21
    258a:	84 e0       	ldi	r24, 0x04	; 4
    258c:	f8 2a       	or	r15, r24
    258e:	28 c0       	rjmp	.+80     	; 0x25e0 <vfprintf+0xe8>
    2590:	98 e0       	ldi	r25, 0x08	; 8
    2592:	f9 2a       	or	r15, r25
    2594:	25 c0       	rjmp	.+74     	; 0x25e0 <vfprintf+0xe8>
    2596:	e0 e1       	ldi	r30, 0x10	; 16
    2598:	fe 2a       	or	r15, r30
    259a:	22 c0       	rjmp	.+68     	; 0x25e0 <vfprintf+0xe8>
    259c:	f7 fc       	sbrc	r15, 7
    259e:	29 c0       	rjmp	.+82     	; 0x25f2 <vfprintf+0xfa>
    25a0:	89 2f       	mov	r24, r25
    25a2:	80 53       	subi	r24, 0x30	; 48
    25a4:	8a 30       	cpi	r24, 0x0A	; 10
    25a6:	70 f4       	brcc	.+28     	; 0x25c4 <vfprintf+0xcc>
    25a8:	f6 fe       	sbrs	r15, 6
    25aa:	05 c0       	rjmp	.+10     	; 0x25b6 <vfprintf+0xbe>
    25ac:	98 9c       	mul	r9, r8
    25ae:	90 2c       	mov	r9, r0
    25b0:	11 24       	eor	r1, r1
    25b2:	98 0e       	add	r9, r24
    25b4:	15 c0       	rjmp	.+42     	; 0x25e0 <vfprintf+0xe8>
    25b6:	e8 9c       	mul	r14, r8
    25b8:	e0 2c       	mov	r14, r0
    25ba:	11 24       	eor	r1, r1
    25bc:	e8 0e       	add	r14, r24
    25be:	f0 e2       	ldi	r31, 0x20	; 32
    25c0:	ff 2a       	or	r15, r31
    25c2:	0e c0       	rjmp	.+28     	; 0x25e0 <vfprintf+0xe8>
    25c4:	9e 32       	cpi	r25, 0x2E	; 46
    25c6:	29 f4       	brne	.+10     	; 0x25d2 <vfprintf+0xda>
    25c8:	f6 fc       	sbrc	r15, 6
    25ca:	6b c1       	rjmp	.+726    	; 0x28a2 <vfprintf+0x3aa>
    25cc:	40 e4       	ldi	r20, 0x40	; 64
    25ce:	f4 2a       	or	r15, r20
    25d0:	07 c0       	rjmp	.+14     	; 0x25e0 <vfprintf+0xe8>
    25d2:	9c 36       	cpi	r25, 0x6C	; 108
    25d4:	19 f4       	brne	.+6      	; 0x25dc <vfprintf+0xe4>
    25d6:	50 e8       	ldi	r21, 0x80	; 128
    25d8:	f5 2a       	or	r15, r21
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <vfprintf+0xe8>
    25dc:	98 36       	cpi	r25, 0x68	; 104
    25de:	49 f4       	brne	.+18     	; 0x25f2 <vfprintf+0xfa>
    25e0:	f2 01       	movw	r30, r4
    25e2:	23 fd       	sbrc	r18, 3
    25e4:	95 91       	lpm	r25, Z+
    25e6:	23 ff       	sbrs	r18, 3
    25e8:	91 91       	ld	r25, Z+
    25ea:	2f 01       	movw	r4, r30
    25ec:	99 23       	and	r25, r25
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <vfprintf+0xfa>
    25f0:	b8 cf       	rjmp	.-144    	; 0x2562 <vfprintf+0x6a>
    25f2:	89 2f       	mov	r24, r25
    25f4:	85 54       	subi	r24, 0x45	; 69
    25f6:	83 30       	cpi	r24, 0x03	; 3
    25f8:	18 f0       	brcs	.+6      	; 0x2600 <vfprintf+0x108>
    25fa:	80 52       	subi	r24, 0x20	; 32
    25fc:	83 30       	cpi	r24, 0x03	; 3
    25fe:	38 f4       	brcc	.+14     	; 0x260e <vfprintf+0x116>
    2600:	44 e0       	ldi	r20, 0x04	; 4
    2602:	50 e0       	ldi	r21, 0x00	; 0
    2604:	a4 0e       	add	r10, r20
    2606:	b5 1e       	adc	r11, r21
    2608:	5f e3       	ldi	r21, 0x3F	; 63
    260a:	59 83       	std	Y+1, r21	; 0x01
    260c:	0f c0       	rjmp	.+30     	; 0x262c <vfprintf+0x134>
    260e:	93 36       	cpi	r25, 0x63	; 99
    2610:	31 f0       	breq	.+12     	; 0x261e <vfprintf+0x126>
    2612:	93 37       	cpi	r25, 0x73	; 115
    2614:	79 f0       	breq	.+30     	; 0x2634 <vfprintf+0x13c>
    2616:	93 35       	cpi	r25, 0x53	; 83
    2618:	09 f0       	breq	.+2      	; 0x261c <vfprintf+0x124>
    261a:	56 c0       	rjmp	.+172    	; 0x26c8 <vfprintf+0x1d0>
    261c:	20 c0       	rjmp	.+64     	; 0x265e <vfprintf+0x166>
    261e:	f5 01       	movw	r30, r10
    2620:	80 81       	ld	r24, Z
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	42 e0       	ldi	r20, 0x02	; 2
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	a4 0e       	add	r10, r20
    262a:	b5 1e       	adc	r11, r21
    262c:	61 01       	movw	r12, r2
    262e:	01 e0       	ldi	r16, 0x01	; 1
    2630:	10 e0       	ldi	r17, 0x00	; 0
    2632:	12 c0       	rjmp	.+36     	; 0x2658 <vfprintf+0x160>
    2634:	f5 01       	movw	r30, r10
    2636:	c0 80       	ld	r12, Z
    2638:	d1 80       	ldd	r13, Z+1	; 0x01
    263a:	f6 fc       	sbrc	r15, 6
    263c:	03 c0       	rjmp	.+6      	; 0x2644 <vfprintf+0x14c>
    263e:	6f ef       	ldi	r22, 0xFF	; 255
    2640:	7f ef       	ldi	r23, 0xFF	; 255
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <vfprintf+0x150>
    2644:	69 2d       	mov	r22, r9
    2646:	70 e0       	ldi	r23, 0x00	; 0
    2648:	42 e0       	ldi	r20, 0x02	; 2
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	a4 0e       	add	r10, r20
    264e:	b5 1e       	adc	r11, r21
    2650:	c6 01       	movw	r24, r12
    2652:	0e 94 64 14 	call	0x28c8	; 0x28c8 <strnlen>
    2656:	8c 01       	movw	r16, r24
    2658:	5f e7       	ldi	r21, 0x7F	; 127
    265a:	f5 22       	and	r15, r21
    265c:	14 c0       	rjmp	.+40     	; 0x2686 <vfprintf+0x18e>
    265e:	f5 01       	movw	r30, r10
    2660:	c0 80       	ld	r12, Z
    2662:	d1 80       	ldd	r13, Z+1	; 0x01
    2664:	f6 fc       	sbrc	r15, 6
    2666:	03 c0       	rjmp	.+6      	; 0x266e <vfprintf+0x176>
    2668:	6f ef       	ldi	r22, 0xFF	; 255
    266a:	7f ef       	ldi	r23, 0xFF	; 255
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <vfprintf+0x17a>
    266e:	69 2d       	mov	r22, r9
    2670:	70 e0       	ldi	r23, 0x00	; 0
    2672:	42 e0       	ldi	r20, 0x02	; 2
    2674:	50 e0       	ldi	r21, 0x00	; 0
    2676:	a4 0e       	add	r10, r20
    2678:	b5 1e       	adc	r11, r21
    267a:	c6 01       	movw	r24, r12
    267c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <strnlen_P>
    2680:	8c 01       	movw	r16, r24
    2682:	50 e8       	ldi	r21, 0x80	; 128
    2684:	f5 2a       	or	r15, r21
    2686:	f3 fe       	sbrs	r15, 3
    2688:	07 c0       	rjmp	.+14     	; 0x2698 <vfprintf+0x1a0>
    268a:	1a c0       	rjmp	.+52     	; 0x26c0 <vfprintf+0x1c8>
    268c:	80 e2       	ldi	r24, 0x20	; 32
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	b3 01       	movw	r22, r6
    2692:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2696:	ea 94       	dec	r14
    2698:	8e 2d       	mov	r24, r14
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	08 17       	cp	r16, r24
    269e:	19 07       	cpc	r17, r25
    26a0:	a8 f3       	brcs	.-22     	; 0x268c <vfprintf+0x194>
    26a2:	0e c0       	rjmp	.+28     	; 0x26c0 <vfprintf+0x1c8>
    26a4:	f6 01       	movw	r30, r12
    26a6:	f7 fc       	sbrc	r15, 7
    26a8:	85 91       	lpm	r24, Z+
    26aa:	f7 fe       	sbrs	r15, 7
    26ac:	81 91       	ld	r24, Z+
    26ae:	6f 01       	movw	r12, r30
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	b3 01       	movw	r22, r6
    26b4:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    26b8:	e1 10       	cpse	r14, r1
    26ba:	ea 94       	dec	r14
    26bc:	01 50       	subi	r16, 0x01	; 1
    26be:	10 40       	sbci	r17, 0x00	; 0
    26c0:	01 15       	cp	r16, r1
    26c2:	11 05       	cpc	r17, r1
    26c4:	79 f7       	brne	.-34     	; 0x26a4 <vfprintf+0x1ac>
    26c6:	ea c0       	rjmp	.+468    	; 0x289c <vfprintf+0x3a4>
    26c8:	94 36       	cpi	r25, 0x64	; 100
    26ca:	11 f0       	breq	.+4      	; 0x26d0 <vfprintf+0x1d8>
    26cc:	99 36       	cpi	r25, 0x69	; 105
    26ce:	69 f5       	brne	.+90     	; 0x272a <vfprintf+0x232>
    26d0:	f7 fe       	sbrs	r15, 7
    26d2:	08 c0       	rjmp	.+16     	; 0x26e4 <vfprintf+0x1ec>
    26d4:	f5 01       	movw	r30, r10
    26d6:	20 81       	ld	r18, Z
    26d8:	31 81       	ldd	r19, Z+1	; 0x01
    26da:	42 81       	ldd	r20, Z+2	; 0x02
    26dc:	53 81       	ldd	r21, Z+3	; 0x03
    26de:	84 e0       	ldi	r24, 0x04	; 4
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0a c0       	rjmp	.+20     	; 0x26f8 <vfprintf+0x200>
    26e4:	f5 01       	movw	r30, r10
    26e6:	80 81       	ld	r24, Z
    26e8:	91 81       	ldd	r25, Z+1	; 0x01
    26ea:	9c 01       	movw	r18, r24
    26ec:	44 27       	eor	r20, r20
    26ee:	37 fd       	sbrc	r19, 7
    26f0:	40 95       	com	r20
    26f2:	54 2f       	mov	r21, r20
    26f4:	82 e0       	ldi	r24, 0x02	; 2
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a8 0e       	add	r10, r24
    26fa:	b9 1e       	adc	r11, r25
    26fc:	9f e6       	ldi	r25, 0x6F	; 111
    26fe:	f9 22       	and	r15, r25
    2700:	57 ff       	sbrs	r21, 7
    2702:	09 c0       	rjmp	.+18     	; 0x2716 <vfprintf+0x21e>
    2704:	50 95       	com	r21
    2706:	40 95       	com	r20
    2708:	30 95       	com	r19
    270a:	21 95       	neg	r18
    270c:	3f 4f       	sbci	r19, 0xFF	; 255
    270e:	4f 4f       	sbci	r20, 0xFF	; 255
    2710:	5f 4f       	sbci	r21, 0xFF	; 255
    2712:	e0 e8       	ldi	r30, 0x80	; 128
    2714:	fe 2a       	or	r15, r30
    2716:	ca 01       	movw	r24, r20
    2718:	b9 01       	movw	r22, r18
    271a:	a1 01       	movw	r20, r2
    271c:	2a e0       	ldi	r18, 0x0A	; 10
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	0e 94 9b 14 	call	0x2936	; 0x2936 <__ultoa_invert>
    2724:	d8 2e       	mov	r13, r24
    2726:	d2 18       	sub	r13, r2
    2728:	40 c0       	rjmp	.+128    	; 0x27aa <vfprintf+0x2b2>
    272a:	95 37       	cpi	r25, 0x75	; 117
    272c:	29 f4       	brne	.+10     	; 0x2738 <vfprintf+0x240>
    272e:	1f 2d       	mov	r17, r15
    2730:	1f 7e       	andi	r17, 0xEF	; 239
    2732:	2a e0       	ldi	r18, 0x0A	; 10
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	1d c0       	rjmp	.+58     	; 0x2772 <vfprintf+0x27a>
    2738:	1f 2d       	mov	r17, r15
    273a:	19 7f       	andi	r17, 0xF9	; 249
    273c:	9f 36       	cpi	r25, 0x6F	; 111
    273e:	61 f0       	breq	.+24     	; 0x2758 <vfprintf+0x260>
    2740:	90 37       	cpi	r25, 0x70	; 112
    2742:	20 f4       	brcc	.+8      	; 0x274c <vfprintf+0x254>
    2744:	98 35       	cpi	r25, 0x58	; 88
    2746:	09 f0       	breq	.+2      	; 0x274a <vfprintf+0x252>
    2748:	ac c0       	rjmp	.+344    	; 0x28a2 <vfprintf+0x3aa>
    274a:	0f c0       	rjmp	.+30     	; 0x276a <vfprintf+0x272>
    274c:	90 37       	cpi	r25, 0x70	; 112
    274e:	39 f0       	breq	.+14     	; 0x275e <vfprintf+0x266>
    2750:	98 37       	cpi	r25, 0x78	; 120
    2752:	09 f0       	breq	.+2      	; 0x2756 <vfprintf+0x25e>
    2754:	a6 c0       	rjmp	.+332    	; 0x28a2 <vfprintf+0x3aa>
    2756:	04 c0       	rjmp	.+8      	; 0x2760 <vfprintf+0x268>
    2758:	28 e0       	ldi	r18, 0x08	; 8
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	0a c0       	rjmp	.+20     	; 0x2772 <vfprintf+0x27a>
    275e:	10 61       	ori	r17, 0x10	; 16
    2760:	14 fd       	sbrc	r17, 4
    2762:	14 60       	ori	r17, 0x04	; 4
    2764:	20 e1       	ldi	r18, 0x10	; 16
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	04 c0       	rjmp	.+8      	; 0x2772 <vfprintf+0x27a>
    276a:	14 fd       	sbrc	r17, 4
    276c:	16 60       	ori	r17, 0x06	; 6
    276e:	20 e1       	ldi	r18, 0x10	; 16
    2770:	32 e0       	ldi	r19, 0x02	; 2
    2772:	17 ff       	sbrs	r17, 7
    2774:	08 c0       	rjmp	.+16     	; 0x2786 <vfprintf+0x28e>
    2776:	f5 01       	movw	r30, r10
    2778:	60 81       	ld	r22, Z
    277a:	71 81       	ldd	r23, Z+1	; 0x01
    277c:	82 81       	ldd	r24, Z+2	; 0x02
    277e:	93 81       	ldd	r25, Z+3	; 0x03
    2780:	44 e0       	ldi	r20, 0x04	; 4
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	08 c0       	rjmp	.+16     	; 0x2796 <vfprintf+0x29e>
    2786:	f5 01       	movw	r30, r10
    2788:	80 81       	ld	r24, Z
    278a:	91 81       	ldd	r25, Z+1	; 0x01
    278c:	bc 01       	movw	r22, r24
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	42 e0       	ldi	r20, 0x02	; 2
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	a4 0e       	add	r10, r20
    2798:	b5 1e       	adc	r11, r21
    279a:	a1 01       	movw	r20, r2
    279c:	0e 94 9b 14 	call	0x2936	; 0x2936 <__ultoa_invert>
    27a0:	d8 2e       	mov	r13, r24
    27a2:	d2 18       	sub	r13, r2
    27a4:	8f e7       	ldi	r24, 0x7F	; 127
    27a6:	f8 2e       	mov	r15, r24
    27a8:	f1 22       	and	r15, r17
    27aa:	f6 fe       	sbrs	r15, 6
    27ac:	0b c0       	rjmp	.+22     	; 0x27c4 <vfprintf+0x2cc>
    27ae:	5e ef       	ldi	r21, 0xFE	; 254
    27b0:	f5 22       	and	r15, r21
    27b2:	d9 14       	cp	r13, r9
    27b4:	38 f4       	brcc	.+14     	; 0x27c4 <vfprintf+0x2cc>
    27b6:	f4 fe       	sbrs	r15, 4
    27b8:	07 c0       	rjmp	.+14     	; 0x27c8 <vfprintf+0x2d0>
    27ba:	f2 fc       	sbrc	r15, 2
    27bc:	05 c0       	rjmp	.+10     	; 0x27c8 <vfprintf+0x2d0>
    27be:	8f ee       	ldi	r24, 0xEF	; 239
    27c0:	f8 22       	and	r15, r24
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <vfprintf+0x2d0>
    27c4:	1d 2d       	mov	r17, r13
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <vfprintf+0x2d2>
    27c8:	19 2d       	mov	r17, r9
    27ca:	f4 fe       	sbrs	r15, 4
    27cc:	0d c0       	rjmp	.+26     	; 0x27e8 <vfprintf+0x2f0>
    27ce:	fe 01       	movw	r30, r28
    27d0:	ed 0d       	add	r30, r13
    27d2:	f1 1d       	adc	r31, r1
    27d4:	80 81       	ld	r24, Z
    27d6:	80 33       	cpi	r24, 0x30	; 48
    27d8:	19 f4       	brne	.+6      	; 0x27e0 <vfprintf+0x2e8>
    27da:	99 ee       	ldi	r25, 0xE9	; 233
    27dc:	f9 22       	and	r15, r25
    27de:	08 c0       	rjmp	.+16     	; 0x27f0 <vfprintf+0x2f8>
    27e0:	1f 5f       	subi	r17, 0xFF	; 255
    27e2:	f2 fe       	sbrs	r15, 2
    27e4:	05 c0       	rjmp	.+10     	; 0x27f0 <vfprintf+0x2f8>
    27e6:	03 c0       	rjmp	.+6      	; 0x27ee <vfprintf+0x2f6>
    27e8:	8f 2d       	mov	r24, r15
    27ea:	86 78       	andi	r24, 0x86	; 134
    27ec:	09 f0       	breq	.+2      	; 0x27f0 <vfprintf+0x2f8>
    27ee:	1f 5f       	subi	r17, 0xFF	; 255
    27f0:	0f 2d       	mov	r16, r15
    27f2:	f3 fc       	sbrc	r15, 3
    27f4:	14 c0       	rjmp	.+40     	; 0x281e <vfprintf+0x326>
    27f6:	f0 fe       	sbrs	r15, 0
    27f8:	0f c0       	rjmp	.+30     	; 0x2818 <vfprintf+0x320>
    27fa:	1e 15       	cp	r17, r14
    27fc:	10 f0       	brcs	.+4      	; 0x2802 <vfprintf+0x30a>
    27fe:	9d 2c       	mov	r9, r13
    2800:	0b c0       	rjmp	.+22     	; 0x2818 <vfprintf+0x320>
    2802:	9d 2c       	mov	r9, r13
    2804:	9e 0c       	add	r9, r14
    2806:	91 1a       	sub	r9, r17
    2808:	1e 2d       	mov	r17, r14
    280a:	06 c0       	rjmp	.+12     	; 0x2818 <vfprintf+0x320>
    280c:	80 e2       	ldi	r24, 0x20	; 32
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	b3 01       	movw	r22, r6
    2812:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2816:	1f 5f       	subi	r17, 0xFF	; 255
    2818:	1e 15       	cp	r17, r14
    281a:	c0 f3       	brcs	.-16     	; 0x280c <vfprintf+0x314>
    281c:	04 c0       	rjmp	.+8      	; 0x2826 <vfprintf+0x32e>
    281e:	1e 15       	cp	r17, r14
    2820:	10 f4       	brcc	.+4      	; 0x2826 <vfprintf+0x32e>
    2822:	e1 1a       	sub	r14, r17
    2824:	01 c0       	rjmp	.+2      	; 0x2828 <vfprintf+0x330>
    2826:	ee 24       	eor	r14, r14
    2828:	04 ff       	sbrs	r16, 4
    282a:	0f c0       	rjmp	.+30     	; 0x284a <vfprintf+0x352>
    282c:	80 e3       	ldi	r24, 0x30	; 48
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	b3 01       	movw	r22, r6
    2832:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2836:	02 ff       	sbrs	r16, 2
    2838:	1d c0       	rjmp	.+58     	; 0x2874 <vfprintf+0x37c>
    283a:	01 fd       	sbrc	r16, 1
    283c:	03 c0       	rjmp	.+6      	; 0x2844 <vfprintf+0x34c>
    283e:	88 e7       	ldi	r24, 0x78	; 120
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	0e c0       	rjmp	.+28     	; 0x2860 <vfprintf+0x368>
    2844:	88 e5       	ldi	r24, 0x58	; 88
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	0b c0       	rjmp	.+22     	; 0x2860 <vfprintf+0x368>
    284a:	80 2f       	mov	r24, r16
    284c:	86 78       	andi	r24, 0x86	; 134
    284e:	91 f0       	breq	.+36     	; 0x2874 <vfprintf+0x37c>
    2850:	01 ff       	sbrs	r16, 1
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <vfprintf+0x360>
    2854:	8b e2       	ldi	r24, 0x2B	; 43
    2856:	01 c0       	rjmp	.+2      	; 0x285a <vfprintf+0x362>
    2858:	80 e2       	ldi	r24, 0x20	; 32
    285a:	f7 fc       	sbrc	r15, 7
    285c:	8d e2       	ldi	r24, 0x2D	; 45
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	b3 01       	movw	r22, r6
    2862:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2866:	06 c0       	rjmp	.+12     	; 0x2874 <vfprintf+0x37c>
    2868:	80 e3       	ldi	r24, 0x30	; 48
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	b3 01       	movw	r22, r6
    286e:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    2872:	9a 94       	dec	r9
    2874:	d9 14       	cp	r13, r9
    2876:	c0 f3       	brcs	.-16     	; 0x2868 <vfprintf+0x370>
    2878:	da 94       	dec	r13
    287a:	f1 01       	movw	r30, r2
    287c:	ed 0d       	add	r30, r13
    287e:	f1 1d       	adc	r31, r1
    2880:	80 81       	ld	r24, Z
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	b3 01       	movw	r22, r6
    2886:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    288a:	dd 20       	and	r13, r13
    288c:	a9 f7       	brne	.-22     	; 0x2878 <vfprintf+0x380>
    288e:	06 c0       	rjmp	.+12     	; 0x289c <vfprintf+0x3a4>
    2890:	80 e2       	ldi	r24, 0x20	; 32
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	b3 01       	movw	r22, r6
    2896:	0e 94 6f 14 	call	0x28de	; 0x28de <fputc>
    289a:	ea 94       	dec	r14
    289c:	ee 20       	and	r14, r14
    289e:	c1 f7       	brne	.-16     	; 0x2890 <vfprintf+0x398>
    28a0:	43 ce       	rjmp	.-890    	; 0x2528 <vfprintf+0x30>
    28a2:	f3 01       	movw	r30, r6
    28a4:	66 81       	ldd	r22, Z+6	; 0x06
    28a6:	77 81       	ldd	r23, Z+7	; 0x07
    28a8:	cb 01       	movw	r24, r22
    28aa:	2b 96       	adiw	r28, 0x0b	; 11
    28ac:	e2 e1       	ldi	r30, 0x12	; 18
    28ae:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__epilogue_restores__>

000028b2 <strnlen_P>:
    28b2:	fc 01       	movw	r30, r24
    28b4:	05 90       	lpm	r0, Z+
    28b6:	61 50       	subi	r22, 0x01	; 1
    28b8:	70 40       	sbci	r23, 0x00	; 0
    28ba:	01 10       	cpse	r0, r1
    28bc:	d8 f7       	brcc	.-10     	; 0x28b4 <strnlen_P+0x2>
    28be:	80 95       	com	r24
    28c0:	90 95       	com	r25
    28c2:	8e 0f       	add	r24, r30
    28c4:	9f 1f       	adc	r25, r31
    28c6:	08 95       	ret

000028c8 <strnlen>:
    28c8:	fc 01       	movw	r30, r24
    28ca:	61 50       	subi	r22, 0x01	; 1
    28cc:	70 40       	sbci	r23, 0x00	; 0
    28ce:	01 90       	ld	r0, Z+
    28d0:	01 10       	cpse	r0, r1
    28d2:	d8 f7       	brcc	.-10     	; 0x28ca <strnlen+0x2>
    28d4:	80 95       	com	r24
    28d6:	90 95       	com	r25
    28d8:	8e 0f       	add	r24, r30
    28da:	9f 1f       	adc	r25, r31
    28dc:	08 95       	ret

000028de <fputc>:
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	8c 01       	movw	r16, r24
    28e8:	eb 01       	movw	r28, r22
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	81 ff       	sbrs	r24, 1
    28ee:	1b c0       	rjmp	.+54     	; 0x2926 <fputc+0x48>
    28f0:	82 ff       	sbrs	r24, 2
    28f2:	0d c0       	rjmp	.+26     	; 0x290e <fputc+0x30>
    28f4:	2e 81       	ldd	r18, Y+6	; 0x06
    28f6:	3f 81       	ldd	r19, Y+7	; 0x07
    28f8:	8c 81       	ldd	r24, Y+4	; 0x04
    28fa:	9d 81       	ldd	r25, Y+5	; 0x05
    28fc:	28 17       	cp	r18, r24
    28fe:	39 07       	cpc	r19, r25
    2900:	64 f4       	brge	.+24     	; 0x291a <fputc+0x3c>
    2902:	e8 81       	ld	r30, Y
    2904:	f9 81       	ldd	r31, Y+1	; 0x01
    2906:	01 93       	st	Z+, r16
    2908:	f9 83       	std	Y+1, r31	; 0x01
    290a:	e8 83       	st	Y, r30
    290c:	06 c0       	rjmp	.+12     	; 0x291a <fputc+0x3c>
    290e:	e8 85       	ldd	r30, Y+8	; 0x08
    2910:	f9 85       	ldd	r31, Y+9	; 0x09
    2912:	80 2f       	mov	r24, r16
    2914:	09 95       	icall
    2916:	89 2b       	or	r24, r25
    2918:	31 f4       	brne	.+12     	; 0x2926 <fputc+0x48>
    291a:	8e 81       	ldd	r24, Y+6	; 0x06
    291c:	9f 81       	ldd	r25, Y+7	; 0x07
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	9f 83       	std	Y+7, r25	; 0x07
    2922:	8e 83       	std	Y+6, r24	; 0x06
    2924:	02 c0       	rjmp	.+4      	; 0x292a <fputc+0x4c>
    2926:	0f ef       	ldi	r16, 0xFF	; 255
    2928:	1f ef       	ldi	r17, 0xFF	; 255
    292a:	c8 01       	movw	r24, r16
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	08 95       	ret

00002936 <__ultoa_invert>:
    2936:	fa 01       	movw	r30, r20
    2938:	aa 27       	eor	r26, r26
    293a:	28 30       	cpi	r18, 0x08	; 8
    293c:	51 f1       	breq	.+84     	; 0x2992 <__ultoa_invert+0x5c>
    293e:	20 31       	cpi	r18, 0x10	; 16
    2940:	81 f1       	breq	.+96     	; 0x29a2 <__ultoa_invert+0x6c>
    2942:	e8 94       	clt
    2944:	6f 93       	push	r22
    2946:	6e 7f       	andi	r22, 0xFE	; 254
    2948:	6e 5f       	subi	r22, 0xFE	; 254
    294a:	7f 4f       	sbci	r23, 0xFF	; 255
    294c:	8f 4f       	sbci	r24, 0xFF	; 255
    294e:	9f 4f       	sbci	r25, 0xFF	; 255
    2950:	af 4f       	sbci	r26, 0xFF	; 255
    2952:	b1 e0       	ldi	r27, 0x01	; 1
    2954:	3e d0       	rcall	.+124    	; 0x29d2 <__ultoa_invert+0x9c>
    2956:	b4 e0       	ldi	r27, 0x04	; 4
    2958:	3c d0       	rcall	.+120    	; 0x29d2 <__ultoa_invert+0x9c>
    295a:	67 0f       	add	r22, r23
    295c:	78 1f       	adc	r23, r24
    295e:	89 1f       	adc	r24, r25
    2960:	9a 1f       	adc	r25, r26
    2962:	a1 1d       	adc	r26, r1
    2964:	68 0f       	add	r22, r24
    2966:	79 1f       	adc	r23, r25
    2968:	8a 1f       	adc	r24, r26
    296a:	91 1d       	adc	r25, r1
    296c:	a1 1d       	adc	r26, r1
    296e:	6a 0f       	add	r22, r26
    2970:	71 1d       	adc	r23, r1
    2972:	81 1d       	adc	r24, r1
    2974:	91 1d       	adc	r25, r1
    2976:	a1 1d       	adc	r26, r1
    2978:	20 d0       	rcall	.+64     	; 0x29ba <__ultoa_invert+0x84>
    297a:	09 f4       	brne	.+2      	; 0x297e <__ultoa_invert+0x48>
    297c:	68 94       	set
    297e:	3f 91       	pop	r19
    2980:	2a e0       	ldi	r18, 0x0A	; 10
    2982:	26 9f       	mul	r18, r22
    2984:	11 24       	eor	r1, r1
    2986:	30 19       	sub	r19, r0
    2988:	30 5d       	subi	r19, 0xD0	; 208
    298a:	31 93       	st	Z+, r19
    298c:	de f6       	brtc	.-74     	; 0x2944 <__ultoa_invert+0xe>
    298e:	cf 01       	movw	r24, r30
    2990:	08 95       	ret
    2992:	46 2f       	mov	r20, r22
    2994:	47 70       	andi	r20, 0x07	; 7
    2996:	40 5d       	subi	r20, 0xD0	; 208
    2998:	41 93       	st	Z+, r20
    299a:	b3 e0       	ldi	r27, 0x03	; 3
    299c:	0f d0       	rcall	.+30     	; 0x29bc <__ultoa_invert+0x86>
    299e:	c9 f7       	brne	.-14     	; 0x2992 <__ultoa_invert+0x5c>
    29a0:	f6 cf       	rjmp	.-20     	; 0x298e <__ultoa_invert+0x58>
    29a2:	46 2f       	mov	r20, r22
    29a4:	4f 70       	andi	r20, 0x0F	; 15
    29a6:	40 5d       	subi	r20, 0xD0	; 208
    29a8:	4a 33       	cpi	r20, 0x3A	; 58
    29aa:	18 f0       	brcs	.+6      	; 0x29b2 <__ultoa_invert+0x7c>
    29ac:	49 5d       	subi	r20, 0xD9	; 217
    29ae:	31 fd       	sbrc	r19, 1
    29b0:	40 52       	subi	r20, 0x20	; 32
    29b2:	41 93       	st	Z+, r20
    29b4:	02 d0       	rcall	.+4      	; 0x29ba <__ultoa_invert+0x84>
    29b6:	a9 f7       	brne	.-22     	; 0x29a2 <__ultoa_invert+0x6c>
    29b8:	ea cf       	rjmp	.-44     	; 0x298e <__ultoa_invert+0x58>
    29ba:	b4 e0       	ldi	r27, 0x04	; 4
    29bc:	a6 95       	lsr	r26
    29be:	97 95       	ror	r25
    29c0:	87 95       	ror	r24
    29c2:	77 95       	ror	r23
    29c4:	67 95       	ror	r22
    29c6:	ba 95       	dec	r27
    29c8:	c9 f7       	brne	.-14     	; 0x29bc <__ultoa_invert+0x86>
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	61 05       	cpc	r22, r1
    29ce:	71 05       	cpc	r23, r1
    29d0:	08 95       	ret
    29d2:	9b 01       	movw	r18, r22
    29d4:	ac 01       	movw	r20, r24
    29d6:	0a 2e       	mov	r0, r26
    29d8:	06 94       	lsr	r0
    29da:	57 95       	ror	r21
    29dc:	47 95       	ror	r20
    29de:	37 95       	ror	r19
    29e0:	27 95       	ror	r18
    29e2:	ba 95       	dec	r27
    29e4:	c9 f7       	brne	.-14     	; 0x29d8 <__ultoa_invert+0xa2>
    29e6:	62 0f       	add	r22, r18
    29e8:	73 1f       	adc	r23, r19
    29ea:	84 1f       	adc	r24, r20
    29ec:	95 1f       	adc	r25, r21
    29ee:	a0 1d       	adc	r26, r0
    29f0:	08 95       	ret

000029f2 <_exit>:
    29f2:	f8 94       	cli

000029f4 <__stop_program>:
    29f4:	ff cf       	rjmp	.-2      	; 0x29f4 <__stop_program>
