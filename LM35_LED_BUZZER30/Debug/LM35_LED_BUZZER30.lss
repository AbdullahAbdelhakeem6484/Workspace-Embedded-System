
LM35_LED_BUZZER30.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000974  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000009e8  2**0
                  ALLOC
  2 .stab         00000cb4  00000000  00000000  000009e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a5d  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a8 04 	jmp	0x950	; 0x950 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 16 04 	call	0x82c	; 0x82c <main>
  74:	0c 94 b8 04 	jmp	0x970	; 0x970 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_u16GetCurrentValue>:

static u16 ADC_value;


u16 ADC_u16GetCurrentValue(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	return ADC_value;
  84:	80 91 60 00 	lds	r24, 0x0060
  88:	90 91 61 00 	lds	r25, 0x0061


}
  8c:	cf 91       	pop	r28
  8e:	df 91       	pop	r29
  90:	08 95       	ret

00000092 <ADC_voidInit>:

void ADC_voidInit(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	//Enable PIE  ADC Interrupt Enable
	SET_BIT(ADCSRA,3);
  9a:	a6 e2       	ldi	r26, 0x26	; 38
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e6 e2       	ldi	r30, 0x26	; 38
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	8c 93       	st	X, r24
	//Enable GIE global last thing open it
	SET_BIT(SREG,7);
  a8:	af e5       	ldi	r26, 0x5F	; 95
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	ef e5       	ldi	r30, 0x5F	; 95
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	8c 93       	st	X, r24
	//ACVV 0 1 AVCC with external capacitor at AREF pin 7-6
	CLEAR_BIT(ADMUX,7);
  b6:	a7 e2       	ldi	r26, 0x27	; 39
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e7 e2       	ldi	r30, 0x27	; 39
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 77       	andi	r24, 0x7F	; 127
  c2:	8c 93       	st	X, r24
	SET_BIT(ADMUX,6);
  c4:	a7 e2       	ldi	r26, 0x27	; 39
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e7 e2       	ldi	r30, 0x27	; 39
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	8c 93       	st	X, r24

	CLEAR_BIT(ADMUX,5);//right adjust
  d2:	a7 e2       	ldi	r26, 0x27	; 39
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e7 e2       	ldi	r30, 0x27	; 39
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8f 7d       	andi	r24, 0xDF	; 223
  de:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,7);//ENABLE ADC
  e0:	a6 e2       	ldi	r26, 0x26	; 38
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e6 e2       	ldi	r30, 0x26	; 38
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	8c 93       	st	X, r24
// ADC Prescaler Select Bits (division factor=4)
	CLEAR_BIT(ADCSRA,2);
  ee:	a6 e2       	ldi	r26, 0x26	; 38
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e6 e2       	ldi	r30, 0x26	; 38
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8b 7f       	andi	r24, 0xFB	; 251
  fa:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
  fc:	a6 e2       	ldi	r26, 0x26	; 38
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	e6 e2       	ldi	r30, 0x26	; 38
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,0);
 10a:	a6 e2       	ldi	r26, 0x26	; 38
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e6 e2       	ldi	r30, 0x26	; 38
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8e 7f       	andi	r24, 0xFE	; 254
 116:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,5); //AUTO TRIGGER ENABLE
 118:	a6 e2       	ldi	r26, 0x26	; 38
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e6 e2       	ldi	r30, 0x26	; 38
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 62       	ori	r24, 0x20	; 32
 124:	8c 93       	st	X, r24

}
 126:	cf 91       	pop	r28
 128:	df 91       	pop	r29
 12a:	08 95       	ret

0000012c <ADC_u16GetValue>:

u16 ADC_u16GetValue(u8 channel)//CHANGE 0 TO 7
{
 12c:	df 93       	push	r29
 12e:	cf 93       	push	r28
 130:	00 d0       	rcall	.+0      	; 0x132 <ADC_u16GetValue+0x6>
 132:	0f 92       	push	r0
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_value;
	//Bits 4:0 ñ MUX4:0: Analog Channel and Gain Selection Bits 10x gain  01000
	ADMUX&=0XE0; //ZEROS 5 BIT IN CHANNEL (clear 5 LSB) (1010 0011 & 1110 0000 = 101 00000)
 13a:	a7 e2       	ldi	r26, 0x27	; 39
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e7 e2       	ldi	r30, 0x27	; 39
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 7e       	andi	r24, 0xE0	; 224
 146:	8c 93       	st	X, r24
	ADMUX|=channel;//store in register after oring with channel
 148:	a7 e2       	ldi	r26, 0x27	; 39
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	e7 e2       	ldi	r30, 0x27	; 39
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	90 81       	ld	r25, Z
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	89 2b       	or	r24, r25
 156:	8c 93       	st	X, r24
	// Bit 6 ñ ADSC: ADC Start Conversion
	SET_BIT(ADCSRA,6);//STAR CONVERSION
 158:	a6 e2       	ldi	r26, 0x26	; 38
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	e6 e2       	ldi	r30, 0x26	; 38
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	80 64       	ori	r24, 0x40	; 64
 164:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA,4)==0); //Bit 4 ñ ADIF: ADC Interrupt Flag  ÂÌ›÷· „” ‰Ì Â‰« ÿÊ· „« «·›·«Ã   » 0
 166:	e6 e2       	ldi	r30, 0x26	; 38
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	82 95       	swap	r24
 16e:	8f 70       	andi	r24, 0x0F	; 15
 170:	88 2f       	mov	r24, r24
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	81 70       	andi	r24, 0x01	; 1
 176:	90 70       	andi	r25, 0x00	; 0
 178:	00 97       	sbiw	r24, 0x00	; 0
 17a:	a9 f3       	breq	.-22     	; 0x166 <ADC_u16GetValue+0x3a>
	SET_BIT(ADCSRA,4); //CLEAR FLAG
 17c:	a6 e2       	ldi	r26, 0x26	; 38
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e6 e2       	ldi	r30, 0x26	; 38
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 61       	ori	r24, 0x10	; 16
 188:	8c 93       	st	X, r24

	ADC_value=0;
 18a:	1a 82       	std	Y+2, r1	; 0x02
 18c:	19 82       	std	Y+1, r1	; 0x01
	ADC_value=ADCL; //(0,1,2,3,4,5,6,7),8,9, (read from ADCL  ADCL must be read first, then ADCH.)
 18e:	e4 e2       	ldi	r30, 0x24	; 36
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 2f       	mov	r24, r24
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	9a 83       	std	Y+2, r25	; 0x02
 19a:	89 83       	std	Y+1, r24	; 0x01
	ADC_value|=(ADCH<<8); //(EX ADC_VALUE=ADCL 0111 1011  | (10100 00 _00<<8 1101 0101_  ),, )
 19c:	e5 e2       	ldi	r30, 0x25	; 37
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	98 2f       	mov	r25, r24
 1a8:	88 27       	eor	r24, r24
 1aa:	9c 01       	movw	r18, r24
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	9a 81       	ldd	r25, Y+2	; 0x02
 1b0:	82 2b       	or	r24, r18
 1b2:	93 2b       	or	r25, r19
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	89 83       	std	Y+1, r24	; 0x01

	return ADC_value; //return 10
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	9a 81       	ldd	r25, Y+2	; 0x02


}
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	cf 91       	pop	r28
 1c4:	df 91       	pop	r29
 1c6:	08 95       	ret

000001c8 <ADC_voidSelectChannel>:
void ADC_voidSelectChannel(u8 channel)
{
 1c8:	df 93       	push	r29
 1ca:	cf 93       	push	r28
 1cc:	0f 92       	push	r0
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	89 83       	std	Y+1, r24	; 0x01
//Bit 6 ñ ADSC: ADC Start Conversion
	SET_BIT(ADCSRA,6);
 1d4:	a6 e2       	ldi	r26, 0x26	; 38
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e6 e2       	ldi	r30, 0x26	; 38
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	8c 93       	st	X, r24

}
 1e2:	0f 90       	pop	r0
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <ADC_voidStartConversion>:

void ADC_voidStartConversion(void)
{
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
	if(GET_BIT(ADCSRA,6)==0) //END  conversion
 1f2:	e6 e2       	ldi	r30, 0x26	; 38
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	82 95       	swap	r24
 1fa:	86 95       	lsr	r24
 1fc:	86 95       	lsr	r24
 1fe:	83 70       	andi	r24, 0x03	; 3
 200:	88 2f       	mov	r24, r24
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	81 70       	andi	r24, 0x01	; 1
 206:	90 70       	andi	r25, 0x00	; 0
 208:	00 97       	sbiw	r24, 0x00	; 0
 20a:	39 f4       	brne	.+14     	; 0x21a <ADC_voidStartConversion+0x30>
	{
	SET_BIT(ADCSRA,4); //ï Bit 4 ñ ADIF: ADC Interrupt Flag
 20c:	a6 e2       	ldi	r26, 0x26	; 38
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	e6 e2       	ldi	r30, 0x26	; 38
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 61       	ori	r24, 0x10	; 16
 218:	8c 93       	st	X, r24
	}

}
 21a:	cf 91       	pop	r28
 21c:	df 91       	pop	r29
 21e:	08 95       	ret

00000220 <__vector_16>:
ISR(ADC_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
 236:	df 93       	push	r29
 238:	cf 93       	push	r28
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
	ADC_value=0;
 23e:	10 92 61 00 	sts	0x0061, r1
 242:	10 92 60 00 	sts	0x0060, r1
	ADC_value|=ADCL;
 246:	e4 e2       	ldi	r30, 0x24	; 36
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	28 2f       	mov	r18, r24
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	80 91 60 00 	lds	r24, 0x0060
 254:	90 91 61 00 	lds	r25, 0x0061
 258:	82 2b       	or	r24, r18
 25a:	93 2b       	or	r25, r19
 25c:	90 93 61 00 	sts	0x0061, r25
 260:	80 93 60 00 	sts	0x0060, r24
	ADC_value|=(ADCH<<8);
 264:	e5 e2       	ldi	r30, 0x25	; 37
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	88 2f       	mov	r24, r24
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	98 2f       	mov	r25, r24
 270:	88 27       	eor	r24, r24
 272:	9c 01       	movw	r18, r24
 274:	80 91 60 00 	lds	r24, 0x0060
 278:	90 91 61 00 	lds	r25, 0x0061
 27c:	82 2b       	or	r24, r18
 27e:	93 2b       	or	r25, r19
 280:	90 93 61 00 	sts	0x0061, r25
 284:	80 93 60 00 	sts	0x0060, r24

}
 288:	cf 91       	pop	r28
 28a:	df 91       	pop	r29
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <DIO_voidSetPinDir>:




void DIO_voidSetPinDir(u8 Port,u8 Pin,u8 Dir)
{
 2a2:	df 93       	push	r29
 2a4:	cf 93       	push	r28
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <DIO_voidSetPinDir+0x6>
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <DIO_voidSetPinDir+0x8>
 2aa:	0f 92       	push	r0
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	89 83       	std	Y+1, r24	; 0x01
 2b2:	6a 83       	std	Y+2, r22	; 0x02
 2b4:	4b 83       	std	Y+3, r20	; 0x03

switch(Port)
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	28 2f       	mov	r18, r24
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	3d 83       	std	Y+5, r19	; 0x05
 2be:	2c 83       	std	Y+4, r18	; 0x04
 2c0:	8c 81       	ldd	r24, Y+4	; 0x04
 2c2:	9d 81       	ldd	r25, Y+5	; 0x05
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	91 05       	cpc	r25, r1
 2c8:	09 f4       	brne	.+2      	; 0x2cc <DIO_voidSetPinDir+0x2a>
 2ca:	43 c0       	rjmp	.+134    	; 0x352 <DIO_voidSetPinDir+0xb0>
 2cc:	2c 81       	ldd	r18, Y+4	; 0x04
 2ce:	3d 81       	ldd	r19, Y+5	; 0x05
 2d0:	22 30       	cpi	r18, 0x02	; 2
 2d2:	31 05       	cpc	r19, r1
 2d4:	2c f4       	brge	.+10     	; 0x2e0 <DIO_voidSetPinDir+0x3e>
 2d6:	8c 81       	ldd	r24, Y+4	; 0x04
 2d8:	9d 81       	ldd	r25, Y+5	; 0x05
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	71 f0       	breq	.+28     	; 0x2fa <DIO_voidSetPinDir+0x58>
 2de:	bc c0       	rjmp	.+376    	; 0x458 <DIO_voidSetPinDir+0x1b6>
 2e0:	2c 81       	ldd	r18, Y+4	; 0x04
 2e2:	3d 81       	ldd	r19, Y+5	; 0x05
 2e4:	22 30       	cpi	r18, 0x02	; 2
 2e6:	31 05       	cpc	r19, r1
 2e8:	09 f4       	brne	.+2      	; 0x2ec <DIO_voidSetPinDir+0x4a>
 2ea:	5f c0       	rjmp	.+190    	; 0x3aa <DIO_voidSetPinDir+0x108>
 2ec:	8c 81       	ldd	r24, Y+4	; 0x04
 2ee:	9d 81       	ldd	r25, Y+5	; 0x05
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	91 05       	cpc	r25, r1
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <DIO_voidSetPinDir+0x56>
 2f6:	85 c0       	rjmp	.+266    	; 0x402 <DIO_voidSetPinDir+0x160>
 2f8:	af c0       	rjmp	.+350    	; 0x458 <DIO_voidSetPinDir+0x1b6>
{
	case 0:
		if(Dir==0)
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	88 23       	and	r24, r24
 2fe:	a9 f4       	brne	.+42     	; 0x32a <DIO_voidSetPinDir+0x88>
		{
			CLEAR_BIT(DDRA,Pin);
 300:	aa e3       	ldi	r26, 0x3A	; 58
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	ea e3       	ldi	r30, 0x3A	; 58
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	48 2f       	mov	r20, r24
 30c:	8a 81       	ldd	r24, Y+2	; 0x02
 30e:	28 2f       	mov	r18, r24
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 2e       	mov	r0, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_voidSetPinDir+0x7c>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	0a 94       	dec	r0
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_voidSetPinDir+0x78>
 322:	80 95       	com	r24
 324:	84 23       	and	r24, r20
 326:	8c 93       	st	X, r24
 328:	97 c0       	rjmp	.+302    	; 0x458 <DIO_voidSetPinDir+0x1b6>

		}
		else
		{
			SET_BIT(DDRA,Pin);
 32a:	aa e3       	ldi	r26, 0x3A	; 58
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	ea e3       	ldi	r30, 0x3A	; 58
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	48 2f       	mov	r20, r24
 336:	8a 81       	ldd	r24, Y+2	; 0x02
 338:	28 2f       	mov	r18, r24
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 2e       	mov	r0, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_voidSetPinDir+0xa6>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	0a 94       	dec	r0
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_voidSetPinDir+0xa2>
 34c:	84 2b       	or	r24, r20
 34e:	8c 93       	st	X, r24
 350:	83 c0       	rjmp	.+262    	; 0x458 <DIO_voidSetPinDir+0x1b6>



		break;
	case 1:
		if(Dir==0)
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	88 23       	and	r24, r24
 356:	a9 f4       	brne	.+42     	; 0x382 <DIO_voidSetPinDir+0xe0>
				{
					CLEAR_BIT(DDRB,Pin);
 358:	a7 e3       	ldi	r26, 0x37	; 55
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	e7 e3       	ldi	r30, 0x37	; 55
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	48 2f       	mov	r20, r24
 364:	8a 81       	ldd	r24, Y+2	; 0x02
 366:	28 2f       	mov	r18, r24
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 2e       	mov	r0, r18
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_voidSetPinDir+0xd4>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_voidSetPinDir+0xd0>
 37a:	80 95       	com	r24
 37c:	84 23       	and	r24, r20
 37e:	8c 93       	st	X, r24
 380:	6b c0       	rjmp	.+214    	; 0x458 <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRB,Pin);
 382:	a7 e3       	ldi	r26, 0x37	; 55
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	e7 e3       	ldi	r30, 0x37	; 55
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	48 2f       	mov	r20, r24
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 2e       	mov	r0, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_voidSetPinDir+0xfe>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_voidSetPinDir+0xfa>
 3a4:	84 2b       	or	r24, r20
 3a6:	8c 93       	st	X, r24
 3a8:	57 c0       	rjmp	.+174    	; 0x458 <DIO_voidSetPinDir+0x1b6>
				}


		break;
	case 2:
		if(Dir==0)
 3aa:	8b 81       	ldd	r24, Y+3	; 0x03
 3ac:	88 23       	and	r24, r24
 3ae:	a9 f4       	brne	.+42     	; 0x3da <DIO_voidSetPinDir+0x138>
				{
					CLEAR_BIT(DDRC,Pin);
 3b0:	a4 e3       	ldi	r26, 0x34	; 52
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	e4 e3       	ldi	r30, 0x34	; 52
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	48 2f       	mov	r20, r24
 3bc:	8a 81       	ldd	r24, Y+2	; 0x02
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 2e       	mov	r0, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_voidSetPinDir+0x12c>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_voidSetPinDir+0x128>
 3d2:	80 95       	com	r24
 3d4:	84 23       	and	r24, r20
 3d6:	8c 93       	st	X, r24
 3d8:	3f c0       	rjmp	.+126    	; 0x458 <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRC,Pin);
 3da:	a4 e3       	ldi	r26, 0x34	; 52
 3dc:	b0 e0       	ldi	r27, 0x00	; 0
 3de:	e4 e3       	ldi	r30, 0x34	; 52
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	48 2f       	mov	r20, r24
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 2e       	mov	r0, r18
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_voidSetPinDir+0x156>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_voidSetPinDir+0x152>
 3fc:	84 2b       	or	r24, r20
 3fe:	8c 93       	st	X, r24
 400:	2b c0       	rjmp	.+86     	; 0x458 <DIO_voidSetPinDir+0x1b6>


		break;

	case 3:
		if(Dir==0)
 402:	8b 81       	ldd	r24, Y+3	; 0x03
 404:	88 23       	and	r24, r24
 406:	a9 f4       	brne	.+42     	; 0x432 <DIO_voidSetPinDir+0x190>
				{
					CLEAR_BIT(DDRD,Pin);
 408:	a1 e3       	ldi	r26, 0x31	; 49
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	e1 e3       	ldi	r30, 0x31	; 49
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	48 2f       	mov	r20, r24
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 2e       	mov	r0, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_voidSetPinDir+0x184>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_voidSetPinDir+0x180>
 42a:	80 95       	com	r24
 42c:	84 23       	and	r24, r20
 42e:	8c 93       	st	X, r24
 430:	13 c0       	rjmp	.+38     	; 0x458 <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRD,Pin);
 432:	a1 e3       	ldi	r26, 0x31	; 49
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	e1 e3       	ldi	r30, 0x31	; 49
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	48 2f       	mov	r20, r24
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 2e       	mov	r0, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_voidSetPinDir+0x1ae>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_voidSetPinDir+0x1aa>
 454:	84 2b       	or	r24, r20
 456:	8c 93       	st	X, r24

		break;
}


}
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	cf 91       	pop	r28
 464:	df 91       	pop	r29
 466:	08 95       	ret

00000468 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Port,u8 Pin,u8 Value)
{
 468:	df 93       	push	r29
 46a:	cf 93       	push	r28
 46c:	00 d0       	rcall	.+0      	; 0x46e <DIO_voidSetPinValue+0x6>
 46e:	00 d0       	rcall	.+0      	; 0x470 <DIO_voidSetPinValue+0x8>
 470:	0f 92       	push	r0
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	89 83       	std	Y+1, r24	; 0x01
 478:	6a 83       	std	Y+2, r22	; 0x02
 47a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	3d 83       	std	Y+5, r19	; 0x05
 484:	2c 83       	std	Y+4, r18	; 0x04
 486:	8c 81       	ldd	r24, Y+4	; 0x04
 488:	9d 81       	ldd	r25, Y+5	; 0x05
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	91 05       	cpc	r25, r1
 48e:	09 f4       	brne	.+2      	; 0x492 <DIO_voidSetPinValue+0x2a>
 490:	43 c0       	rjmp	.+134    	; 0x518 <DIO_voidSetPinValue+0xb0>
 492:	2c 81       	ldd	r18, Y+4	; 0x04
 494:	3d 81       	ldd	r19, Y+5	; 0x05
 496:	22 30       	cpi	r18, 0x02	; 2
 498:	31 05       	cpc	r19, r1
 49a:	2c f4       	brge	.+10     	; 0x4a6 <DIO_voidSetPinValue+0x3e>
 49c:	8c 81       	ldd	r24, Y+4	; 0x04
 49e:	9d 81       	ldd	r25, Y+5	; 0x05
 4a0:	00 97       	sbiw	r24, 0x00	; 0
 4a2:	71 f0       	breq	.+28     	; 0x4c0 <DIO_voidSetPinValue+0x58>
 4a4:	bc c0       	rjmp	.+376    	; 0x61e <DIO_voidSetPinValue+0x1b6>
 4a6:	2c 81       	ldd	r18, Y+4	; 0x04
 4a8:	3d 81       	ldd	r19, Y+5	; 0x05
 4aa:	22 30       	cpi	r18, 0x02	; 2
 4ac:	31 05       	cpc	r19, r1
 4ae:	09 f4       	brne	.+2      	; 0x4b2 <DIO_voidSetPinValue+0x4a>
 4b0:	5f c0       	rjmp	.+190    	; 0x570 <DIO_voidSetPinValue+0x108>
 4b2:	8c 81       	ldd	r24, Y+4	; 0x04
 4b4:	9d 81       	ldd	r25, Y+5	; 0x05
 4b6:	83 30       	cpi	r24, 0x03	; 3
 4b8:	91 05       	cpc	r25, r1
 4ba:	09 f4       	brne	.+2      	; 0x4be <DIO_voidSetPinValue+0x56>
 4bc:	85 c0       	rjmp	.+266    	; 0x5c8 <DIO_voidSetPinValue+0x160>
 4be:	af c0       	rjmp	.+350    	; 0x61e <DIO_voidSetPinValue+0x1b6>
	{
		case 0:
			if(Value==0)
 4c0:	8b 81       	ldd	r24, Y+3	; 0x03
 4c2:	88 23       	and	r24, r24
 4c4:	a9 f4       	brne	.+42     	; 0x4f0 <DIO_voidSetPinValue+0x88>
					{
						CLEAR_BIT(PORTA,Pin);
 4c6:	ab e3       	ldi	r26, 0x3B	; 59
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	eb e3       	ldi	r30, 0x3B	; 59
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	48 2f       	mov	r20, r24
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	28 2f       	mov	r18, r24
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 2e       	mov	r0, r18
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_voidSetPinValue+0x7c>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	0a 94       	dec	r0
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_voidSetPinValue+0x78>
 4e8:	80 95       	com	r24
 4ea:	84 23       	and	r24, r20
 4ec:	8c 93       	st	X, r24
 4ee:	97 c0       	rjmp	.+302    	; 0x61e <DIO_voidSetPinValue+0x1b6>

					}
					else
					{
						SET_BIT(PORTA,Pin);
 4f0:	ab e3       	ldi	r26, 0x3B	; 59
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	eb e3       	ldi	r30, 0x3B	; 59
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	48 2f       	mov	r20, r24
 4fc:	8a 81       	ldd	r24, Y+2	; 0x02
 4fe:	28 2f       	mov	r18, r24
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 2e       	mov	r0, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_voidSetPinValue+0xa6>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	0a 94       	dec	r0
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_voidSetPinValue+0xa2>
 512:	84 2b       	or	r24, r20
 514:	8c 93       	st	X, r24
 516:	83 c0       	rjmp	.+262    	; 0x61e <DIO_voidSetPinValue+0x1b6>
					}


			break;
		case 1:
			if(Value==0)
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	88 23       	and	r24, r24
 51c:	a9 f4       	brne	.+42     	; 0x548 <DIO_voidSetPinValue+0xe0>
				{
				CLEAR_BIT(PORTB,Pin);
 51e:	a8 e3       	ldi	r26, 0x38	; 56
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	e8 e3       	ldi	r30, 0x38	; 56
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	48 2f       	mov	r20, r24
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 2e       	mov	r0, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_voidSetPinValue+0xd4>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	0a 94       	dec	r0
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_voidSetPinValue+0xd0>
 540:	80 95       	com	r24
 542:	84 23       	and	r24, r20
 544:	8c 93       	st	X, r24
 546:	6b c0       	rjmp	.+214    	; 0x61e <DIO_voidSetPinValue+0x1b6>

				}
				else
				{
				SET_BIT(PORTB,Pin);
 548:	a8 e3       	ldi	r26, 0x38	; 56
 54a:	b0 e0       	ldi	r27, 0x00	; 0
 54c:	e8 e3       	ldi	r30, 0x38	; 56
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	48 2f       	mov	r20, r24
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	28 2f       	mov	r18, r24
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 2e       	mov	r0, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_voidSetPinValue+0xfe>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	0a 94       	dec	r0
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_voidSetPinValue+0xfa>
 56a:	84 2b       	or	r24, r20
 56c:	8c 93       	st	X, r24
 56e:	57 c0       	rjmp	.+174    	; 0x61e <DIO_voidSetPinValue+0x1b6>
				}

			break;
		case 2:
			if(Value==0)
 570:	8b 81       	ldd	r24, Y+3	; 0x03
 572:	88 23       	and	r24, r24
 574:	a9 f4       	brne	.+42     	; 0x5a0 <DIO_voidSetPinValue+0x138>
				{
				CLEAR_BIT(PORTC,Pin);
 576:	a5 e3       	ldi	r26, 0x35	; 53
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	e5 e3       	ldi	r30, 0x35	; 53
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	48 2f       	mov	r20, r24
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	28 2f       	mov	r18, r24
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 2e       	mov	r0, r18
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_voidSetPinValue+0x12c>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	0a 94       	dec	r0
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_voidSetPinValue+0x128>
 598:	80 95       	com	r24
 59a:	84 23       	and	r24, r20
 59c:	8c 93       	st	X, r24
 59e:	3f c0       	rjmp	.+126    	; 0x61e <DIO_voidSetPinValue+0x1b6>

				}
				else
				{
					SET_BIT(PORTC,Pin);
 5a0:	a5 e3       	ldi	r26, 0x35	; 53
 5a2:	b0 e0       	ldi	r27, 0x00	; 0
 5a4:	e5 e3       	ldi	r30, 0x35	; 53
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
 5aa:	48 2f       	mov	r20, r24
 5ac:	8a 81       	ldd	r24, Y+2	; 0x02
 5ae:	28 2f       	mov	r18, r24
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 2e       	mov	r0, r18
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <DIO_voidSetPinValue+0x156>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	0a 94       	dec	r0
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DIO_voidSetPinValue+0x152>
 5c2:	84 2b       	or	r24, r20
 5c4:	8c 93       	st	X, r24
 5c6:	2b c0       	rjmp	.+86     	; 0x61e <DIO_voidSetPinValue+0x1b6>
				}
			break;

		case 3:
			if(Value==0)
 5c8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ca:	88 23       	and	r24, r24
 5cc:	a9 f4       	brne	.+42     	; 0x5f8 <DIO_voidSetPinValue+0x190>
					{
					CLEAR_BIT(PORTD,Pin);
 5ce:	a2 e3       	ldi	r26, 0x32	; 50
 5d0:	b0 e0       	ldi	r27, 0x00	; 0
 5d2:	e2 e3       	ldi	r30, 0x32	; 50
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	48 2f       	mov	r20, r24
 5da:	8a 81       	ldd	r24, Y+2	; 0x02
 5dc:	28 2f       	mov	r18, r24
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	02 2e       	mov	r0, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_voidSetPinValue+0x184>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	0a 94       	dec	r0
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_voidSetPinValue+0x180>
 5f0:	80 95       	com	r24
 5f2:	84 23       	and	r24, r20
 5f4:	8c 93       	st	X, r24
 5f6:	13 c0       	rjmp	.+38     	; 0x61e <DIO_voidSetPinValue+0x1b6>

					}
					else
					{
						SET_BIT(PORTD,Pin);
 5f8:	a2 e3       	ldi	r26, 0x32	; 50
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	e2 e3       	ldi	r30, 0x32	; 50
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	48 2f       	mov	r20, r24
 604:	8a 81       	ldd	r24, Y+2	; 0x02
 606:	28 2f       	mov	r18, r24
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 2e       	mov	r0, r18
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_voidSetPinValue+0x1ae>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	0a 94       	dec	r0
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_voidSetPinValue+0x1aa>
 61a:	84 2b       	or	r24, r20
 61c:	8c 93       	st	X, r24

			break;
	}


}
 61e:	0f 90       	pop	r0
 620:	0f 90       	pop	r0
 622:	0f 90       	pop	r0
 624:	0f 90       	pop	r0
 626:	0f 90       	pop	r0
 628:	cf 91       	pop	r28
 62a:	df 91       	pop	r29
 62c:	08 95       	ret

0000062e <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue(u8 Port,u8 Pin)
{
 62e:	df 93       	push	r29
 630:	cf 93       	push	r28
 632:	00 d0       	rcall	.+0      	; 0x634 <DIO_voidTogglePinValue+0x6>
 634:	00 d0       	rcall	.+0      	; 0x636 <DIO_voidTogglePinValue+0x8>
 636:	cd b7       	in	r28, 0x3d	; 61
 638:	de b7       	in	r29, 0x3e	; 62
 63a:	89 83       	std	Y+1, r24	; 0x01
 63c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	3c 83       	std	Y+4, r19	; 0x04
 646:	2b 83       	std	Y+3, r18	; 0x03
 648:	8b 81       	ldd	r24, Y+3	; 0x03
 64a:	9c 81       	ldd	r25, Y+4	; 0x04
 64c:	81 30       	cpi	r24, 0x01	; 1
 64e:	91 05       	cpc	r25, r1
 650:	49 f1       	breq	.+82     	; 0x6a4 <DIO_voidTogglePinValue+0x76>
 652:	2b 81       	ldd	r18, Y+3	; 0x03
 654:	3c 81       	ldd	r19, Y+4	; 0x04
 656:	22 30       	cpi	r18, 0x02	; 2
 658:	31 05       	cpc	r19, r1
 65a:	2c f4       	brge	.+10     	; 0x666 <DIO_voidTogglePinValue+0x38>
 65c:	8b 81       	ldd	r24, Y+3	; 0x03
 65e:	9c 81       	ldd	r25, Y+4	; 0x04
 660:	00 97       	sbiw	r24, 0x00	; 0
 662:	61 f0       	breq	.+24     	; 0x67c <DIO_voidTogglePinValue+0x4e>
 664:	5a c0       	rjmp	.+180    	; 0x71a <DIO_voidTogglePinValue+0xec>
 666:	2b 81       	ldd	r18, Y+3	; 0x03
 668:	3c 81       	ldd	r19, Y+4	; 0x04
 66a:	22 30       	cpi	r18, 0x02	; 2
 66c:	31 05       	cpc	r19, r1
 66e:	71 f1       	breq	.+92     	; 0x6cc <DIO_voidTogglePinValue+0x9e>
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	9c 81       	ldd	r25, Y+4	; 0x04
 674:	83 30       	cpi	r24, 0x03	; 3
 676:	91 05       	cpc	r25, r1
 678:	e9 f1       	breq	.+122    	; 0x6f4 <DIO_voidTogglePinValue+0xc6>
 67a:	4f c0       	rjmp	.+158    	; 0x71a <DIO_voidTogglePinValue+0xec>
	{
	case 0:
		TOGGLE_BIT(PORTA,Pin);
 67c:	ab e3       	ldi	r26, 0x3B	; 59
 67e:	b0 e0       	ldi	r27, 0x00	; 0
 680:	eb e3       	ldi	r30, 0x3B	; 59
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 81       	ld	r24, Z
 686:	48 2f       	mov	r20, r24
 688:	8a 81       	ldd	r24, Y+2	; 0x02
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	02 2e       	mov	r0, r18
 694:	02 c0       	rjmp	.+4      	; 0x69a <DIO_voidTogglePinValue+0x6c>
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	0a 94       	dec	r0
 69c:	e2 f7       	brpl	.-8      	; 0x696 <DIO_voidTogglePinValue+0x68>
 69e:	84 27       	eor	r24, r20
 6a0:	8c 93       	st	X, r24
 6a2:	3b c0       	rjmp	.+118    	; 0x71a <DIO_voidTogglePinValue+0xec>

		break;
	case 1:
		TOGGLE_BIT(PORTB,Pin);
 6a4:	a8 e3       	ldi	r26, 0x38	; 56
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	e8 e3       	ldi	r30, 0x38	; 56
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	48 2f       	mov	r20, r24
 6b0:	8a 81       	ldd	r24, Y+2	; 0x02
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 2e       	mov	r0, r18
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_voidTogglePinValue+0x94>
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	0a 94       	dec	r0
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_voidTogglePinValue+0x90>
 6c6:	84 27       	eor	r24, r20
 6c8:	8c 93       	st	X, r24
 6ca:	27 c0       	rjmp	.+78     	; 0x71a <DIO_voidTogglePinValue+0xec>

		break;
	case 2:
		TOGGLE_BIT(PORTC,Pin);
 6cc:	a5 e3       	ldi	r26, 0x35	; 53
 6ce:	b0 e0       	ldi	r27, 0x00	; 0
 6d0:	e5 e3       	ldi	r30, 0x35	; 53
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	48 2f       	mov	r20, r24
 6d8:	8a 81       	ldd	r24, Y+2	; 0x02
 6da:	28 2f       	mov	r18, r24
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 2e       	mov	r0, r18
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_voidTogglePinValue+0xbc>
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	0a 94       	dec	r0
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <DIO_voidTogglePinValue+0xb8>
 6ee:	84 27       	eor	r24, r20
 6f0:	8c 93       	st	X, r24
 6f2:	13 c0       	rjmp	.+38     	; 0x71a <DIO_voidTogglePinValue+0xec>

		break;

	case 3:
		TOGGLE_BIT(PORTD,Pin);
 6f4:	a2 e3       	ldi	r26, 0x32	; 50
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	e2 e3       	ldi	r30, 0x32	; 50
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	48 2f       	mov	r20, r24
 700:	8a 81       	ldd	r24, Y+2	; 0x02
 702:	28 2f       	mov	r18, r24
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 2e       	mov	r0, r18
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_voidTogglePinValue+0xe4>
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	0a 94       	dec	r0
 714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_voidTogglePinValue+0xe0>
 716:	84 27       	eor	r24, r20
 718:	8c 93       	st	X, r24

		break;

	}

}
 71a:	0f 90       	pop	r0
 71c:	0f 90       	pop	r0
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	cf 91       	pop	r28
 724:	df 91       	pop	r29
 726:	08 95       	ret

00000728 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 PORT,u8 Pin)
{
 728:	df 93       	push	r29
 72a:	cf 93       	push	r28
 72c:	00 d0       	rcall	.+0      	; 0x72e <DIO_u8GetPinValue+0x6>
 72e:	00 d0       	rcall	.+0      	; 0x730 <DIO_u8GetPinValue+0x8>
 730:	00 d0       	rcall	.+0      	; 0x732 <DIO_u8GetPinValue+0xa>
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
 736:	89 83       	std	Y+1, r24	; 0x01
 738:	6a 83       	std	Y+2, r22	; 0x02
switch(PORT)
 73a:	89 81       	ldd	r24, Y+1	; 0x01
 73c:	28 2f       	mov	r18, r24
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	3d 83       	std	Y+5, r19	; 0x05
 742:	2c 83       	std	Y+4, r18	; 0x04
 744:	4c 81       	ldd	r20, Y+4	; 0x04
 746:	5d 81       	ldd	r21, Y+5	; 0x05
 748:	41 30       	cpi	r20, 0x01	; 1
 74a:	51 05       	cpc	r21, r1
 74c:	49 f1       	breq	.+82     	; 0x7a0 <DIO_u8GetPinValue+0x78>
 74e:	8c 81       	ldd	r24, Y+4	; 0x04
 750:	9d 81       	ldd	r25, Y+5	; 0x05
 752:	82 30       	cpi	r24, 0x02	; 2
 754:	91 05       	cpc	r25, r1
 756:	34 f4       	brge	.+12     	; 0x764 <DIO_u8GetPinValue+0x3c>
 758:	2c 81       	ldd	r18, Y+4	; 0x04
 75a:	3d 81       	ldd	r19, Y+5	; 0x05
 75c:	21 15       	cp	r18, r1
 75e:	31 05       	cpc	r19, r1
 760:	61 f0       	breq	.+24     	; 0x77a <DIO_u8GetPinValue+0x52>
 762:	57 c0       	rjmp	.+174    	; 0x812 <DIO_u8GetPinValue+0xea>
 764:	4c 81       	ldd	r20, Y+4	; 0x04
 766:	5d 81       	ldd	r21, Y+5	; 0x05
 768:	42 30       	cpi	r20, 0x02	; 2
 76a:	51 05       	cpc	r21, r1
 76c:	61 f1       	breq	.+88     	; 0x7c6 <DIO_u8GetPinValue+0x9e>
 76e:	8c 81       	ldd	r24, Y+4	; 0x04
 770:	9d 81       	ldd	r25, Y+5	; 0x05
 772:	83 30       	cpi	r24, 0x03	; 3
 774:	91 05       	cpc	r25, r1
 776:	d1 f1       	breq	.+116    	; 0x7ec <DIO_u8GetPinValue+0xc4>
 778:	4c c0       	rjmp	.+152    	; 0x812 <DIO_u8GetPinValue+0xea>
{
case 0:
	return  GET_BIT(PINA,Pin);
 77a:	e9 e3       	ldi	r30, 0x39	; 57
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	80 81       	ld	r24, Z
 780:	28 2f       	mov	r18, r24
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	8a 81       	ldd	r24, Y+2	; 0x02
 786:	88 2f       	mov	r24, r24
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	a9 01       	movw	r20, r18
 78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_u8GetPinValue+0x6a>
 78e:	55 95       	asr	r21
 790:	47 95       	ror	r20
 792:	8a 95       	dec	r24
 794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_u8GetPinValue+0x66>
 796:	ca 01       	movw	r24, r20
 798:	58 2f       	mov	r21, r24
 79a:	51 70       	andi	r21, 0x01	; 1
 79c:	5b 83       	std	Y+3, r21	; 0x03
 79e:	3a c0       	rjmp	.+116    	; 0x814 <DIO_u8GetPinValue+0xec>

case 1:
	return GET_BIT(PINB,Pin);
 7a0:	e6 e3       	ldi	r30, 0x36	; 54
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	28 2f       	mov	r18, r24
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	8a 81       	ldd	r24, Y+2	; 0x02
 7ac:	88 2f       	mov	r24, r24
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	a9 01       	movw	r20, r18
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_u8GetPinValue+0x90>
 7b4:	55 95       	asr	r21
 7b6:	47 95       	ror	r20
 7b8:	8a 95       	dec	r24
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_u8GetPinValue+0x8c>
 7bc:	ca 01       	movw	r24, r20
 7be:	58 2f       	mov	r21, r24
 7c0:	51 70       	andi	r21, 0x01	; 1
 7c2:	5b 83       	std	Y+3, r21	; 0x03
 7c4:	27 c0       	rjmp	.+78     	; 0x814 <DIO_u8GetPinValue+0xec>
case 2:
	return GET_BIT(PINC,Pin);
 7c6:	e3 e3       	ldi	r30, 0x33	; 51
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	80 81       	ld	r24, Z
 7cc:	28 2f       	mov	r18, r24
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	8a 81       	ldd	r24, Y+2	; 0x02
 7d2:	88 2f       	mov	r24, r24
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	a9 01       	movw	r20, r18
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <DIO_u8GetPinValue+0xb6>
 7da:	55 95       	asr	r21
 7dc:	47 95       	ror	r20
 7de:	8a 95       	dec	r24
 7e0:	e2 f7       	brpl	.-8      	; 0x7da <DIO_u8GetPinValue+0xb2>
 7e2:	ca 01       	movw	r24, r20
 7e4:	58 2f       	mov	r21, r24
 7e6:	51 70       	andi	r21, 0x01	; 1
 7e8:	5b 83       	std	Y+3, r21	; 0x03
 7ea:	14 c0       	rjmp	.+40     	; 0x814 <DIO_u8GetPinValue+0xec>
case 3:
	return GET_BIT(PIND,Pin);
 7ec:	e0 e3       	ldi	r30, 0x30	; 48
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	28 2f       	mov	r18, r24
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	8a 81       	ldd	r24, Y+2	; 0x02
 7f8:	88 2f       	mov	r24, r24
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	a9 01       	movw	r20, r18
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <DIO_u8GetPinValue+0xdc>
 800:	55 95       	asr	r21
 802:	47 95       	ror	r20
 804:	8a 95       	dec	r24
 806:	e2 f7       	brpl	.-8      	; 0x800 <DIO_u8GetPinValue+0xd8>
 808:	ca 01       	movw	r24, r20
 80a:	58 2f       	mov	r21, r24
 80c:	51 70       	andi	r21, 0x01	; 1
 80e:	5b 83       	std	Y+3, r21	; 0x03
 810:	01 c0       	rjmp	.+2      	; 0x814 <DIO_u8GetPinValue+0xec>
 812:	02 c0       	rjmp	.+4      	; 0x818 <DIO_u8GetPinValue+0xf0>


}


}
 814:	8b 81       	ldd	r24, Y+3	; 0x03
 816:	8e 83       	std	Y+6, r24	; 0x06
 818:	8e 81       	ldd	r24, Y+6	; 0x06
 81a:	26 96       	adiw	r28, 0x06	; 6
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	f8 94       	cli
 820:	de bf       	out	0x3e, r29	; 62
 822:	0f be       	out	0x3f, r0	; 63
 824:	cd bf       	out	0x3d, r28	; 61
 826:	cf 91       	pop	r28
 828:	df 91       	pop	r29
 82a:	08 95       	ret

0000082c <main>:
#include<util/delay.h>
#include<avr/io.h>
#define F_CPU 12000000

int main(void)
{
 82c:	df 93       	push	r29
 82e:	cf 93       	push	r28
 830:	00 d0       	rcall	.+0      	; 0x832 <main+0x6>
 832:	00 d0       	rcall	.+0      	; 0x834 <main+0x8>
 834:	cd b7       	in	r28, 0x3d	; 61
 836:	de b7       	in	r29, 0x3e	; 62
	//Enable PIE
	SET_BIT(GICR,6);
 838:	ab e5       	ldi	r26, 0x5B	; 91
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	eb e5       	ldi	r30, 0x5B	; 91
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	80 64       	ori	r24, 0x40	; 64
 844:	8c 93       	st	X, r24
	//Enable GIE
	SET_BIT(SREG,7);
 846:	af e5       	ldi	r26, 0x5F	; 95
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	ef e5       	ldi	r30, 0x5F	; 95
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	80 68       	ori	r24, 0x80	; 128
 852:	8c 93       	st	X, r24

	//RISING EDGE   EXTERNAL interrupt
	SET_BIT(MCUCR,0);
 854:	a5 e5       	ldi	r26, 0x55	; 85
 856:	b0 e0       	ldi	r27, 0x00	; 0
 858:	e5 e5       	ldi	r30, 0x55	; 85
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
 85e:	81 60       	ori	r24, 0x01	; 1
 860:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
 862:	a5 e5       	ldi	r26, 0x55	; 85
 864:	b0 e0       	ldi	r27, 0x00	; 0
 866:	e5 e5       	ldi	r30, 0x55	; 85
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	80 81       	ld	r24, Z
 86c:	82 60       	ori	r24, 0x02	; 2
 86e:	8c 93       	st	X, r24
	//Special FunctionIO Register
	SET_BIT(SFIOR,6);
 870:	a0 e5       	ldi	r26, 0x50	; 80
 872:	b0 e0       	ldi	r27, 0x00	; 0
 874:	e0 e5       	ldi	r30, 0x50	; 80
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	80 81       	ld	r24, Z
 87a:	80 64       	ori	r24, 0x40	; 64
 87c:	8c 93       	st	X, r24
	CLEAR_BIT(SFIOR,5);
 87e:	a0 e5       	ldi	r26, 0x50	; 80
 880:	b0 e0       	ldi	r27, 0x00	; 0
 882:	e0 e5       	ldi	r30, 0x50	; 80
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 81       	ld	r24, Z
 888:	8f 7d       	andi	r24, 0xDF	; 223
 88a:	8c 93       	st	X, r24
	CLEAR_BIT(SFIOR,7);
 88c:	a0 e5       	ldi	r26, 0x50	; 80
 88e:	b0 e0       	ldi	r27, 0x00	; 0
 890:	e0 e5       	ldi	r30, 0x50	; 80
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
 896:	8f 77       	andi	r24, 0x7F	; 127
 898:	8c 93       	st	X, r24

	DIO_voidSetPinDir(PORT_D,PIN_2,INPUT);  //Interrupt 0 input
 89a:	83 e0       	ldi	r24, 0x03	; 3
 89c:	62 e0       	ldi	r22, 0x02	; 2
 89e:	40 e0       	ldi	r20, 0x00	; 0
 8a0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_voidSetPinDir>
	DIO_voidSetPinValue(PORT_D,PIN_2,HIGH);  //interrupt pin pull up
 8a4:	83 e0       	ldi	r24, 0x03	; 3
 8a6:	62 e0       	ldi	r22, 0x02	; 2
 8a8:	41 e0       	ldi	r20, 0x01	; 1
 8aa:	0e 94 34 02 	call	0x468	; 0x468 <DIO_voidSetPinValue>


	//voltage divider
	u16 digital,analog;
	DIO_voidSetPinDir(PORT_C,PIN_0,OUTPUT);
 8ae:	82 e0       	ldi	r24, 0x02	; 2
 8b0:	60 e0       	ldi	r22, 0x00	; 0
 8b2:	41 e0       	ldi	r20, 0x01	; 1
 8b4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(PORT_C,PIN_1,OUTPUT);
 8b8:	82 e0       	ldi	r24, 0x02	; 2
 8ba:	61 e0       	ldi	r22, 0x01	; 1
 8bc:	41 e0       	ldi	r20, 0x01	; 1
 8be:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(PORT_C,PIN_2,OUTPUT);
 8c2:	82 e0       	ldi	r24, 0x02	; 2
 8c4:	62 e0       	ldi	r22, 0x02	; 2
 8c6:	41 e0       	ldi	r20, 0x01	; 1
 8c8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_voidSetPinDir>
	ADC_voidInit();
 8cc:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	ADC_voidSelectChannel(0);
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ADC_voidSelectChannel>
	ADC_voidStartConversion();
 8d6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <ADC_voidStartConversion>
	while(1)
	{


		digital=ADC_u16GetCurrentValue();
 8da:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_u16GetCurrentValue>
 8de:	9c 83       	std	Y+4, r25	; 0x04
 8e0:	8b 83       	std	Y+3, r24	; 0x03
		analog=(digital*500)/1024; //to be compatability
 8e2:	2b 81       	ldd	r18, Y+3	; 0x03
 8e4:	3c 81       	ldd	r19, Y+4	; 0x04
 8e6:	84 ef       	ldi	r24, 0xF4	; 244
 8e8:	91 e0       	ldi	r25, 0x01	; 1
 8ea:	ac 01       	movw	r20, r24
 8ec:	24 9f       	mul	r18, r20
 8ee:	c0 01       	movw	r24, r0
 8f0:	25 9f       	mul	r18, r21
 8f2:	90 0d       	add	r25, r0
 8f4:	34 9f       	mul	r19, r20
 8f6:	90 0d       	add	r25, r0
 8f8:	11 24       	eor	r1, r1
 8fa:	89 2f       	mov	r24, r25
 8fc:	99 27       	eor	r25, r25
 8fe:	86 95       	lsr	r24
 900:	86 95       	lsr	r24
 902:	9a 83       	std	Y+2, r25	; 0x02
 904:	89 83       	std	Y+1, r24	; 0x01
		if(analog>30)
 906:	89 81       	ldd	r24, Y+1	; 0x01
 908:	9a 81       	ldd	r25, Y+2	; 0x02
 90a:	8f 31       	cpi	r24, 0x1F	; 31
 90c:	91 05       	cpc	r25, r1
 90e:	80 f0       	brcs	.+32     	; 0x930 <__stack+0xd1>
		{
			DIO_voidSetPinValue(PORT_C,PIN_0,HIGH);
 910:	82 e0       	ldi	r24, 0x02	; 2
 912:	60 e0       	ldi	r22, 0x00	; 0
 914:	41 e0       	ldi	r20, 0x01	; 1
 916:	0e 94 34 02 	call	0x468	; 0x468 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORT_C,PIN_1,HIGH);
 91a:	82 e0       	ldi	r24, 0x02	; 2
 91c:	61 e0       	ldi	r22, 0x01	; 1
 91e:	41 e0       	ldi	r20, 0x01	; 1
 920:	0e 94 34 02 	call	0x468	; 0x468 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORT_C,PIN_2,HIGH);
 924:	82 e0       	ldi	r24, 0x02	; 2
 926:	62 e0       	ldi	r22, 0x02	; 2
 928:	41 e0       	ldi	r20, 0x01	; 1
 92a:	0e 94 34 02 	call	0x468	; 0x468 <DIO_voidSetPinValue>
 92e:	d5 cf       	rjmp	.-86     	; 0x8da <__stack+0x7b>

		}
		else
		{	DIO_voidSetPinValue(PORT_C,PIN_0,LOW);
 930:	82 e0       	ldi	r24, 0x02	; 2
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	40 e0       	ldi	r20, 0x00	; 0
 936:	0e 94 34 02 	call	0x468	; 0x468 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORT_C,PIN_1,LOW);
 93a:	82 e0       	ldi	r24, 0x02	; 2
 93c:	61 e0       	ldi	r22, 0x01	; 1
 93e:	40 e0       	ldi	r20, 0x00	; 0
 940:	0e 94 34 02 	call	0x468	; 0x468 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORT_C,PIN_2,LOW);
 944:	82 e0       	ldi	r24, 0x02	; 2
 946:	62 e0       	ldi	r22, 0x02	; 2
 948:	40 e0       	ldi	r20, 0x00	; 0
 94a:	0e 94 34 02 	call	0x468	; 0x468 <DIO_voidSetPinValue>
 94e:	c5 cf       	rjmp	.-118    	; 0x8da <__stack+0x7b>

00000950 <__vector_1>:
return 0;
}

//EXTERNAL INTERRUPT
ISR(INT0_vect)
{}
 950:	1f 92       	push	r1
 952:	0f 92       	push	r0
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	0f 92       	push	r0
 958:	11 24       	eor	r1, r1
 95a:	df 93       	push	r29
 95c:	cf 93       	push	r28
 95e:	cd b7       	in	r28, 0x3d	; 61
 960:	de b7       	in	r29, 0x3e	; 62
 962:	cf 91       	pop	r28
 964:	df 91       	pop	r29
 966:	0f 90       	pop	r0
 968:	0f be       	out	0x3f, r0	; 63
 96a:	0f 90       	pop	r0
 96c:	1f 90       	pop	r1
 96e:	18 95       	reti

00000970 <_exit>:
 970:	f8 94       	cli

00000972 <__stop_program>:
 972:	ff cf       	rjmp	.-2      	; 0x972 <__stop_program>
