
Avoiding_Robot_metalDetector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002826  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00002826  000028ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800176  00800176  000029d0  2**0
                  ALLOC
  3 .stab         00001c38  00000000  00000000  000029d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cde  00000000  00000000  00004608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000052e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00005486  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00005676  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00007a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00008df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00009fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000a194  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000a487  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ae55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <main>
      8a:	0c 94 11 14 	jmp	0x2822	; 0x2822 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e6       	ldi	r22, 0x6D	; 109
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 06 14 	jmp	0x280c	; 0x280c <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	eb 58       	subi	r30, 0x8B	; 139
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_voidSetPinDir>:

#include <avr/io.h>


void DIO_voidSetPinDir(u8 Port,u8 Pin,u8 Dir)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <DIO_voidSetPinDir+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <DIO_voidSetPinDir+0x8>
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	6a 83       	std	Y+2, r22	; 0x02
     e0a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3d 83       	std	Y+5, r19	; 0x05
     e14:	2c 83       	std	Y+4, r18	; 0x04
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	9d 81       	ldd	r25, Y+5	; 0x05
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	91 05       	cpc	r25, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <DIO_voidSetPinDir+0x2a>
     e20:	43 c0       	rjmp	.+134    	; 0xea8 <DIO_voidSetPinDir+0xb0>
     e22:	2c 81       	ldd	r18, Y+4	; 0x04
     e24:	3d 81       	ldd	r19, Y+5	; 0x05
     e26:	22 30       	cpi	r18, 0x02	; 2
     e28:	31 05       	cpc	r19, r1
     e2a:	2c f4       	brge	.+10     	; 0xe36 <DIO_voidSetPinDir+0x3e>
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	9d 81       	ldd	r25, Y+5	; 0x05
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	71 f0       	breq	.+28     	; 0xe50 <DIO_voidSetPinDir+0x58>
     e34:	bc c0       	rjmp	.+376    	; 0xfae <DIO_voidSetPinDir+0x1b6>
     e36:	2c 81       	ldd	r18, Y+4	; 0x04
     e38:	3d 81       	ldd	r19, Y+5	; 0x05
     e3a:	22 30       	cpi	r18, 0x02	; 2
     e3c:	31 05       	cpc	r19, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <DIO_voidSetPinDir+0x4a>
     e40:	5f c0       	rjmp	.+190    	; 0xf00 <DIO_voidSetPinDir+0x108>
     e42:	8c 81       	ldd	r24, Y+4	; 0x04
     e44:	9d 81       	ldd	r25, Y+5	; 0x05
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	91 05       	cpc	r25, r1
     e4a:	09 f4       	brne	.+2      	; 0xe4e <DIO_voidSetPinDir+0x56>
     e4c:	85 c0       	rjmp	.+266    	; 0xf58 <DIO_voidSetPinDir+0x160>
     e4e:	af c0       	rjmp	.+350    	; 0xfae <DIO_voidSetPinDir+0x1b6>
	{
	case 0:
	    if(Dir == 0)
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	88 23       	and	r24, r24
     e54:	a9 f4       	brne	.+42     	; 0xe80 <DIO_voidSetPinDir+0x88>
		{
			CLEAR_BIT(DDRA,Pin);
     e56:	aa e3       	ldi	r26, 0x3A	; 58
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	ea e3       	ldi	r30, 0x3A	; 58
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_voidSetPinDir+0x7c>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_voidSetPinDir+0x78>
     e78:	80 95       	com	r24
     e7a:	84 23       	and	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	97 c0       	rjmp	.+302    	; 0xfae <DIO_voidSetPinDir+0x1b6>
		}
		else
		{
			SET_BIT(DDRA,Pin);
     e80:	aa e3       	ldi	r26, 0x3A	; 58
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	ea e3       	ldi	r30, 0x3A	; 58
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_voidSetPinDir+0xa6>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_voidSetPinDir+0xa2>
     ea2:	84 2b       	or	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	83 c0       	rjmp	.+262    	; 0xfae <DIO_voidSetPinDir+0x1b6>

		}
		break;
	case 1:
		if(Dir == 0)
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	88 23       	and	r24, r24
     eac:	a9 f4       	brne	.+42     	; 0xed8 <DIO_voidSetPinDir+0xe0>
		{
			CLEAR_BIT(DDRB,Pin);
     eae:	a7 e3       	ldi	r26, 0x37	; 55
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e7 e3       	ldi	r30, 0x37	; 55
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_voidSetPinDir+0xd4>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_voidSetPinDir+0xd0>
     ed0:	80 95       	com	r24
     ed2:	84 23       	and	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	6b c0       	rjmp	.+214    	; 0xfae <DIO_voidSetPinDir+0x1b6>
		}
		else
		{
			SET_BIT(DDRB,Pin);
     ed8:	a7 e3       	ldi	r26, 0x37	; 55
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e7 e3       	ldi	r30, 0x37	; 55
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_voidSetPinDir+0xfe>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_voidSetPinDir+0xfa>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	57 c0       	rjmp	.+174    	; 0xfae <DIO_voidSetPinDir+0x1b6>
		}

		break;
	case 2:
		if(Dir == 0)
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	88 23       	and	r24, r24
     f04:	a9 f4       	brne	.+42     	; 0xf30 <DIO_voidSetPinDir+0x138>
		{
			CLEAR_BIT(DDRC,Pin);
     f06:	a4 e3       	ldi	r26, 0x34	; 52
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e4 e3       	ldi	r30, 0x34	; 52
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_voidSetPinDir+0x12c>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_voidSetPinDir+0x128>
     f28:	80 95       	com	r24
     f2a:	84 23       	and	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	3f c0       	rjmp	.+126    	; 0xfae <DIO_voidSetPinDir+0x1b6>
		}
		else
		{
			SET_BIT(DDRC,Pin);
     f30:	a4 e3       	ldi	r26, 0x34	; 52
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e4 e3       	ldi	r30, 0x34	; 52
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_voidSetPinDir+0x156>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_voidSetPinDir+0x152>
     f52:	84 2b       	or	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	2b c0       	rjmp	.+86     	; 0xfae <DIO_voidSetPinDir+0x1b6>
		}

		break;
	case 3:
		if(Dir == 0)
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	88 23       	and	r24, r24
     f5c:	a9 f4       	brne	.+42     	; 0xf88 <DIO_voidSetPinDir+0x190>
		{
			CLEAR_BIT(DDRD,Pin);
     f5e:	a1 e3       	ldi	r26, 0x31	; 49
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e1 e3       	ldi	r30, 0x31	; 49
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_voidSetPinDir+0x184>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_voidSetPinDir+0x180>
     f80:	80 95       	com	r24
     f82:	84 23       	and	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	13 c0       	rjmp	.+38     	; 0xfae <DIO_voidSetPinDir+0x1b6>
		}
		else
		{
			SET_BIT(DDRD,Pin);
     f88:	a1 e3       	ldi	r26, 0x31	; 49
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e1 e3       	ldi	r30, 0x31	; 49
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_voidSetPinDir+0x1ae>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <DIO_voidSetPinDir+0x1aa>
     faa:	84 2b       	or	r24, r20
     fac:	8c 93       	st	X, r24
		}
		break;
	}

}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Port,u8 Pin,u8 Value)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <DIO_voidSetPinValue+0x6>
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <DIO_voidSetPinValue+0x8>
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	6a 83       	std	Y+2, r22	; 0x02
     fd0:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	3d 83       	std	Y+5, r19	; 0x05
     fda:	2c 83       	std	Y+4, r18	; 0x04
     fdc:	8c 81       	ldd	r24, Y+4	; 0x04
     fde:	9d 81       	ldd	r25, Y+5	; 0x05
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	91 05       	cpc	r25, r1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <DIO_voidSetPinValue+0x2a>
     fe6:	43 c0       	rjmp	.+134    	; 0x106e <DIO_voidSetPinValue+0xb0>
     fe8:	2c 81       	ldd	r18, Y+4	; 0x04
     fea:	3d 81       	ldd	r19, Y+5	; 0x05
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	2c f4       	brge	.+10     	; 0xffc <DIO_voidSetPinValue+0x3e>
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	71 f0       	breq	.+28     	; 0x1016 <DIO_voidSetPinValue+0x58>
     ffa:	bc c0       	rjmp	.+376    	; 0x1174 <DIO_voidSetPinValue+0x1b6>
     ffc:	2c 81       	ldd	r18, Y+4	; 0x04
     ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    1000:	22 30       	cpi	r18, 0x02	; 2
    1002:	31 05       	cpc	r19, r1
    1004:	09 f4       	brne	.+2      	; 0x1008 <DIO_voidSetPinValue+0x4a>
    1006:	5f c0       	rjmp	.+190    	; 0x10c6 <DIO_voidSetPinValue+0x108>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	83 30       	cpi	r24, 0x03	; 3
    100e:	91 05       	cpc	r25, r1
    1010:	09 f4       	brne	.+2      	; 0x1014 <DIO_voidSetPinValue+0x56>
    1012:	85 c0       	rjmp	.+266    	; 0x111e <DIO_voidSetPinValue+0x160>
    1014:	af c0       	rjmp	.+350    	; 0x1174 <DIO_voidSetPinValue+0x1b6>
	{
	case 0:
		if(Value == 0)
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	88 23       	and	r24, r24
    101a:	a9 f4       	brne	.+42     	; 0x1046 <DIO_voidSetPinValue+0x88>
		{
			CLEAR_BIT(PORTA,Pin);
    101c:	ab e3       	ldi	r26, 0x3B	; 59
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	eb e3       	ldi	r30, 0x3B	; 59
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_voidSetPinValue+0x7c>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_voidSetPinValue+0x78>
    103e:	80 95       	com	r24
    1040:	84 23       	and	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	97 c0       	rjmp	.+302    	; 0x1174 <DIO_voidSetPinValue+0x1b6>
		}
		else
		{
			SET_BIT(PORTA,Pin);
    1046:	ab e3       	ldi	r26, 0x3B	; 59
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	eb e3       	ldi	r30, 0x3B	; 59
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_voidSetPinValue+0xa6>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_voidSetPinValue+0xa2>
    1068:	84 2b       	or	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	83 c0       	rjmp	.+262    	; 0x1174 <DIO_voidSetPinValue+0x1b6>
		}

		break;
	case 1:
		if(Value == 0)
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	88 23       	and	r24, r24
    1072:	a9 f4       	brne	.+42     	; 0x109e <DIO_voidSetPinValue+0xe0>
		{
			CLEAR_BIT(PORTB,Pin);
    1074:	a8 e3       	ldi	r26, 0x38	; 56
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e8 e3       	ldi	r30, 0x38	; 56
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_voidSetPinValue+0xd4>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_voidSetPinValue+0xd0>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	6b c0       	rjmp	.+214    	; 0x1174 <DIO_voidSetPinValue+0x1b6>
		}
		else
		{
			SET_BIT(PORTB,Pin);
    109e:	a8 e3       	ldi	r26, 0x38	; 56
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e8 e3       	ldi	r30, 0x38	; 56
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_voidSetPinValue+0xfe>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_voidSetPinValue+0xfa>
    10c0:	84 2b       	or	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	57 c0       	rjmp	.+174    	; 0x1174 <DIO_voidSetPinValue+0x1b6>
		}

		break;
	case 2:
		if(Value == 0)
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	88 23       	and	r24, r24
    10ca:	a9 f4       	brne	.+42     	; 0x10f6 <DIO_voidSetPinValue+0x138>
		{
			CLEAR_BIT(PORTC,Pin);
    10cc:	a5 e3       	ldi	r26, 0x35	; 53
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e3       	ldi	r30, 0x35	; 53
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_voidSetPinValue+0x12c>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_voidSetPinValue+0x128>
    10ee:	80 95       	com	r24
    10f0:	84 23       	and	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	3f c0       	rjmp	.+126    	; 0x1174 <DIO_voidSetPinValue+0x1b6>
		}
		else
		{
			SET_BIT(PORTC,Pin);
    10f6:	a5 e3       	ldi	r26, 0x35	; 53
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e5 e3       	ldi	r30, 0x35	; 53
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_voidSetPinValue+0x156>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_voidSetPinValue+0x152>
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	2b c0       	rjmp	.+86     	; 0x1174 <DIO_voidSetPinValue+0x1b6>
		}

		break;
	case 3:
		if(Value == 0)
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	88 23       	and	r24, r24
    1122:	a9 f4       	brne	.+42     	; 0x114e <DIO_voidSetPinValue+0x190>
		{
			CLEAR_BIT(PORTD,Pin);
    1124:	a2 e3       	ldi	r26, 0x32	; 50
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e2 e3       	ldi	r30, 0x32	; 50
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_voidSetPinValue+0x184>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_voidSetPinValue+0x180>
    1146:	80 95       	com	r24
    1148:	84 23       	and	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	13 c0       	rjmp	.+38     	; 0x1174 <DIO_voidSetPinValue+0x1b6>
		}
		else
		{
			SET_BIT(PORTD,Pin);
    114e:	a2 e3       	ldi	r26, 0x32	; 50
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e2 e3       	ldi	r30, 0x32	; 50
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_voidSetPinValue+0x1ae>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_voidSetPinValue+0x1aa>
    1170:	84 2b       	or	r24, r20
    1172:	8c 93       	st	X, r24
		}

		break;
	}

}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue(u8 Port,u8 Pin)
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <DIO_voidTogglePinValue+0x6>
    118a:	00 d0       	rcall	.+0      	; 0x118c <DIO_voidTogglePinValue+0x8>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port){
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3c 83       	std	Y+4, r19	; 0x04
    119c:	2b 83       	std	Y+3, r18	; 0x03
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	91 05       	cpc	r25, r1
    11a6:	49 f1       	breq	.+82     	; 0x11fa <DIO_voidTogglePinValue+0x76>
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	2c f4       	brge	.+10     	; 0x11bc <DIO_voidTogglePinValue+0x38>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	61 f0       	breq	.+24     	; 0x11d2 <DIO_voidTogglePinValue+0x4e>
    11ba:	5a c0       	rjmp	.+180    	; 0x1270 <DIO_voidTogglePinValue+0xec>
    11bc:	2b 81       	ldd	r18, Y+3	; 0x03
    11be:	3c 81       	ldd	r19, Y+4	; 0x04
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	71 f1       	breq	.+92     	; 0x1222 <DIO_voidTogglePinValue+0x9e>
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	91 05       	cpc	r25, r1
    11ce:	e9 f1       	breq	.+122    	; 0x124a <DIO_voidTogglePinValue+0xc6>
    11d0:	4f c0       	rjmp	.+158    	; 0x1270 <DIO_voidTogglePinValue+0xec>
	case 0:
		TOGGLE_BIT(PORTA,Pin);
    11d2:	ab e3       	ldi	r26, 0x3B	; 59
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	eb e3       	ldi	r30, 0x3B	; 59
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_voidTogglePinValue+0x6c>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_voidTogglePinValue+0x68>
    11f4:	84 27       	eor	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	3b c0       	rjmp	.+118    	; 0x1270 <DIO_voidTogglePinValue+0xec>

		break;
	case 1:
		TOGGLE_BIT(PORTB,Pin);
    11fa:	a8 e3       	ldi	r26, 0x38	; 56
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e8 e3       	ldi	r30, 0x38	; 56
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_voidTogglePinValue+0x94>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_voidTogglePinValue+0x90>
    121c:	84 27       	eor	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	27 c0       	rjmp	.+78     	; 0x1270 <DIO_voidTogglePinValue+0xec>

		break;
	case 2:
		TOGGLE_BIT(PORTC,Pin);
    1222:	a5 e3       	ldi	r26, 0x35	; 53
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_voidTogglePinValue+0xbc>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_voidTogglePinValue+0xb8>
    1244:	84 27       	eor	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	13 c0       	rjmp	.+38     	; 0x1270 <DIO_voidTogglePinValue+0xec>

		break;
	case 3:
		TOGGLE_BIT(PORTD,Pin);
    124a:	a2 e3       	ldi	r26, 0x32	; 50
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e2 e3       	ldi	r30, 0x32	; 50
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_voidTogglePinValue+0xe4>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_voidTogglePinValue+0xe0>
    126c:	84 27       	eor	r24, r20
    126e:	8c 93       	st	X, r24

		break;
	}

}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <DIO_u8GetPinValue>:
u8   DIO_u8GetPinValue(u8 Port,u8 Pin)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	00 d0       	rcall	.+0      	; 0x1284 <DIO_u8GetPinValue+0x6>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <DIO_u8GetPinValue+0x8>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_u8GetPinValue+0xa>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3d 83       	std	Y+5, r19	; 0x05
    1298:	2c 83       	std	Y+4, r18	; 0x04
    129a:	4c 81       	ldd	r20, Y+4	; 0x04
    129c:	5d 81       	ldd	r21, Y+5	; 0x05
    129e:	41 30       	cpi	r20, 0x01	; 1
    12a0:	51 05       	cpc	r21, r1
    12a2:	49 f1       	breq	.+82     	; 0x12f6 <DIO_u8GetPinValue+0x78>
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	91 05       	cpc	r25, r1
    12ac:	34 f4       	brge	.+12     	; 0x12ba <DIO_u8GetPinValue+0x3c>
    12ae:	2c 81       	ldd	r18, Y+4	; 0x04
    12b0:	3d 81       	ldd	r19, Y+5	; 0x05
    12b2:	21 15       	cp	r18, r1
    12b4:	31 05       	cpc	r19, r1
    12b6:	61 f0       	breq	.+24     	; 0x12d0 <DIO_u8GetPinValue+0x52>
    12b8:	57 c0       	rjmp	.+174    	; 0x1368 <DIO_u8GetPinValue+0xea>
    12ba:	4c 81       	ldd	r20, Y+4	; 0x04
    12bc:	5d 81       	ldd	r21, Y+5	; 0x05
    12be:	42 30       	cpi	r20, 0x02	; 2
    12c0:	51 05       	cpc	r21, r1
    12c2:	61 f1       	breq	.+88     	; 0x131c <DIO_u8GetPinValue+0x9e>
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	83 30       	cpi	r24, 0x03	; 3
    12ca:	91 05       	cpc	r25, r1
    12cc:	d1 f1       	breq	.+116    	; 0x1342 <DIO_u8GetPinValue+0xc4>
    12ce:	4c c0       	rjmp	.+152    	; 0x1368 <DIO_u8GetPinValue+0xea>
	{
	case 0:
		return GET_BIT(PINA,Pin);
    12d0:	e9 e3       	ldi	r30, 0x39	; 57
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_u8GetPinValue+0x6a>
    12e4:	55 95       	asr	r21
    12e6:	47 95       	ror	r20
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_u8GetPinValue+0x66>
    12ec:	ca 01       	movw	r24, r20
    12ee:	58 2f       	mov	r21, r24
    12f0:	51 70       	andi	r21, 0x01	; 1
    12f2:	5b 83       	std	Y+3, r21	; 0x03
    12f4:	3a c0       	rjmp	.+116    	; 0x136a <DIO_u8GetPinValue+0xec>
	case 1:
		return GET_BIT(PINB,Pin);
    12f6:	e6 e3       	ldi	r30, 0x36	; 54
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a9 01       	movw	r20, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_u8GetPinValue+0x90>
    130a:	55 95       	asr	r21
    130c:	47 95       	ror	r20
    130e:	8a 95       	dec	r24
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_u8GetPinValue+0x8c>
    1312:	ca 01       	movw	r24, r20
    1314:	58 2f       	mov	r21, r24
    1316:	51 70       	andi	r21, 0x01	; 1
    1318:	5b 83       	std	Y+3, r21	; 0x03
    131a:	27 c0       	rjmp	.+78     	; 0x136a <DIO_u8GetPinValue+0xec>
	case 2:
		return GET_BIT(PINC,Pin);
    131c:	e3 e3       	ldi	r30, 0x33	; 51
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a9 01       	movw	r20, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_u8GetPinValue+0xb6>
    1330:	55 95       	asr	r21
    1332:	47 95       	ror	r20
    1334:	8a 95       	dec	r24
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_u8GetPinValue+0xb2>
    1338:	ca 01       	movw	r24, r20
    133a:	58 2f       	mov	r21, r24
    133c:	51 70       	andi	r21, 0x01	; 1
    133e:	5b 83       	std	Y+3, r21	; 0x03
    1340:	14 c0       	rjmp	.+40     	; 0x136a <DIO_u8GetPinValue+0xec>
	case 3:
		return GET_BIT(PIND,Pin);
    1342:	e0 e3       	ldi	r30, 0x30	; 48
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a9 01       	movw	r20, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_u8GetPinValue+0xdc>
    1356:	55 95       	asr	r21
    1358:	47 95       	ror	r20
    135a:	8a 95       	dec	r24
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_u8GetPinValue+0xd8>
    135e:	ca 01       	movw	r24, r20
    1360:	58 2f       	mov	r21, r24
    1362:	51 70       	andi	r21, 0x01	; 1
    1364:	5b 83       	std	Y+3, r21	; 0x03
    1366:	01 c0       	rjmp	.+2      	; 0x136a <DIO_u8GetPinValue+0xec>
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_u8GetPinValue+0xf0>
	}

}
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	8e 83       	std	Y+6, r24	; 0x06
    136e:	8e 81       	ldd	r24, Y+6	; 0x06
    1370:	26 96       	adiw	r28, 0x06	; 6
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <LCD_voidInit>:

#include"LCD_config.h"


void LCD_voidInit(void)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	aa 97       	sbiw	r28, 0x2a	; 42
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDir(D0_PORT ,D0_PIN ,OUTPUT);
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D1_PORT ,D1_PIN ,OUTPUT);
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	41 e0       	ldi	r20, 0x01	; 1
    13a6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D2_PORT ,D2_PIN ,OUTPUT);
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	62 e0       	ldi	r22, 0x02	; 2
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D3_PORT ,D3_PIN ,OUTPUT);
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	63 e0       	ldi	r22, 0x03	; 3
    13b8:	41 e0       	ldi	r20, 0x01	; 1
    13ba:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D4_PORT ,D4_PIN ,OUTPUT);
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	64 e0       	ldi	r22, 0x04	; 4
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D5_PORT ,D5_PIN ,OUTPUT);
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	65 e0       	ldi	r22, 0x05	; 5
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D6_PORT ,D6_PIN ,OUTPUT);
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	66 e0       	ldi	r22, 0x06	; 6
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    13d8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(D7_PORT ,D7_PIN ,OUTPUT);
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	67 e0       	ldi	r22, 0x07	; 7
    13e0:	41 e0       	ldi	r20, 0x01	; 1
    13e2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>

	DIO_voidSetPinDir(RS_PORT,RS_PIN,OUTPUT);
    13e6:	83 e0       	ldi	r24, 0x03	; 3
    13e8:	63 e0       	ldi	r22, 0x03	; 3
    13ea:	41 e0       	ldi	r20, 0x01	; 1
    13ec:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(RW_PORT,RW_PIN,OUTPUT);
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	64 e0       	ldi	r22, 0x04	; 4
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(EN_PORT,EN_PIN,OUTPUT);
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    13fc:	65 e0       	ldi	r22, 0x05	; 5
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>

	LCD_voidSendCommand(FunctionSet8bit2Line5x7Dots);
    1404:	88 e3       	ldi	r24, 0x38	; 56
    1406:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a0 ea       	ldi	r26, 0xA0	; 160
    1410:	b0 e4       	ldi	r27, 0x40	; 64
    1412:	8f a3       	std	Y+39, r24	; 0x27
    1414:	98 a7       	std	Y+40, r25	; 0x28
    1416:	a9 a7       	std	Y+41, r26	; 0x29
    1418:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141a:	6f a1       	ldd	r22, Y+39	; 0x27
    141c:	78 a5       	ldd	r23, Y+40	; 0x28
    141e:	89 a5       	ldd	r24, Y+41	; 0x29
    1420:	9a a5       	ldd	r25, Y+42	; 0x2a
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e8       	ldi	r19, 0x80	; 128
    1426:	4b e3       	ldi	r20, 0x3B	; 59
    1428:	55 e4       	ldi	r21, 0x45	; 69
    142a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	8b a3       	std	Y+35, r24	; 0x23
    1434:	9c a3       	std	Y+36, r25	; 0x24
    1436:	ad a3       	std	Y+37, r26	; 0x25
    1438:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    143a:	6b a1       	ldd	r22, Y+35	; 0x23
    143c:	7c a1       	ldd	r23, Y+36	; 0x24
    143e:	8d a1       	ldd	r24, Y+37	; 0x25
    1440:	9e a1       	ldd	r25, Y+38	; 0x26
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e8       	ldi	r20, 0x80	; 128
    1448:	5f e3       	ldi	r21, 0x3F	; 63
    144a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    144e:	88 23       	and	r24, r24
    1450:	2c f4       	brge	.+10     	; 0x145c <LCD_voidInit+0xda>
		__ticks = 1;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9a a3       	std	Y+34, r25	; 0x22
    1458:	89 a3       	std	Y+33, r24	; 0x21
    145a:	3f c0       	rjmp	.+126    	; 0x14da <LCD_voidInit+0x158>
	else if (__tmp > 65535)
    145c:	6b a1       	ldd	r22, Y+35	; 0x23
    145e:	7c a1       	ldd	r23, Y+36	; 0x24
    1460:	8d a1       	ldd	r24, Y+37	; 0x25
    1462:	9e a1       	ldd	r25, Y+38	; 0x26
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	3f ef       	ldi	r19, 0xFF	; 255
    1468:	4f e7       	ldi	r20, 0x7F	; 127
    146a:	57 e4       	ldi	r21, 0x47	; 71
    146c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1470:	18 16       	cp	r1, r24
    1472:	4c f5       	brge	.+82     	; 0x14c6 <LCD_voidInit+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1474:	6f a1       	ldd	r22, Y+39	; 0x27
    1476:	78 a5       	ldd	r23, Y+40	; 0x28
    1478:	89 a5       	ldd	r24, Y+41	; 0x29
    147a:	9a a5       	ldd	r25, Y+42	; 0x2a
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e2       	ldi	r20, 0x20	; 32
    1482:	51 e4       	ldi	r21, 0x41	; 65
    1484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	9a a3       	std	Y+34, r25	; 0x22
    149a:	89 a3       	std	Y+33, r24	; 0x21
    149c:	0f c0       	rjmp	.+30     	; 0x14bc <LCD_voidInit+0x13a>
    149e:	8c e2       	ldi	r24, 0x2C	; 44
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	98 a3       	std	Y+32, r25	; 0x20
    14a4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14a8:	98 a1       	ldd	r25, Y+32	; 0x20
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <LCD_voidInit+0x128>
    14ae:	98 a3       	std	Y+32, r25	; 0x20
    14b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b2:	89 a1       	ldd	r24, Y+33	; 0x21
    14b4:	9a a1       	ldd	r25, Y+34	; 0x22
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	9a a3       	std	Y+34, r25	; 0x22
    14ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14bc:	89 a1       	ldd	r24, Y+33	; 0x21
    14be:	9a a1       	ldd	r25, Y+34	; 0x22
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	69 f7       	brne	.-38     	; 0x149e <LCD_voidInit+0x11c>
    14c4:	14 c0       	rjmp	.+40     	; 0x14ee <LCD_voidInit+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c6:	6b a1       	ldd	r22, Y+35	; 0x23
    14c8:	7c a1       	ldd	r23, Y+36	; 0x24
    14ca:	8d a1       	ldd	r24, Y+37	; 0x25
    14cc:	9e a1       	ldd	r25, Y+38	; 0x26
    14ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9a a3       	std	Y+34, r25	; 0x22
    14d8:	89 a3       	std	Y+33, r24	; 0x21
    14da:	89 a1       	ldd	r24, Y+33	; 0x21
    14dc:	9a a1       	ldd	r25, Y+34	; 0x22
    14de:	9e 8f       	std	Y+30, r25	; 0x1e
    14e0:	8d 8f       	std	Y+29, r24	; 0x1d
    14e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <LCD_voidInit+0x164>
    14ea:	9e 8f       	std	Y+30, r25	; 0x1e
    14ec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(DisplayOnCursorOff);
    14ee:	8c e0       	ldi	r24, 0x0C	; 12
    14f0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a0 ea       	ldi	r26, 0xA0	; 160
    14fa:	b0 e4       	ldi	r27, 0x40	; 64
    14fc:	89 8f       	std	Y+25, r24	; 0x19
    14fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1500:	ab 8f       	std	Y+27, r26	; 0x1b
    1502:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1504:	69 8d       	ldd	r22, Y+25	; 0x19
    1506:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1508:	8b 8d       	ldd	r24, Y+27	; 0x1b
    150a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e8       	ldi	r19, 0x80	; 128
    1510:	4b e3       	ldi	r20, 0x3B	; 59
    1512:	55 e4       	ldi	r21, 0x45	; 69
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	8d 8b       	std	Y+21, r24	; 0x15
    151e:	9e 8b       	std	Y+22, r25	; 0x16
    1520:	af 8b       	std	Y+23, r26	; 0x17
    1522:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1524:	6d 89       	ldd	r22, Y+21	; 0x15
    1526:	7e 89       	ldd	r23, Y+22	; 0x16
    1528:	8f 89       	ldd	r24, Y+23	; 0x17
    152a:	98 8d       	ldd	r25, Y+24	; 0x18
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	5f e3       	ldi	r21, 0x3F	; 63
    1534:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1538:	88 23       	and	r24, r24
    153a:	2c f4       	brge	.+10     	; 0x1546 <LCD_voidInit+0x1c4>
		__ticks = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9c 8b       	std	Y+20, r25	; 0x14
    1542:	8b 8b       	std	Y+19, r24	; 0x13
    1544:	3f c0       	rjmp	.+126    	; 0x15c4 <LCD_voidInit+0x242>
	else if (__tmp > 65535)
    1546:	6d 89       	ldd	r22, Y+21	; 0x15
    1548:	7e 89       	ldd	r23, Y+22	; 0x16
    154a:	8f 89       	ldd	r24, Y+23	; 0x17
    154c:	98 8d       	ldd	r25, Y+24	; 0x18
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	3f ef       	ldi	r19, 0xFF	; 255
    1552:	4f e7       	ldi	r20, 0x7F	; 127
    1554:	57 e4       	ldi	r21, 0x47	; 71
    1556:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    155a:	18 16       	cp	r1, r24
    155c:	4c f5       	brge	.+82     	; 0x15b0 <LCD_voidInit+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155e:	69 8d       	ldd	r22, Y+25	; 0x19
    1560:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1562:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1564:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e2       	ldi	r20, 0x20	; 32
    156c:	51 e4       	ldi	r21, 0x41	; 65
    156e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	bc 01       	movw	r22, r24
    1578:	cd 01       	movw	r24, r26
    157a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9c 8b       	std	Y+20, r25	; 0x14
    1584:	8b 8b       	std	Y+19, r24	; 0x13
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <LCD_voidInit+0x224>
    1588:	8c e2       	ldi	r24, 0x2C	; 44
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	9a 8b       	std	Y+18, r25	; 0x12
    158e:	89 8b       	std	Y+17, r24	; 0x11
    1590:	89 89       	ldd	r24, Y+17	; 0x11
    1592:	9a 89       	ldd	r25, Y+18	; 0x12
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <LCD_voidInit+0x212>
    1598:	9a 8b       	std	Y+18, r25	; 0x12
    159a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159c:	8b 89       	ldd	r24, Y+19	; 0x13
    159e:	9c 89       	ldd	r25, Y+20	; 0x14
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	9c 8b       	std	Y+20, r25	; 0x14
    15a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a6:	8b 89       	ldd	r24, Y+19	; 0x13
    15a8:	9c 89       	ldd	r25, Y+20	; 0x14
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	69 f7       	brne	.-38     	; 0x1588 <LCD_voidInit+0x206>
    15ae:	14 c0       	rjmp	.+40     	; 0x15d8 <LCD_voidInit+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b0:	6d 89       	ldd	r22, Y+21	; 0x15
    15b2:	7e 89       	ldd	r23, Y+22	; 0x16
    15b4:	8f 89       	ldd	r24, Y+23	; 0x17
    15b6:	98 8d       	ldd	r25, Y+24	; 0x18
    15b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	9c 8b       	std	Y+20, r25	; 0x14
    15c2:	8b 8b       	std	Y+19, r24	; 0x13
    15c4:	8b 89       	ldd	r24, Y+19	; 0x13
    15c6:	9c 89       	ldd	r25, Y+20	; 0x14
    15c8:	98 8b       	std	Y+16, r25	; 0x10
    15ca:	8f 87       	std	Y+15, r24	; 0x0f
    15cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ce:	98 89       	ldd	r25, Y+16	; 0x10
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <LCD_voidInit+0x24e>
    15d4:	98 8b       	std	Y+16, r25	; 0x10
    15d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_voidSendCommand(ClearWithDDRAM);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	a0 ea       	ldi	r26, 0xA0	; 160
    15e4:	b0 e4       	ldi	r27, 0x40	; 64
    15e6:	8b 87       	std	Y+11, r24	; 0x0b
    15e8:	9c 87       	std	Y+12, r25	; 0x0c
    15ea:	ad 87       	std	Y+13, r26	; 0x0d
    15ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e8       	ldi	r19, 0x80	; 128
    15fa:	4b e3       	ldi	r20, 0x3B	; 59
    15fc:	55 e4       	ldi	r21, 0x45	; 69
    15fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	8f 83       	std	Y+7, r24	; 0x07
    1608:	98 87       	std	Y+8, r25	; 0x08
    160a:	a9 87       	std	Y+9, r26	; 0x09
    160c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    160e:	6f 81       	ldd	r22, Y+7	; 0x07
    1610:	78 85       	ldd	r23, Y+8	; 0x08
    1612:	89 85       	ldd	r24, Y+9	; 0x09
    1614:	9a 85       	ldd	r25, Y+10	; 0x0a
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e8       	ldi	r20, 0x80	; 128
    161c:	5f e3       	ldi	r21, 0x3F	; 63
    161e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1622:	88 23       	and	r24, r24
    1624:	2c f4       	brge	.+10     	; 0x1630 <LCD_voidInit+0x2ae>
		__ticks = 1;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	8d 83       	std	Y+5, r24	; 0x05
    162e:	3f c0       	rjmp	.+126    	; 0x16ae <LCD_voidInit+0x32c>
	else if (__tmp > 65535)
    1630:	6f 81       	ldd	r22, Y+7	; 0x07
    1632:	78 85       	ldd	r23, Y+8	; 0x08
    1634:	89 85       	ldd	r24, Y+9	; 0x09
    1636:	9a 85       	ldd	r25, Y+10	; 0x0a
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	3f ef       	ldi	r19, 0xFF	; 255
    163c:	4f e7       	ldi	r20, 0x7F	; 127
    163e:	57 e4       	ldi	r21, 0x47	; 71
    1640:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1644:	18 16       	cp	r1, r24
    1646:	4c f5       	brge	.+82     	; 0x169a <LCD_voidInit+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1648:	6b 85       	ldd	r22, Y+11	; 0x0b
    164a:	7c 85       	ldd	r23, Y+12	; 0x0c
    164c:	8d 85       	ldd	r24, Y+13	; 0x0d
    164e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e2       	ldi	r20, 0x20	; 32
    1656:	51 e4       	ldi	r21, 0x41	; 65
    1658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	9e 83       	std	Y+6, r25	; 0x06
    166e:	8d 83       	std	Y+5, r24	; 0x05
    1670:	0f c0       	rjmp	.+30     	; 0x1690 <LCD_voidInit+0x30e>
    1672:	8c e2       	ldi	r24, 0x2C	; 44
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	9c 83       	std	Y+4, r25	; 0x04
    1678:	8b 83       	std	Y+3, r24	; 0x03
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	9c 81       	ldd	r25, Y+4	; 0x04
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	f1 f7       	brne	.-4      	; 0x167e <LCD_voidInit+0x2fc>
    1682:	9c 83       	std	Y+4, r25	; 0x04
    1684:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	9e 83       	std	Y+6, r25	; 0x06
    168e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	69 f7       	brne	.-38     	; 0x1672 <LCD_voidInit+0x2f0>
    1698:	14 c0       	rjmp	.+40     	; 0x16c2 <LCD_voidInit+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169a:	6f 81       	ldd	r22, Y+7	; 0x07
    169c:	78 85       	ldd	r23, Y+8	; 0x08
    169e:	89 85       	ldd	r24, Y+9	; 0x09
    16a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	9e 83       	std	Y+6, r25	; 0x06
    16ac:	8d 83       	std	Y+5, r24	; 0x05
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <LCD_voidInit+0x338>
    16be:	9a 83       	std	Y+2, r25	; 0x02
    16c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);



}
    16c2:	aa 96       	adiw	r28, 0x2a	; 42
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <LCD_voidWriteCharacter>:

void LCD_voidWriteCharacter(u8 Charater)
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	2f 97       	sbiw	r28, 0x0f	; 15
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(RS_PORT,RS_PIN,HIGH);
    16ea:	83 e0       	ldi	r24, 0x03	; 3
    16ec:	63 e0       	ldi	r22, 0x03	; 3
    16ee:	41 e0       	ldi	r20, 0x01	; 1
    16f0:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(RW_PORT,RW_PIN,LOW);
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	64 e0       	ldi	r22, 0x04	; 4
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>

	DIO_voidSetPinValue(D0_PORT ,D0_PIN ,GET_BIT(Charater,PIN_0));
    16fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1700:	98 2f       	mov	r25, r24
    1702:	91 70       	andi	r25, 0x01	; 1
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	49 2f       	mov	r20, r25
    170a:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D1_PORT ,D1_PIN ,GET_BIT(Charater,PIN_1));
    170e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1710:	86 95       	lsr	r24
    1712:	98 2f       	mov	r25, r24
    1714:	91 70       	andi	r25, 0x01	; 1
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	61 e0       	ldi	r22, 0x01	; 1
    171a:	49 2f       	mov	r20, r25
    171c:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D2_PORT ,D2_PIN ,GET_BIT(Charater,PIN_2));
    1720:	8f 85       	ldd	r24, Y+15	; 0x0f
    1722:	86 95       	lsr	r24
    1724:	86 95       	lsr	r24
    1726:	98 2f       	mov	r25, r24
    1728:	91 70       	andi	r25, 0x01	; 1
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	62 e0       	ldi	r22, 0x02	; 2
    172e:	49 2f       	mov	r20, r25
    1730:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D3_PORT ,D3_PIN ,GET_BIT(Charater,PIN_3));
    1734:	8f 85       	ldd	r24, Y+15	; 0x0f
    1736:	86 95       	lsr	r24
    1738:	86 95       	lsr	r24
    173a:	86 95       	lsr	r24
    173c:	98 2f       	mov	r25, r24
    173e:	91 70       	andi	r25, 0x01	; 1
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	63 e0       	ldi	r22, 0x03	; 3
    1744:	49 2f       	mov	r20, r25
    1746:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT ,D4_PIN ,GET_BIT(Charater,PIN_4));
    174a:	8f 85       	ldd	r24, Y+15	; 0x0f
    174c:	82 95       	swap	r24
    174e:	8f 70       	andi	r24, 0x0F	; 15
    1750:	98 2f       	mov	r25, r24
    1752:	91 70       	andi	r25, 0x01	; 1
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	64 e0       	ldi	r22, 0x04	; 4
    1758:	49 2f       	mov	r20, r25
    175a:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT ,D5_PIN ,GET_BIT(Charater,PIN_5));
    175e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1760:	82 95       	swap	r24
    1762:	86 95       	lsr	r24
    1764:	87 70       	andi	r24, 0x07	; 7
    1766:	98 2f       	mov	r25, r24
    1768:	91 70       	andi	r25, 0x01	; 1
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	65 e0       	ldi	r22, 0x05	; 5
    176e:	49 2f       	mov	r20, r25
    1770:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT ,D6_PIN ,GET_BIT(Charater,PIN_6));
    1774:	8f 85       	ldd	r24, Y+15	; 0x0f
    1776:	82 95       	swap	r24
    1778:	86 95       	lsr	r24
    177a:	86 95       	lsr	r24
    177c:	83 70       	andi	r24, 0x03	; 3
    177e:	98 2f       	mov	r25, r24
    1780:	91 70       	andi	r25, 0x01	; 1
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	66 e0       	ldi	r22, 0x06	; 6
    1786:	49 2f       	mov	r20, r25
    1788:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D7_PORT ,D7_PIN ,GET_BIT(Charater,PIN_7));
    178c:	8f 85       	ldd	r24, Y+15	; 0x0f
    178e:	98 2f       	mov	r25, r24
    1790:	99 1f       	adc	r25, r25
    1792:	99 27       	eor	r25, r25
    1794:	99 1f       	adc	r25, r25
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	67 e0       	ldi	r22, 0x07	; 7
    179a:	49 2f       	mov	r20, r25
    179c:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>

	DIO_voidSetPinValue(EN_PORT ,EN_PIN,HIGH);
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	65 e0       	ldi	r22, 0x05	; 5
    17a4:	41 e0       	ldi	r20, 0x01	; 1
    17a6:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a0 e0       	ldi	r26, 0x00	; 0
    17b0:	b0 e4       	ldi	r27, 0x40	; 64
    17b2:	8b 87       	std	Y+11, r24	; 0x0b
    17b4:	9c 87       	std	Y+12, r25	; 0x0c
    17b6:	ad 87       	std	Y+13, r26	; 0x0d
    17b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    17bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17be:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e8       	ldi	r19, 0x80	; 128
    17c6:	4b e3       	ldi	r20, 0x3B	; 59
    17c8:	55 e4       	ldi	r21, 0x45	; 69
    17ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	8f 83       	std	Y+7, r24	; 0x07
    17d4:	98 87       	std	Y+8, r25	; 0x08
    17d6:	a9 87       	std	Y+9, r26	; 0x09
    17d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17da:	6f 81       	ldd	r22, Y+7	; 0x07
    17dc:	78 85       	ldd	r23, Y+8	; 0x08
    17de:	89 85       	ldd	r24, Y+9	; 0x09
    17e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e8       	ldi	r20, 0x80	; 128
    17e8:	5f e3       	ldi	r21, 0x3F	; 63
    17ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ee:	88 23       	and	r24, r24
    17f0:	2c f4       	brge	.+10     	; 0x17fc <LCD_voidWriteCharacter+0x128>
		__ticks = 1;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	3f c0       	rjmp	.+126    	; 0x187a <LCD_voidWriteCharacter+0x1a6>
	else if (__tmp > 65535)
    17fc:	6f 81       	ldd	r22, Y+7	; 0x07
    17fe:	78 85       	ldd	r23, Y+8	; 0x08
    1800:	89 85       	ldd	r24, Y+9	; 0x09
    1802:	9a 85       	ldd	r25, Y+10	; 0x0a
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	3f ef       	ldi	r19, 0xFF	; 255
    1808:	4f e7       	ldi	r20, 0x7F	; 127
    180a:	57 e4       	ldi	r21, 0x47	; 71
    180c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1810:	18 16       	cp	r1, r24
    1812:	4c f5       	brge	.+82     	; 0x1866 <LCD_voidWriteCharacter+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1814:	6b 85       	ldd	r22, Y+11	; 0x0b
    1816:	7c 85       	ldd	r23, Y+12	; 0x0c
    1818:	8d 85       	ldd	r24, Y+13	; 0x0d
    181a:	9e 85       	ldd	r25, Y+14	; 0x0e
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e2       	ldi	r20, 0x20	; 32
    1822:	51 e4       	ldi	r21, 0x41	; 65
    1824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	bc 01       	movw	r22, r24
    182e:	cd 01       	movw	r24, r26
    1830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05
    183c:	0f c0       	rjmp	.+30     	; 0x185c <LCD_voidWriteCharacter+0x188>
    183e:	8c e2       	ldi	r24, 0x2C	; 44
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	9c 83       	std	Y+4, r25	; 0x04
    1844:	8b 83       	std	Y+3, r24	; 0x03
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <LCD_voidWriteCharacter+0x176>
    184e:	9c 83       	std	Y+4, r25	; 0x04
    1850:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	9e 81       	ldd	r25, Y+6	; 0x06
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	9e 83       	std	Y+6, r25	; 0x06
    185a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	69 f7       	brne	.-38     	; 0x183e <LCD_voidWriteCharacter+0x16a>
    1864:	14 c0       	rjmp	.+40     	; 0x188e <LCD_voidWriteCharacter+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1866:	6f 81       	ldd	r22, Y+7	; 0x07
    1868:	78 85       	ldd	r23, Y+8	; 0x08
    186a:	89 85       	ldd	r24, Y+9	; 0x09
    186c:	9a 85       	ldd	r25, Y+10	; 0x0a
    186e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	f1 f7       	brne	.-4      	; 0x1886 <LCD_voidWriteCharacter+0x1b2>
    188a:	9a 83       	std	Y+2, r25	; 0x02
    188c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT ,EN_PIN,LOW);
    188e:	83 e0       	ldi	r24, 0x03	; 3
    1890:	65 e0       	ldi	r22, 0x05	; 5
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>




}
    1898:	2f 96       	adiw	r28, 0x0f	; 15
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Command)
{
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	2f 97       	sbiw	r28, 0x0f	; 15
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(RS_PORT,RS_PIN,LOW);
    18c0:	83 e0       	ldi	r24, 0x03	; 3
    18c2:	63 e0       	ldi	r22, 0x03	; 3
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(RW_PORT,RW_PIN,LOW);
    18ca:	83 e0       	ldi	r24, 0x03	; 3
    18cc:	64 e0       	ldi	r22, 0x04	; 4
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>

	DIO_voidSetPinValue(D0_PORT ,D0_PIN ,GET_BIT(Command,PIN_0));
    18d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d6:	98 2f       	mov	r25, r24
    18d8:	91 70       	andi	r25, 0x01	; 1
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	49 2f       	mov	r20, r25
    18e0:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D1_PORT ,D1_PIN ,GET_BIT(Command,PIN_1));
    18e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e6:	86 95       	lsr	r24
    18e8:	98 2f       	mov	r25, r24
    18ea:	91 70       	andi	r25, 0x01	; 1
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	49 2f       	mov	r20, r25
    18f2:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D2_PORT ,D2_PIN ,GET_BIT(Command,PIN_2));
    18f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f8:	86 95       	lsr	r24
    18fa:	86 95       	lsr	r24
    18fc:	98 2f       	mov	r25, r24
    18fe:	91 70       	andi	r25, 0x01	; 1
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	62 e0       	ldi	r22, 0x02	; 2
    1904:	49 2f       	mov	r20, r25
    1906:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D3_PORT ,D3_PIN ,GET_BIT(Command,PIN_3));
    190a:	8f 85       	ldd	r24, Y+15	; 0x0f
    190c:	86 95       	lsr	r24
    190e:	86 95       	lsr	r24
    1910:	86 95       	lsr	r24
    1912:	98 2f       	mov	r25, r24
    1914:	91 70       	andi	r25, 0x01	; 1
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	63 e0       	ldi	r22, 0x03	; 3
    191a:	49 2f       	mov	r20, r25
    191c:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT ,D4_PIN ,GET_BIT(Command,PIN_4));
    1920:	8f 85       	ldd	r24, Y+15	; 0x0f
    1922:	82 95       	swap	r24
    1924:	8f 70       	andi	r24, 0x0F	; 15
    1926:	98 2f       	mov	r25, r24
    1928:	91 70       	andi	r25, 0x01	; 1
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	64 e0       	ldi	r22, 0x04	; 4
    192e:	49 2f       	mov	r20, r25
    1930:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT ,D5_PIN ,GET_BIT(Command,PIN_5));
    1934:	8f 85       	ldd	r24, Y+15	; 0x0f
    1936:	82 95       	swap	r24
    1938:	86 95       	lsr	r24
    193a:	87 70       	andi	r24, 0x07	; 7
    193c:	98 2f       	mov	r25, r24
    193e:	91 70       	andi	r25, 0x01	; 1
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	65 e0       	ldi	r22, 0x05	; 5
    1944:	49 2f       	mov	r20, r25
    1946:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT ,D6_PIN ,GET_BIT(Command,PIN_6));
    194a:	8f 85       	ldd	r24, Y+15	; 0x0f
    194c:	82 95       	swap	r24
    194e:	86 95       	lsr	r24
    1950:	86 95       	lsr	r24
    1952:	83 70       	andi	r24, 0x03	; 3
    1954:	98 2f       	mov	r25, r24
    1956:	91 70       	andi	r25, 0x01	; 1
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	66 e0       	ldi	r22, 0x06	; 6
    195c:	49 2f       	mov	r20, r25
    195e:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D7_PORT ,D7_PIN ,GET_BIT(Command,PIN_7));
    1962:	8f 85       	ldd	r24, Y+15	; 0x0f
    1964:	98 2f       	mov	r25, r24
    1966:	99 1f       	adc	r25, r25
    1968:	99 27       	eor	r25, r25
    196a:	99 1f       	adc	r25, r25
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	67 e0       	ldi	r22, 0x07	; 7
    1970:	49 2f       	mov	r20, r25
    1972:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>

	DIO_voidSetPinValue(EN_PORT ,EN_PIN,HIGH);
    1976:	83 e0       	ldi	r24, 0x03	; 3
    1978:	65 e0       	ldi	r22, 0x05	; 5
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e0       	ldi	r26, 0x00	; 0
    1986:	b0 e4       	ldi	r27, 0x40	; 64
    1988:	8b 87       	std	Y+11, r24	; 0x0b
    198a:	9c 87       	std	Y+12, r25	; 0x0c
    198c:	ad 87       	std	Y+13, r26	; 0x0d
    198e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1990:	6b 85       	ldd	r22, Y+11	; 0x0b
    1992:	7c 85       	ldd	r23, Y+12	; 0x0c
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e8       	ldi	r19, 0x80	; 128
    199c:	4b e3       	ldi	r20, 0x3B	; 59
    199e:	55 e4       	ldi	r21, 0x45	; 69
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8f 83       	std	Y+7, r24	; 0x07
    19aa:	98 87       	std	Y+8, r25	; 0x08
    19ac:	a9 87       	std	Y+9, r26	; 0x09
    19ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <LCD_voidSendCommand+0x128>
		__ticks = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
    19d0:	3f c0       	rjmp	.+126    	; 0x1a50 <LCD_voidSendCommand+0x1a6>
	else if (__tmp > 65535)
    19d2:	6f 81       	ldd	r22, Y+7	; 0x07
    19d4:	78 85       	ldd	r23, Y+8	; 0x08
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	3f ef       	ldi	r19, 0xFF	; 255
    19de:	4f e7       	ldi	r20, 0x7F	; 127
    19e0:	57 e4       	ldi	r21, 0x47	; 71
    19e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e6:	18 16       	cp	r1, r24
    19e8:	4c f5       	brge	.+82     	; 0x1a3c <LCD_voidSendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	0f c0       	rjmp	.+30     	; 0x1a32 <LCD_voidSendCommand+0x188>
    1a14:	8c e2       	ldi	r24, 0x2C	; 44
    1a16:	91 e0       	ldi	r25, 0x01	; 1
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	8b 83       	std	Y+3, r24	; 0x03
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <LCD_voidSendCommand+0x176>
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	9e 83       	std	Y+6, r25	; 0x06
    1a30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	69 f7       	brne	.-38     	; 0x1a14 <LCD_voidSendCommand+0x16a>
    1a3a:	14 c0       	rjmp	.+40     	; 0x1a64 <LCD_voidSendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3e:	78 85       	ldd	r23, Y+8	; 0x08
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_voidSendCommand+0x1b2>
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT ,EN_PIN,LOW);
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	65 e0       	ldi	r22, 0x05	; 5
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>

}
    1a6e:	2f 96       	adiw	r28, 0x0f	; 15
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <LCD_voidWriteString>:

void LCD_voidWriteString(u8 *String)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <LCD_voidWriteString+0x6>
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	9a 83       	std	Y+2, r25	; 0x02
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	0a c0       	rjmp	.+20     	; 0x1aa4 <LCD_voidWriteString+0x24>
    while(*String != '\0')
    {
    	LCD_voidWriteCharacter( *String);
    1a90:	e9 81       	ldd	r30, Y+1	; 0x01
    1a92:	fa 81       	ldd	r31, Y+2	; 0x02
    1a94:	80 81       	ld	r24, Z
    1a96:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    	String ++;
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_voidWriteString(u8 *String)
{
    while(*String != '\0')
    1aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa8:	80 81       	ld	r24, Z
    1aaa:	88 23       	and	r24, r24
    1aac:	89 f7       	brne	.-30     	; 0x1a90 <LCD_voidWriteString+0x10>
    {
    	LCD_voidWriteCharacter( *String);
    	String ++;
    }
}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <LCD_voidSetCursor>:


}*/

void LCD_voidSetCursor (u8 R, u8 C)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <LCD_voidSetCursor+0x6>
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	6a 83       	std	Y+2, r22	; 0x02
	if (R == 0 && C == 0)
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	88 23       	and	r24, r24
    1aca:	39 f4       	brne	.+14     	; 0x1ada <LCD_voidSetCursor+0x22>
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	88 23       	and	r24, r24
    1ad0:	21 f4       	brne	.+8      	; 0x1ada <LCD_voidSetCursor+0x22>
	{
		LCD_voidSendCommand(Row0_Coulmn0);
    1ad2:	80 e8       	ldi	r24, 0x80	; 128
    1ad4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1ad8:	39 c1       	rjmp	.+626    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 1)
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	88 23       	and	r24, r24
    1ade:	39 f4       	brne	.+14     	; 0x1aee <LCD_voidSetCursor+0x36>
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	21 f4       	brne	.+8      	; 0x1aee <LCD_voidSetCursor+0x36>
	{
		LCD_voidSendCommand(Row0_Coulmn1);
    1ae6:	81 e8       	ldi	r24, 0x81	; 129
    1ae8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1aec:	2f c1       	rjmp	.+606    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 2)
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	88 23       	and	r24, r24
    1af2:	39 f4       	brne	.+14     	; 0x1b02 <LCD_voidSetCursor+0x4a>
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	82 30       	cpi	r24, 0x02	; 2
    1af8:	21 f4       	brne	.+8      	; 0x1b02 <LCD_voidSetCursor+0x4a>
	{
		LCD_voidSendCommand(Row0_Coulmn2);
    1afa:	82 e8       	ldi	r24, 0x82	; 130
    1afc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1b00:	25 c1       	rjmp	.+586    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 3)
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	88 23       	and	r24, r24
    1b06:	39 f4       	brne	.+14     	; 0x1b16 <LCD_voidSetCursor+0x5e>
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	83 30       	cpi	r24, 0x03	; 3
    1b0c:	21 f4       	brne	.+8      	; 0x1b16 <LCD_voidSetCursor+0x5e>
	{
		LCD_voidSendCommand(Row0_Coulmn3);
    1b0e:	83 e8       	ldi	r24, 0x83	; 131
    1b10:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1b14:	1b c1       	rjmp	.+566    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 4)
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	88 23       	and	r24, r24
    1b1a:	39 f4       	brne	.+14     	; 0x1b2a <LCD_voidSetCursor+0x72>
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	84 30       	cpi	r24, 0x04	; 4
    1b20:	21 f4       	brne	.+8      	; 0x1b2a <LCD_voidSetCursor+0x72>
	{
		LCD_voidSendCommand(Row0_Coulmn4);
    1b22:	84 e8       	ldi	r24, 0x84	; 132
    1b24:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1b28:	11 c1       	rjmp	.+546    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 5)
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	88 23       	and	r24, r24
    1b2e:	39 f4       	brne	.+14     	; 0x1b3e <LCD_voidSetCursor+0x86>
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	85 30       	cpi	r24, 0x05	; 5
    1b34:	21 f4       	brne	.+8      	; 0x1b3e <LCD_voidSetCursor+0x86>
	{
		LCD_voidSendCommand(Row0_Coulmn5);
    1b36:	85 e8       	ldi	r24, 0x85	; 133
    1b38:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1b3c:	07 c1       	rjmp	.+526    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 6)
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	88 23       	and	r24, r24
    1b42:	39 f4       	brne	.+14     	; 0x1b52 <LCD_voidSetCursor+0x9a>
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	86 30       	cpi	r24, 0x06	; 6
    1b48:	21 f4       	brne	.+8      	; 0x1b52 <LCD_voidSetCursor+0x9a>
	{
		LCD_voidSendCommand(Row0_Coulmn6);
    1b4a:	86 e8       	ldi	r24, 0x86	; 134
    1b4c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1b50:	fd c0       	rjmp	.+506    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 7)
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	88 23       	and	r24, r24
    1b56:	39 f4       	brne	.+14     	; 0x1b66 <LCD_voidSetCursor+0xae>
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	87 30       	cpi	r24, 0x07	; 7
    1b5c:	21 f4       	brne	.+8      	; 0x1b66 <LCD_voidSetCursor+0xae>
	{
		LCD_voidSendCommand(Row0_Coulmn7);
    1b5e:	87 e8       	ldi	r24, 0x87	; 135
    1b60:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1b64:	f3 c0       	rjmp	.+486    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 8)
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	88 23       	and	r24, r24
    1b6a:	39 f4       	brne	.+14     	; 0x1b7a <LCD_voidSetCursor+0xc2>
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	88 30       	cpi	r24, 0x08	; 8
    1b70:	21 f4       	brne	.+8      	; 0x1b7a <LCD_voidSetCursor+0xc2>
	{
		LCD_voidSendCommand(Row0_Coulmn8);
    1b72:	88 e8       	ldi	r24, 0x88	; 136
    1b74:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1b78:	e9 c0       	rjmp	.+466    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 9)
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	88 23       	and	r24, r24
    1b7e:	39 f4       	brne	.+14     	; 0x1b8e <LCD_voidSetCursor+0xd6>
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	89 30       	cpi	r24, 0x09	; 9
    1b84:	21 f4       	brne	.+8      	; 0x1b8e <LCD_voidSetCursor+0xd6>
	{
		LCD_voidSendCommand(Row0_Coulmn9);
    1b86:	89 e8       	ldi	r24, 0x89	; 137
    1b88:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1b8c:	df c0       	rjmp	.+446    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 10)
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	88 23       	and	r24, r24
    1b92:	39 f4       	brne	.+14     	; 0x1ba2 <LCD_voidSetCursor+0xea>
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	8a 30       	cpi	r24, 0x0A	; 10
    1b98:	21 f4       	brne	.+8      	; 0x1ba2 <LCD_voidSetCursor+0xea>
	{
		LCD_voidSendCommand(Row0_Coulmn10);
    1b9a:	8a e8       	ldi	r24, 0x8A	; 138
    1b9c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1ba0:	d5 c0       	rjmp	.+426    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 11)
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	88 23       	and	r24, r24
    1ba6:	39 f4       	brne	.+14     	; 0x1bb6 <LCD_voidSetCursor+0xfe>
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	8b 30       	cpi	r24, 0x0B	; 11
    1bac:	21 f4       	brne	.+8      	; 0x1bb6 <LCD_voidSetCursor+0xfe>
	{
		LCD_voidSendCommand(Row0_Coulmn11);
    1bae:	8b e8       	ldi	r24, 0x8B	; 139
    1bb0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1bb4:	cb c0       	rjmp	.+406    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 12)
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	88 23       	and	r24, r24
    1bba:	39 f4       	brne	.+14     	; 0x1bca <LCD_voidSetCursor+0x112>
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	8c 30       	cpi	r24, 0x0C	; 12
    1bc0:	21 f4       	brne	.+8      	; 0x1bca <LCD_voidSetCursor+0x112>
	{
		LCD_voidSendCommand(Row0_Coulmn12);
    1bc2:	8c e8       	ldi	r24, 0x8C	; 140
    1bc4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1bc8:	c1 c0       	rjmp	.+386    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 13)
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	88 23       	and	r24, r24
    1bce:	39 f4       	brne	.+14     	; 0x1bde <LCD_voidSetCursor+0x126>
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	8d 30       	cpi	r24, 0x0D	; 13
    1bd4:	21 f4       	brne	.+8      	; 0x1bde <LCD_voidSetCursor+0x126>
	{
		LCD_voidSendCommand(Row0_Coulmn13);
    1bd6:	8d e8       	ldi	r24, 0x8D	; 141
    1bd8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1bdc:	b7 c0       	rjmp	.+366    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 14)
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	88 23       	and	r24, r24
    1be2:	39 f4       	brne	.+14     	; 0x1bf2 <LCD_voidSetCursor+0x13a>
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	8e 30       	cpi	r24, 0x0E	; 14
    1be8:	21 f4       	brne	.+8      	; 0x1bf2 <LCD_voidSetCursor+0x13a>
	{
		LCD_voidSendCommand(Row0_Coulmn14);
    1bea:	8e e8       	ldi	r24, 0x8E	; 142
    1bec:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1bf0:	ad c0       	rjmp	.+346    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 0 && C == 15)
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	88 23       	and	r24, r24
    1bf6:	39 f4       	brne	.+14     	; 0x1c06 <LCD_voidSetCursor+0x14e>
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	8f 30       	cpi	r24, 0x0F	; 15
    1bfc:	21 f4       	brne	.+8      	; 0x1c06 <LCD_voidSetCursor+0x14e>
	{
		LCD_voidSendCommand(Row0_Coulmn15);
    1bfe:	8f e8       	ldi	r24, 0x8F	; 143
    1c00:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1c04:	a3 c0       	rjmp	.+326    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 0)
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	39 f4       	brne	.+14     	; 0x1c1a <LCD_voidSetCursor+0x162>
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	88 23       	and	r24, r24
    1c10:	21 f4       	brne	.+8      	; 0x1c1a <LCD_voidSetCursor+0x162>
	{
		LCD_voidSendCommand(Row1_Coulmn0);
    1c12:	80 ec       	ldi	r24, 0xC0	; 192
    1c14:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1c18:	99 c0       	rjmp	.+306    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 1)
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	39 f4       	brne	.+14     	; 0x1c2e <LCD_voidSetCursor+0x176>
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	81 30       	cpi	r24, 0x01	; 1
    1c24:	21 f4       	brne	.+8      	; 0x1c2e <LCD_voidSetCursor+0x176>
	{
		LCD_voidSendCommand(Row1_Coulmn1);
    1c26:	81 ec       	ldi	r24, 0xC1	; 193
    1c28:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1c2c:	8f c0       	rjmp	.+286    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 2)
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	39 f4       	brne	.+14     	; 0x1c42 <LCD_voidSetCursor+0x18a>
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	82 30       	cpi	r24, 0x02	; 2
    1c38:	21 f4       	brne	.+8      	; 0x1c42 <LCD_voidSetCursor+0x18a>
	{
		LCD_voidSendCommand(Row1_Coulmn2);
    1c3a:	82 ec       	ldi	r24, 0xC2	; 194
    1c3c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1c40:	85 c0       	rjmp	.+266    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 3)
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	39 f4       	brne	.+14     	; 0x1c56 <LCD_voidSetCursor+0x19e>
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	83 30       	cpi	r24, 0x03	; 3
    1c4c:	21 f4       	brne	.+8      	; 0x1c56 <LCD_voidSetCursor+0x19e>
	{
		LCD_voidSendCommand(Row1_Coulmn3);
    1c4e:	83 ec       	ldi	r24, 0xC3	; 195
    1c50:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1c54:	7b c0       	rjmp	.+246    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 4)
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	39 f4       	brne	.+14     	; 0x1c6a <LCD_voidSetCursor+0x1b2>
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	84 30       	cpi	r24, 0x04	; 4
    1c60:	21 f4       	brne	.+8      	; 0x1c6a <LCD_voidSetCursor+0x1b2>
	{
		LCD_voidSendCommand(Row1_Coulmn4);
    1c62:	84 ec       	ldi	r24, 0xC4	; 196
    1c64:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1c68:	71 c0       	rjmp	.+226    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C ==5)
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	39 f4       	brne	.+14     	; 0x1c7e <LCD_voidSetCursor+0x1c6>
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	85 30       	cpi	r24, 0x05	; 5
    1c74:	21 f4       	brne	.+8      	; 0x1c7e <LCD_voidSetCursor+0x1c6>
	{
		LCD_voidSendCommand(Row1_Coulmn5);
    1c76:	85 ec       	ldi	r24, 0xC5	; 197
    1c78:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1c7c:	67 c0       	rjmp	.+206    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 6)
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	39 f4       	brne	.+14     	; 0x1c92 <LCD_voidSetCursor+0x1da>
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	86 30       	cpi	r24, 0x06	; 6
    1c88:	21 f4       	brne	.+8      	; 0x1c92 <LCD_voidSetCursor+0x1da>
	{
		LCD_voidSendCommand(Row1_Coulmn6);
    1c8a:	86 ec       	ldi	r24, 0xC6	; 198
    1c8c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1c90:	5d c0       	rjmp	.+186    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 7)
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	39 f4       	brne	.+14     	; 0x1ca6 <LCD_voidSetCursor+0x1ee>
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	87 30       	cpi	r24, 0x07	; 7
    1c9c:	21 f4       	brne	.+8      	; 0x1ca6 <LCD_voidSetCursor+0x1ee>
	{
		LCD_voidSendCommand(Row1_Coulmn7);
    1c9e:	87 ec       	ldi	r24, 0xC7	; 199
    1ca0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1ca4:	53 c0       	rjmp	.+166    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 8)
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	39 f4       	brne	.+14     	; 0x1cba <LCD_voidSetCursor+0x202>
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	88 30       	cpi	r24, 0x08	; 8
    1cb0:	21 f4       	brne	.+8      	; 0x1cba <LCD_voidSetCursor+0x202>
	{
		LCD_voidSendCommand(Row1_Coulmn8);
    1cb2:	88 ec       	ldi	r24, 0xC8	; 200
    1cb4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1cb8:	49 c0       	rjmp	.+146    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 2 && C == 9)
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	39 f4       	brne	.+14     	; 0x1cce <LCD_voidSetCursor+0x216>
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	89 30       	cpi	r24, 0x09	; 9
    1cc4:	21 f4       	brne	.+8      	; 0x1cce <LCD_voidSetCursor+0x216>
	{
		LCD_voidSendCommand(Row1_Coulmn9);
    1cc6:	89 ec       	ldi	r24, 0xC9	; 201
    1cc8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 10)
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	39 f4       	brne	.+14     	; 0x1ce2 <LCD_voidSetCursor+0x22a>
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	8a 30       	cpi	r24, 0x0A	; 10
    1cd8:	21 f4       	brne	.+8      	; 0x1ce2 <LCD_voidSetCursor+0x22a>
	{
		LCD_voidSendCommand(Row1_Coulmn10);
    1cda:	8a ec       	ldi	r24, 0xCA	; 202
    1cdc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1ce0:	35 c0       	rjmp	.+106    	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 11)
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	39 f4       	brne	.+14     	; 0x1cf6 <LCD_voidSetCursor+0x23e>
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	8b 30       	cpi	r24, 0x0B	; 11
    1cec:	21 f4       	brne	.+8      	; 0x1cf6 <LCD_voidSetCursor+0x23e>
	{
		LCD_voidSendCommand(Row1_Coulmn11);
    1cee:	8b ec       	ldi	r24, 0xCB	; 203
    1cf0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1cf4:	2b c0       	rjmp	.+86     	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 12)
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	39 f4       	brne	.+14     	; 0x1d0a <LCD_voidSetCursor+0x252>
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	8c 30       	cpi	r24, 0x0C	; 12
    1d00:	21 f4       	brne	.+8      	; 0x1d0a <LCD_voidSetCursor+0x252>
	{
		LCD_voidSendCommand(Row1_Coulmn12);
    1d02:	8c ec       	ldi	r24, 0xCC	; 204
    1d04:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1d08:	21 c0       	rjmp	.+66     	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 13)
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	39 f4       	brne	.+14     	; 0x1d1e <LCD_voidSetCursor+0x266>
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	8d 30       	cpi	r24, 0x0D	; 13
    1d14:	21 f4       	brne	.+8      	; 0x1d1e <LCD_voidSetCursor+0x266>
	{
		LCD_voidSendCommand(Row1_Coulmn13);
    1d16:	8d ec       	ldi	r24, 0xCD	; 205
    1d18:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1d1c:	17 c0       	rjmp	.+46     	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 14)
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	81 30       	cpi	r24, 0x01	; 1
    1d22:	39 f4       	brne	.+14     	; 0x1d32 <LCD_voidSetCursor+0x27a>
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	8e 30       	cpi	r24, 0x0E	; 14
    1d28:	21 f4       	brne	.+8      	; 0x1d32 <LCD_voidSetCursor+0x27a>
	{
		LCD_voidSendCommand(Row1_Coulmn14);
    1d2a:	8e ec       	ldi	r24, 0xCE	; 206
    1d2c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1d30:	0d c0       	rjmp	.+26     	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else if (R == 1 && C == 15)
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	39 f4       	brne	.+14     	; 0x1d46 <LCD_voidSetCursor+0x28e>
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	8f 30       	cpi	r24, 0x0F	; 15
    1d3c:	21 f4       	brne	.+8      	; 0x1d46 <LCD_voidSetCursor+0x28e>
	{
		LCD_voidSendCommand(Row1_Coulmn15);
    1d3e:	8f ec       	ldi	r24, 0xCF	; 207
    1d40:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
    1d44:	03 c0       	rjmp	.+6      	; 0x1d4c <LCD_voidSetCursor+0x294>
	}
	else
	{
		LCD_voidSendCommand(Row0_Coulmn0);
    1d46:	80 e8       	ldi	r24, 0x80	; 128
    1d48:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LCD_voidSendCommand>
	}



}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <LCD_voidWrite>:
		LCD_voidSetCursor(0,0);
	}*/


void LCD_voidWrite(u8 Num_1)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <LCD_voidWrite+0x6>
    1d5c:	0f 92       	push	r0
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	89 83       	std	Y+1, r24	; 0x01
	switch (Num_1)
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	3b 83       	std	Y+3, r19	; 0x03
    1d6c:	2a 83       	std	Y+2, r18	; 0x02
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	9b 81       	ldd	r25, Y+3	; 0x03
    1d72:	87 30       	cpi	r24, 0x07	; 7
    1d74:	91 05       	cpc	r25, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <LCD_voidWrite+0x24>
    1d78:	7a c0       	rjmp	.+244    	; 0x1e6e <LCD_voidWrite+0x118>
    1d7a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d7c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d7e:	28 30       	cpi	r18, 0x08	; 8
    1d80:	31 05       	cpc	r19, r1
    1d82:	54 f5       	brge	.+84     	; 0x1dd8 <LCD_voidWrite+0x82>
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	9b 81       	ldd	r25, Y+3	; 0x03
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <LCD_voidWrite+0x3a>
    1d8e:	5f c0       	rjmp	.+190    	; 0x1e4e <LCD_voidWrite+0xf8>
    1d90:	2a 81       	ldd	r18, Y+2	; 0x02
    1d92:	3b 81       	ldd	r19, Y+3	; 0x03
    1d94:	24 30       	cpi	r18, 0x04	; 4
    1d96:	31 05       	cpc	r19, r1
    1d98:	94 f4       	brge	.+36     	; 0x1dbe <LCD_voidWrite+0x68>
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9e:	81 30       	cpi	r24, 0x01	; 1
    1da0:	91 05       	cpc	r25, r1
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <LCD_voidWrite+0x50>
    1da4:	4c c0       	rjmp	.+152    	; 0x1e3e <LCD_voidWrite+0xe8>
    1da6:	2a 81       	ldd	r18, Y+2	; 0x02
    1da8:	3b 81       	ldd	r19, Y+3	; 0x03
    1daa:	22 30       	cpi	r18, 0x02	; 2
    1dac:	31 05       	cpc	r19, r1
    1dae:	0c f0       	brlt	.+2      	; 0x1db2 <LCD_voidWrite+0x5c>
    1db0:	4a c0       	rjmp	.+148    	; 0x1e46 <LCD_voidWrite+0xf0>
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	9b 81       	ldd	r25, Y+3	; 0x03
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <LCD_voidWrite+0x66>
    1dba:	3d c0       	rjmp	.+122    	; 0x1e36 <LCD_voidWrite+0xe0>
    1dbc:	77 c0       	rjmp	.+238    	; 0x1eac <LCD_voidWrite+0x156>
    1dbe:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc0:	3b 81       	ldd	r19, Y+3	; 0x03
    1dc2:	25 30       	cpi	r18, 0x05	; 5
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <LCD_voidWrite+0x74>
    1dc8:	4a c0       	rjmp	.+148    	; 0x1e5e <LCD_voidWrite+0x108>
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	86 30       	cpi	r24, 0x06	; 6
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	0c f0       	brlt	.+2      	; 0x1dd6 <LCD_voidWrite+0x80>
    1dd4:	48 c0       	rjmp	.+144    	; 0x1e66 <LCD_voidWrite+0x110>
    1dd6:	3f c0       	rjmp	.+126    	; 0x1e56 <LCD_voidWrite+0x100>
    1dd8:	2a 81       	ldd	r18, Y+2	; 0x02
    1dda:	3b 81       	ldd	r19, Y+3	; 0x03
    1ddc:	2b 32       	cpi	r18, 0x2B	; 43
    1dde:	31 05       	cpc	r19, r1
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <LCD_voidWrite+0x8e>
    1de2:	51 c0       	rjmp	.+162    	; 0x1e86 <LCD_voidWrite+0x130>
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	9b 81       	ldd	r25, Y+3	; 0x03
    1de8:	8c 32       	cpi	r24, 0x2C	; 44
    1dea:	91 05       	cpc	r25, r1
    1dec:	94 f4       	brge	.+36     	; 0x1e12 <LCD_voidWrite+0xbc>
    1dee:	2a 81       	ldd	r18, Y+2	; 0x02
    1df0:	3b 81       	ldd	r19, Y+3	; 0x03
    1df2:	29 30       	cpi	r18, 0x09	; 9
    1df4:	31 05       	cpc	r19, r1
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <LCD_voidWrite+0xa4>
    1df8:	42 c0       	rjmp	.+132    	; 0x1e7e <LCD_voidWrite+0x128>
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfe:	89 30       	cpi	r24, 0x09	; 9
    1e00:	91 05       	cpc	r25, r1
    1e02:	cc f1       	brlt	.+114    	; 0x1e76 <LCD_voidWrite+0x120>
    1e04:	2a 81       	ldd	r18, Y+2	; 0x02
    1e06:	3b 81       	ldd	r19, Y+3	; 0x03
    1e08:	2a 32       	cpi	r18, 0x2A	; 42
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <LCD_voidWrite+0xba>
    1e0e:	43 c0       	rjmp	.+134    	; 0x1e96 <LCD_voidWrite+0x140>
    1e10:	4d c0       	rjmp	.+154    	; 0x1eac <LCD_voidWrite+0x156>
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	9b 81       	ldd	r25, Y+3	; 0x03
    1e16:	8f 32       	cpi	r24, 0x2F	; 47
    1e18:	91 05       	cpc	r25, r1
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <LCD_voidWrite+0xc8>
    1e1c:	40 c0       	rjmp	.+128    	; 0x1e9e <LCD_voidWrite+0x148>
    1e1e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e20:	3b 81       	ldd	r19, Y+3	; 0x03
    1e22:	2d 33       	cpi	r18, 0x3D	; 61
    1e24:	31 05       	cpc	r19, r1
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <LCD_voidWrite+0xd4>
    1e28:	3e c0       	rjmp	.+124    	; 0x1ea6 <LCD_voidWrite+0x150>
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2e:	8d 32       	cpi	r24, 0x2D	; 45
    1e30:	91 05       	cpc	r25, r1
    1e32:	69 f1       	breq	.+90     	; 0x1e8e <LCD_voidWrite+0x138>
    1e34:	3b c0       	rjmp	.+118    	; 0x1eac <LCD_voidWrite+0x156>
	{
	case 0 :
		LCD_voidWriteCharacter('0');
    1e36:	80 e3       	ldi	r24, 0x30	; 48
    1e38:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e3c:	37 c0       	rjmp	.+110    	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case 1 :
		LCD_voidWriteCharacter('1');
    1e3e:	81 e3       	ldi	r24, 0x31	; 49
    1e40:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e44:	33 c0       	rjmp	.+102    	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case 2 :
		LCD_voidWriteCharacter('2');
    1e46:	82 e3       	ldi	r24, 0x32	; 50
    1e48:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e4c:	2f c0       	rjmp	.+94     	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case 3 :
		LCD_voidWriteCharacter('3');
    1e4e:	83 e3       	ldi	r24, 0x33	; 51
    1e50:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e54:	2b c0       	rjmp	.+86     	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case 4 :
		LCD_voidWriteCharacter('4');
    1e56:	84 e3       	ldi	r24, 0x34	; 52
    1e58:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e5c:	27 c0       	rjmp	.+78     	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case 5 :
		LCD_voidWriteCharacter('5');
    1e5e:	85 e3       	ldi	r24, 0x35	; 53
    1e60:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e64:	23 c0       	rjmp	.+70     	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case 6 :
		LCD_voidWriteCharacter('6');
    1e66:	86 e3       	ldi	r24, 0x36	; 54
    1e68:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e6c:	1f c0       	rjmp	.+62     	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case 7 :
		LCD_voidWriteCharacter('7');
    1e6e:	87 e3       	ldi	r24, 0x37	; 55
    1e70:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e74:	1b c0       	rjmp	.+54     	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case 8 :
		LCD_voidWriteCharacter('8');
    1e76:	88 e3       	ldi	r24, 0x38	; 56
    1e78:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e7c:	17 c0       	rjmp	.+46     	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case 9 :
		LCD_voidWriteCharacter('9');
    1e7e:	89 e3       	ldi	r24, 0x39	; 57
    1e80:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e84:	13 c0       	rjmp	.+38     	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case '+' :
		LCD_voidWriteCharacter('+');
    1e86:	8b e2       	ldi	r24, 0x2B	; 43
    1e88:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e8c:	0f c0       	rjmp	.+30     	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case '-' :
		LCD_voidWriteCharacter('-');
    1e8e:	8d e2       	ldi	r24, 0x2D	; 45
    1e90:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e94:	0b c0       	rjmp	.+22     	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case '*' :
		LCD_voidWriteCharacter('*');
    1e96:	8a e2       	ldi	r24, 0x2A	; 42
    1e98:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1e9c:	07 c0       	rjmp	.+14     	; 0x1eac <LCD_voidWrite+0x156>

		break;
	case '/' :
		LCD_voidWriteCharacter('/');
    1e9e:	8f e2       	ldi	r24, 0x2F	; 47
    1ea0:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
    1ea4:	03 c0       	rjmp	.+6      	; 0x1eac <LCD_voidWrite+0x156>
		break;
	case '=' :
		LCD_voidWriteCharacter('=');
    1ea6:	8d e3       	ldi	r24, 0x3D	; 61
    1ea8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <LCD_voidWriteCharacter>
		break;

	}
}
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <LCD_voidwriteNumber>:

void LCD_voidwriteNumber(u32 Num,u8 R,u8 C)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	e6 97       	sbiw	r28, 0x36	; 54
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	69 ab       	std	Y+49, r22	; 0x31
    1ece:	7a ab       	std	Y+50, r23	; 0x32
    1ed0:	8b ab       	std	Y+51, r24	; 0x33
    1ed2:	9c ab       	std	Y+52, r25	; 0x34
    1ed4:	4d ab       	std	Y+53, r20	; 0x35
    1ed6:	2e ab       	std	Y+54, r18	; 0x36
	u32 Num_1;
	u32 Num_2,Intermediate_2,Num_3,Intermediate_3,Intermediate_4,Num_4,Num_5,Intermediate_5,Num_6,Intermediate_6,Num_7;

	if(Num<10)
    1ed8:	89 a9       	ldd	r24, Y+49	; 0x31
    1eda:	9a a9       	ldd	r25, Y+50	; 0x32
    1edc:	ab a9       	ldd	r26, Y+51	; 0x33
    1ede:	bc a9       	ldd	r27, Y+52	; 0x34
    1ee0:	8a 30       	cpi	r24, 0x0A	; 10
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	a1 05       	cpc	r26, r1
    1ee6:	b1 05       	cpc	r27, r1
    1ee8:	40 f4       	brcc	.+16     	; 0x1efa <LCD_voidwriteNumber+0x42>
	{
		LCD_voidSetCursor(R,C);
    1eea:	8d a9       	ldd	r24, Y+53	; 0x35
    1eec:	6e a9       	ldd	r22, Y+54	; 0x36
    1eee:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSetCursor>
		LCD_voidWrite(Num);
    1ef2:	89 a9       	ldd	r24, Y+49	; 0x31
    1ef4:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_voidWrite>
    1ef8:	6f c1       	rjmp	.+734    	; 0x21d8 <LCD_voidwriteNumber+0x320>
	}
	else if(Num >=10 && Num <100)
    1efa:	89 a9       	ldd	r24, Y+49	; 0x31
    1efc:	9a a9       	ldd	r25, Y+50	; 0x32
    1efe:	ab a9       	ldd	r26, Y+51	; 0x33
    1f00:	bc a9       	ldd	r27, Y+52	; 0x34
    1f02:	8a 30       	cpi	r24, 0x0A	; 10
    1f04:	91 05       	cpc	r25, r1
    1f06:	a1 05       	cpc	r26, r1
    1f08:	b1 05       	cpc	r27, r1
    1f0a:	08 f4       	brcc	.+2      	; 0x1f0e <LCD_voidwriteNumber+0x56>
    1f0c:	3f c0       	rjmp	.+126    	; 0x1f8c <LCD_voidwriteNumber+0xd4>
    1f0e:	89 a9       	ldd	r24, Y+49	; 0x31
    1f10:	9a a9       	ldd	r25, Y+50	; 0x32
    1f12:	ab a9       	ldd	r26, Y+51	; 0x33
    1f14:	bc a9       	ldd	r27, Y+52	; 0x34
    1f16:	84 36       	cpi	r24, 0x64	; 100
    1f18:	91 05       	cpc	r25, r1
    1f1a:	a1 05       	cpc	r26, r1
    1f1c:	b1 05       	cpc	r27, r1
    1f1e:	b0 f5       	brcc	.+108    	; 0x1f8c <LCD_voidwriteNumber+0xd4>
	{
		Num_1 = Num / 10;
    1f20:	89 a9       	ldd	r24, Y+49	; 0x31
    1f22:	9a a9       	ldd	r25, Y+50	; 0x32
    1f24:	ab a9       	ldd	r26, Y+51	; 0x33
    1f26:	bc a9       	ldd	r27, Y+52	; 0x34
    1f28:	2a e0       	ldi	r18, 0x0A	; 10
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    1f38:	da 01       	movw	r26, r20
    1f3a:	c9 01       	movw	r24, r18
    1f3c:	8d a7       	std	Y+45, r24	; 0x2d
    1f3e:	9e a7       	std	Y+46, r25	; 0x2e
    1f40:	af a7       	std	Y+47, r26	; 0x2f
    1f42:	b8 ab       	std	Y+48, r27	; 0x30
		LCD_voidSetCursor(R,C);
    1f44:	8d a9       	ldd	r24, Y+53	; 0x35
    1f46:	6e a9       	ldd	r22, Y+54	; 0x36
    1f48:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSetCursor>
		LCD_voidWrite(Num_1);
    1f4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f4e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_voidWrite>

		Num_2 = Num % 10;
    1f52:	89 a9       	ldd	r24, Y+49	; 0x31
    1f54:	9a a9       	ldd	r25, Y+50	; 0x32
    1f56:	ab a9       	ldd	r26, Y+51	; 0x33
    1f58:	bc a9       	ldd	r27, Y+52	; 0x34
    1f5a:	2a e0       	ldi	r18, 0x0A	; 10
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	89 a7       	std	Y+41, r24	; 0x29
    1f70:	9a a7       	std	Y+42, r25	; 0x2a
    1f72:	ab a7       	std	Y+43, r26	; 0x2b
    1f74:	bc a7       	std	Y+44, r27	; 0x2c
		LCD_voidSetCursor(R,C+1);
    1f76:	8e a9       	ldd	r24, Y+54	; 0x36
    1f78:	98 2f       	mov	r25, r24
    1f7a:	9f 5f       	subi	r25, 0xFF	; 255
    1f7c:	8d a9       	ldd	r24, Y+53	; 0x35
    1f7e:	69 2f       	mov	r22, r25
    1f80:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSetCursor>
		LCD_voidWrite(Num_2);
    1f84:	89 a5       	ldd	r24, Y+41	; 0x29
    1f86:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_voidWrite>
    1f8a:	26 c1       	rjmp	.+588    	; 0x21d8 <LCD_voidwriteNumber+0x320>
	}
	else if(Num >=100 && Num <1000)
    1f8c:	89 a9       	ldd	r24, Y+49	; 0x31
    1f8e:	9a a9       	ldd	r25, Y+50	; 0x32
    1f90:	ab a9       	ldd	r26, Y+51	; 0x33
    1f92:	bc a9       	ldd	r27, Y+52	; 0x34
    1f94:	84 36       	cpi	r24, 0x64	; 100
    1f96:	91 05       	cpc	r25, r1
    1f98:	a1 05       	cpc	r26, r1
    1f9a:	b1 05       	cpc	r27, r1
    1f9c:	08 f4       	brcc	.+2      	; 0x1fa0 <LCD_voidwriteNumber+0xe8>
    1f9e:	71 c0       	rjmp	.+226    	; 0x2082 <LCD_voidwriteNumber+0x1ca>
    1fa0:	89 a9       	ldd	r24, Y+49	; 0x31
    1fa2:	9a a9       	ldd	r25, Y+50	; 0x32
    1fa4:	ab a9       	ldd	r26, Y+51	; 0x33
    1fa6:	bc a9       	ldd	r27, Y+52	; 0x34
    1fa8:	88 3e       	cpi	r24, 0xE8	; 232
    1faa:	23 e0       	ldi	r18, 0x03	; 3
    1fac:	92 07       	cpc	r25, r18
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	a2 07       	cpc	r26, r18
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	b2 07       	cpc	r27, r18
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <LCD_voidwriteNumber+0x102>
    1fb8:	64 c0       	rjmp	.+200    	; 0x2082 <LCD_voidwriteNumber+0x1ca>
	{ //123
		Num_1 = Num/100; //1
    1fba:	89 a9       	ldd	r24, Y+49	; 0x31
    1fbc:	9a a9       	ldd	r25, Y+50	; 0x32
    1fbe:	ab a9       	ldd	r26, Y+51	; 0x33
    1fc0:	bc a9       	ldd	r27, Y+52	; 0x34
    1fc2:	24 e6       	ldi	r18, 0x64	; 100
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	50 e0       	ldi	r21, 0x00	; 0
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    1fd2:	da 01       	movw	r26, r20
    1fd4:	c9 01       	movw	r24, r18
    1fd6:	8d a7       	std	Y+45, r24	; 0x2d
    1fd8:	9e a7       	std	Y+46, r25	; 0x2e
    1fda:	af a7       	std	Y+47, r26	; 0x2f
    1fdc:	b8 ab       	std	Y+48, r27	; 0x30
		LCD_voidSetCursor(R,C);
    1fde:	8d a9       	ldd	r24, Y+53	; 0x35
    1fe0:	6e a9       	ldd	r22, Y+54	; 0x36
    1fe2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSetCursor>
		LCD_voidWrite(Num_1);
    1fe6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fe8:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_voidWrite>

		Num_2 = Num % 100; //23
    1fec:	89 a9       	ldd	r24, Y+49	; 0x31
    1fee:	9a a9       	ldd	r25, Y+50	; 0x32
    1ff0:	ab a9       	ldd	r26, Y+51	; 0x33
    1ff2:	bc a9       	ldd	r27, Y+52	; 0x34
    1ff4:	24 e6       	ldi	r18, 0x64	; 100
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	50 e0       	ldi	r21, 0x00	; 0
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	89 a7       	std	Y+41, r24	; 0x29
    200a:	9a a7       	std	Y+42, r25	; 0x2a
    200c:	ab a7       	std	Y+43, r26	; 0x2b
    200e:	bc a7       	std	Y+44, r27	; 0x2c
		Intermediate_2 = Num_2 / 10; //2
    2010:	89 a5       	ldd	r24, Y+41	; 0x29
    2012:	9a a5       	ldd	r25, Y+42	; 0x2a
    2014:	ab a5       	ldd	r26, Y+43	; 0x2b
    2016:	bc a5       	ldd	r27, Y+44	; 0x2c
    2018:	2a e0       	ldi	r18, 0x0A	; 10
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	50 e0       	ldi	r21, 0x00	; 0
    2020:	bc 01       	movw	r22, r24
    2022:	cd 01       	movw	r24, r26
    2024:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    2028:	da 01       	movw	r26, r20
    202a:	c9 01       	movw	r24, r18
    202c:	8d a3       	std	Y+37, r24	; 0x25
    202e:	9e a3       	std	Y+38, r25	; 0x26
    2030:	af a3       	std	Y+39, r26	; 0x27
    2032:	b8 a7       	std	Y+40, r27	; 0x28
		LCD_voidSetCursor(R,C+1);
    2034:	8e a9       	ldd	r24, Y+54	; 0x36
    2036:	98 2f       	mov	r25, r24
    2038:	9f 5f       	subi	r25, 0xFF	; 255
    203a:	8d a9       	ldd	r24, Y+53	; 0x35
    203c:	69 2f       	mov	r22, r25
    203e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSetCursor>
		LCD_voidWrite(Intermediate_2);
    2042:	8d a1       	ldd	r24, Y+37	; 0x25
    2044:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_voidWrite>

		Num_3 = Num_2 % 10; //3
    2048:	89 a5       	ldd	r24, Y+41	; 0x29
    204a:	9a a5       	ldd	r25, Y+42	; 0x2a
    204c:	ab a5       	ldd	r26, Y+43	; 0x2b
    204e:	bc a5       	ldd	r27, Y+44	; 0x2c
    2050:	2a e0       	ldi	r18, 0x0A	; 10
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	89 a3       	std	Y+33, r24	; 0x21
    2066:	9a a3       	std	Y+34, r25	; 0x22
    2068:	ab a3       	std	Y+35, r26	; 0x23
    206a:	bc a3       	std	Y+36, r27	; 0x24
    	LCD_voidSetCursor(R,C+2);
    206c:	8e a9       	ldd	r24, Y+54	; 0x36
    206e:	98 2f       	mov	r25, r24
    2070:	9e 5f       	subi	r25, 0xFE	; 254
    2072:	8d a9       	ldd	r24, Y+53	; 0x35
    2074:	69 2f       	mov	r22, r25
    2076:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSetCursor>
		LCD_voidWrite(Num_3);
    207a:	89 a1       	ldd	r24, Y+33	; 0x21
    207c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_voidWrite>
    2080:	ab c0       	rjmp	.+342    	; 0x21d8 <LCD_voidwriteNumber+0x320>
	}
	else if(Num >=1000 && Num <10000)
    2082:	89 a9       	ldd	r24, Y+49	; 0x31
    2084:	9a a9       	ldd	r25, Y+50	; 0x32
    2086:	ab a9       	ldd	r26, Y+51	; 0x33
    2088:	bc a9       	ldd	r27, Y+52	; 0x34
    208a:	88 3e       	cpi	r24, 0xE8	; 232
    208c:	23 e0       	ldi	r18, 0x03	; 3
    208e:	92 07       	cpc	r25, r18
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	a2 07       	cpc	r26, r18
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	b2 07       	cpc	r27, r18
    2098:	08 f4       	brcc	.+2      	; 0x209c <LCD_voidwriteNumber+0x1e4>
    209a:	9e c0       	rjmp	.+316    	; 0x21d8 <LCD_voidwriteNumber+0x320>
    209c:	89 a9       	ldd	r24, Y+49	; 0x31
    209e:	9a a9       	ldd	r25, Y+50	; 0x32
    20a0:	ab a9       	ldd	r26, Y+51	; 0x33
    20a2:	bc a9       	ldd	r27, Y+52	; 0x34
    20a4:	80 31       	cpi	r24, 0x10	; 16
    20a6:	27 e2       	ldi	r18, 0x27	; 39
    20a8:	92 07       	cpc	r25, r18
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	a2 07       	cpc	r26, r18
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	b2 07       	cpc	r27, r18
    20b2:	08 f0       	brcs	.+2      	; 0x20b6 <LCD_voidwriteNumber+0x1fe>
    20b4:	91 c0       	rjmp	.+290    	; 0x21d8 <LCD_voidwriteNumber+0x320>
	{  ///1234
		Num_1 = Num/1000; //1
    20b6:	89 a9       	ldd	r24, Y+49	; 0x31
    20b8:	9a a9       	ldd	r25, Y+50	; 0x32
    20ba:	ab a9       	ldd	r26, Y+51	; 0x33
    20bc:	bc a9       	ldd	r27, Y+52	; 0x34
    20be:	28 ee       	ldi	r18, 0xE8	; 232
    20c0:	33 e0       	ldi	r19, 0x03	; 3
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    20ce:	da 01       	movw	r26, r20
    20d0:	c9 01       	movw	r24, r18
    20d2:	8d a7       	std	Y+45, r24	; 0x2d
    20d4:	9e a7       	std	Y+46, r25	; 0x2e
    20d6:	af a7       	std	Y+47, r26	; 0x2f
    20d8:	b8 ab       	std	Y+48, r27	; 0x30
		LCD_voidSetCursor(R,C);
    20da:	8d a9       	ldd	r24, Y+53	; 0x35
    20dc:	6e a9       	ldd	r22, Y+54	; 0x36
    20de:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSetCursor>
		LCD_voidWrite(Num_1);
    20e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    20e4:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_voidWrite>

		Num_2 = Num % 1000;  //234
    20e8:	89 a9       	ldd	r24, Y+49	; 0x31
    20ea:	9a a9       	ldd	r25, Y+50	; 0x32
    20ec:	ab a9       	ldd	r26, Y+51	; 0x33
    20ee:	bc a9       	ldd	r27, Y+52	; 0x34
    20f0:	28 ee       	ldi	r18, 0xE8	; 232
    20f2:	33 e0       	ldi	r19, 0x03	; 3
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	50 e0       	ldi	r21, 0x00	; 0
    20f8:	bc 01       	movw	r22, r24
    20fa:	cd 01       	movw	r24, r26
    20fc:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	89 a7       	std	Y+41, r24	; 0x29
    2106:	9a a7       	std	Y+42, r25	; 0x2a
    2108:	ab a7       	std	Y+43, r26	; 0x2b
    210a:	bc a7       	std	Y+44, r27	; 0x2c
		Intermediate_2= Num_2 / 100; //2
    210c:	89 a5       	ldd	r24, Y+41	; 0x29
    210e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2110:	ab a5       	ldd	r26, Y+43	; 0x2b
    2112:	bc a5       	ldd	r27, Y+44	; 0x2c
    2114:	24 e6       	ldi	r18, 0x64	; 100
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    2124:	da 01       	movw	r26, r20
    2126:	c9 01       	movw	r24, r18
    2128:	8d a3       	std	Y+37, r24	; 0x25
    212a:	9e a3       	std	Y+38, r25	; 0x26
    212c:	af a3       	std	Y+39, r26	; 0x27
    212e:	b8 a7       	std	Y+40, r27	; 0x28
		LCD_voidSetCursor(R,C+1);
    2130:	8e a9       	ldd	r24, Y+54	; 0x36
    2132:	98 2f       	mov	r25, r24
    2134:	9f 5f       	subi	r25, 0xFF	; 255
    2136:	8d a9       	ldd	r24, Y+53	; 0x35
    2138:	69 2f       	mov	r22, r25
    213a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSetCursor>
		LCD_voidWrite(Intermediate_2);
    213e:	8d a1       	ldd	r24, Y+37	; 0x25
    2140:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_voidWrite>

		Intermediate_3 = Num_2 % 100; //34
    2144:	89 a5       	ldd	r24, Y+41	; 0x29
    2146:	9a a5       	ldd	r25, Y+42	; 0x2a
    2148:	ab a5       	ldd	r26, Y+43	; 0x2b
    214a:	bc a5       	ldd	r27, Y+44	; 0x2c
    214c:	24 e6       	ldi	r18, 0x64	; 100
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	50 e0       	ldi	r21, 0x00	; 0
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	8d 8f       	std	Y+29, r24	; 0x1d
    2162:	9e 8f       	std	Y+30, r25	; 0x1e
    2164:	af 8f       	std	Y+31, r26	; 0x1f
    2166:	b8 a3       	std	Y+32, r27	; 0x20
		Num_3 = Intermediate_3 /10; //3
    2168:	8d 8d       	ldd	r24, Y+29	; 0x1d
    216a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    216c:	af 8d       	ldd	r26, Y+31	; 0x1f
    216e:	b8 a1       	ldd	r27, Y+32	; 0x20
    2170:	2a e0       	ldi	r18, 0x0A	; 10
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    2180:	da 01       	movw	r26, r20
    2182:	c9 01       	movw	r24, r18
    2184:	89 a3       	std	Y+33, r24	; 0x21
    2186:	9a a3       	std	Y+34, r25	; 0x22
    2188:	ab a3       	std	Y+35, r26	; 0x23
    218a:	bc a3       	std	Y+36, r27	; 0x24
		LCD_voidSetCursor(R,C+2);
    218c:	8e a9       	ldd	r24, Y+54	; 0x36
    218e:	98 2f       	mov	r25, r24
    2190:	9e 5f       	subi	r25, 0xFE	; 254
    2192:	8d a9       	ldd	r24, Y+53	; 0x35
    2194:	69 2f       	mov	r22, r25
    2196:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSetCursor>
		LCD_voidWrite(Num_3);
    219a:	89 a1       	ldd	r24, Y+33	; 0x21
    219c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_voidWrite>

		Num_4 = Intermediate_3 % 10; //4
    21a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21a4:	af 8d       	ldd	r26, Y+31	; 0x1f
    21a6:	b8 a1       	ldd	r27, Y+32	; 0x20
    21a8:	2a e0       	ldi	r18, 0x0A	; 10
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	8d 8b       	std	Y+21, r24	; 0x15
    21be:	9e 8b       	std	Y+22, r25	; 0x16
    21c0:	af 8b       	std	Y+23, r26	; 0x17
    21c2:	b8 8f       	std	Y+24, r27	; 0x18
		LCD_voidSetCursor(R,C+3);
    21c4:	8e a9       	ldd	r24, Y+54	; 0x36
    21c6:	98 2f       	mov	r25, r24
    21c8:	9d 5f       	subi	r25, 0xFD	; 253
    21ca:	8d a9       	ldd	r24, Y+53	; 0x35
    21cc:	69 2f       	mov	r22, r25
    21ce:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSetCursor>
		LCD_voidWrite(Num_4);
    21d2:	8d 89       	ldd	r24, Y+21	; 0x15
    21d4:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_voidWrite>





}
    21d8:	e6 96       	adiw	r28, 0x36	; 54
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <Timer_voidInit>:

static u32 OVF_counter;
static u32 OVF_Value;

void Timer_voidInit(u16 Start)
{
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <Timer_voidInit+0x6>
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	9a 83       	std	Y+2, r25	; 0x02
    21f6:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR0,5);
#endif
//___________________________________________________________________
#elif Timer_Mode == Fast_PWM

	SET_BIT(TCCR0,6);
    21f8:	a3 e5       	ldi	r26, 0x53	; 83
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e3 e5       	ldi	r30, 0x53	; 83
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	80 64       	ori	r24, 0x40	; 64
    2204:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    2206:	a3 e5       	ldi	r26, 0x53	; 83
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e3 e5       	ldi	r30, 0x53	; 83
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	88 60       	ori	r24, 0x08	; 8
    2212:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,5);
#elif Compare_Output_Mode_Fast_PWM == Fast_PWM_Reserved
	SET_BIT(TCCR0,4);
	CLEAR_BIT(TCCR0,5);
#elif Compare_Output_Mode_Fast_PWM == Fast_PWM_Clear_OC0_On_Compare_Set_OC0_On_Top
	CLEAR_BIT(TCCR0,4);
    2214:	a3 e5       	ldi	r26, 0x53	; 83
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e3 e5       	ldi	r30, 0x53	; 83
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	8f 7e       	andi	r24, 0xEF	; 239
    2220:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    2222:	a3 e5       	ldi	r26, 0x53	; 83
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e3 e5       	ldi	r30, 0x53	; 83
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	80 62       	ori	r24, 0x20	; 32
    222e:	8c 93       	st	X, r24
#if Clock_Select ==   No_Cock_Source
	CLEAR_BIT(TCCR0,2);
	CLEAR_BIT(TCCR0,1);
	CLEAR_BIT(TCCR0,0);
#elif Clock_Select ==   NO_Prescalling
	CLEAR_BIT(TCCR0,2); //no Prescaler
    2230:	a3 e5       	ldi	r26, 0x53	; 83
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e3 e5       	ldi	r30, 0x53	; 83
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	8b 7f       	andi	r24, 0xFB	; 251
    223c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,1);
    223e:	a3 e5       	ldi	r26, 0x53	; 83
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e3 e5       	ldi	r30, 0x53	; 83
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	8d 7f       	andi	r24, 0xFD	; 253
    224a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
    224c:	a3 e5       	ldi	r26, 0x53	; 83
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e3 e5       	ldi	r30, 0x53	; 83
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	81 60       	ori	r24, 0x01	; 1
    2258:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
	SET_BIT(TCCR0,1);
	SET_BIT(TCCR0,0);
#endif

	TCNT0 = Start;
    225a:	e2 e5       	ldi	r30, 0x52	; 82
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	80 83       	st	Z, r24

	//SET_BIT(TIMSK,0); //PIE overflow interrupt

    SET_BIT(SREG,7); // Global interrupt enable
    2262:	af e5       	ldi	r26, 0x5F	; 95
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	ef e5       	ldi	r30, 0x5F	; 95
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	80 68       	ori	r24, 0x80	; 128
    226e:	8c 93       	st	X, r24
}
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <Timer_u32_OVF_Counter>:

void Timer_u32_OVF_Counter(u32 value)
{
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	00 d0       	rcall	.+0      	; 0x2280 <Timer_u32_OVF_Counter+0x6>
    2280:	00 d0       	rcall	.+0      	; 0x2282 <Timer_u32_OVF_Counter+0x8>
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	69 83       	std	Y+1, r22	; 0x01
    2288:	7a 83       	std	Y+2, r23	; 0x02
    228a:	8b 83       	std	Y+3, r24	; 0x03
    228c:	9c 83       	std	Y+4, r25	; 0x04
	OVF_Value = value;
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	ab 81       	ldd	r26, Y+3	; 0x03
    2294:	bc 81       	ldd	r27, Y+4	; 0x04
    2296:	80 93 7a 01 	sts	0x017A, r24
    229a:	90 93 7b 01 	sts	0x017B, r25
    229e:	a0 93 7c 01 	sts	0x017C, r26
    22a2:	b0 93 7d 01 	sts	0x017D, r27

}
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <main>:

static volatile int duration = 0; //DURATION or time
static volatile int i = 0;

int main(void)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	e1 97       	sbiw	r28, 0x31	; 49
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDir(PORT_B,PIN_0,OUTPUT);
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>



  u8 distance = 0;
    22d2:	19 aa       	std	Y+49, r1	; 0x31
  PORTD &= ~(1<<PIND0); //trigger pin
    22d4:	a2 e3       	ldi	r26, 0x32	; 50
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e2 e3       	ldi	r30, 0x32	; 50
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	8e 7f       	andi	r24, 0xFE	; 254
    22e0:	8c 93       	st	X, r24
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	a0 e0       	ldi	r26, 0x00	; 0
    22e8:	b0 e4       	ldi	r27, 0x40	; 64
    22ea:	8d a7       	std	Y+45, r24	; 0x2d
    22ec:	9e a7       	std	Y+46, r25	; 0x2e
    22ee:	af a7       	std	Y+47, r26	; 0x2f
    22f0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    22f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    22f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22f8:	98 a9       	ldd	r25, Y+48	; 0x30
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	50 e4       	ldi	r21, 0x40	; 64
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	89 a7       	std	Y+41, r24	; 0x29
    230c:	9a a7       	std	Y+42, r25	; 0x2a
    230e:	ab a7       	std	Y+43, r26	; 0x2b
    2310:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2312:	69 a5       	ldd	r22, Y+41	; 0x29
    2314:	7a a5       	ldd	r23, Y+42	; 0x2a
    2316:	8b a5       	ldd	r24, Y+43	; 0x2b
    2318:	9c a5       	ldd	r25, Y+44	; 0x2c
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e8       	ldi	r20, 0x80	; 128
    2320:	5f e3       	ldi	r21, 0x3F	; 63
    2322:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2326:	88 23       	and	r24, r24
    2328:	1c f4       	brge	.+6      	; 0x2330 <main+0x7c>
		__ticks = 1;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	88 a7       	std	Y+40, r24	; 0x28
    232e:	91 c0       	rjmp	.+290    	; 0x2452 <main+0x19e>
	else if (__tmp > 255)
    2330:	69 a5       	ldd	r22, Y+41	; 0x29
    2332:	7a a5       	ldd	r23, Y+42	; 0x2a
    2334:	8b a5       	ldd	r24, Y+43	; 0x2b
    2336:	9c a5       	ldd	r25, Y+44	; 0x2c
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	53 e4       	ldi	r21, 0x43	; 67
    2340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	0c f0       	brlt	.+2      	; 0x234a <main+0x96>
    2348:	7b c0       	rjmp	.+246    	; 0x2440 <main+0x18c>
	{
		_delay_ms(__us / 1000.0);
    234a:	6d a5       	ldd	r22, Y+45	; 0x2d
    234c:	7e a5       	ldd	r23, Y+46	; 0x2e
    234e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2350:	98 a9       	ldd	r25, Y+48	; 0x30
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	4a e7       	ldi	r20, 0x7A	; 122
    2358:	54 e4       	ldi	r21, 0x44	; 68
    235a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	8c a3       	std	Y+36, r24	; 0x24
    2364:	9d a3       	std	Y+37, r25	; 0x25
    2366:	ae a3       	std	Y+38, r26	; 0x26
    2368:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236a:	6c a1       	ldd	r22, Y+36	; 0x24
    236c:	7d a1       	ldd	r23, Y+37	; 0x25
    236e:	8e a1       	ldd	r24, Y+38	; 0x26
    2370:	9f a1       	ldd	r25, Y+39	; 0x27
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e8       	ldi	r19, 0x80	; 128
    2376:	4b e3       	ldi	r20, 0x3B	; 59
    2378:	55 e4       	ldi	r21, 0x45	; 69
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	88 a3       	std	Y+32, r24	; 0x20
    2384:	99 a3       	std	Y+33, r25	; 0x21
    2386:	aa a3       	std	Y+34, r26	; 0x22
    2388:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    238a:	68 a1       	ldd	r22, Y+32	; 0x20
    238c:	79 a1       	ldd	r23, Y+33	; 0x21
    238e:	8a a1       	ldd	r24, Y+34	; 0x22
    2390:	9b a1       	ldd	r25, Y+35	; 0x23
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e8       	ldi	r20, 0x80	; 128
    2398:	5f e3       	ldi	r21, 0x3F	; 63
    239a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    239e:	88 23       	and	r24, r24
    23a0:	2c f4       	brge	.+10     	; 0x23ac <main+0xf8>
		__ticks = 1;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9f 8f       	std	Y+31, r25	; 0x1f
    23a8:	8e 8f       	std	Y+30, r24	; 0x1e
    23aa:	3f c0       	rjmp	.+126    	; 0x242a <main+0x176>
	else if (__tmp > 65535)
    23ac:	68 a1       	ldd	r22, Y+32	; 0x20
    23ae:	79 a1       	ldd	r23, Y+33	; 0x21
    23b0:	8a a1       	ldd	r24, Y+34	; 0x22
    23b2:	9b a1       	ldd	r25, Y+35	; 0x23
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	3f ef       	ldi	r19, 0xFF	; 255
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	57 e4       	ldi	r21, 0x47	; 71
    23bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	4c f5       	brge	.+82     	; 0x2416 <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c4:	6c a1       	ldd	r22, Y+36	; 0x24
    23c6:	7d a1       	ldd	r23, Y+37	; 0x25
    23c8:	8e a1       	ldd	r24, Y+38	; 0x26
    23ca:	9f a1       	ldd	r25, Y+39	; 0x27
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	51 e4       	ldi	r21, 0x41	; 65
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9f 8f       	std	Y+31, r25	; 0x1f
    23ea:	8e 8f       	std	Y+30, r24	; 0x1e
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <main+0x158>
    23ee:	8c e2       	ldi	r24, 0x2C	; 44
    23f0:	91 e0       	ldi	r25, 0x01	; 1
    23f2:	9d 8f       	std	Y+29, r25	; 0x1d
    23f4:	8c 8f       	std	Y+28, r24	; 0x1c
    23f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <main+0x146>
    23fe:	9d 8f       	std	Y+29, r25	; 0x1d
    2400:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2402:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2404:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9f 8f       	std	Y+31, r25	; 0x1f
    240a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    240e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	69 f7       	brne	.-38     	; 0x23ee <main+0x13a>
    2414:	24 c0       	rjmp	.+72     	; 0x245e <main+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2416:	68 a1       	ldd	r22, Y+32	; 0x20
    2418:	79 a1       	ldd	r23, Y+33	; 0x21
    241a:	8a a1       	ldd	r24, Y+34	; 0x22
    241c:	9b a1       	ldd	r25, Y+35	; 0x23
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9f 8f       	std	Y+31, r25	; 0x1f
    2428:	8e 8f       	std	Y+30, r24	; 0x1e
    242a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    242c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    242e:	9b 8f       	std	Y+27, r25	; 0x1b
    2430:	8a 8f       	std	Y+26, r24	; 0x1a
    2432:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2434:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <main+0x182>
    243a:	9b 8f       	std	Y+27, r25	; 0x1b
    243c:	8a 8f       	std	Y+26, r24	; 0x1a
    243e:	0f c0       	rjmp	.+30     	; 0x245e <main+0x1aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2440:	69 a5       	ldd	r22, Y+41	; 0x29
    2442:	7a a5       	ldd	r23, Y+42	; 0x2a
    2444:	8b a5       	ldd	r24, Y+43	; 0x2b
    2446:	9c a5       	ldd	r25, Y+44	; 0x2c
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	88 a7       	std	Y+40, r24	; 0x28
    2452:	88 a5       	ldd	r24, Y+40	; 0x28
    2454:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2456:	89 8d       	ldd	r24, Y+25	; 0x19
    2458:	8a 95       	dec	r24
    245a:	f1 f7       	brne	.-4      	; 0x2458 <main+0x1a4>
    245c:	89 8f       	std	Y+25, r24	; 0x19
  _delay_us(2);

  LCD_voidInit();
    245e:	0e 94 c1 09 	call	0x1382	; 0x1382 <LCD_voidInit>
  //DDRD = 0b11111011;
  DIO_voidSetPinDir(PORT_D,PIN_0,OUTPUT);
    2462:	83 e0       	ldi	r24, 0x03	; 3
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	41 e0       	ldi	r20, 0x01	; 1
    2468:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>
  DIO_voidSetPinDir(PORT_D,PIN_2,INPUT);
    246c:	83 e0       	ldi	r24, 0x03	; 3
    246e:	62 e0       	ldi	r22, 0x02	; 2
    2470:	40 e0       	ldi	r20, 0x00	; 0
    2472:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDir>
  //_delay_ms(50);

  GICR |= 1<<INT0;
    2476:	ab e5       	ldi	r26, 0x5B	; 91
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	eb e5       	ldi	r30, 0x5B	; 91
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	80 64       	ori	r24, 0x40	; 64
    2482:	8c 93       	st	X, r24
  MCUCR |= 1<<ISC00;
    2484:	a5 e5       	ldi	r26, 0x55	; 85
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e5 e5       	ldi	r30, 0x55	; 85
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	81 60       	ori	r24, 0x01	; 1
    2490:	8c 93       	st	X, r24

 SET_BIT(SREG,7);           // sei();
    2492:	af e5       	ldi	r26, 0x5F	; 95
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	ef e5       	ldi	r30, 0x5F	; 95
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	80 68       	ori	r24, 0x80	; 128
    249e:	8c 93       	st	X, r24

  while(1)
  {
    PORTD |= 1<<PIND0; //trigger
    24a0:	a2 e3       	ldi	r26, 0x32	; 50
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e2 e3       	ldi	r30, 0x32	; 50
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	81 60       	ori	r24, 0x01	; 1
    24ac:	8c 93       	st	X, r24
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a0 e2       	ldi	r26, 0x20	; 32
    24b4:	b1 e4       	ldi	r27, 0x41	; 65
    24b6:	8d 8b       	std	Y+21, r24	; 0x15
    24b8:	9e 8b       	std	Y+22, r25	; 0x16
    24ba:	af 8b       	std	Y+23, r26	; 0x17
    24bc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24be:	6d 89       	ldd	r22, Y+21	; 0x15
    24c0:	7e 89       	ldd	r23, Y+22	; 0x16
    24c2:	8f 89       	ldd	r24, Y+23	; 0x17
    24c4:	98 8d       	ldd	r25, Y+24	; 0x18
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	50 e4       	ldi	r21, 0x40	; 64
    24ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	89 8b       	std	Y+17, r24	; 0x11
    24d8:	9a 8b       	std	Y+18, r25	; 0x12
    24da:	ab 8b       	std	Y+19, r26	; 0x13
    24dc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24de:	69 89       	ldd	r22, Y+17	; 0x11
    24e0:	7a 89       	ldd	r23, Y+18	; 0x12
    24e2:	8b 89       	ldd	r24, Y+19	; 0x13
    24e4:	9c 89       	ldd	r25, Y+20	; 0x14
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e8       	ldi	r20, 0x80	; 128
    24ec:	5f e3       	ldi	r21, 0x3F	; 63
    24ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f2:	88 23       	and	r24, r24
    24f4:	1c f4       	brge	.+6      	; 0x24fc <main+0x248>
		__ticks = 1;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	88 8b       	std	Y+16, r24	; 0x10
    24fa:	91 c0       	rjmp	.+290    	; 0x261e <main+0x36a>
	else if (__tmp > 255)
    24fc:	69 89       	ldd	r22, Y+17	; 0x11
    24fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2500:	8b 89       	ldd	r24, Y+19	; 0x13
    2502:	9c 89       	ldd	r25, Y+20	; 0x14
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	53 e4       	ldi	r21, 0x43	; 67
    250c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2510:	18 16       	cp	r1, r24
    2512:	0c f0       	brlt	.+2      	; 0x2516 <main+0x262>
    2514:	7b c0       	rjmp	.+246    	; 0x260c <main+0x358>
	{
		_delay_ms(__us / 1000.0);
    2516:	6d 89       	ldd	r22, Y+21	; 0x15
    2518:	7e 89       	ldd	r23, Y+22	; 0x16
    251a:	8f 89       	ldd	r24, Y+23	; 0x17
    251c:	98 8d       	ldd	r25, Y+24	; 0x18
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	4a e7       	ldi	r20, 0x7A	; 122
    2524:	54 e4       	ldi	r21, 0x44	; 68
    2526:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	8c 87       	std	Y+12, r24	; 0x0c
    2530:	9d 87       	std	Y+13, r25	; 0x0d
    2532:	ae 87       	std	Y+14, r26	; 0x0e
    2534:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2536:	6c 85       	ldd	r22, Y+12	; 0x0c
    2538:	7d 85       	ldd	r23, Y+13	; 0x0d
    253a:	8e 85       	ldd	r24, Y+14	; 0x0e
    253c:	9f 85       	ldd	r25, Y+15	; 0x0f
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e8       	ldi	r19, 0x80	; 128
    2542:	4b e3       	ldi	r20, 0x3B	; 59
    2544:	55 e4       	ldi	r21, 0x45	; 69
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	88 87       	std	Y+8, r24	; 0x08
    2550:	99 87       	std	Y+9, r25	; 0x09
    2552:	aa 87       	std	Y+10, r26	; 0x0a
    2554:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2556:	68 85       	ldd	r22, Y+8	; 0x08
    2558:	79 85       	ldd	r23, Y+9	; 0x09
    255a:	8a 85       	ldd	r24, Y+10	; 0x0a
    255c:	9b 85       	ldd	r25, Y+11	; 0x0b
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e8       	ldi	r20, 0x80	; 128
    2564:	5f e3       	ldi	r21, 0x3F	; 63
    2566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    256a:	88 23       	and	r24, r24
    256c:	2c f4       	brge	.+10     	; 0x2578 <main+0x2c4>
		__ticks = 1;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9f 83       	std	Y+7, r25	; 0x07
    2574:	8e 83       	std	Y+6, r24	; 0x06
    2576:	3f c0       	rjmp	.+126    	; 0x25f6 <main+0x342>
	else if (__tmp > 65535)
    2578:	68 85       	ldd	r22, Y+8	; 0x08
    257a:	79 85       	ldd	r23, Y+9	; 0x09
    257c:	8a 85       	ldd	r24, Y+10	; 0x0a
    257e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	3f ef       	ldi	r19, 0xFF	; 255
    2584:	4f e7       	ldi	r20, 0x7F	; 127
    2586:	57 e4       	ldi	r21, 0x47	; 71
    2588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258c:	18 16       	cp	r1, r24
    258e:	4c f5       	brge	.+82     	; 0x25e2 <main+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2590:	6c 85       	ldd	r22, Y+12	; 0x0c
    2592:	7d 85       	ldd	r23, Y+13	; 0x0d
    2594:	8e 85       	ldd	r24, Y+14	; 0x0e
    2596:	9f 85       	ldd	r25, Y+15	; 0x0f
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e2       	ldi	r20, 0x20	; 32
    259e:	51 e4       	ldi	r21, 0x41	; 65
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9f 83       	std	Y+7, r25	; 0x07
    25b6:	8e 83       	std	Y+6, r24	; 0x06
    25b8:	0f c0       	rjmp	.+30     	; 0x25d8 <main+0x324>
    25ba:	8c e2       	ldi	r24, 0x2C	; 44
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	9d 83       	std	Y+5, r25	; 0x05
    25c0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	9d 81       	ldd	r25, Y+5	; 0x05
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <main+0x312>
    25ca:	9d 83       	std	Y+5, r25	; 0x05
    25cc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ce:	8e 81       	ldd	r24, Y+6	; 0x06
    25d0:	9f 81       	ldd	r25, Y+7	; 0x07
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	9f 83       	std	Y+7, r25	; 0x07
    25d6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d8:	8e 81       	ldd	r24, Y+6	; 0x06
    25da:	9f 81       	ldd	r25, Y+7	; 0x07
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	69 f7       	brne	.-38     	; 0x25ba <main+0x306>
    25e0:	24 c0       	rjmp	.+72     	; 0x262a <main+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e2:	68 85       	ldd	r22, Y+8	; 0x08
    25e4:	79 85       	ldd	r23, Y+9	; 0x09
    25e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	9f 83       	std	Y+7, r25	; 0x07
    25f4:	8e 83       	std	Y+6, r24	; 0x06
    25f6:	8e 81       	ldd	r24, Y+6	; 0x06
    25f8:	9f 81       	ldd	r25, Y+7	; 0x07
    25fa:	9b 83       	std	Y+3, r25	; 0x03
    25fc:	8a 83       	std	Y+2, r24	; 0x02
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	9b 81       	ldd	r25, Y+3	; 0x03
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <main+0x34e>
    2606:	9b 83       	std	Y+3, r25	; 0x03
    2608:	8a 83       	std	Y+2, r24	; 0x02
    260a:	0f c0       	rjmp	.+30     	; 0x262a <main+0x376>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    260c:	69 89       	ldd	r22, Y+17	; 0x11
    260e:	7a 89       	ldd	r23, Y+18	; 0x12
    2610:	8b 89       	ldd	r24, Y+19	; 0x13
    2612:	9c 89       	ldd	r25, Y+20	; 0x14
    2614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	88 8b       	std	Y+16, r24	; 0x10
    261e:	88 89       	ldd	r24, Y+16	; 0x10
    2620:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	8a 95       	dec	r24
    2626:	f1 f7       	brne	.-4      	; 0x2624 <main+0x370>
    2628:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    PORTD &= ~(1<<PIND0);
    262a:	a2 e3       	ldi	r26, 0x32	; 50
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e2 e3       	ldi	r30, 0x32	; 50
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	8e 7f       	andi	r24, 0xFE	; 254
    2636:	8c 93       	st	X, r24

    distance = (duration*0.34300)/2;  //distance (count_a = pulse/58;) (cm*us))
    2638:	80 91 7e 01 	lds	r24, 0x017E
    263c:	90 91 7f 01 	lds	r25, 0x017F
    2640:	aa 27       	eor	r26, r26
    2642:	97 fd       	sbrc	r25, 7
    2644:	a0 95       	com	r26
    2646:	ba 2f       	mov	r27, r26
    2648:	bc 01       	movw	r22, r24
    264a:	cd 01       	movw	r24, r26
    264c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	22 eb       	ldi	r18, 0xB2	; 178
    265a:	3d e9       	ldi	r19, 0x9D	; 157
    265c:	4f ea       	ldi	r20, 0xAF	; 175
    265e:	5e e3       	ldi	r21, 0x3E	; 62
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	50 e4       	ldi	r21, 0x40	; 64
    2674:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	89 ab       	std	Y+49, r24	; 0x31
    LCD_voidSetCursor (0,0);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSetCursor>
    LCD_voidWriteString("DISTANCE:");// Send_A_String("Distance");
    2692:	80 e6       	ldi	r24, 0x60	; 96
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <LCD_voidWriteString>

   LCD_voidwriteNumber(distance,1,2);
    269a:	89 a9       	ldd	r24, Y+49	; 0x31
    269c:	88 2f       	mov	r24, r24
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	a0 e0       	ldi	r26, 0x00	; 0
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	41 e0       	ldi	r20, 0x01	; 1
    26aa:	22 e0       	ldi	r18, 0x02	; 2
    26ac:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_voidwriteNumber>

    LCD_voidSetCursor (1,12);
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	6c e0       	ldi	r22, 0x0C	; 12
    26b4:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <LCD_voidSetCursor>
    LCD_voidWriteString("cm");
    26b8:	8a e6       	ldi	r24, 0x6A	; 106
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <LCD_voidWriteString>

    if(distance>5)
    26c0:	89 a9       	ldd	r24, Y+49	; 0x31
    26c2:	86 30       	cpi	r24, 0x06	; 6
    26c4:	30 f0       	brcs	.+12     	; 0x26d2 <main+0x41e>
   	    {
   	    	DIO_voidSetPinValue(PORT_B,PIN_0,HIGH);
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
    26d0:	e7 ce       	rjmp	.-562    	; 0x24a0 <main+0x1ec>
   	    }
   	    else
   	    {
   	    	DIO_voidSetPinValue(PORT_B,PIN_0,LOW);
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_voidSetPinValue>
    26dc:	e1 ce       	rjmp	.-574    	; 0x24a0 <main+0x1ec>

000026de <__vector_1>:

  }
}

ISR(INT0_vect)
{
    26de:	1f 92       	push	r1
    26e0:	0f 92       	push	r0
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	0f 92       	push	r0
    26e6:	11 24       	eor	r1, r1
    26e8:	8f 93       	push	r24
    26ea:	9f 93       	push	r25
    26ec:	af 93       	push	r26
    26ee:	bf 93       	push	r27
    26f0:	ef 93       	push	r30
    26f2:	ff 93       	push	r31
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
  if(i == 1)
    26fc:	80 91 80 01 	lds	r24, 0x0180
    2700:	90 91 81 01 	lds	r25, 0x0181
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	91 05       	cpc	r25, r1
    2708:	99 f4       	brne	.+38     	; 0x2730 <__vector_1+0x52>
  {
    TCCR1B = 0;
    270a:	ee e4       	ldi	r30, 0x4E	; 78
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	10 82       	st	Z, r1
    duration = TCNT1;
    2710:	ec e4       	ldi	r30, 0x4C	; 76
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	90 93 7f 01 	sts	0x017F, r25
    271c:	80 93 7e 01 	sts	0x017E, r24
    TCNT1 = 0;
    2720:	ec e4       	ldi	r30, 0x4C	; 76
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	11 82       	std	Z+1, r1	; 0x01
    2726:	10 82       	st	Z, r1
    i = 0;
    2728:	10 92 81 01 	sts	0x0181, r1
    272c:	10 92 80 01 	sts	0x0180, r1
  }

  if(i==0)
    2730:	80 91 80 01 	lds	r24, 0x0180
    2734:	90 91 81 01 	lds	r25, 0x0181
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	69 f4       	brne	.+26     	; 0x2756 <__vector_1+0x78>
  {
    TCCR1B |= 1<<CS10;
    273c:	ae e4       	ldi	r26, 0x4E	; 78
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	ee e4       	ldi	r30, 0x4E	; 78
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	81 60       	ori	r24, 0x01	; 1
    2748:	8c 93       	st	X, r24
    i = 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	90 93 81 01 	sts	0x0181, r25
    2752:	80 93 80 01 	sts	0x0180, r24
  }
}
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	ff 91       	pop	r31
    275c:	ef 91       	pop	r30
    275e:	bf 91       	pop	r27
    2760:	af 91       	pop	r26
    2762:	9f 91       	pop	r25
    2764:	8f 91       	pop	r24
    2766:	0f 90       	pop	r0
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	0f 90       	pop	r0
    276c:	1f 90       	pop	r1
    276e:	18 95       	reti

00002770 <__udivmodsi4>:
    2770:	a1 e2       	ldi	r26, 0x21	; 33
    2772:	1a 2e       	mov	r1, r26
    2774:	aa 1b       	sub	r26, r26
    2776:	bb 1b       	sub	r27, r27
    2778:	fd 01       	movw	r30, r26
    277a:	0d c0       	rjmp	.+26     	; 0x2796 <__udivmodsi4_ep>

0000277c <__udivmodsi4_loop>:
    277c:	aa 1f       	adc	r26, r26
    277e:	bb 1f       	adc	r27, r27
    2780:	ee 1f       	adc	r30, r30
    2782:	ff 1f       	adc	r31, r31
    2784:	a2 17       	cp	r26, r18
    2786:	b3 07       	cpc	r27, r19
    2788:	e4 07       	cpc	r30, r20
    278a:	f5 07       	cpc	r31, r21
    278c:	20 f0       	brcs	.+8      	; 0x2796 <__udivmodsi4_ep>
    278e:	a2 1b       	sub	r26, r18
    2790:	b3 0b       	sbc	r27, r19
    2792:	e4 0b       	sbc	r30, r20
    2794:	f5 0b       	sbc	r31, r21

00002796 <__udivmodsi4_ep>:
    2796:	66 1f       	adc	r22, r22
    2798:	77 1f       	adc	r23, r23
    279a:	88 1f       	adc	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	1a 94       	dec	r1
    27a0:	69 f7       	brne	.-38     	; 0x277c <__udivmodsi4_loop>
    27a2:	60 95       	com	r22
    27a4:	70 95       	com	r23
    27a6:	80 95       	com	r24
    27a8:	90 95       	com	r25
    27aa:	9b 01       	movw	r18, r22
    27ac:	ac 01       	movw	r20, r24
    27ae:	bd 01       	movw	r22, r26
    27b0:	cf 01       	movw	r24, r30
    27b2:	08 95       	ret

000027b4 <__prologue_saves__>:
    27b4:	2f 92       	push	r2
    27b6:	3f 92       	push	r3
    27b8:	4f 92       	push	r4
    27ba:	5f 92       	push	r5
    27bc:	6f 92       	push	r6
    27be:	7f 92       	push	r7
    27c0:	8f 92       	push	r8
    27c2:	9f 92       	push	r9
    27c4:	af 92       	push	r10
    27c6:	bf 92       	push	r11
    27c8:	cf 92       	push	r12
    27ca:	df 92       	push	r13
    27cc:	ef 92       	push	r14
    27ce:	ff 92       	push	r15
    27d0:	0f 93       	push	r16
    27d2:	1f 93       	push	r17
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	ca 1b       	sub	r28, r26
    27de:	db 0b       	sbc	r29, r27
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	f8 94       	cli
    27e4:	de bf       	out	0x3e, r29	; 62
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	cd bf       	out	0x3d, r28	; 61
    27ea:	09 94       	ijmp

000027ec <__epilogue_restores__>:
    27ec:	2a 88       	ldd	r2, Y+18	; 0x12
    27ee:	39 88       	ldd	r3, Y+17	; 0x11
    27f0:	48 88       	ldd	r4, Y+16	; 0x10
    27f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    27f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    27f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    27f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    27fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    27fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    27fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2800:	c8 84       	ldd	r12, Y+8	; 0x08
    2802:	df 80       	ldd	r13, Y+7	; 0x07
    2804:	ee 80       	ldd	r14, Y+6	; 0x06
    2806:	fd 80       	ldd	r15, Y+5	; 0x05
    2808:	0c 81       	ldd	r16, Y+4	; 0x04
    280a:	1b 81       	ldd	r17, Y+3	; 0x03
    280c:	aa 81       	ldd	r26, Y+2	; 0x02
    280e:	b9 81       	ldd	r27, Y+1	; 0x01
    2810:	ce 0f       	add	r28, r30
    2812:	d1 1d       	adc	r29, r1
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	ed 01       	movw	r28, r26
    2820:	08 95       	ret

00002822 <_exit>:
    2822:	f8 94       	cli

00002824 <__stop_program>:
    2824:	ff cf       	rjmp	.-2      	; 0x2824 <__stop_program>
