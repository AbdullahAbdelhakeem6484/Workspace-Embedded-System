
RTOS_TO_DAY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003068  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00003068  000030fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000307  00800074  00800074  00003110  2**0
                  ALLOC
  3 .stab         000047e8  00000000  00000000  00003110  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c7f  00000000  00000000  000078f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 08 	call	0x1024	; 0x1024 <main>
      8a:	0c 94 32 18 	jmp	0x3064	; 0x3064 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDir>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <DIO_voidSetPinDir+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <DIO_voidSetPinDir+0x8>
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	89 83       	std	Y+1, r24	; 0x01
      a2:	6a 83       	std	Y+2, r22	; 0x02
      a4:	4b 83       	std	Y+3, r20	; 0x03
      a6:	89 81       	ldd	r24, Y+1	; 0x01
      a8:	28 2f       	mov	r18, r24
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	3d 83       	std	Y+5, r19	; 0x05
      ae:	2c 83       	std	Y+4, r18	; 0x04
      b0:	8c 81       	ldd	r24, Y+4	; 0x04
      b2:	9d 81       	ldd	r25, Y+5	; 0x05
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	91 05       	cpc	r25, r1
      b8:	09 f4       	brne	.+2      	; 0xbc <DIO_voidSetPinDir+0x2a>
      ba:	43 c0       	rjmp	.+134    	; 0x142 <DIO_voidSetPinDir+0xb0>
      bc:	2c 81       	ldd	r18, Y+4	; 0x04
      be:	3d 81       	ldd	r19, Y+5	; 0x05
      c0:	22 30       	cpi	r18, 0x02	; 2
      c2:	31 05       	cpc	r19, r1
      c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_voidSetPinDir+0x3e>
      c6:	8c 81       	ldd	r24, Y+4	; 0x04
      c8:	9d 81       	ldd	r25, Y+5	; 0x05
      ca:	00 97       	sbiw	r24, 0x00	; 0
      cc:	71 f0       	breq	.+28     	; 0xea <DIO_voidSetPinDir+0x58>
      ce:	bc c0       	rjmp	.+376    	; 0x248 <DIO_voidSetPinDir+0x1b6>
      d0:	2c 81       	ldd	r18, Y+4	; 0x04
      d2:	3d 81       	ldd	r19, Y+5	; 0x05
      d4:	22 30       	cpi	r18, 0x02	; 2
      d6:	31 05       	cpc	r19, r1
      d8:	09 f4       	brne	.+2      	; 0xdc <DIO_voidSetPinDir+0x4a>
      da:	5f c0       	rjmp	.+190    	; 0x19a <DIO_voidSetPinDir+0x108>
      dc:	8c 81       	ldd	r24, Y+4	; 0x04
      de:	9d 81       	ldd	r25, Y+5	; 0x05
      e0:	83 30       	cpi	r24, 0x03	; 3
      e2:	91 05       	cpc	r25, r1
      e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_voidSetPinDir+0x56>
      e6:	85 c0       	rjmp	.+266    	; 0x1f2 <DIO_voidSetPinDir+0x160>
      e8:	af c0       	rjmp	.+350    	; 0x248 <DIO_voidSetPinDir+0x1b6>
      ea:	8b 81       	ldd	r24, Y+3	; 0x03
      ec:	88 23       	and	r24, r24
      ee:	a9 f4       	brne	.+42     	; 0x11a <DIO_voidSetPinDir+0x88>
      f0:	aa e3       	ldi	r26, 0x3A	; 58
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	ea e3       	ldi	r30, 0x3A	; 58
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 81       	ld	r24, Z
      fa:	48 2f       	mov	r20, r24
      fc:	8a 81       	ldd	r24, Y+2	; 0x02
      fe:	28 2f       	mov	r18, r24
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	02 2e       	mov	r0, r18
     108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_voidSetPinDir+0x7c>
     10a:	88 0f       	add	r24, r24
     10c:	99 1f       	adc	r25, r25
     10e:	0a 94       	dec	r0
     110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_voidSetPinDir+0x78>
     112:	80 95       	com	r24
     114:	84 23       	and	r24, r20
     116:	8c 93       	st	X, r24
     118:	97 c0       	rjmp	.+302    	; 0x248 <DIO_voidSetPinDir+0x1b6>
     11a:	aa e3       	ldi	r26, 0x3A	; 58
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	ea e3       	ldi	r30, 0x3A	; 58
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	48 2f       	mov	r20, r24
     126:	8a 81       	ldd	r24, Y+2	; 0x02
     128:	28 2f       	mov	r18, r24
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 2e       	mov	r0, r18
     132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_voidSetPinDir+0xa6>
     134:	88 0f       	add	r24, r24
     136:	99 1f       	adc	r25, r25
     138:	0a 94       	dec	r0
     13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_voidSetPinDir+0xa2>
     13c:	84 2b       	or	r24, r20
     13e:	8c 93       	st	X, r24
     140:	83 c0       	rjmp	.+262    	; 0x248 <DIO_voidSetPinDir+0x1b6>
     142:	8b 81       	ldd	r24, Y+3	; 0x03
     144:	88 23       	and	r24, r24
     146:	a9 f4       	brne	.+42     	; 0x172 <DIO_voidSetPinDir+0xe0>
     148:	a7 e3       	ldi	r26, 0x37	; 55
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	e7 e3       	ldi	r30, 0x37	; 55
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	48 2f       	mov	r20, r24
     154:	8a 81       	ldd	r24, Y+2	; 0x02
     156:	28 2f       	mov	r18, r24
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	02 2e       	mov	r0, r18
     160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_voidSetPinDir+0xd4>
     162:	88 0f       	add	r24, r24
     164:	99 1f       	adc	r25, r25
     166:	0a 94       	dec	r0
     168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_voidSetPinDir+0xd0>
     16a:	80 95       	com	r24
     16c:	84 23       	and	r24, r20
     16e:	8c 93       	st	X, r24
     170:	6b c0       	rjmp	.+214    	; 0x248 <DIO_voidSetPinDir+0x1b6>
     172:	a7 e3       	ldi	r26, 0x37	; 55
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	e7 e3       	ldi	r30, 0x37	; 55
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	48 2f       	mov	r20, r24
     17e:	8a 81       	ldd	r24, Y+2	; 0x02
     180:	28 2f       	mov	r18, r24
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	02 2e       	mov	r0, r18
     18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_voidSetPinDir+0xfe>
     18c:	88 0f       	add	r24, r24
     18e:	99 1f       	adc	r25, r25
     190:	0a 94       	dec	r0
     192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_voidSetPinDir+0xfa>
     194:	84 2b       	or	r24, r20
     196:	8c 93       	st	X, r24
     198:	57 c0       	rjmp	.+174    	; 0x248 <DIO_voidSetPinDir+0x1b6>
     19a:	8b 81       	ldd	r24, Y+3	; 0x03
     19c:	88 23       	and	r24, r24
     19e:	a9 f4       	brne	.+42     	; 0x1ca <DIO_voidSetPinDir+0x138>
     1a0:	a4 e3       	ldi	r26, 0x34	; 52
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e4 e3       	ldi	r30, 0x34	; 52
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	48 2f       	mov	r20, r24
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	28 2f       	mov	r18, r24
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	02 2e       	mov	r0, r18
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_voidSetPinDir+0x12c>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	0a 94       	dec	r0
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_voidSetPinDir+0x128>
     1c2:	80 95       	com	r24
     1c4:	84 23       	and	r24, r20
     1c6:	8c 93       	st	X, r24
     1c8:	3f c0       	rjmp	.+126    	; 0x248 <DIO_voidSetPinDir+0x1b6>
     1ca:	a4 e3       	ldi	r26, 0x34	; 52
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	e4 e3       	ldi	r30, 0x34	; 52
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	48 2f       	mov	r20, r24
     1d6:	8a 81       	ldd	r24, Y+2	; 0x02
     1d8:	28 2f       	mov	r18, r24
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	02 2e       	mov	r0, r18
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_voidSetPinDir+0x156>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	0a 94       	dec	r0
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_voidSetPinDir+0x152>
     1ec:	84 2b       	or	r24, r20
     1ee:	8c 93       	st	X, r24
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <DIO_voidSetPinDir+0x1b6>
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	88 23       	and	r24, r24
     1f6:	a9 f4       	brne	.+42     	; 0x222 <DIO_voidSetPinDir+0x190>
     1f8:	a1 e3       	ldi	r26, 0x31	; 49
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e1 e3       	ldi	r30, 0x31	; 49
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	48 2f       	mov	r20, r24
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	28 2f       	mov	r18, r24
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	02 2e       	mov	r0, r18
     210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPinDir+0x184>
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	0a 94       	dec	r0
     218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPinDir+0x180>
     21a:	80 95       	com	r24
     21c:	84 23       	and	r24, r20
     21e:	8c 93       	st	X, r24
     220:	13 c0       	rjmp	.+38     	; 0x248 <DIO_voidSetPinDir+0x1b6>
     222:	a1 e3       	ldi	r26, 0x31	; 49
     224:	b0 e0       	ldi	r27, 0x00	; 0
     226:	e1 e3       	ldi	r30, 0x31	; 49
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	48 2f       	mov	r20, r24
     22e:	8a 81       	ldd	r24, Y+2	; 0x02
     230:	28 2f       	mov	r18, r24
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	02 2e       	mov	r0, r18
     23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_voidSetPinDir+0x1ae>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	0a 94       	dec	r0
     242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_voidSetPinDir+0x1aa>
     244:	84 2b       	or	r24, r20
     246:	8c 93       	st	X, r24
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	cf 91       	pop	r28
     254:	df 91       	pop	r29
     256:	08 95       	ret

00000258 <DIO_voidSetPinValue>:
}


}
void DIO_voidSetPinValue(u8 Port,u8 Pin,u8 Value)
{
     258:	df 93       	push	r29
     25a:	cf 93       	push	r28
     25c:	00 d0       	rcall	.+0      	; 0x25e <DIO_voidSetPinValue+0x6>
     25e:	00 d0       	rcall	.+0      	; 0x260 <DIO_voidSetPinValue+0x8>
     260:	0f 92       	push	r0
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	89 83       	std	Y+1, r24	; 0x01
     268:	6a 83       	std	Y+2, r22	; 0x02
     26a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	28 2f       	mov	r18, r24
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	3d 83       	std	Y+5, r19	; 0x05
     274:	2c 83       	std	Y+4, r18	; 0x04
     276:	8c 81       	ldd	r24, Y+4	; 0x04
     278:	9d 81       	ldd	r25, Y+5	; 0x05
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	91 05       	cpc	r25, r1
     27e:	09 f4       	brne	.+2      	; 0x282 <DIO_voidSetPinValue+0x2a>
     280:	43 c0       	rjmp	.+134    	; 0x308 <DIO_voidSetPinValue+0xb0>
     282:	2c 81       	ldd	r18, Y+4	; 0x04
     284:	3d 81       	ldd	r19, Y+5	; 0x05
     286:	22 30       	cpi	r18, 0x02	; 2
     288:	31 05       	cpc	r19, r1
     28a:	2c f4       	brge	.+10     	; 0x296 <DIO_voidSetPinValue+0x3e>
     28c:	8c 81       	ldd	r24, Y+4	; 0x04
     28e:	9d 81       	ldd	r25, Y+5	; 0x05
     290:	00 97       	sbiw	r24, 0x00	; 0
     292:	71 f0       	breq	.+28     	; 0x2b0 <DIO_voidSetPinValue+0x58>
     294:	bc c0       	rjmp	.+376    	; 0x40e <DIO_voidSetPinValue+0x1b6>
     296:	2c 81       	ldd	r18, Y+4	; 0x04
     298:	3d 81       	ldd	r19, Y+5	; 0x05
     29a:	22 30       	cpi	r18, 0x02	; 2
     29c:	31 05       	cpc	r19, r1
     29e:	09 f4       	brne	.+2      	; 0x2a2 <DIO_voidSetPinValue+0x4a>
     2a0:	5f c0       	rjmp	.+190    	; 0x360 <DIO_voidSetPinValue+0x108>
     2a2:	8c 81       	ldd	r24, Y+4	; 0x04
     2a4:	9d 81       	ldd	r25, Y+5	; 0x05
     2a6:	83 30       	cpi	r24, 0x03	; 3
     2a8:	91 05       	cpc	r25, r1
     2aa:	09 f4       	brne	.+2      	; 0x2ae <DIO_voidSetPinValue+0x56>
     2ac:	85 c0       	rjmp	.+266    	; 0x3b8 <DIO_voidSetPinValue+0x160>
     2ae:	af c0       	rjmp	.+350    	; 0x40e <DIO_voidSetPinValue+0x1b6>
	{
		case 0:
			if(Value==0)
     2b0:	8b 81       	ldd	r24, Y+3	; 0x03
     2b2:	88 23       	and	r24, r24
     2b4:	a9 f4       	brne	.+42     	; 0x2e0 <DIO_voidSetPinValue+0x88>
					{
						CLEAR_BIT(PORTA,Pin);
     2b6:	ab e3       	ldi	r26, 0x3B	; 59
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	eb e3       	ldi	r30, 0x3B	; 59
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	48 2f       	mov	r20, r24
     2c2:	8a 81       	ldd	r24, Y+2	; 0x02
     2c4:	28 2f       	mov	r18, r24
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	02 2e       	mov	r0, r18
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_voidSetPinValue+0x7c>
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	0a 94       	dec	r0
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_voidSetPinValue+0x78>
     2d8:	80 95       	com	r24
     2da:	84 23       	and	r24, r20
     2dc:	8c 93       	st	X, r24
     2de:	97 c0       	rjmp	.+302    	; 0x40e <DIO_voidSetPinValue+0x1b6>

					}
					else
					{
						SET_BIT(PORTA,Pin);
     2e0:	ab e3       	ldi	r26, 0x3B	; 59
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	eb e3       	ldi	r30, 0x3B	; 59
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	48 2f       	mov	r20, r24
     2ec:	8a 81       	ldd	r24, Y+2	; 0x02
     2ee:	28 2f       	mov	r18, r24
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	02 2e       	mov	r0, r18
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_voidSetPinValue+0xa6>
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	0a 94       	dec	r0
     300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_voidSetPinValue+0xa2>
     302:	84 2b       	or	r24, r20
     304:	8c 93       	st	X, r24
     306:	83 c0       	rjmp	.+262    	; 0x40e <DIO_voidSetPinValue+0x1b6>
					}


			break;
		case 1:
			if(Value==0)
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	88 23       	and	r24, r24
     30c:	a9 f4       	brne	.+42     	; 0x338 <DIO_voidSetPinValue+0xe0>
				{
				CLEAR_BIT(PORTB,Pin);
     30e:	a8 e3       	ldi	r26, 0x38	; 56
     310:	b0 e0       	ldi	r27, 0x00	; 0
     312:	e8 e3       	ldi	r30, 0x38	; 56
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	80 81       	ld	r24, Z
     318:	48 2f       	mov	r20, r24
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	28 2f       	mov	r18, r24
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	02 2e       	mov	r0, r18
     326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinValue+0xd4>
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	0a 94       	dec	r0
     32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinValue+0xd0>
     330:	80 95       	com	r24
     332:	84 23       	and	r24, r20
     334:	8c 93       	st	X, r24
     336:	6b c0       	rjmp	.+214    	; 0x40e <DIO_voidSetPinValue+0x1b6>

				}
				else
				{
				SET_BIT(PORTB,Pin);
     338:	a8 e3       	ldi	r26, 0x38	; 56
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	e8 e3       	ldi	r30, 0x38	; 56
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	80 81       	ld	r24, Z
     342:	48 2f       	mov	r20, r24
     344:	8a 81       	ldd	r24, Y+2	; 0x02
     346:	28 2f       	mov	r18, r24
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	02 2e       	mov	r0, r18
     350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_voidSetPinValue+0xfe>
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	0a 94       	dec	r0
     358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_voidSetPinValue+0xfa>
     35a:	84 2b       	or	r24, r20
     35c:	8c 93       	st	X, r24
     35e:	57 c0       	rjmp	.+174    	; 0x40e <DIO_voidSetPinValue+0x1b6>
				}

			break;
		case 2:
			if(Value==0)
     360:	8b 81       	ldd	r24, Y+3	; 0x03
     362:	88 23       	and	r24, r24
     364:	a9 f4       	brne	.+42     	; 0x390 <DIO_voidSetPinValue+0x138>
				{
				CLEAR_BIT(PORTC,Pin);
     366:	a5 e3       	ldi	r26, 0x35	; 53
     368:	b0 e0       	ldi	r27, 0x00	; 0
     36a:	e5 e3       	ldi	r30, 0x35	; 53
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	48 2f       	mov	r20, r24
     372:	8a 81       	ldd	r24, Y+2	; 0x02
     374:	28 2f       	mov	r18, r24
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	02 2e       	mov	r0, r18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_voidSetPinValue+0x12c>
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	0a 94       	dec	r0
     386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_voidSetPinValue+0x128>
     388:	80 95       	com	r24
     38a:	84 23       	and	r24, r20
     38c:	8c 93       	st	X, r24
     38e:	3f c0       	rjmp	.+126    	; 0x40e <DIO_voidSetPinValue+0x1b6>

				}
				else
				{
					SET_BIT(PORTC,Pin);
     390:	a5 e3       	ldi	r26, 0x35	; 53
     392:	b0 e0       	ldi	r27, 0x00	; 0
     394:	e5 e3       	ldi	r30, 0x35	; 53
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	48 2f       	mov	r20, r24
     39c:	8a 81       	ldd	r24, Y+2	; 0x02
     39e:	28 2f       	mov	r18, r24
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	02 2e       	mov	r0, r18
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_voidSetPinValue+0x156>
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	0a 94       	dec	r0
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_voidSetPinValue+0x152>
     3b2:	84 2b       	or	r24, r20
     3b4:	8c 93       	st	X, r24
     3b6:	2b c0       	rjmp	.+86     	; 0x40e <DIO_voidSetPinValue+0x1b6>
				}
			break;

		case 3:
			if(Value==0)
     3b8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ba:	88 23       	and	r24, r24
     3bc:	a9 f4       	brne	.+42     	; 0x3e8 <DIO_voidSetPinValue+0x190>
					{
					CLEAR_BIT(PORTD,Pin);
     3be:	a2 e3       	ldi	r26, 0x32	; 50
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	e2 e3       	ldi	r30, 0x32	; 50
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	48 2f       	mov	r20, r24
     3ca:	8a 81       	ldd	r24, Y+2	; 0x02
     3cc:	28 2f       	mov	r18, r24
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	02 2e       	mov	r0, r18
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_voidSetPinValue+0x184>
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	0a 94       	dec	r0
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_voidSetPinValue+0x180>
     3e0:	80 95       	com	r24
     3e2:	84 23       	and	r24, r20
     3e4:	8c 93       	st	X, r24
     3e6:	13 c0       	rjmp	.+38     	; 0x40e <DIO_voidSetPinValue+0x1b6>

					}
					else
					{
						SET_BIT(PORTD,Pin);
     3e8:	a2 e3       	ldi	r26, 0x32	; 50
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	e2 e3       	ldi	r30, 0x32	; 50
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	48 2f       	mov	r20, r24
     3f4:	8a 81       	ldd	r24, Y+2	; 0x02
     3f6:	28 2f       	mov	r18, r24
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	02 2e       	mov	r0, r18
     400:	02 c0       	rjmp	.+4      	; 0x406 <DIO_voidSetPinValue+0x1ae>
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	0a 94       	dec	r0
     408:	e2 f7       	brpl	.-8      	; 0x402 <DIO_voidSetPinValue+0x1aa>
     40a:	84 2b       	or	r24, r20
     40c:	8c 93       	st	X, r24

			break;
	}


}
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	cf 91       	pop	r28
     41a:	df 91       	pop	r29
     41c:	08 95       	ret

0000041e <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue(u8 Port,u8 Pin)
{
     41e:	df 93       	push	r29
     420:	cf 93       	push	r28
     422:	00 d0       	rcall	.+0      	; 0x424 <DIO_voidTogglePinValue+0x6>
     424:	00 d0       	rcall	.+0      	; 0x426 <DIO_voidTogglePinValue+0x8>
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	28 2f       	mov	r18, r24
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	3c 83       	std	Y+4, r19	; 0x04
     436:	2b 83       	std	Y+3, r18	; 0x03
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	9c 81       	ldd	r25, Y+4	; 0x04
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	91 05       	cpc	r25, r1
     440:	49 f1       	breq	.+82     	; 0x494 <DIO_voidTogglePinValue+0x76>
     442:	2b 81       	ldd	r18, Y+3	; 0x03
     444:	3c 81       	ldd	r19, Y+4	; 0x04
     446:	22 30       	cpi	r18, 0x02	; 2
     448:	31 05       	cpc	r19, r1
     44a:	2c f4       	brge	.+10     	; 0x456 <DIO_voidTogglePinValue+0x38>
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	9c 81       	ldd	r25, Y+4	; 0x04
     450:	00 97       	sbiw	r24, 0x00	; 0
     452:	61 f0       	breq	.+24     	; 0x46c <DIO_voidTogglePinValue+0x4e>
     454:	5a c0       	rjmp	.+180    	; 0x50a <DIO_voidTogglePinValue+0xec>
     456:	2b 81       	ldd	r18, Y+3	; 0x03
     458:	3c 81       	ldd	r19, Y+4	; 0x04
     45a:	22 30       	cpi	r18, 0x02	; 2
     45c:	31 05       	cpc	r19, r1
     45e:	71 f1       	breq	.+92     	; 0x4bc <DIO_voidTogglePinValue+0x9e>
     460:	8b 81       	ldd	r24, Y+3	; 0x03
     462:	9c 81       	ldd	r25, Y+4	; 0x04
     464:	83 30       	cpi	r24, 0x03	; 3
     466:	91 05       	cpc	r25, r1
     468:	e9 f1       	breq	.+122    	; 0x4e4 <DIO_voidTogglePinValue+0xc6>
     46a:	4f c0       	rjmp	.+158    	; 0x50a <DIO_voidTogglePinValue+0xec>
	{
	case 0:
		TOGGLE_BIT(PORTA,Pin);
     46c:	ab e3       	ldi	r26, 0x3B	; 59
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	eb e3       	ldi	r30, 0x3B	; 59
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	48 2f       	mov	r20, r24
     478:	8a 81       	ldd	r24, Y+2	; 0x02
     47a:	28 2f       	mov	r18, r24
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	02 2e       	mov	r0, r18
     484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_voidTogglePinValue+0x6c>
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_voidTogglePinValue+0x68>
     48e:	84 27       	eor	r24, r20
     490:	8c 93       	st	X, r24
     492:	3b c0       	rjmp	.+118    	; 0x50a <DIO_voidTogglePinValue+0xec>

		break;
	case 1:
		TOGGLE_BIT(PORTB,Pin);
     494:	a8 e3       	ldi	r26, 0x38	; 56
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	e8 e3       	ldi	r30, 0x38	; 56
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	48 2f       	mov	r20, r24
     4a0:	8a 81       	ldd	r24, Y+2	; 0x02
     4a2:	28 2f       	mov	r18, r24
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	02 2e       	mov	r0, r18
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_voidTogglePinValue+0x94>
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	0a 94       	dec	r0
     4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_voidTogglePinValue+0x90>
     4b6:	84 27       	eor	r24, r20
     4b8:	8c 93       	st	X, r24
     4ba:	27 c0       	rjmp	.+78     	; 0x50a <DIO_voidTogglePinValue+0xec>

		break;
	case 2:
		TOGGLE_BIT(PORTC,Pin);
     4bc:	a5 e3       	ldi	r26, 0x35	; 53
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	e5 e3       	ldi	r30, 0x35	; 53
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	48 2f       	mov	r20, r24
     4c8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ca:	28 2f       	mov	r18, r24
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	02 2e       	mov	r0, r18
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_voidTogglePinValue+0xbc>
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	0a 94       	dec	r0
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_voidTogglePinValue+0xb8>
     4de:	84 27       	eor	r24, r20
     4e0:	8c 93       	st	X, r24
     4e2:	13 c0       	rjmp	.+38     	; 0x50a <DIO_voidTogglePinValue+0xec>

		break;

	case 3:
		TOGGLE_BIT(PORTD,Pin);
     4e4:	a2 e3       	ldi	r26, 0x32	; 50
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	e2 e3       	ldi	r30, 0x32	; 50
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	48 2f       	mov	r20, r24
     4f0:	8a 81       	ldd	r24, Y+2	; 0x02
     4f2:	28 2f       	mov	r18, r24
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	02 2e       	mov	r0, r18
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_voidTogglePinValue+0xe4>
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	0a 94       	dec	r0
     504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_voidTogglePinValue+0xe0>
     506:	84 27       	eor	r24, r20
     508:	8c 93       	st	X, r24

		break;

	}

}
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	08 95       	ret

00000518 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 PORT,u8 Pin)
{
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	00 d0       	rcall	.+0      	; 0x51e <DIO_u8GetPinValue+0x6>
     51e:	00 d0       	rcall	.+0      	; 0x520 <DIO_u8GetPinValue+0x8>
     520:	00 d0       	rcall	.+0      	; 0x522 <DIO_u8GetPinValue+0xa>
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	6a 83       	std	Y+2, r22	; 0x02
switch(PORT)
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	28 2f       	mov	r18, r24
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	3d 83       	std	Y+5, r19	; 0x05
     532:	2c 83       	std	Y+4, r18	; 0x04
     534:	4c 81       	ldd	r20, Y+4	; 0x04
     536:	5d 81       	ldd	r21, Y+5	; 0x05
     538:	41 30       	cpi	r20, 0x01	; 1
     53a:	51 05       	cpc	r21, r1
     53c:	49 f1       	breq	.+82     	; 0x590 <DIO_u8GetPinValue+0x78>
     53e:	8c 81       	ldd	r24, Y+4	; 0x04
     540:	9d 81       	ldd	r25, Y+5	; 0x05
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	91 05       	cpc	r25, r1
     546:	34 f4       	brge	.+12     	; 0x554 <DIO_u8GetPinValue+0x3c>
     548:	2c 81       	ldd	r18, Y+4	; 0x04
     54a:	3d 81       	ldd	r19, Y+5	; 0x05
     54c:	21 15       	cp	r18, r1
     54e:	31 05       	cpc	r19, r1
     550:	61 f0       	breq	.+24     	; 0x56a <DIO_u8GetPinValue+0x52>
     552:	57 c0       	rjmp	.+174    	; 0x602 <DIO_u8GetPinValue+0xea>
     554:	4c 81       	ldd	r20, Y+4	; 0x04
     556:	5d 81       	ldd	r21, Y+5	; 0x05
     558:	42 30       	cpi	r20, 0x02	; 2
     55a:	51 05       	cpc	r21, r1
     55c:	61 f1       	breq	.+88     	; 0x5b6 <DIO_u8GetPinValue+0x9e>
     55e:	8c 81       	ldd	r24, Y+4	; 0x04
     560:	9d 81       	ldd	r25, Y+5	; 0x05
     562:	83 30       	cpi	r24, 0x03	; 3
     564:	91 05       	cpc	r25, r1
     566:	d1 f1       	breq	.+116    	; 0x5dc <DIO_u8GetPinValue+0xc4>
     568:	4c c0       	rjmp	.+152    	; 0x602 <DIO_u8GetPinValue+0xea>
{
case 0:
	return  GET_BIT(PINA,Pin);
     56a:	e9 e3       	ldi	r30, 0x39	; 57
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	80 81       	ld	r24, Z
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	8a 81       	ldd	r24, Y+2	; 0x02
     576:	88 2f       	mov	r24, r24
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	a9 01       	movw	r20, r18
     57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_u8GetPinValue+0x6a>
     57e:	55 95       	asr	r21
     580:	47 95       	ror	r20
     582:	8a 95       	dec	r24
     584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_u8GetPinValue+0x66>
     586:	ca 01       	movw	r24, r20
     588:	58 2f       	mov	r21, r24
     58a:	51 70       	andi	r21, 0x01	; 1
     58c:	5b 83       	std	Y+3, r21	; 0x03
     58e:	3a c0       	rjmp	.+116    	; 0x604 <DIO_u8GetPinValue+0xec>

case 1:
	return GET_BIT(PINB,Pin);
     590:	e6 e3       	ldi	r30, 0x36	; 54
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	28 2f       	mov	r18, r24
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	88 2f       	mov	r24, r24
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	a9 01       	movw	r20, r18
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_u8GetPinValue+0x90>
     5a4:	55 95       	asr	r21
     5a6:	47 95       	ror	r20
     5a8:	8a 95       	dec	r24
     5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_u8GetPinValue+0x8c>
     5ac:	ca 01       	movw	r24, r20
     5ae:	58 2f       	mov	r21, r24
     5b0:	51 70       	andi	r21, 0x01	; 1
     5b2:	5b 83       	std	Y+3, r21	; 0x03
     5b4:	27 c0       	rjmp	.+78     	; 0x604 <DIO_u8GetPinValue+0xec>
case 2:
	return GET_BIT(PINC,Pin);
     5b6:	e3 e3       	ldi	r30, 0x33	; 51
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	28 2f       	mov	r18, r24
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	8a 81       	ldd	r24, Y+2	; 0x02
     5c2:	88 2f       	mov	r24, r24
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	a9 01       	movw	r20, r18
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_u8GetPinValue+0xb6>
     5ca:	55 95       	asr	r21
     5cc:	47 95       	ror	r20
     5ce:	8a 95       	dec	r24
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_u8GetPinValue+0xb2>
     5d2:	ca 01       	movw	r24, r20
     5d4:	58 2f       	mov	r21, r24
     5d6:	51 70       	andi	r21, 0x01	; 1
     5d8:	5b 83       	std	Y+3, r21	; 0x03
     5da:	14 c0       	rjmp	.+40     	; 0x604 <DIO_u8GetPinValue+0xec>
case 3:
	return GET_BIT(PIND,Pin);
     5dc:	e0 e3       	ldi	r30, 0x30	; 48
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	28 2f       	mov	r18, r24
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	8a 81       	ldd	r24, Y+2	; 0x02
     5e8:	88 2f       	mov	r24, r24
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a9 01       	movw	r20, r18
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_u8GetPinValue+0xdc>
     5f0:	55 95       	asr	r21
     5f2:	47 95       	ror	r20
     5f4:	8a 95       	dec	r24
     5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_u8GetPinValue+0xd8>
     5f8:	ca 01       	movw	r24, r20
     5fa:	58 2f       	mov	r21, r24
     5fc:	51 70       	andi	r21, 0x01	; 1
     5fe:	5b 83       	std	Y+3, r21	; 0x03
     600:	01 c0       	rjmp	.+2      	; 0x604 <DIO_u8GetPinValue+0xec>
     602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_u8GetPinValue+0xf0>


}


}
     604:	8b 81       	ldd	r24, Y+3	; 0x03
     606:	8e 83       	std	Y+6, r24	; 0x06
     608:	8e 81       	ldd	r24, Y+6	; 0x06
     60a:	26 96       	adiw	r28, 0x06	; 6
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	cf 91       	pop	r28
     618:	df 91       	pop	r29
     61a:	08 95       	ret

0000061c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     61c:	df 93       	push	r29
     61e:	cf 93       	push	r28
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	27 97       	sbiw	r28, 0x07	; 7
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	9d 83       	std	Y+5, r25	; 0x05
     632:	8c 83       	std	Y+4, r24	; 0x04
     634:	6e 83       	std	Y+6, r22	; 0x06
     636:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     638:	8e e1       	ldi	r24, 0x1E	; 30
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 57 06 	call	0xcae	; 0xcae <pvPortMalloc>
     640:	9a 83       	std	Y+2, r25	; 0x02
     642:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	00 97       	sbiw	r24, 0x00	; 0
     64a:	09 f4       	brne	.+2      	; 0x64e <xCoRoutineCreate+0x32>
     64c:	7a c0       	rjmp	.+244    	; 0x742 <xCoRoutineCreate+0x126>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     64e:	80 91 74 00 	lds	r24, 0x0074
     652:	90 91 75 00 	lds	r25, 0x0075
     656:	00 97       	sbiw	r24, 0x00	; 0
     658:	41 f4       	brne	.+16     	; 0x66a <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	90 93 75 00 	sts	0x0075, r25
     662:	80 93 74 00 	sts	0x0074, r24
			prvInitialiseCoRoutineLists();
     666:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     66a:	8e 81       	ldd	r24, Y+6	; 0x06
     66c:	82 30       	cpi	r24, 0x02	; 2
     66e:	10 f0       	brcs	.+4      	; 0x674 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     674:	e9 81       	ldd	r30, Y+1	; 0x01
     676:	fa 81       	ldd	r31, Y+2	; 0x02
     678:	15 8e       	std	Z+29, r1	; 0x1d
     67a:	14 8e       	std	Z+28, r1	; 0x1c
		pxCoRoutine->uxPriority = uxPriority;
     67c:	e9 81       	ldd	r30, Y+1	; 0x01
     67e:	fa 81       	ldd	r31, Y+2	; 0x02
     680:	8e 81       	ldd	r24, Y+6	; 0x06
     682:	82 8f       	std	Z+26, r24	; 0x1a
		pxCoRoutine->uxIndex = uxIndex;
     684:	e9 81       	ldd	r30, Y+1	; 0x01
     686:	fa 81       	ldd	r31, Y+2	; 0x02
     688:	8f 81       	ldd	r24, Y+7	; 0x07
     68a:	83 8f       	std	Z+27, r24	; 0x1b
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     68c:	e9 81       	ldd	r30, Y+1	; 0x01
     68e:	fa 81       	ldd	r31, Y+2	; 0x02
     690:	8c 81       	ldd	r24, Y+4	; 0x04
     692:	9d 81       	ldd	r25, Y+5	; 0x05
     694:	91 83       	std	Z+1, r25	; 0x01
     696:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	9a 81       	ldd	r25, Y+2	; 0x02
     69c:	02 96       	adiw	r24, 0x02	; 2
     69e:	0e 94 f1 06 	call	0xde2	; 0xde2 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	0e 96       	adiw	r24, 0x0e	; 14
     6a8:	0e 94 f1 06 	call	0xde2	; 0xde2 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     6ac:	e9 81       	ldd	r30, Y+1	; 0x01
     6ae:	fa 81       	ldd	r31, Y+2	; 0x02
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	9a 81       	ldd	r25, Y+2	; 0x02
     6b4:	93 87       	std	Z+11, r25	; 0x0b
     6b6:	82 87       	std	Z+10, r24	; 0x0a
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     6b8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ba:	fa 81       	ldd	r31, Y+2	; 0x02
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	97 8b       	std	Z+23, r25	; 0x17
     6c2:	86 8b       	std	Z+22, r24	; 0x16
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     6c4:	8e 81       	ldd	r24, Y+6	; 0x06
     6c6:	28 2f       	mov	r18, r24
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	a0 e0       	ldi	r26, 0x00	; 0
     6d4:	b0 e0       	ldi	r27, 0x00	; 0
     6d6:	82 1b       	sub	r24, r18
     6d8:	93 0b       	sbc	r25, r19
     6da:	a4 0b       	sbc	r26, r20
     6dc:	b5 0b       	sbc	r27, r21
     6de:	e9 81       	ldd	r30, Y+1	; 0x01
     6e0:	fa 81       	ldd	r31, Y+2	; 0x02
     6e2:	86 87       	std	Z+14, r24	; 0x0e
     6e4:	97 87       	std	Z+15, r25	; 0x0f
     6e6:	a0 8b       	std	Z+16, r26	; 0x10
     6e8:	b1 8b       	std	Z+17, r27	; 0x11
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     6ea:	e9 81       	ldd	r30, Y+1	; 0x01
     6ec:	fa 81       	ldd	r31, Y+2	; 0x02
     6ee:	92 8d       	ldd	r25, Z+26	; 0x1a
     6f0:	80 91 76 00 	lds	r24, 0x0076
     6f4:	89 17       	cp	r24, r25
     6f6:	28 f4       	brcc	.+10     	; 0x702 <xCoRoutineCreate+0xe6>
     6f8:	e9 81       	ldd	r30, Y+1	; 0x01
     6fa:	fa 81       	ldd	r31, Y+2	; 0x02
     6fc:	82 8d       	ldd	r24, Z+26	; 0x1a
     6fe:	80 93 76 00 	sts	0x0076, r24
     702:	e9 81       	ldd	r30, Y+1	; 0x01
     704:	fa 81       	ldd	r31, Y+2	; 0x02
     706:	82 8d       	ldd	r24, Z+26	; 0x1a
     708:	48 2f       	mov	r20, r24
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	ca 01       	movw	r24, r20
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	9c 01       	movw	r18, r24
     714:	22 0f       	add	r18, r18
     716:	33 1f       	adc	r19, r19
     718:	22 0f       	add	r18, r18
     71a:	33 1f       	adc	r19, r19
     71c:	82 0f       	add	r24, r18
     71e:	93 1f       	adc	r25, r19
     720:	84 0f       	add	r24, r20
     722:	95 1f       	adc	r25, r21
     724:	ac 01       	movw	r20, r24
     726:	4d 57       	subi	r20, 0x7D	; 125
     728:	5f 4f       	sbci	r21, 0xFF	; 255
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	9a 81       	ldd	r25, Y+2	; 0x02
     72e:	9c 01       	movw	r18, r24
     730:	2e 5f       	subi	r18, 0xFE	; 254
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	ca 01       	movw	r24, r20
     736:	b9 01       	movw	r22, r18
     738:	0e 94 01 07 	call	0xe02	; 0xe02 <vListInsertEnd>

		xReturn = pdPASS;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	8b 83       	std	Y+3, r24	; 0x03
     740:	02 c0       	rjmp	.+4      	; 0x746 <xCoRoutineCreate+0x12a>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     742:	8f ef       	ldi	r24, 0xFF	; 255
     744:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     746:	8b 81       	ldd	r24, Y+3	; 0x03
}
     748:	27 96       	adiw	r28, 0x07	; 7
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	cf 91       	pop	r28
     756:	df 91       	pop	r29
     758:	08 95       	ret

0000075a <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     75a:	df 93       	push	r29
     75c:	cf 93       	push	r28
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	2a 97       	sbiw	r28, 0x0a	; 10
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	6d 83       	std	Y+5, r22	; 0x05
     770:	7e 83       	std	Y+6, r23	; 0x06
     772:	8f 83       	std	Y+7, r24	; 0x07
     774:	98 87       	std	Y+8, r25	; 0x08
     776:	5a 87       	std	Y+10, r21	; 0x0a
     778:	49 87       	std	Y+9, r20	; 0x09
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     77a:	20 91 77 00 	lds	r18, 0x0077
     77e:	30 91 78 00 	lds	r19, 0x0078
     782:	40 91 79 00 	lds	r20, 0x0079
     786:	50 91 7a 00 	lds	r21, 0x007A
     78a:	8d 81       	ldd	r24, Y+5	; 0x05
     78c:	9e 81       	ldd	r25, Y+6	; 0x06
     78e:	af 81       	ldd	r26, Y+7	; 0x07
     790:	b8 85       	ldd	r27, Y+8	; 0x08
     792:	82 0f       	add	r24, r18
     794:	93 1f       	adc	r25, r19
     796:	a4 1f       	adc	r26, r20
     798:	b5 1f       	adc	r27, r21
     79a:	89 83       	std	Y+1, r24	; 0x01
     79c:	9a 83       	std	Y+2, r25	; 0x02
     79e:	ab 83       	std	Y+3, r26	; 0x03
     7a0:	bc 83       	std	Y+4, r27	; 0x04

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     7a2:	80 91 74 00 	lds	r24, 0x0074
     7a6:	90 91 75 00 	lds	r25, 0x0075
     7aa:	02 96       	adiw	r24, 0x02	; 2
     7ac:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     7b0:	e0 91 74 00 	lds	r30, 0x0074
     7b4:	f0 91 75 00 	lds	r31, 0x0075
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	9a 81       	ldd	r25, Y+2	; 0x02
     7bc:	ab 81       	ldd	r26, Y+3	; 0x03
     7be:	bc 81       	ldd	r27, Y+4	; 0x04
     7c0:	82 83       	std	Z+2, r24	; 0x02
     7c2:	93 83       	std	Z+3, r25	; 0x03
     7c4:	a4 83       	std	Z+4, r26	; 0x04
     7c6:	b5 83       	std	Z+5, r27	; 0x05

	if( xTimeToWake < xCoRoutineTickCount )
     7c8:	20 91 77 00 	lds	r18, 0x0077
     7cc:	30 91 78 00 	lds	r19, 0x0078
     7d0:	40 91 79 00 	lds	r20, 0x0079
     7d4:	50 91 7a 00 	lds	r21, 0x007A
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	9a 81       	ldd	r25, Y+2	; 0x02
     7dc:	ab 81       	ldd	r26, Y+3	; 0x03
     7de:	bc 81       	ldd	r27, Y+4	; 0x04
     7e0:	82 17       	cp	r24, r18
     7e2:	93 07       	cpc	r25, r19
     7e4:	a4 07       	cpc	r26, r20
     7e6:	b5 07       	cpc	r27, r21
     7e8:	70 f4       	brcc	.+28     	; 0x806 <vCoRoutineAddToDelayedList+0xac>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     7ea:	80 91 b1 00 	lds	r24, 0x00B1
     7ee:	90 91 b2 00 	lds	r25, 0x00B2
     7f2:	20 91 74 00 	lds	r18, 0x0074
     7f6:	30 91 75 00 	lds	r19, 0x0075
     7fa:	2e 5f       	subi	r18, 0xFE	; 254
     7fc:	3f 4f       	sbci	r19, 0xFF	; 255
     7fe:	b9 01       	movw	r22, r18
     800:	0e 94 4d 07 	call	0xe9a	; 0xe9a <vListInsert>
     804:	0d c0       	rjmp	.+26     	; 0x820 <vCoRoutineAddToDelayedList+0xc6>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     806:	80 91 af 00 	lds	r24, 0x00AF
     80a:	90 91 b0 00 	lds	r25, 0x00B0
     80e:	20 91 74 00 	lds	r18, 0x0074
     812:	30 91 75 00 	lds	r19, 0x0075
     816:	2e 5f       	subi	r18, 0xFE	; 254
     818:	3f 4f       	sbci	r19, 0xFF	; 255
     81a:	b9 01       	movw	r22, r18
     81c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <vListInsert>
	}

	if( pxEventList )
     820:	89 85       	ldd	r24, Y+9	; 0x09
     822:	9a 85       	ldd	r25, Y+10	; 0x0a
     824:	00 97       	sbiw	r24, 0x00	; 0
     826:	61 f0       	breq	.+24     	; 0x840 <vCoRoutineAddToDelayedList+0xe6>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     828:	80 91 74 00 	lds	r24, 0x0074
     82c:	90 91 75 00 	lds	r25, 0x0075
     830:	9c 01       	movw	r18, r24
     832:	22 5f       	subi	r18, 0xF2	; 242
     834:	3f 4f       	sbci	r19, 0xFF	; 255
     836:	89 85       	ldd	r24, Y+9	; 0x09
     838:	9a 85       	ldd	r25, Y+10	; 0x0a
     83a:	b9 01       	movw	r22, r18
     83c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <vListInsert>
	}
}
     840:	2a 96       	adiw	r28, 0x0a	; 10
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	cf 91       	pop	r28
     84e:	df 91       	pop	r29
     850:	08 95       	ret

00000852 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     852:	df 93       	push	r29
     854:	cf 93       	push	r28
     856:	00 d0       	rcall	.+0      	; 0x858 <prvCheckPendingReadyList+0x6>
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	3d c0       	rjmp	.+122    	; 0x8d8 <__stack+0x79>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     85e:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     860:	e0 91 ba 00 	lds	r30, 0x00BA
     864:	f0 91 bb 00 	lds	r31, 0x00BB
     868:	80 85       	ldd	r24, Z+8	; 0x08
     86a:	91 85       	ldd	r25, Z+9	; 0x09
     86c:	9a 83       	std	Y+2, r25	; 0x02
     86e:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	9a 81       	ldd	r25, Y+2	; 0x02
     874:	0e 96       	adiw	r24, 0x0e	; 14
     876:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
		}
		portENABLE_INTERRUPTS();
     87a:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	9a 81       	ldd	r25, Y+2	; 0x02
     880:	02 96       	adiw	r24, 0x02	; 2
     882:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     886:	e9 81       	ldd	r30, Y+1	; 0x01
     888:	fa 81       	ldd	r31, Y+2	; 0x02
     88a:	92 8d       	ldd	r25, Z+26	; 0x1a
     88c:	80 91 76 00 	lds	r24, 0x0076
     890:	89 17       	cp	r24, r25
     892:	28 f4       	brcc	.+10     	; 0x89e <__stack+0x3f>
     894:	e9 81       	ldd	r30, Y+1	; 0x01
     896:	fa 81       	ldd	r31, Y+2	; 0x02
     898:	82 8d       	ldd	r24, Z+26	; 0x1a
     89a:	80 93 76 00 	sts	0x0076, r24
     89e:	e9 81       	ldd	r30, Y+1	; 0x01
     8a0:	fa 81       	ldd	r31, Y+2	; 0x02
     8a2:	82 8d       	ldd	r24, Z+26	; 0x1a
     8a4:	48 2f       	mov	r20, r24
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	ca 01       	movw	r24, r20
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	9c 01       	movw	r18, r24
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	22 0f       	add	r18, r18
     8b6:	33 1f       	adc	r19, r19
     8b8:	82 0f       	add	r24, r18
     8ba:	93 1f       	adc	r25, r19
     8bc:	84 0f       	add	r24, r20
     8be:	95 1f       	adc	r25, r21
     8c0:	ac 01       	movw	r20, r24
     8c2:	4d 57       	subi	r20, 0x7D	; 125
     8c4:	5f 4f       	sbci	r21, 0xFF	; 255
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ca:	9c 01       	movw	r18, r24
     8cc:	2e 5f       	subi	r18, 0xFE	; 254
     8ce:	3f 4f       	sbci	r19, 0xFF	; 255
     8d0:	ca 01       	movw	r24, r20
     8d2:	b9 01       	movw	r22, r18
     8d4:	0e 94 01 07 	call	0xe02	; 0xe02 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     8d8:	80 91 b3 00 	lds	r24, 0x00B3
     8dc:	88 23       	and	r24, r24
     8de:	09 f0       	breq	.+2      	; 0x8e2 <__stack+0x83>
     8e0:	be cf       	rjmp	.-132    	; 0x85e <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	cf 91       	pop	r28
     8e8:	df 91       	pop	r29
     8ea:	08 95       	ret

000008ec <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     8ec:	df 93       	push	r29
     8ee:	cf 93       	push	r28
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <prvCheckDelayedList+0x6>
     8f2:	00 d0       	rcall	.+0      	; 0x8f4 <prvCheckDelayedList+0x8>
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     8f8:	0e 94 19 13 	call	0x2632	; 0x2632 <xTaskGetTickCount>
     8fc:	dc 01       	movw	r26, r24
     8fe:	cb 01       	movw	r24, r22
     900:	20 91 7b 00 	lds	r18, 0x007B
     904:	30 91 7c 00 	lds	r19, 0x007C
     908:	40 91 7d 00 	lds	r20, 0x007D
     90c:	50 91 7e 00 	lds	r21, 0x007E
     910:	82 1b       	sub	r24, r18
     912:	93 0b       	sbc	r25, r19
     914:	a4 0b       	sbc	r26, r20
     916:	b5 0b       	sbc	r27, r21
     918:	80 93 7f 00 	sts	0x007F, r24
     91c:	90 93 80 00 	sts	0x0080, r25
     920:	a0 93 81 00 	sts	0x0081, r26
     924:	b0 93 82 00 	sts	0x0082, r27
     928:	aa c0       	rjmp	.+340    	; 0xa7e <prvCheckDelayedList+0x192>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     92a:	80 91 77 00 	lds	r24, 0x0077
     92e:	90 91 78 00 	lds	r25, 0x0078
     932:	a0 91 79 00 	lds	r26, 0x0079
     936:	b0 91 7a 00 	lds	r27, 0x007A
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	a1 1d       	adc	r26, r1
     93e:	b1 1d       	adc	r27, r1
     940:	80 93 77 00 	sts	0x0077, r24
     944:	90 93 78 00 	sts	0x0078, r25
     948:	a0 93 79 00 	sts	0x0079, r26
     94c:	b0 93 7a 00 	sts	0x007A, r27
		xPassedTicks--;
     950:	80 91 7f 00 	lds	r24, 0x007F
     954:	90 91 80 00 	lds	r25, 0x0080
     958:	a0 91 81 00 	lds	r26, 0x0081
     95c:	b0 91 82 00 	lds	r27, 0x0082
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	a1 09       	sbc	r26, r1
     964:	b1 09       	sbc	r27, r1
     966:	80 93 7f 00 	sts	0x007F, r24
     96a:	90 93 80 00 	sts	0x0080, r25
     96e:	a0 93 81 00 	sts	0x0081, r26
     972:	b0 93 82 00 	sts	0x0082, r27

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     976:	80 91 77 00 	lds	r24, 0x0077
     97a:	90 91 78 00 	lds	r25, 0x0078
     97e:	a0 91 79 00 	lds	r26, 0x0079
     982:	b0 91 7a 00 	lds	r27, 0x007A
     986:	00 97       	sbiw	r24, 0x00	; 0
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	09 f0       	breq	.+2      	; 0x990 <prvCheckDelayedList+0xa4>
     98e:	6f c0       	rjmp	.+222    	; 0xa6e <prvCheckDelayedList+0x182>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     990:	80 91 af 00 	lds	r24, 0x00AF
     994:	90 91 b0 00 	lds	r25, 0x00B0
     998:	9a 83       	std	Y+2, r25	; 0x02
     99a:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     99c:	80 91 b1 00 	lds	r24, 0x00B1
     9a0:	90 91 b2 00 	lds	r25, 0x00B2
     9a4:	90 93 b0 00 	sts	0x00B0, r25
     9a8:	80 93 af 00 	sts	0x00AF, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	90 93 b2 00 	sts	0x00B2, r25
     9b4:	80 93 b1 00 	sts	0x00B1, r24
     9b8:	5a c0       	rjmp	.+180    	; 0xa6e <prvCheckDelayedList+0x182>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     9ba:	e0 91 af 00 	lds	r30, 0x00AF
     9be:	f0 91 b0 00 	lds	r31, 0x00B0
     9c2:	07 80       	ldd	r0, Z+7	; 0x07
     9c4:	f0 85       	ldd	r31, Z+8	; 0x08
     9c6:	e0 2d       	mov	r30, r0
     9c8:	80 85       	ldd	r24, Z+8	; 0x08
     9ca:	91 85       	ldd	r25, Z+9	; 0x09
     9cc:	9c 83       	std	Y+4, r25	; 0x04
     9ce:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     9d0:	eb 81       	ldd	r30, Y+3	; 0x03
     9d2:	fc 81       	ldd	r31, Y+4	; 0x04
     9d4:	22 81       	ldd	r18, Z+2	; 0x02
     9d6:	33 81       	ldd	r19, Z+3	; 0x03
     9d8:	44 81       	ldd	r20, Z+4	; 0x04
     9da:	55 81       	ldd	r21, Z+5	; 0x05
     9dc:	80 91 77 00 	lds	r24, 0x0077
     9e0:	90 91 78 00 	lds	r25, 0x0078
     9e4:	a0 91 79 00 	lds	r26, 0x0079
     9e8:	b0 91 7a 00 	lds	r27, 0x007A
     9ec:	82 17       	cp	r24, r18
     9ee:	93 07       	cpc	r25, r19
     9f0:	a4 07       	cpc	r26, r20
     9f2:	b5 07       	cpc	r27, r21
     9f4:	08 f4       	brcc	.+2      	; 0x9f8 <prvCheckDelayedList+0x10c>
     9f6:	43 c0       	rjmp	.+134    	; 0xa7e <prvCheckDelayedList+0x192>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     9f8:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
     9fa:	8b 81       	ldd	r24, Y+3	; 0x03
     9fc:	9c 81       	ldd	r25, Y+4	; 0x04
     9fe:	02 96       	adiw	r24, 0x02	; 2
     a00:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     a04:	eb 81       	ldd	r30, Y+3	; 0x03
     a06:	fc 81       	ldd	r31, Y+4	; 0x04
     a08:	80 8d       	ldd	r24, Z+24	; 0x18
     a0a:	91 8d       	ldd	r25, Z+25	; 0x19
     a0c:	00 97       	sbiw	r24, 0x00	; 0
     a0e:	29 f0       	breq	.+10     	; 0xa1a <prvCheckDelayedList+0x12e>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	0e 96       	adiw	r24, 0x0e	; 14
     a16:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     a1a:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     a1c:	eb 81       	ldd	r30, Y+3	; 0x03
     a1e:	fc 81       	ldd	r31, Y+4	; 0x04
     a20:	92 8d       	ldd	r25, Z+26	; 0x1a
     a22:	80 91 76 00 	lds	r24, 0x0076
     a26:	89 17       	cp	r24, r25
     a28:	28 f4       	brcc	.+10     	; 0xa34 <prvCheckDelayedList+0x148>
     a2a:	eb 81       	ldd	r30, Y+3	; 0x03
     a2c:	fc 81       	ldd	r31, Y+4	; 0x04
     a2e:	82 8d       	ldd	r24, Z+26	; 0x1a
     a30:	80 93 76 00 	sts	0x0076, r24
     a34:	eb 81       	ldd	r30, Y+3	; 0x03
     a36:	fc 81       	ldd	r31, Y+4	; 0x04
     a38:	82 8d       	ldd	r24, Z+26	; 0x1a
     a3a:	48 2f       	mov	r20, r24
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	ca 01       	movw	r24, r20
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	9c 01       	movw	r18, r24
     a46:	22 0f       	add	r18, r18
     a48:	33 1f       	adc	r19, r19
     a4a:	22 0f       	add	r18, r18
     a4c:	33 1f       	adc	r19, r19
     a4e:	82 0f       	add	r24, r18
     a50:	93 1f       	adc	r25, r19
     a52:	84 0f       	add	r24, r20
     a54:	95 1f       	adc	r25, r21
     a56:	ac 01       	movw	r20, r24
     a58:	4d 57       	subi	r20, 0x7D	; 125
     a5a:	5f 4f       	sbci	r21, 0xFF	; 255
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	9c 01       	movw	r18, r24
     a62:	2e 5f       	subi	r18, 0xFE	; 254
     a64:	3f 4f       	sbci	r19, 0xFF	; 255
     a66:	ca 01       	movw	r24, r20
     a68:	b9 01       	movw	r22, r18
     a6a:	0e 94 01 07 	call	0xe02	; 0xe02 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     a6e:	e0 91 af 00 	lds	r30, 0x00AF
     a72:	f0 91 b0 00 	lds	r31, 0x00B0
     a76:	80 81       	ld	r24, Z
     a78:	88 23       	and	r24, r24
     a7a:	09 f0       	breq	.+2      	; 0xa7e <prvCheckDelayedList+0x192>
     a7c:	9e cf       	rjmp	.-196    	; 0x9ba <prvCheckDelayedList+0xce>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     a7e:	80 91 7f 00 	lds	r24, 0x007F
     a82:	90 91 80 00 	lds	r25, 0x0080
     a86:	a0 91 81 00 	lds	r26, 0x0081
     a8a:	b0 91 82 00 	lds	r27, 0x0082
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	a1 05       	cpc	r26, r1
     a92:	b1 05       	cpc	r27, r1
     a94:	09 f0       	breq	.+2      	; 0xa98 <prvCheckDelayedList+0x1ac>
     a96:	49 cf       	rjmp	.-366    	; 0x92a <prvCheckDelayedList+0x3e>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     a98:	80 91 77 00 	lds	r24, 0x0077
     a9c:	90 91 78 00 	lds	r25, 0x0078
     aa0:	a0 91 79 00 	lds	r26, 0x0079
     aa4:	b0 91 7a 00 	lds	r27, 0x007A
     aa8:	80 93 7b 00 	sts	0x007B, r24
     aac:	90 93 7c 00 	sts	0x007C, r25
     ab0:	a0 93 7d 00 	sts	0x007D, r26
     ab4:	b0 93 7e 00 	sts	0x007E, r27
}
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	cf 91       	pop	r28
     ac2:	df 91       	pop	r29
     ac4:	08 95       	ret

00000ac6 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     ac6:	df 93       	push	r29
     ac8:	cf 93       	push	r28
     aca:	00 d0       	rcall	.+0      	; 0xacc <vCoRoutineSchedule+0x6>
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     ad0:	0e 94 29 04 	call	0x852	; 0x852 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     ad4:	0e 94 76 04 	call	0x8ec	; 0x8ec <prvCheckDelayedList>
     ad8:	0a c0       	rjmp	.+20     	; 0xaee <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     ada:	80 91 76 00 	lds	r24, 0x0076
     ade:	88 23       	and	r24, r24
     ae0:	09 f4       	brne	.+2      	; 0xae4 <vCoRoutineSchedule+0x1e>
     ae2:	6c c0       	rjmp	.+216    	; 0xbbc <vCoRoutineSchedule+0xf6>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     ae4:	80 91 76 00 	lds	r24, 0x0076
     ae8:	81 50       	subi	r24, 0x01	; 1
     aea:	80 93 76 00 	sts	0x0076, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     aee:	80 91 76 00 	lds	r24, 0x0076
     af2:	48 2f       	mov	r20, r24
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	ca 01       	movw	r24, r20
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	9c 01       	movw	r18, r24
     afe:	22 0f       	add	r18, r18
     b00:	33 1f       	adc	r19, r19
     b02:	22 0f       	add	r18, r18
     b04:	33 1f       	adc	r19, r19
     b06:	82 0f       	add	r24, r18
     b08:	93 1f       	adc	r25, r19
     b0a:	84 0f       	add	r24, r20
     b0c:	95 1f       	adc	r25, r21
     b0e:	fc 01       	movw	r30, r24
     b10:	ed 57       	subi	r30, 0x7D	; 125
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	80 81       	ld	r24, Z
     b16:	88 23       	and	r24, r24
     b18:	01 f3       	breq	.-64     	; 0xada <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     b1a:	80 91 76 00 	lds	r24, 0x0076
     b1e:	48 2f       	mov	r20, r24
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	ca 01       	movw	r24, r20
     b24:	88 0f       	add	r24, r24
     b26:	99 1f       	adc	r25, r25
     b28:	9c 01       	movw	r18, r24
     b2a:	22 0f       	add	r18, r18
     b2c:	33 1f       	adc	r19, r19
     b2e:	22 0f       	add	r18, r18
     b30:	33 1f       	adc	r19, r19
     b32:	82 0f       	add	r24, r18
     b34:	93 1f       	adc	r25, r19
     b36:	84 0f       	add	r24, r20
     b38:	95 1f       	adc	r25, r21
     b3a:	8d 57       	subi	r24, 0x7D	; 125
     b3c:	9f 4f       	sbci	r25, 0xFF	; 255
     b3e:	9a 83       	std	Y+2, r25	; 0x02
     b40:	89 83       	std	Y+1, r24	; 0x01
     b42:	e9 81       	ldd	r30, Y+1	; 0x01
     b44:	fa 81       	ldd	r31, Y+2	; 0x02
     b46:	01 80       	ldd	r0, Z+1	; 0x01
     b48:	f2 81       	ldd	r31, Z+2	; 0x02
     b4a:	e0 2d       	mov	r30, r0
     b4c:	84 81       	ldd	r24, Z+4	; 0x04
     b4e:	95 81       	ldd	r25, Z+5	; 0x05
     b50:	e9 81       	ldd	r30, Y+1	; 0x01
     b52:	fa 81       	ldd	r31, Y+2	; 0x02
     b54:	92 83       	std	Z+2, r25	; 0x02
     b56:	81 83       	std	Z+1, r24	; 0x01
     b58:	e9 81       	ldd	r30, Y+1	; 0x01
     b5a:	fa 81       	ldd	r31, Y+2	; 0x02
     b5c:	21 81       	ldd	r18, Z+1	; 0x01
     b5e:	32 81       	ldd	r19, Z+2	; 0x02
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	03 96       	adiw	r24, 0x03	; 3
     b66:	28 17       	cp	r18, r24
     b68:	39 07       	cpc	r19, r25
     b6a:	59 f4       	brne	.+22     	; 0xb82 <vCoRoutineSchedule+0xbc>
     b6c:	e9 81       	ldd	r30, Y+1	; 0x01
     b6e:	fa 81       	ldd	r31, Y+2	; 0x02
     b70:	01 80       	ldd	r0, Z+1	; 0x01
     b72:	f2 81       	ldd	r31, Z+2	; 0x02
     b74:	e0 2d       	mov	r30, r0
     b76:	84 81       	ldd	r24, Z+4	; 0x04
     b78:	95 81       	ldd	r25, Z+5	; 0x05
     b7a:	e9 81       	ldd	r30, Y+1	; 0x01
     b7c:	fa 81       	ldd	r31, Y+2	; 0x02
     b7e:	92 83       	std	Z+2, r25	; 0x02
     b80:	81 83       	std	Z+1, r24	; 0x01
     b82:	e9 81       	ldd	r30, Y+1	; 0x01
     b84:	fa 81       	ldd	r31, Y+2	; 0x02
     b86:	01 80       	ldd	r0, Z+1	; 0x01
     b88:	f2 81       	ldd	r31, Z+2	; 0x02
     b8a:	e0 2d       	mov	r30, r0
     b8c:	80 85       	ldd	r24, Z+8	; 0x08
     b8e:	91 85       	ldd	r25, Z+9	; 0x09
     b90:	90 93 75 00 	sts	0x0075, r25
     b94:	80 93 74 00 	sts	0x0074, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     b98:	e0 91 74 00 	lds	r30, 0x0074
     b9c:	f0 91 75 00 	lds	r31, 0x0075
     ba0:	40 81       	ld	r20, Z
     ba2:	51 81       	ldd	r21, Z+1	; 0x01
     ba4:	80 91 74 00 	lds	r24, 0x0074
     ba8:	90 91 75 00 	lds	r25, 0x0075
     bac:	e0 91 74 00 	lds	r30, 0x0074
     bb0:	f0 91 75 00 	lds	r31, 0x0075
     bb4:	23 8d       	ldd	r18, Z+27	; 0x1b
     bb6:	62 2f       	mov	r22, r18
     bb8:	fa 01       	movw	r30, r20
     bba:	09 95       	icall

	return;
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	0f 92       	push	r0
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     bd0:	19 82       	std	Y+1, r1	; 0x01
     bd2:	16 c0       	rjmp	.+44     	; 0xc00 <prvInitialiseCoRoutineLists+0x3a>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	48 2f       	mov	r20, r24
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	ca 01       	movw	r24, r20
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	9c 01       	movw	r18, r24
     be2:	22 0f       	add	r18, r18
     be4:	33 1f       	adc	r19, r19
     be6:	22 0f       	add	r18, r18
     be8:	33 1f       	adc	r19, r19
     bea:	82 0f       	add	r24, r18
     bec:	93 1f       	adc	r25, r19
     bee:	84 0f       	add	r24, r20
     bf0:	95 1f       	adc	r25, r21
     bf2:	8d 57       	subi	r24, 0x7D	; 125
     bf4:	9f 4f       	sbci	r25, 0xFF	; 255
     bf6:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	82 30       	cpi	r24, 0x02	; 2
     c04:	38 f3       	brcs	.-50     	; 0xbd4 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
     c06:	89 e9       	ldi	r24, 0x99	; 153
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
     c0e:	84 ea       	ldi	r24, 0xA4	; 164
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
     c16:	83 eb       	ldi	r24, 0xB3	; 179
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     c1e:	89 e9       	ldi	r24, 0x99	; 153
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	90 93 b0 00 	sts	0x00B0, r25
     c26:	80 93 af 00 	sts	0x00AF, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     c2a:	84 ea       	ldi	r24, 0xA4	; 164
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	90 93 b2 00 	sts	0x00B2, r25
     c32:	80 93 b1 00 	sts	0x00B1, r24
}
     c36:	0f 90       	pop	r0
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	00 d0       	rcall	.+0      	; 0xc44 <xCoRoutineRemoveFromEventList+0x6>
     c44:	00 d0       	rcall	.+0      	; 0xc46 <xCoRoutineRemoveFromEventList+0x8>
     c46:	0f 92       	push	r0
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	9d 83       	std	Y+5, r25	; 0x05
     c4e:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     c50:	ec 81       	ldd	r30, Y+4	; 0x04
     c52:	fd 81       	ldd	r31, Y+5	; 0x05
     c54:	07 80       	ldd	r0, Z+7	; 0x07
     c56:	f0 85       	ldd	r31, Z+8	; 0x08
     c58:	e0 2d       	mov	r30, r0
     c5a:	80 85       	ldd	r24, Z+8	; 0x08
     c5c:	91 85       	ldd	r25, Z+9	; 0x09
     c5e:	9b 83       	std	Y+3, r25	; 0x03
     c60:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	9b 81       	ldd	r25, Y+3	; 0x03
     c66:	0e 96       	adiw	r24, 0x0e	; 14
     c68:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	9b 81       	ldd	r25, Y+3	; 0x03
     c70:	9c 01       	movw	r18, r24
     c72:	22 5f       	subi	r18, 0xF2	; 242
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	83 eb       	ldi	r24, 0xB3	; 179
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	b9 01       	movw	r22, r18
     c7c:	0e 94 01 07 	call	0xe02	; 0xe02 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     c80:	ea 81       	ldd	r30, Y+2	; 0x02
     c82:	fb 81       	ldd	r31, Y+3	; 0x03
     c84:	92 8d       	ldd	r25, Z+26	; 0x1a
     c86:	e0 91 74 00 	lds	r30, 0x0074
     c8a:	f0 91 75 00 	lds	r31, 0x0075
     c8e:	82 8d       	ldd	r24, Z+26	; 0x1a
     c90:	98 17       	cp	r25, r24
     c92:	18 f0       	brcs	.+6      	; 0xc9a <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	89 83       	std	Y+1, r24	; 0x01
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
     c9a:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <pvPortMalloc+0x6>
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <pvPortMalloc+0x8>
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	9c 83       	std	Y+4, r25	; 0x04
     cbc:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
     cbe:	1a 82       	std	Y+2, r1	; 0x02
     cc0:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     cc2:	0e 94 82 12 	call	0x2504	; 0x2504 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     cc6:	80 91 be 00 	lds	r24, 0x00BE
     cca:	90 91 bf 00 	lds	r25, 0x00BF
     cce:	2b 81       	ldd	r18, Y+3	; 0x03
     cd0:	3c 81       	ldd	r19, Y+4	; 0x04
     cd2:	82 0f       	add	r24, r18
     cd4:	93 1f       	adc	r25, r19
     cd6:	22 e0       	ldi	r18, 0x02	; 2
     cd8:	88 35       	cpi	r24, 0x58	; 88
     cda:	92 07       	cpc	r25, r18
     cdc:	18 f5       	brcc	.+70     	; 0xd24 <pvPortMalloc+0x76>
     cde:	20 91 be 00 	lds	r18, 0x00BE
     ce2:	30 91 bf 00 	lds	r19, 0x00BF
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	28 0f       	add	r18, r24
     cec:	39 1f       	adc	r19, r25
     cee:	80 91 be 00 	lds	r24, 0x00BE
     cf2:	90 91 bf 00 	lds	r25, 0x00BF
     cf6:	82 17       	cp	r24, r18
     cf8:	93 07       	cpc	r25, r19
     cfa:	a0 f4       	brcc	.+40     	; 0xd24 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     cfc:	80 91 be 00 	lds	r24, 0x00BE
     d00:	90 91 bf 00 	lds	r25, 0x00BF
     d04:	80 54       	subi	r24, 0x40	; 64
     d06:	9f 4f       	sbci	r25, 0xFF	; 255
     d08:	9a 83       	std	Y+2, r25	; 0x02
     d0a:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
     d0c:	20 91 be 00 	lds	r18, 0x00BE
     d10:	30 91 bf 00 	lds	r19, 0x00BF
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	82 0f       	add	r24, r18
     d1a:	93 1f       	adc	r25, r19
     d1c:	90 93 bf 00 	sts	0x00BF, r25
     d20:	80 93 be 00 	sts	0x00BE, r24
		}	
	}
	xTaskResumeAll();
     d24:	0e 94 8e 12 	call	0x251c	; 0x251c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <vPortFree+0x6>
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     d5a:	10 92 bf 00 	sts	0x00BF, r1
     d5e:	10 92 be 00 	sts	0x00BE, r1
}
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     d70:	20 91 be 00 	lds	r18, 0x00BE
     d74:	30 91 bf 00 	lds	r19, 0x00BF
     d78:	88 e5       	ldi	r24, 0x58	; 88
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	82 1b       	sub	r24, r18
     d7e:	93 0b       	sbc	r25, r19
}
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <vListInitialise+0x6>
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	03 96       	adiw	r24, 0x03	; 3
     d9a:	e9 81       	ldd	r30, Y+1	; 0x01
     d9c:	fa 81       	ldd	r31, Y+2	; 0x02
     d9e:	92 83       	std	Z+2, r25	; 0x02
     da0:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     da2:	e9 81       	ldd	r30, Y+1	; 0x01
     da4:	fa 81       	ldd	r31, Y+2	; 0x02
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	9f ef       	ldi	r25, 0xFF	; 255
     daa:	af ef       	ldi	r26, 0xFF	; 255
     dac:	bf ef       	ldi	r27, 0xFF	; 255
     dae:	83 83       	std	Z+3, r24	; 0x03
     db0:	94 83       	std	Z+4, r25	; 0x04
     db2:	a5 83       	std	Z+5, r26	; 0x05
     db4:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	03 96       	adiw	r24, 0x03	; 3
     dbc:	e9 81       	ldd	r30, Y+1	; 0x01
     dbe:	fa 81       	ldd	r31, Y+2	; 0x02
     dc0:	90 87       	std	Z+8, r25	; 0x08
     dc2:	87 83       	std	Z+7, r24	; 0x07
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	03 96       	adiw	r24, 0x03	; 3
     dca:	e9 81       	ldd	r30, Y+1	; 0x01
     dcc:	fa 81       	ldd	r31, Y+2	; 0x02
     dce:	92 87       	std	Z+10, r25	; 0x0a
     dd0:	81 87       	std	Z+9, r24	; 0x09

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     dd2:	e9 81       	ldd	r30, Y+1	; 0x01
     dd4:	fa 81       	ldd	r31, Y+2	; 0x02
     dd6:	10 82       	st	Z, r1
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <vListInitialiseItem+0x6>
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     df0:	e9 81       	ldd	r30, Y+1	; 0x01
     df2:	fa 81       	ldd	r31, Y+2	; 0x02
     df4:	13 86       	std	Z+11, r1	; 0x0b
     df6:	12 86       	std	Z+10, r1	; 0x0a
}
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <vListInsertEnd+0x6>
     e08:	00 d0       	rcall	.+0      	; 0xe0a <vListInsertEnd+0x8>
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <vListInsertEnd+0xa>
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	9c 83       	std	Y+4, r25	; 0x04
     e12:	8b 83       	std	Y+3, r24	; 0x03
     e14:	7e 83       	std	Y+6, r23	; 0x06
     e16:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     e18:	eb 81       	ldd	r30, Y+3	; 0x03
     e1a:	fc 81       	ldd	r31, Y+4	; 0x04
     e1c:	81 81       	ldd	r24, Z+1	; 0x01
     e1e:	92 81       	ldd	r25, Z+2	; 0x02
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
     e24:	e9 81       	ldd	r30, Y+1	; 0x01
     e26:	fa 81       	ldd	r31, Y+2	; 0x02
     e28:	84 81       	ldd	r24, Z+4	; 0x04
     e2a:	95 81       	ldd	r25, Z+5	; 0x05
     e2c:	ed 81       	ldd	r30, Y+5	; 0x05
     e2e:	fe 81       	ldd	r31, Y+6	; 0x06
     e30:	95 83       	std	Z+5, r25	; 0x05
     e32:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxList->pxIndex;
     e34:	eb 81       	ldd	r30, Y+3	; 0x03
     e36:	fc 81       	ldd	r31, Y+4	; 0x04
     e38:	81 81       	ldd	r24, Z+1	; 0x01
     e3a:	92 81       	ldd	r25, Z+2	; 0x02
     e3c:	ed 81       	ldd	r30, Y+5	; 0x05
     e3e:	fe 81       	ldd	r31, Y+6	; 0x06
     e40:	97 83       	std	Z+7, r25	; 0x07
     e42:	86 83       	std	Z+6, r24	; 0x06
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     e44:	e9 81       	ldd	r30, Y+1	; 0x01
     e46:	fa 81       	ldd	r31, Y+2	; 0x02
     e48:	04 80       	ldd	r0, Z+4	; 0x04
     e4a:	f5 81       	ldd	r31, Z+5	; 0x05
     e4c:	e0 2d       	mov	r30, r0
     e4e:	8d 81       	ldd	r24, Y+5	; 0x05
     e50:	9e 81       	ldd	r25, Y+6	; 0x06
     e52:	97 83       	std	Z+7, r25	; 0x07
     e54:	86 83       	std	Z+6, r24	; 0x06
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     e56:	8d 81       	ldd	r24, Y+5	; 0x05
     e58:	9e 81       	ldd	r25, Y+6	; 0x06
     e5a:	e9 81       	ldd	r30, Y+1	; 0x01
     e5c:	fa 81       	ldd	r31, Y+2	; 0x02
     e5e:	95 83       	std	Z+5, r25	; 0x05
     e60:	84 83       	std	Z+4, r24	; 0x04
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	eb 81       	ldd	r30, Y+3	; 0x03
     e68:	fc 81       	ldd	r31, Y+4	; 0x04
     e6a:	92 83       	std	Z+2, r25	; 0x02
     e6c:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     e6e:	ed 81       	ldd	r30, Y+5	; 0x05
     e70:	fe 81       	ldd	r31, Y+6	; 0x06
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	9c 81       	ldd	r25, Y+4	; 0x04
     e76:	93 87       	std	Z+11, r25	; 0x0b
     e78:	82 87       	std	Z+10, r24	; 0x0a

	( pxList->uxNumberOfItems )++;
     e7a:	eb 81       	ldd	r30, Y+3	; 0x03
     e7c:	fc 81       	ldd	r31, Y+4	; 0x04
     e7e:	80 81       	ld	r24, Z
     e80:	8f 5f       	subi	r24, 0xFF	; 255
     e82:	eb 81       	ldd	r30, Y+3	; 0x03
     e84:	fc 81       	ldd	r31, Y+4	; 0x04
     e86:	80 83       	st	Z, r24
}
     e88:	26 96       	adiw	r28, 0x06	; 6
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	2a 97       	sbiw	r28, 0x0a	; 10
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	98 87       	std	Y+8, r25	; 0x08
     eb0:	8f 83       	std	Y+7, r24	; 0x07
     eb2:	7a 87       	std	Y+10, r23	; 0x0a
     eb4:	69 87       	std	Y+9, r22	; 0x09
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     eb6:	e9 85       	ldd	r30, Y+9	; 0x09
     eb8:	fa 85       	ldd	r31, Y+10	; 0x0a
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	a2 81       	ldd	r26, Z+2	; 0x02
     ec0:	b3 81       	ldd	r27, Z+3	; 0x03
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	ab 83       	std	Y+3, r26	; 0x03
     ec8:	bc 83       	std	Y+4, r27	; 0x04
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	ab 81       	ldd	r26, Y+3	; 0x03
     ed0:	bc 81       	ldd	r27, Y+4	; 0x04
     ed2:	8f 3f       	cpi	r24, 0xFF	; 255
     ed4:	2f ef       	ldi	r18, 0xFF	; 255
     ed6:	92 07       	cpc	r25, r18
     ed8:	2f ef       	ldi	r18, 0xFF	; 255
     eda:	a2 07       	cpc	r26, r18
     edc:	2f ef       	ldi	r18, 0xFF	; 255
     ede:	b2 07       	cpc	r27, r18
     ee0:	39 f4       	brne	.+14     	; 0xef0 <vListInsert+0x56>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     ee2:	ef 81       	ldd	r30, Y+7	; 0x07
     ee4:	f8 85       	ldd	r31, Y+8	; 0x08
     ee6:	81 85       	ldd	r24, Z+9	; 0x09
     ee8:	92 85       	ldd	r25, Z+10	; 0x0a
     eea:	9e 83       	std	Y+6, r25	; 0x06
     eec:	8d 83       	std	Y+5, r24	; 0x05
     eee:	1e c0       	rjmp	.+60     	; 0xf2c <vListInsert+0x92>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     ef0:	8f 81       	ldd	r24, Y+7	; 0x07
     ef2:	98 85       	ldd	r25, Y+8	; 0x08
     ef4:	03 96       	adiw	r24, 0x03	; 3
     ef6:	9e 83       	std	Y+6, r25	; 0x06
     ef8:	8d 83       	std	Y+5, r24	; 0x05
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <vListInsert+0x6e>
     efc:	ed 81       	ldd	r30, Y+5	; 0x05
     efe:	fe 81       	ldd	r31, Y+6	; 0x06
     f00:	84 81       	ldd	r24, Z+4	; 0x04
     f02:	95 81       	ldd	r25, Z+5	; 0x05
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	ed 81       	ldd	r30, Y+5	; 0x05
     f0a:	fe 81       	ldd	r31, Y+6	; 0x06
     f0c:	04 80       	ldd	r0, Z+4	; 0x04
     f0e:	f5 81       	ldd	r31, Z+5	; 0x05
     f10:	e0 2d       	mov	r30, r0
     f12:	20 81       	ld	r18, Z
     f14:	31 81       	ldd	r19, Z+1	; 0x01
     f16:	42 81       	ldd	r20, Z+2	; 0x02
     f18:	53 81       	ldd	r21, Z+3	; 0x03
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	ab 81       	ldd	r26, Y+3	; 0x03
     f20:	bc 81       	ldd	r27, Y+4	; 0x04
     f22:	82 17       	cp	r24, r18
     f24:	93 07       	cpc	r25, r19
     f26:	a4 07       	cpc	r26, r20
     f28:	b5 07       	cpc	r27, r21
     f2a:	40 f7       	brcc	.-48     	; 0xefc <vListInsert+0x62>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     f2c:	ed 81       	ldd	r30, Y+5	; 0x05
     f2e:	fe 81       	ldd	r31, Y+6	; 0x06
     f30:	84 81       	ldd	r24, Z+4	; 0x04
     f32:	95 81       	ldd	r25, Z+5	; 0x05
     f34:	e9 85       	ldd	r30, Y+9	; 0x09
     f36:	fa 85       	ldd	r31, Y+10	; 0x0a
     f38:	95 83       	std	Z+5, r25	; 0x05
     f3a:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     f3c:	e9 85       	ldd	r30, Y+9	; 0x09
     f3e:	fa 85       	ldd	r31, Y+10	; 0x0a
     f40:	04 80       	ldd	r0, Z+4	; 0x04
     f42:	f5 81       	ldd	r31, Z+5	; 0x05
     f44:	e0 2d       	mov	r30, r0
     f46:	89 85       	ldd	r24, Y+9	; 0x09
     f48:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4a:	97 83       	std	Z+7, r25	; 0x07
     f4c:	86 83       	std	Z+6, r24	; 0x06
	pxNewListItem->pxPrevious = pxIterator;
     f4e:	e9 85       	ldd	r30, Y+9	; 0x09
     f50:	fa 85       	ldd	r31, Y+10	; 0x0a
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	9e 81       	ldd	r25, Y+6	; 0x06
     f56:	97 83       	std	Z+7, r25	; 0x07
     f58:	86 83       	std	Z+6, r24	; 0x06
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     f5a:	89 85       	ldd	r24, Y+9	; 0x09
     f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5e:	ed 81       	ldd	r30, Y+5	; 0x05
     f60:	fe 81       	ldd	r31, Y+6	; 0x06
     f62:	95 83       	std	Z+5, r25	; 0x05
     f64:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     f66:	e9 85       	ldd	r30, Y+9	; 0x09
     f68:	fa 85       	ldd	r31, Y+10	; 0x0a
     f6a:	8f 81       	ldd	r24, Y+7	; 0x07
     f6c:	98 85       	ldd	r25, Y+8	; 0x08
     f6e:	93 87       	std	Z+11, r25	; 0x0b
     f70:	82 87       	std	Z+10, r24	; 0x0a

	( pxList->uxNumberOfItems )++;
     f72:	ef 81       	ldd	r30, Y+7	; 0x07
     f74:	f8 85       	ldd	r31, Y+8	; 0x08
     f76:	80 81       	ld	r24, Z
     f78:	8f 5f       	subi	r24, 0xFF	; 255
     f7a:	ef 81       	ldd	r30, Y+7	; 0x07
     f7c:	f8 85       	ldd	r31, Y+8	; 0x08
     f7e:	80 83       	st	Z, r24
}
     f80:	2a 96       	adiw	r28, 0x0a	; 10
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <vListRemove+0x6>
     f98:	00 d0       	rcall	.+0      	; 0xf9a <vListRemove+0x8>
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	9c 83       	std	Y+4, r25	; 0x04
     fa0:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     fa2:	eb 81       	ldd	r30, Y+3	; 0x03
     fa4:	fc 81       	ldd	r31, Y+4	; 0x04
     fa6:	a4 81       	ldd	r26, Z+4	; 0x04
     fa8:	b5 81       	ldd	r27, Z+5	; 0x05
     faa:	eb 81       	ldd	r30, Y+3	; 0x03
     fac:	fc 81       	ldd	r31, Y+4	; 0x04
     fae:	86 81       	ldd	r24, Z+6	; 0x06
     fb0:	97 81       	ldd	r25, Z+7	; 0x07
     fb2:	17 96       	adiw	r26, 0x07	; 7
     fb4:	9c 93       	st	X, r25
     fb6:	8e 93       	st	-X, r24
     fb8:	16 97       	sbiw	r26, 0x06	; 6
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     fba:	eb 81       	ldd	r30, Y+3	; 0x03
     fbc:	fc 81       	ldd	r31, Y+4	; 0x04
     fbe:	a6 81       	ldd	r26, Z+6	; 0x06
     fc0:	b7 81       	ldd	r27, Z+7	; 0x07
     fc2:	eb 81       	ldd	r30, Y+3	; 0x03
     fc4:	fc 81       	ldd	r31, Y+4	; 0x04
     fc6:	84 81       	ldd	r24, Z+4	; 0x04
     fc8:	95 81       	ldd	r25, Z+5	; 0x05
     fca:	15 96       	adiw	r26, 0x05	; 5
     fcc:	9c 93       	st	X, r25
     fce:	8e 93       	st	-X, r24
     fd0:	14 97       	sbiw	r26, 0x04	; 4
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     fd2:	eb 81       	ldd	r30, Y+3	; 0x03
     fd4:	fc 81       	ldd	r31, Y+4	; 0x04
     fd6:	82 85       	ldd	r24, Z+10	; 0x0a
     fd8:	93 85       	ldd	r25, Z+11	; 0x0b
     fda:	9a 83       	std	Y+2, r25	; 0x02
     fdc:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     fde:	e9 81       	ldd	r30, Y+1	; 0x01
     fe0:	fa 81       	ldd	r31, Y+2	; 0x02
     fe2:	21 81       	ldd	r18, Z+1	; 0x01
     fe4:	32 81       	ldd	r19, Z+2	; 0x02
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	9c 81       	ldd	r25, Y+4	; 0x04
     fea:	28 17       	cp	r18, r24
     fec:	39 07       	cpc	r19, r25
     fee:	41 f4       	brne	.+16     	; 0x1000 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     ff0:	eb 81       	ldd	r30, Y+3	; 0x03
     ff2:	fc 81       	ldd	r31, Y+4	; 0x04
     ff4:	86 81       	ldd	r24, Z+6	; 0x06
     ff6:	97 81       	ldd	r25, Z+7	; 0x07
     ff8:	e9 81       	ldd	r30, Y+1	; 0x01
     ffa:	fa 81       	ldd	r31, Y+2	; 0x02
     ffc:	92 83       	std	Z+2, r25	; 0x02
     ffe:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    1000:	eb 81       	ldd	r30, Y+3	; 0x03
    1002:	fc 81       	ldd	r31, Y+4	; 0x04
    1004:	13 86       	std	Z+11, r1	; 0x0b
    1006:	12 86       	std	Z+10, r1	; 0x0a
	( pxList->uxNumberOfItems )--;
    1008:	e9 81       	ldd	r30, Y+1	; 0x01
    100a:	fa 81       	ldd	r31, Y+2	; 0x02
    100c:	80 81       	ld	r24, Z
    100e:	81 50       	subi	r24, 0x01	; 1
    1010:	e9 81       	ldd	r30, Y+1	; 0x01
    1012:	fa 81       	ldd	r31, Y+2	; 0x02
    1014:	80 83       	st	Z, r24
}
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <main>:


void TaskCode(void*pv);
xTaskHandle TaskHandler;
int main (void)
{
    1024:	af 92       	push	r10
    1026:	bf 92       	push	r11
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(PORT_D,PIN_7,OUTPUT);
    103a:	83 e0       	ldi	r24, 0x03	; 3
    103c:	67 e0       	ldi	r22, 0x07	; 7
    103e:	41 e0       	ldi	r20, 0x01	; 1
    1040:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDir>
	xTaskCreate(TaskCode,"led_blink",60,NULL,1,&TaskHandler);
    1044:	20 e6       	ldi	r18, 0x60	; 96
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	83 e4       	ldi	r24, 0x43	; 67
    104a:	98 e0       	ldi	r25, 0x08	; 8
    104c:	e9 e7       	ldi	r30, 0x79	; 121
    104e:	f3 e0       	ldi	r31, 0x03	; 3
    1050:	b9 01       	movw	r22, r18
    1052:	4c e3       	ldi	r20, 0x3C	; 60
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	01 e0       	ldi	r16, 0x01	; 1
    105c:	7f 01       	movw	r14, r30
    105e:	cc 24       	eor	r12, r12
    1060:	dd 24       	eor	r13, r13
    1062:	aa 24       	eor	r10, r10
    1064:	bb 24       	eor	r11, r11
    1066:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <xTaskGenericCreate>

	vTaskStartScheduler();
    106a:	0e 94 3b 12 	call	0x2476	; 0x2476 <vTaskStartScheduler>




return 0;
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	cf 90       	pop	r12
    1080:	bf 90       	pop	r11
    1082:	af 90       	pop	r10
    1084:	08 95       	ret

00001086 <TaskCode>:


void TaskCode(void *pv)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <TaskCode+0x6>
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	9a 83       	std	Y+2, r25	; 0x02
    1092:	89 83       	std	Y+1, r24	; 0x01


	while(1)
	 {
		 DIO_voidSetPinValue(PORT_D,PIN_7,HIGH);
    1094:	83 e0       	ldi	r24, 0x03	; 3
    1096:	67 e0       	ldi	r22, 0x07	; 7
    1098:	41 e0       	ldi	r20, 0x01	; 1
    109a:	0e 94 2c 01 	call	0x258	; 0x258 <DIO_voidSetPinValue>
		 vTaskDelay(1000);
    109e:	68 ee       	ldi	r22, 0xE8	; 232
    10a0:	73 e0       	ldi	r23, 0x03	; 3
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 ee 11 	call	0x23dc	; 0x23dc <vTaskDelay>
		 DIO_voidSetPinValue(PORT_D,PIN_7,LOW);
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	67 e0       	ldi	r22, 0x07	; 7
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	0e 94 2c 01 	call	0x258	; 0x258 <DIO_voidSetPinValue>
		 vTaskDelay(1000);
    10b4:	68 ee       	ldi	r22, 0xE8	; 232
    10b6:	73 e0       	ldi	r23, 0x03	; 3
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 ee 11 	call	0x23dc	; 0x23dc <vTaskDelay>
    10c0:	e9 cf       	rjmp	.-46     	; 0x1094 <TaskCode+0xe>

000010c2 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	28 97       	sbiw	r28, 0x08	; 8
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 83       	std	Y+3, r24	; 0x03
    10da:	7e 83       	std	Y+6, r23	; 0x06
    10dc:	6d 83       	std	Y+5, r22	; 0x05
    10de:	58 87       	std	Y+8, r21	; 0x08
    10e0:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    10e2:	eb 81       	ldd	r30, Y+3	; 0x03
    10e4:	fc 81       	ldd	r31, Y+4	; 0x04
    10e6:	81 e1       	ldi	r24, 0x11	; 17
    10e8:	80 83       	st	Z, r24
	pxTopOfStack--;
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	9c 83       	std	Y+4, r25	; 0x04
    10f2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    10f4:	eb 81       	ldd	r30, Y+3	; 0x03
    10f6:	fc 81       	ldd	r31, Y+4	; 0x04
    10f8:	82 e2       	ldi	r24, 0x22	; 34
    10fa:	80 83       	st	Z, r24
	pxTopOfStack--;
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    1106:	eb 81       	ldd	r30, Y+3	; 0x03
    1108:	fc 81       	ldd	r31, Y+4	; 0x04
    110a:	83 e3       	ldi	r24, 0x33	; 51
    110c:	80 83       	st	Z, r24
	pxTopOfStack--;
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	9c 83       	std	Y+4, r25	; 0x04
    1116:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	9e 81       	ldd	r25, Y+6	; 0x06
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	eb 81       	ldd	r30, Y+3	; 0x03
    1124:	fc 81       	ldd	r31, Y+4	; 0x04
    1126:	80 83       	st	Z, r24
	pxTopOfStack--;
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	9c 81       	ldd	r25, Y+4	; 0x04
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	9a 81       	ldd	r25, Y+2	; 0x02
    1136:	89 2f       	mov	r24, r25
    1138:	99 27       	eor	r25, r25
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	eb 81       	ldd	r30, Y+3	; 0x03
    1142:	fc 81       	ldd	r31, Y+4	; 0x04
    1144:	80 83       	st	Z, r24
	pxTopOfStack--;
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    1150:	eb 81       	ldd	r30, Y+3	; 0x03
    1152:	fc 81       	ldd	r31, Y+4	; 0x04
    1154:	10 82       	st	Z, r1
	pxTopOfStack--;
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	9c 83       	std	Y+4, r25	; 0x04
    115e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    1160:	eb 81       	ldd	r30, Y+3	; 0x03
    1162:	fc 81       	ldd	r31, Y+4	; 0x04
    1164:	80 e8       	ldi	r24, 0x80	; 128
    1166:	80 83       	st	Z, r24
	pxTopOfStack--;
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	9c 83       	std	Y+4, r25	; 0x04
    1170:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    1172:	eb 81       	ldd	r30, Y+3	; 0x03
    1174:	fc 81       	ldd	r31, Y+4	; 0x04
    1176:	10 82       	st	Z, r1
	pxTopOfStack--;
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    1182:	eb 81       	ldd	r30, Y+3	; 0x03
    1184:	fc 81       	ldd	r31, Y+4	; 0x04
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	80 83       	st	Z, r24
	pxTopOfStack--;
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	9c 83       	std	Y+4, r25	; 0x04
    1192:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    1194:	eb 81       	ldd	r30, Y+3	; 0x03
    1196:	fc 81       	ldd	r31, Y+4	; 0x04
    1198:	83 e0       	ldi	r24, 0x03	; 3
    119a:	80 83       	st	Z, r24
	pxTopOfStack--;
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	9c 83       	std	Y+4, r25	; 0x04
    11a4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    11a6:	eb 81       	ldd	r30, Y+3	; 0x03
    11a8:	fc 81       	ldd	r31, Y+4	; 0x04
    11aa:	84 e0       	ldi	r24, 0x04	; 4
    11ac:	80 83       	st	Z, r24
	pxTopOfStack--;
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    11b8:	eb 81       	ldd	r30, Y+3	; 0x03
    11ba:	fc 81       	ldd	r31, Y+4	; 0x04
    11bc:	85 e0       	ldi	r24, 0x05	; 5
    11be:	80 83       	st	Z, r24
	pxTopOfStack--;
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	9c 83       	std	Y+4, r25	; 0x04
    11c8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    11ca:	eb 81       	ldd	r30, Y+3	; 0x03
    11cc:	fc 81       	ldd	r31, Y+4	; 0x04
    11ce:	86 e0       	ldi	r24, 0x06	; 6
    11d0:	80 83       	st	Z, r24
	pxTopOfStack--;
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	9c 83       	std	Y+4, r25	; 0x04
    11da:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    11dc:	eb 81       	ldd	r30, Y+3	; 0x03
    11de:	fc 81       	ldd	r31, Y+4	; 0x04
    11e0:	87 e0       	ldi	r24, 0x07	; 7
    11e2:	80 83       	st	Z, r24
	pxTopOfStack--;
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	9c 83       	std	Y+4, r25	; 0x04
    11ec:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    11ee:	eb 81       	ldd	r30, Y+3	; 0x03
    11f0:	fc 81       	ldd	r31, Y+4	; 0x04
    11f2:	88 e0       	ldi	r24, 0x08	; 8
    11f4:	80 83       	st	Z, r24
	pxTopOfStack--;
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	9c 83       	std	Y+4, r25	; 0x04
    11fe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    1200:	eb 81       	ldd	r30, Y+3	; 0x03
    1202:	fc 81       	ldd	r31, Y+4	; 0x04
    1204:	89 e0       	ldi	r24, 0x09	; 9
    1206:	80 83       	st	Z, r24
	pxTopOfStack--;
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	9c 83       	std	Y+4, r25	; 0x04
    1210:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    1212:	eb 81       	ldd	r30, Y+3	; 0x03
    1214:	fc 81       	ldd	r31, Y+4	; 0x04
    1216:	80 e1       	ldi	r24, 0x10	; 16
    1218:	80 83       	st	Z, r24
	pxTopOfStack--;
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    1224:	eb 81       	ldd	r30, Y+3	; 0x03
    1226:	fc 81       	ldd	r31, Y+4	; 0x04
    1228:	81 e1       	ldi	r24, 0x11	; 17
    122a:	80 83       	st	Z, r24
	pxTopOfStack--;
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	9c 83       	std	Y+4, r25	; 0x04
    1234:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    1236:	eb 81       	ldd	r30, Y+3	; 0x03
    1238:	fc 81       	ldd	r31, Y+4	; 0x04
    123a:	82 e1       	ldi	r24, 0x12	; 18
    123c:	80 83       	st	Z, r24
	pxTopOfStack--;
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	9c 83       	std	Y+4, r25	; 0x04
    1246:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    1248:	eb 81       	ldd	r30, Y+3	; 0x03
    124a:	fc 81       	ldd	r31, Y+4	; 0x04
    124c:	83 e1       	ldi	r24, 0x13	; 19
    124e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	9c 83       	std	Y+4, r25	; 0x04
    1258:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    125a:	eb 81       	ldd	r30, Y+3	; 0x03
    125c:	fc 81       	ldd	r31, Y+4	; 0x04
    125e:	84 e1       	ldi	r24, 0x14	; 20
    1260:	80 83       	st	Z, r24
	pxTopOfStack--;
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	9c 83       	std	Y+4, r25	; 0x04
    126a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    126c:	eb 81       	ldd	r30, Y+3	; 0x03
    126e:	fc 81       	ldd	r31, Y+4	; 0x04
    1270:	85 e1       	ldi	r24, 0x15	; 21
    1272:	80 83       	st	Z, r24
	pxTopOfStack--;
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	9c 83       	std	Y+4, r25	; 0x04
    127c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    127e:	eb 81       	ldd	r30, Y+3	; 0x03
    1280:	fc 81       	ldd	r31, Y+4	; 0x04
    1282:	86 e1       	ldi	r24, 0x16	; 22
    1284:	80 83       	st	Z, r24
	pxTopOfStack--;
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	9c 83       	std	Y+4, r25	; 0x04
    128e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    1290:	eb 81       	ldd	r30, Y+3	; 0x03
    1292:	fc 81       	ldd	r31, Y+4	; 0x04
    1294:	87 e1       	ldi	r24, 0x17	; 23
    1296:	80 83       	st	Z, r24
	pxTopOfStack--;
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	9c 83       	std	Y+4, r25	; 0x04
    12a0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    12a2:	eb 81       	ldd	r30, Y+3	; 0x03
    12a4:	fc 81       	ldd	r31, Y+4	; 0x04
    12a6:	88 e1       	ldi	r24, 0x18	; 24
    12a8:	80 83       	st	Z, r24
	pxTopOfStack--;
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	9c 83       	std	Y+4, r25	; 0x04
    12b2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    12b4:	eb 81       	ldd	r30, Y+3	; 0x03
    12b6:	fc 81       	ldd	r31, Y+4	; 0x04
    12b8:	89 e1       	ldi	r24, 0x19	; 25
    12ba:	80 83       	st	Z, r24
	pxTopOfStack--;
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    12c6:	eb 81       	ldd	r30, Y+3	; 0x03
    12c8:	fc 81       	ldd	r31, Y+4	; 0x04
    12ca:	80 e2       	ldi	r24, 0x20	; 32
    12cc:	80 83       	st	Z, r24
	pxTopOfStack--;
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	9c 83       	std	Y+4, r25	; 0x04
    12d6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    12d8:	eb 81       	ldd	r30, Y+3	; 0x03
    12da:	fc 81       	ldd	r31, Y+4	; 0x04
    12dc:	81 e2       	ldi	r24, 0x21	; 33
    12de:	80 83       	st	Z, r24
	pxTopOfStack--;
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    12ea:	eb 81       	ldd	r30, Y+3	; 0x03
    12ec:	fc 81       	ldd	r31, Y+4	; 0x04
    12ee:	82 e2       	ldi	r24, 0x22	; 34
    12f0:	80 83       	st	Z, r24
	pxTopOfStack--;
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	9c 83       	std	Y+4, r25	; 0x04
    12fa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    12fc:	eb 81       	ldd	r30, Y+3	; 0x03
    12fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1300:	83 e2       	ldi	r24, 0x23	; 35
    1302:	80 83       	st	Z, r24
	pxTopOfStack--;
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9c 83       	std	Y+4, r25	; 0x04
    130c:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    130e:	8f 81       	ldd	r24, Y+7	; 0x07
    1310:	98 85       	ldd	r25, Y+8	; 0x08
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	eb 81       	ldd	r30, Y+3	; 0x03
    131a:	fc 81       	ldd	r31, Y+4	; 0x04
    131c:	80 83       	st	Z, r24
	pxTopOfStack--;
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	9c 83       	std	Y+4, r25	; 0x04
    1326:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	89 2f       	mov	r24, r25
    132e:	99 27       	eor	r25, r25
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	eb 81       	ldd	r30, Y+3	; 0x03
    1338:	fc 81       	ldd	r31, Y+4	; 0x04
    133a:	80 83       	st	Z, r24
	pxTopOfStack--;
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9c 83       	std	Y+4, r25	; 0x04
    1344:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    1346:	eb 81       	ldd	r30, Y+3	; 0x03
    1348:	fc 81       	ldd	r31, Y+4	; 0x04
    134a:	86 e2       	ldi	r24, 0x26	; 38
    134c:	80 83       	st	Z, r24
	pxTopOfStack--;
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	9c 83       	std	Y+4, r25	; 0x04
    1356:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    1358:	eb 81       	ldd	r30, Y+3	; 0x03
    135a:	fc 81       	ldd	r31, Y+4	; 0x04
    135c:	87 e2       	ldi	r24, 0x27	; 39
    135e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	9c 83       	std	Y+4, r25	; 0x04
    1368:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    136a:	eb 81       	ldd	r30, Y+3	; 0x03
    136c:	fc 81       	ldd	r31, Y+4	; 0x04
    136e:	88 e2       	ldi	r24, 0x28	; 40
    1370:	80 83       	st	Z, r24
	pxTopOfStack--;
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	9c 83       	std	Y+4, r25	; 0x04
    137a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    137c:	eb 81       	ldd	r30, Y+3	; 0x03
    137e:	fc 81       	ldd	r31, Y+4	; 0x04
    1380:	89 e2       	ldi	r24, 0x29	; 41
    1382:	80 83       	st	Z, r24
	pxTopOfStack--;
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	9c 83       	std	Y+4, r25	; 0x04
    138c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    138e:	eb 81       	ldd	r30, Y+3	; 0x03
    1390:	fc 81       	ldd	r31, Y+4	; 0x04
    1392:	80 e3       	ldi	r24, 0x30	; 48
    1394:	80 83       	st	Z, r24
	pxTopOfStack--;
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9c 83       	std	Y+4, r25	; 0x04
    139e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    13a0:	eb 81       	ldd	r30, Y+3	; 0x03
    13a2:	fc 81       	ldd	r31, Y+4	; 0x04
    13a4:	81 e3       	ldi	r24, 0x31	; 49
    13a6:	80 83       	st	Z, r24
	pxTopOfStack--;
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	9c 83       	std	Y+4, r25	; 0x04
    13b0:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    13b6:	28 96       	adiw	r28, 0x08	; 8
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    13d0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    13d4:	a0 91 18 03 	lds	r26, 0x0318
    13d8:	b0 91 19 03 	lds	r27, 0x0319
    13dc:	cd 91       	ld	r28, X+
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	dd 91       	ld	r29, X+
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	ff 91       	pop	r31
    13e6:	ef 91       	pop	r30
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	bf 91       	pop	r27
    13ee:	af 91       	pop	r26
    13f0:	9f 91       	pop	r25
    13f2:	8f 91       	pop	r24
    13f4:	7f 91       	pop	r23
    13f6:	6f 91       	pop	r22
    13f8:	5f 91       	pop	r21
    13fa:	4f 91       	pop	r20
    13fc:	3f 91       	pop	r19
    13fe:	2f 91       	pop	r18
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	bf 90       	pop	r11
    140e:	af 90       	pop	r10
    1410:	9f 90       	pop	r9
    1412:	8f 90       	pop	r8
    1414:	7f 90       	pop	r7
    1416:	6f 90       	pop	r6
    1418:	5f 90       	pop	r5
    141a:	4f 90       	pop	r4
    141c:	3f 90       	pop	r3
    141e:	2f 90       	pop	r2
    1420:	1f 90       	pop	r1
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    1428:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    142a:	81 e0       	ldi	r24, 0x01	; 1
}
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1440:	0f 92       	push	r0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	0f 92       	push	r0
    1448:	1f 92       	push	r1
    144a:	11 24       	eor	r1, r1
    144c:	2f 92       	push	r2
    144e:	3f 92       	push	r3
    1450:	4f 92       	push	r4
    1452:	5f 92       	push	r5
    1454:	6f 92       	push	r6
    1456:	7f 92       	push	r7
    1458:	8f 92       	push	r8
    145a:	9f 92       	push	r9
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	8f 93       	push	r24
    147a:	9f 93       	push	r25
    147c:	af 93       	push	r26
    147e:	bf 93       	push	r27
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31
    1488:	a0 91 18 03 	lds	r26, 0x0318
    148c:	b0 91 19 03 	lds	r27, 0x0319
    1490:	0d b6       	in	r0, 0x3d	; 61
    1492:	0d 92       	st	X+, r0
    1494:	0e b6       	in	r0, 0x3e	; 62
    1496:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1498:	0e 94 82 14 	call	0x2904	; 0x2904 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    149c:	a0 91 18 03 	lds	r26, 0x0318
    14a0:	b0 91 19 03 	lds	r27, 0x0319
    14a4:	cd 91       	ld	r28, X+
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	dd 91       	ld	r29, X+
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	ff 91       	pop	r31
    14ae:	ef 91       	pop	r30
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	bf 91       	pop	r27
    14b6:	af 91       	pop	r26
    14b8:	9f 91       	pop	r25
    14ba:	8f 91       	pop	r24
    14bc:	7f 91       	pop	r23
    14be:	6f 91       	pop	r22
    14c0:	5f 91       	pop	r21
    14c2:	4f 91       	pop	r20
    14c4:	3f 91       	pop	r19
    14c6:	2f 91       	pop	r18
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	bf 90       	pop	r11
    14d6:	af 90       	pop	r10
    14d8:	9f 90       	pop	r9
    14da:	8f 90       	pop	r8
    14dc:	7f 90       	pop	r7
    14de:	6f 90       	pop	r6
    14e0:	5f 90       	pop	r5
    14e2:	4f 90       	pop	r4
    14e4:	3f 90       	pop	r3
    14e6:	2f 90       	pop	r2
    14e8:	1f 90       	pop	r1
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	0f 90       	pop	r0

	asm volatile ( "ret" );
    14f0:	08 95       	ret

000014f2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	0f 92       	push	r0
    14fa:	1f 92       	push	r1
    14fc:	11 24       	eor	r1, r1
    14fe:	2f 92       	push	r2
    1500:	3f 92       	push	r3
    1502:	4f 92       	push	r4
    1504:	5f 92       	push	r5
    1506:	6f 92       	push	r6
    1508:	7f 92       	push	r7
    150a:	8f 92       	push	r8
    150c:	9f 92       	push	r9
    150e:	af 92       	push	r10
    1510:	bf 92       	push	r11
    1512:	cf 92       	push	r12
    1514:	df 92       	push	r13
    1516:	ef 92       	push	r14
    1518:	ff 92       	push	r15
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	2f 93       	push	r18
    1520:	3f 93       	push	r19
    1522:	4f 93       	push	r20
    1524:	5f 93       	push	r21
    1526:	6f 93       	push	r22
    1528:	7f 93       	push	r23
    152a:	8f 93       	push	r24
    152c:	9f 93       	push	r25
    152e:	af 93       	push	r26
    1530:	bf 93       	push	r27
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	ef 93       	push	r30
    1538:	ff 93       	push	r31
    153a:	a0 91 18 03 	lds	r26, 0x0318
    153e:	b0 91 19 03 	lds	r27, 0x0319
    1542:	0d b6       	in	r0, 0x3d	; 61
    1544:	0d 92       	st	X+, r0
    1546:	0e b6       	in	r0, 0x3e	; 62
    1548:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    154a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskIncrementTick>
	vTaskSwitchContext();
    154e:	0e 94 82 14 	call	0x2904	; 0x2904 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1552:	a0 91 18 03 	lds	r26, 0x0318
    1556:	b0 91 19 03 	lds	r27, 0x0319
    155a:	cd 91       	ld	r28, X+
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	dd 91       	ld	r29, X+
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	ff 91       	pop	r31
    1564:	ef 91       	pop	r30
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	bf 91       	pop	r27
    156c:	af 91       	pop	r26
    156e:	9f 91       	pop	r25
    1570:	8f 91       	pop	r24
    1572:	7f 91       	pop	r23
    1574:	6f 91       	pop	r22
    1576:	5f 91       	pop	r21
    1578:	4f 91       	pop	r20
    157a:	3f 91       	pop	r19
    157c:	2f 91       	pop	r18
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	df 90       	pop	r13
    1588:	cf 90       	pop	r12
    158a:	bf 90       	pop	r11
    158c:	af 90       	pop	r10
    158e:	9f 90       	pop	r9
    1590:	8f 90       	pop	r8
    1592:	7f 90       	pop	r7
    1594:	6f 90       	pop	r6
    1596:	5f 90       	pop	r5
    1598:	4f 90       	pop	r4
    159a:	3f 90       	pop	r3
    159c:	2f 90       	pop	r2
    159e:	1f 90       	pop	r1
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    15a6:	08 95       	ret

000015a8 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <prvSetupTimerInterrupt+0x6>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <prvSetupTimerInterrupt+0x8>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <prvSetupTimerInterrupt+0xa>
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    15b6:	80 ee       	ldi	r24, 0xE0	; 224
    15b8:	9e e2       	ldi	r25, 0x2E	; 46
    15ba:	a0 e0       	ldi	r26, 0x00	; 0
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	8b 83       	std	Y+3, r24	; 0x03
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	ad 83       	std	Y+5, r26	; 0x05
    15c4:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	ad 81       	ldd	r26, Y+5	; 0x05
    15cc:	be 81       	ldd	r27, Y+6	; 0x06
    15ce:	68 94       	set
    15d0:	15 f8       	bld	r1, 5
    15d2:	b6 95       	lsr	r27
    15d4:	a7 95       	ror	r26
    15d6:	97 95       	ror	r25
    15d8:	87 95       	ror	r24
    15da:	16 94       	lsr	r1
    15dc:	d1 f7       	brne	.-12     	; 0x15d2 <prvSetupTimerInterrupt+0x2a>
    15de:	8b 83       	std	Y+3, r24	; 0x03
    15e0:	9c 83       	std	Y+4, r25	; 0x04
    15e2:	ad 83       	std	Y+5, r26	; 0x05
    15e4:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	ad 81       	ldd	r26, Y+5	; 0x05
    15ec:	be 81       	ldd	r27, Y+6	; 0x06
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	a1 09       	sbc	r26, r1
    15f2:	b1 09       	sbc	r27, r1
    15f4:	8b 83       	std	Y+3, r24	; 0x03
    15f6:	9c 83       	std	Y+4, r25	; 0x04
    15f8:	ad 83       	std	Y+5, r26	; 0x05
    15fa:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	ad 81       	ldd	r26, Y+5	; 0x05
    1606:	be 81       	ldd	r27, Y+6	; 0x06
    1608:	89 2f       	mov	r24, r25
    160a:	9a 2f       	mov	r25, r26
    160c:	ab 2f       	mov	r26, r27
    160e:	bb 27       	eor	r27, r27
    1610:	8b 83       	std	Y+3, r24	; 0x03
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	ad 83       	std	Y+5, r26	; 0x05
    1616:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    161c:	eb e4       	ldi	r30, 0x4B	; 75
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    1624:	ea e4       	ldi	r30, 0x4A	; 74
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    162c:	8b e0       	ldi	r24, 0x0B	; 11
    162e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    1630:	ee e4       	ldi	r30, 0x4E	; 78
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    1638:	e9 e5       	ldi	r30, 0x59	; 89
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	80 61       	ori	r24, 0x10	; 16
    1644:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    1646:	e9 e5       	ldi	r30, 0x59	; 89
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	80 83       	st	Z, r24
}
    164e:	26 96       	adiw	r28, 0x06	; 6
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <__vector_7>:
	 * tick count.  We don't need to switch context, this can only be done by
	 * manual calls to taskYIELD();
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal ) );
	void TIMER1_COMPA_vect( void )
	{
    1660:	1f 92       	push	r1
    1662:	0f 92       	push	r0
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	0f 92       	push	r0
    1668:	11 24       	eor	r1, r1
    166a:	2f 93       	push	r18
    166c:	3f 93       	push	r19
    166e:	4f 93       	push	r20
    1670:	5f 93       	push	r21
    1672:	6f 93       	push	r22
    1674:	7f 93       	push	r23
    1676:	8f 93       	push	r24
    1678:	9f 93       	push	r25
    167a:	af 93       	push	r26
    167c:	bf 93       	push	r27
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
		vTaskIncrementTick();
    168a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskIncrementTick>
	}
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	bf 91       	pop	r27
    1698:	af 91       	pop	r26
    169a:	9f 91       	pop	r25
    169c:	8f 91       	pop	r24
    169e:	7f 91       	pop	r23
    16a0:	6f 91       	pop	r22
    16a2:	5f 91       	pop	r21
    16a4:	4f 91       	pop	r20
    16a6:	3f 91       	pop	r19
    16a8:	2f 91       	pop	r18
    16aa:	0f 90       	pop	r0
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	0f 90       	pop	r0
    16b0:	1f 90       	pop	r1
    16b2:	18 95       	reti

000016b4 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	28 97       	sbiw	r28, 0x08	; 8
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	8f 83       	std	Y+7, r24	; 0x07
    16ca:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    16cc:	1a 82       	std	Y+2, r1	; 0x02
    16ce:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    16d0:	8f 81       	ldd	r24, Y+7	; 0x07
    16d2:	88 23       	and	r24, r24
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <xQueueCreate+0x24>
    16d6:	8c c0       	rjmp	.+280    	; 0x17f0 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    16d8:	83 e2       	ldi	r24, 0x23	; 35
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 57 06 	call	0xcae	; 0xcae <pvPortMalloc>
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	09 f4       	brne	.+2      	; 0x16ee <xQueueCreate+0x3a>
    16ec:	81 c0       	rjmp	.+258    	; 0x17f0 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    16ee:	8f 81       	ldd	r24, Y+7	; 0x07
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	88 85       	ldd	r24, Y+8	; 0x08
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	ac 01       	movw	r20, r24
    16fc:	24 9f       	mul	r18, r20
    16fe:	c0 01       	movw	r24, r0
    1700:	25 9f       	mul	r18, r21
    1702:	90 0d       	add	r25, r0
    1704:	34 9f       	mul	r19, r20
    1706:	90 0d       	add	r25, r0
    1708:	11 24       	eor	r1, r1
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	0e 94 57 06 	call	0xcae	; 0xcae <pvPortMalloc>
    1718:	ed 81       	ldd	r30, Y+5	; 0x05
    171a:	fe 81       	ldd	r31, Y+6	; 0x06
    171c:	91 83       	std	Z+1, r25	; 0x01
    171e:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    1720:	ed 81       	ldd	r30, Y+5	; 0x05
    1722:	fe 81       	ldd	r31, Y+6	; 0x06
    1724:	80 81       	ld	r24, Z
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	09 f4       	brne	.+2      	; 0x172e <xQueueCreate+0x7a>
    172c:	5d c0       	rjmp	.+186    	; 0x17e8 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    172e:	ed 81       	ldd	r30, Y+5	; 0x05
    1730:	fe 81       	ldd	r31, Y+6	; 0x06
    1732:	40 81       	ld	r20, Z
    1734:	51 81       	ldd	r21, Z+1	; 0x01
    1736:	8f 81       	ldd	r24, Y+7	; 0x07
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	88 85       	ldd	r24, Y+8	; 0x08
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	bc 01       	movw	r22, r24
    1744:	26 9f       	mul	r18, r22
    1746:	c0 01       	movw	r24, r0
    1748:	27 9f       	mul	r18, r23
    174a:	90 0d       	add	r25, r0
    174c:	36 9f       	mul	r19, r22
    174e:	90 0d       	add	r25, r0
    1750:	11 24       	eor	r1, r1
    1752:	84 0f       	add	r24, r20
    1754:	95 1f       	adc	r25, r21
    1756:	ed 81       	ldd	r30, Y+5	; 0x05
    1758:	fe 81       	ldd	r31, Y+6	; 0x06
    175a:	93 83       	std	Z+3, r25	; 0x03
    175c:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    175e:	ed 81       	ldd	r30, Y+5	; 0x05
    1760:	fe 81       	ldd	r31, Y+6	; 0x06
    1762:	16 8e       	std	Z+30, r1	; 0x1e
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    1764:	ed 81       	ldd	r30, Y+5	; 0x05
    1766:	fe 81       	ldd	r31, Y+6	; 0x06
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	ed 81       	ldd	r30, Y+5	; 0x05
    176e:	fe 81       	ldd	r31, Y+6	; 0x06
    1770:	95 83       	std	Z+5, r25	; 0x05
    1772:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    1774:	ed 81       	ldd	r30, Y+5	; 0x05
    1776:	fe 81       	ldd	r31, Y+6	; 0x06
    1778:	40 81       	ld	r20, Z
    177a:	51 81       	ldd	r21, Z+1	; 0x01
    177c:	8f 81       	ldd	r24, Y+7	; 0x07
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	9c 01       	movw	r18, r24
    1784:	21 50       	subi	r18, 0x01	; 1
    1786:	30 40       	sbci	r19, 0x00	; 0
    1788:	88 85       	ldd	r24, Y+8	; 0x08
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	bc 01       	movw	r22, r24
    1790:	26 9f       	mul	r18, r22
    1792:	c0 01       	movw	r24, r0
    1794:	27 9f       	mul	r18, r23
    1796:	90 0d       	add	r25, r0
    1798:	36 9f       	mul	r19, r22
    179a:	90 0d       	add	r25, r0
    179c:	11 24       	eor	r1, r1
    179e:	84 0f       	add	r24, r20
    17a0:	95 1f       	adc	r25, r21
    17a2:	ed 81       	ldd	r30, Y+5	; 0x05
    17a4:	fe 81       	ldd	r31, Y+6	; 0x06
    17a6:	97 83       	std	Z+7, r25	; 0x07
    17a8:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    17aa:	ed 81       	ldd	r30, Y+5	; 0x05
    17ac:	fe 81       	ldd	r31, Y+6	; 0x06
    17ae:	8f 81       	ldd	r24, Y+7	; 0x07
    17b0:	87 8f       	std	Z+31, r24	; 0x1f
				pxNewQueue->uxItemSize = uxItemSize;
    17b2:	ed 81       	ldd	r30, Y+5	; 0x05
    17b4:	fe 81       	ldd	r31, Y+6	; 0x06
    17b6:	88 85       	ldd	r24, Y+8	; 0x08
    17b8:	80 a3       	std	Z+32, r24	; 0x20
				pxNewQueue->xRxLock = queueUNLOCKED;
    17ba:	ed 81       	ldd	r30, Y+5	; 0x05
    17bc:	fe 81       	ldd	r31, Y+6	; 0x06
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	81 a3       	std	Z+33, r24	; 0x21
				pxNewQueue->xTxLock = queueUNLOCKED;
    17c2:	ed 81       	ldd	r30, Y+5	; 0x05
    17c4:	fe 81       	ldd	r31, Y+6	; 0x06
    17c6:	8f ef       	ldi	r24, 0xFF	; 255
    17c8:	82 a3       	std	Z+34, r24	; 0x22

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    17ca:	8d 81       	ldd	r24, Y+5	; 0x05
    17cc:	9e 81       	ldd	r25, Y+6	; 0x06
    17ce:	08 96       	adiw	r24, 0x08	; 8
    17d0:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	43 96       	adiw	r24, 0x13	; 19
    17da:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	9e 81       	ldd	r25, Y+6	; 0x06
    17ec:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    17f4:	28 96       	adiw	r28, 0x08	; 8
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1806:	0f 93       	push	r16
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	60 97       	sbiw	r28, 0x10	; 16
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	98 87       	std	Y+8, r25	; 0x08
    181e:	8f 83       	std	Y+7, r24	; 0x07
    1820:	7a 87       	std	Y+10, r23	; 0x0a
    1822:	69 87       	std	Y+9, r22	; 0x09
    1824:	2b 87       	std	Y+11, r18	; 0x0b
    1826:	3c 87       	std	Y+12, r19	; 0x0c
    1828:	4d 87       	std	Y+13, r20	; 0x0d
    182a:	5e 87       	std	Y+14, r21	; 0x0e
    182c:	0f 87       	std	Y+15, r16	; 0x0f
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    182e:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1836:	ef 81       	ldd	r30, Y+7	; 0x07
    1838:	f8 85       	ldd	r31, Y+8	; 0x08
    183a:	96 8d       	ldd	r25, Z+30	; 0x1e
    183c:	ef 81       	ldd	r30, Y+7	; 0x07
    183e:	f8 85       	ldd	r31, Y+8	; 0x08
    1840:	87 8d       	ldd	r24, Z+31	; 0x1f
    1842:	98 17       	cp	r25, r24
    1844:	d8 f4       	brcc	.+54     	; 0x187c <xQueueGenericSend+0x76>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1846:	8f 81       	ldd	r24, Y+7	; 0x07
    1848:	98 85       	ldd	r25, Y+8	; 0x08
    184a:	29 85       	ldd	r18, Y+9	; 0x09
    184c:	3a 85       	ldd	r19, Y+10	; 0x0a
    184e:	b9 01       	movw	r22, r18
    1850:	4f 85       	ldd	r20, Y+15	; 0x0f
    1852:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1856:	ef 81       	ldd	r30, Y+7	; 0x07
    1858:	f8 85       	ldd	r31, Y+8	; 0x08
    185a:	83 89       	ldd	r24, Z+19	; 0x13
    185c:	88 23       	and	r24, r24
    185e:	49 f0       	breq	.+18     	; 0x1872 <xQueueGenericSend+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1860:	8f 81       	ldd	r24, Y+7	; 0x07
    1862:	98 85       	ldd	r25, Y+8	; 0x08
    1864:	43 96       	adiw	r24, 0x13	; 19
    1866:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <xTaskRemoveFromEventList>
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	11 f4       	brne	.+4      	; 0x1872 <xQueueGenericSend+0x6c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    186e:	0e 94 20 0a 	call	0x1440	; 0x1440 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    1872:	0f 90       	pop	r0
    1874:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	88 8b       	std	Y+16, r24	; 0x10
    187a:	63 c0       	rjmp	.+198    	; 0x1942 <xQueueGenericSend+0x13c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    187c:	8b 85       	ldd	r24, Y+11	; 0x0b
    187e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1880:	ad 85       	ldd	r26, Y+13	; 0x0d
    1882:	be 85       	ldd	r27, Y+14	; 0x0e
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	a1 05       	cpc	r26, r1
    1888:	b1 05       	cpc	r27, r1
    188a:	21 f4       	brne	.+8      	; 0x1894 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1890:	18 8a       	std	Y+16, r1	; 0x10
    1892:	57 c0       	rjmp	.+174    	; 0x1942 <xQueueGenericSend+0x13c>
				}
				else if( xEntryTimeSet == pdFALSE )
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	88 23       	and	r24, r24
    1898:	31 f4       	brne	.+12     	; 0x18a6 <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    189a:	ce 01       	movw	r24, r28
    189c:	02 96       	adiw	r24, 0x02	; 2
    189e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    18aa:	0e 94 82 12 	call	0x2504	; 0x2504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	0f 92       	push	r0
    18b4:	ef 81       	ldd	r30, Y+7	; 0x07
    18b6:	f8 85       	ldd	r31, Y+8	; 0x08
    18b8:	81 a1       	ldd	r24, Z+33	; 0x21
    18ba:	8f 3f       	cpi	r24, 0xFF	; 255
    18bc:	19 f4       	brne	.+6      	; 0x18c4 <xQueueGenericSend+0xbe>
    18be:	ef 81       	ldd	r30, Y+7	; 0x07
    18c0:	f8 85       	ldd	r31, Y+8	; 0x08
    18c2:	11 a2       	std	Z+33, r1	; 0x21
    18c4:	ef 81       	ldd	r30, Y+7	; 0x07
    18c6:	f8 85       	ldd	r31, Y+8	; 0x08
    18c8:	82 a1       	ldd	r24, Z+34	; 0x22
    18ca:	8f 3f       	cpi	r24, 0xFF	; 255
    18cc:	19 f4       	brne	.+6      	; 0x18d4 <xQueueGenericSend+0xce>
    18ce:	ef 81       	ldd	r30, Y+7	; 0x07
    18d0:	f8 85       	ldd	r31, Y+8	; 0x08
    18d2:	12 a2       	std	Z+34, r1	; 0x22
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    18d8:	ce 01       	movw	r24, r28
    18da:	02 96       	adiw	r24, 0x02	; 2
    18dc:	9e 01       	movw	r18, r28
    18de:	25 5f       	subi	r18, 0xF5	; 245
    18e0:	3f 4f       	sbci	r19, 0xFF	; 255
    18e2:	b9 01       	movw	r22, r18
    18e4:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <xTaskCheckForTimeOut>
    18e8:	88 23       	and	r24, r24
    18ea:	21 f5       	brne	.+72     	; 0x1934 <xQueueGenericSend+0x12e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    18ec:	8f 81       	ldd	r24, Y+7	; 0x07
    18ee:	98 85       	ldd	r25, Y+8	; 0x08
    18f0:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <prvIsQueueFull>
    18f4:	88 23       	and	r24, r24
    18f6:	b9 f0       	breq	.+46     	; 0x1926 <xQueueGenericSend+0x120>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    18f8:	8f 81       	ldd	r24, Y+7	; 0x07
    18fa:	98 85       	ldd	r25, Y+8	; 0x08
    18fc:	08 96       	adiw	r24, 0x08	; 8
    18fe:	2b 85       	ldd	r18, Y+11	; 0x0b
    1900:	3c 85       	ldd	r19, Y+12	; 0x0c
    1902:	4d 85       	ldd	r20, Y+13	; 0x0d
    1904:	5e 85       	ldd	r21, Y+14	; 0x0e
    1906:	ba 01       	movw	r22, r20
    1908:	a9 01       	movw	r20, r18
    190a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    190e:	8f 81       	ldd	r24, Y+7	; 0x07
    1910:	98 85       	ldd	r25, Y+8	; 0x08
    1912:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1916:	0e 94 8e 12 	call	0x251c	; 0x251c <xTaskResumeAll>
    191a:	88 23       	and	r24, r24
    191c:	09 f0       	breq	.+2      	; 0x1920 <xQueueGenericSend+0x11a>
    191e:	88 cf       	rjmp	.-240    	; 0x1830 <xQueueGenericSend+0x2a>
				{
					portYIELD_WITHIN_API();
    1920:	0e 94 20 0a 	call	0x1440	; 0x1440 <vPortYield>
    1924:	85 cf       	rjmp	.-246    	; 0x1830 <xQueueGenericSend+0x2a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1926:	8f 81       	ldd	r24, Y+7	; 0x07
    1928:	98 85       	ldd	r25, Y+8	; 0x08
    192a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    192e:	0e 94 8e 12 	call	0x251c	; 0x251c <xTaskResumeAll>
    1932:	7e cf       	rjmp	.-260    	; 0x1830 <xQueueGenericSend+0x2a>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1934:	8f 81       	ldd	r24, Y+7	; 0x07
    1936:	98 85       	ldd	r25, Y+8	; 0x08
    1938:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    193c:	0e 94 8e 12 	call	0x251c	; 0x251c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1940:	18 8a       	std	Y+16, r1	; 0x10
    1942:	88 89       	ldd	r24, Y+16	; 0x10
		}
	}
}
    1944:	60 96       	adiw	r28, 0x10	; 16
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	0f 91       	pop	r16
    1956:	08 95       	ret

00001958 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	29 97       	sbiw	r28, 0x09	; 9
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	9c 83       	std	Y+4, r25	; 0x04
    196e:	8b 83       	std	Y+3, r24	; 0x03
    1970:	7e 83       	std	Y+6, r23	; 0x06
    1972:	6d 83       	std	Y+5, r22	; 0x05
    1974:	58 87       	std	Y+8, r21	; 0x08
    1976:	4f 83       	std	Y+7, r20	; 0x07
    1978:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    197a:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    197c:	eb 81       	ldd	r30, Y+3	; 0x03
    197e:	fc 81       	ldd	r31, Y+4	; 0x04
    1980:	96 8d       	ldd	r25, Z+30	; 0x1e
    1982:	eb 81       	ldd	r30, Y+3	; 0x03
    1984:	fc 81       	ldd	r31, Y+4	; 0x04
    1986:	87 8d       	ldd	r24, Z+31	; 0x1f
    1988:	98 17       	cp	r25, r24
    198a:	40 f5       	brcc	.+80     	; 0x19dc <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	2d 81       	ldd	r18, Y+5	; 0x05
    1992:	3e 81       	ldd	r19, Y+6	; 0x06
    1994:	b9 01       	movw	r22, r18
    1996:	49 85       	ldd	r20, Y+9	; 0x09
    1998:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    199c:	eb 81       	ldd	r30, Y+3	; 0x03
    199e:	fc 81       	ldd	r31, Y+4	; 0x04
    19a0:	82 a1       	ldd	r24, Z+34	; 0x22
    19a2:	8f 3f       	cpi	r24, 0xFF	; 255
    19a4:	89 f4       	brne	.+34     	; 0x19c8 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    19a6:	eb 81       	ldd	r30, Y+3	; 0x03
    19a8:	fc 81       	ldd	r31, Y+4	; 0x04
    19aa:	83 89       	ldd	r24, Z+19	; 0x13
    19ac:	88 23       	and	r24, r24
    19ae:	99 f0       	breq	.+38     	; 0x19d6 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	43 96       	adiw	r24, 0x13	; 19
    19b6:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <xTaskRemoveFromEventList>
    19ba:	88 23       	and	r24, r24
    19bc:	61 f0       	breq	.+24     	; 0x19d6 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    19be:	ef 81       	ldd	r30, Y+7	; 0x07
    19c0:	f8 85       	ldd	r31, Y+8	; 0x08
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	80 83       	st	Z, r24
    19c6:	07 c0       	rjmp	.+14     	; 0x19d6 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    19c8:	eb 81       	ldd	r30, Y+3	; 0x03
    19ca:	fc 81       	ldd	r31, Y+4	; 0x04
    19cc:	82 a1       	ldd	r24, Z+34	; 0x22
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
    19d0:	eb 81       	ldd	r30, Y+3	; 0x03
    19d2:	fc 81       	ldd	r31, Y+4	; 0x04
    19d4:	82 a3       	std	Z+34, r24	; 0x22
			}

			xReturn = pdPASS;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	8a 83       	std	Y+2, r24	; 0x02
    19da:	01 c0       	rjmp	.+2      	; 0x19de <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    19dc:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    19e0:	29 96       	adiw	r28, 0x09	; 9
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    19f2:	0f 93       	push	r16
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	62 97       	sbiw	r28, 0x12	; 18
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	9a 87       	std	Y+10, r25	; 0x0a
    1a0a:	89 87       	std	Y+9, r24	; 0x09
    1a0c:	7c 87       	std	Y+12, r23	; 0x0c
    1a0e:	6b 87       	std	Y+11, r22	; 0x0b
    1a10:	2d 87       	std	Y+13, r18	; 0x0d
    1a12:	3e 87       	std	Y+14, r19	; 0x0e
    1a14:	4f 87       	std	Y+15, r20	; 0x0f
    1a16:	58 8b       	std	Y+16, r21	; 0x10
    1a18:	09 8b       	std	Y+17, r16	; 0x11
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1a1a:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1a22:	e9 85       	ldd	r30, Y+9	; 0x09
    1a24:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a26:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a28:	88 23       	and	r24, r24
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <xQueueGenericReceive+0x3c>
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <xQueueGenericReceive+0xba>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1a2e:	e9 85       	ldd	r30, Y+9	; 0x09
    1a30:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a32:	86 81       	ldd	r24, Z+6	; 0x06
    1a34:	97 81       	ldd	r25, Z+7	; 0x07
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a40:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a42:	b9 01       	movw	r22, r18
    1a44:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1a48:	89 89       	ldd	r24, Y+17	; 0x11
    1a4a:	88 23       	and	r24, r24
    1a4c:	b1 f4       	brne	.+44     	; 0x1a7a <xQueueGenericReceive+0x88>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1a4e:	e9 85       	ldd	r30, Y+9	; 0x09
    1a50:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a52:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a54:	81 50       	subi	r24, 0x01	; 1
    1a56:	e9 85       	ldd	r30, Y+9	; 0x09
    1a58:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a5a:	86 8f       	std	Z+30, r24	; 0x1e
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a5c:	e9 85       	ldd	r30, Y+9	; 0x09
    1a5e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a60:	80 85       	ldd	r24, Z+8	; 0x08
    1a62:	88 23       	and	r24, r24
    1a64:	f1 f0       	breq	.+60     	; 0x1aa2 <xQueueGenericReceive+0xb0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1a66:	89 85       	ldd	r24, Y+9	; 0x09
    1a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6a:	08 96       	adiw	r24, 0x08	; 8
    1a6c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <xTaskRemoveFromEventList>
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	b9 f4       	brne	.+46     	; 0x1aa2 <xQueueGenericReceive+0xb0>
						{
							portYIELD_WITHIN_API();
    1a74:	0e 94 20 0a 	call	0x1440	; 0x1440 <vPortYield>
    1a78:	14 c0       	rjmp	.+40     	; 0x1aa2 <xQueueGenericReceive+0xb0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    1a7a:	e9 85       	ldd	r30, Y+9	; 0x09
    1a7c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	9a 81       	ldd	r25, Y+2	; 0x02
    1a82:	97 83       	std	Z+7, r25	; 0x07
    1a84:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a86:	e9 85       	ldd	r30, Y+9	; 0x09
    1a88:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a8a:	83 89       	ldd	r24, Z+19	; 0x13
    1a8c:	88 23       	and	r24, r24
    1a8e:	49 f0       	breq	.+18     	; 0x1aa2 <xQueueGenericReceive+0xb0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	43 96       	adiw	r24, 0x13	; 19
    1a96:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <xTaskRemoveFromEventList>
    1a9a:	88 23       	and	r24, r24
    1a9c:	11 f0       	breq	.+4      	; 0x1aa2 <xQueueGenericReceive+0xb0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1a9e:	0e 94 20 0a 	call	0x1440	; 0x1440 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    1aa2:	0f 90       	pop	r0
    1aa4:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	8a 8b       	std	Y+18, r24	; 0x12
    1aaa:	63 c0       	rjmp	.+198    	; 0x1b72 <xQueueGenericReceive+0x180>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab0:	af 85       	ldd	r26, Y+15	; 0x0f
    1ab2:	b8 89       	ldd	r27, Y+16	; 0x10
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	a1 05       	cpc	r26, r1
    1ab8:	b1 05       	cpc	r27, r1
    1aba:	21 f4       	brne	.+8      	; 0x1ac4 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1abc:	0f 90       	pop	r0
    1abe:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1ac0:	1a 8a       	std	Y+18, r1	; 0x12
    1ac2:	57 c0       	rjmp	.+174    	; 0x1b72 <xQueueGenericReceive+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	88 23       	and	r24, r24
    1ac8:	31 f4       	brne	.+12     	; 0x1ad6 <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1aca:	ce 01       	movw	r24, r28
    1acc:	04 96       	adiw	r24, 0x04	; 4
    1ace:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1ada:	0e 94 82 12 	call	0x2504	; 0x2504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	0f 92       	push	r0
    1ae4:	e9 85       	ldd	r30, Y+9	; 0x09
    1ae6:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ae8:	81 a1       	ldd	r24, Z+33	; 0x21
    1aea:	8f 3f       	cpi	r24, 0xFF	; 255
    1aec:	19 f4       	brne	.+6      	; 0x1af4 <xQueueGenericReceive+0x102>
    1aee:	e9 85       	ldd	r30, Y+9	; 0x09
    1af0:	fa 85       	ldd	r31, Y+10	; 0x0a
    1af2:	11 a2       	std	Z+33, r1	; 0x21
    1af4:	e9 85       	ldd	r30, Y+9	; 0x09
    1af6:	fa 85       	ldd	r31, Y+10	; 0x0a
    1af8:	82 a1       	ldd	r24, Z+34	; 0x22
    1afa:	8f 3f       	cpi	r24, 0xFF	; 255
    1afc:	19 f4       	brne	.+6      	; 0x1b04 <xQueueGenericReceive+0x112>
    1afe:	e9 85       	ldd	r30, Y+9	; 0x09
    1b00:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b02:	12 a2       	std	Z+34, r1	; 0x22
    1b04:	0f 90       	pop	r0
    1b06:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1b08:	ce 01       	movw	r24, r28
    1b0a:	04 96       	adiw	r24, 0x04	; 4
    1b0c:	9e 01       	movw	r18, r28
    1b0e:	23 5f       	subi	r18, 0xF3	; 243
    1b10:	3f 4f       	sbci	r19, 0xFF	; 255
    1b12:	b9 01       	movw	r22, r18
    1b14:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <xTaskCheckForTimeOut>
    1b18:	88 23       	and	r24, r24
    1b1a:	21 f5       	brne	.+72     	; 0x1b64 <xQueueGenericReceive+0x172>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b20:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <prvIsQueueEmpty>
    1b24:	88 23       	and	r24, r24
    1b26:	b9 f0       	breq	.+46     	; 0x1b56 <xQueueGenericReceive+0x164>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2c:	43 96       	adiw	r24, 0x13	; 19
    1b2e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b30:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b32:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b34:	58 89       	ldd	r21, Y+16	; 0x10
    1b36:	ba 01       	movw	r22, r20
    1b38:	a9 01       	movw	r20, r18
    1b3a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1b3e:	89 85       	ldd	r24, Y+9	; 0x09
    1b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b42:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1b46:	0e 94 8e 12 	call	0x251c	; 0x251c <xTaskResumeAll>
    1b4a:	88 23       	and	r24, r24
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <xQueueGenericReceive+0x15e>
    1b4e:	66 cf       	rjmp	.-308    	; 0x1a1c <xQueueGenericReceive+0x2a>
				{
					portYIELD_WITHIN_API();
    1b50:	0e 94 20 0a 	call	0x1440	; 0x1440 <vPortYield>
    1b54:	63 cf       	rjmp	.-314    	; 0x1a1c <xQueueGenericReceive+0x2a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1b5e:	0e 94 8e 12 	call	0x251c	; 0x251c <xTaskResumeAll>
    1b62:	5c cf       	rjmp	.-328    	; 0x1a1c <xQueueGenericReceive+0x2a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1b6c:	0e 94 8e 12 	call	0x251c	; 0x251c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1b70:	1a 8a       	std	Y+18, r1	; 0x12
    1b72:	8a 89       	ldd	r24, Y+18	; 0x12
		}
	}
}
    1b74:	62 96       	adiw	r28, 0x12	; 18
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	28 97       	sbiw	r28, 0x08	; 8
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	9c 83       	std	Y+4, r25	; 0x04
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
    1ba0:	7e 83       	std	Y+6, r23	; 0x06
    1ba2:	6d 83       	std	Y+5, r22	; 0x05
    1ba4:	58 87       	std	Y+8, r21	; 0x08
    1ba6:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1ba8:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1baa:	eb 81       	ldd	r30, Y+3	; 0x03
    1bac:	fc 81       	ldd	r31, Y+4	; 0x04
    1bae:	86 8d       	ldd	r24, Z+30	; 0x1e
    1bb0:	88 23       	and	r24, r24
    1bb2:	71 f1       	breq	.+92     	; 0x1c10 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	2d 81       	ldd	r18, Y+5	; 0x05
    1bba:	3e 81       	ldd	r19, Y+6	; 0x06
    1bbc:	b9 01       	movw	r22, r18
    1bbe:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1bc2:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc4:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1bc8:	81 50       	subi	r24, 0x01	; 1
    1bca:	eb 81       	ldd	r30, Y+3	; 0x03
    1bcc:	fc 81       	ldd	r31, Y+4	; 0x04
    1bce:	86 8f       	std	Z+30, r24	; 0x1e

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1bd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1bd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1bd4:	81 a1       	ldd	r24, Z+33	; 0x21
    1bd6:	8f 3f       	cpi	r24, 0xFF	; 255
    1bd8:	89 f4       	brne	.+34     	; 0x1bfc <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1bda:	eb 81       	ldd	r30, Y+3	; 0x03
    1bdc:	fc 81       	ldd	r31, Y+4	; 0x04
    1bde:	80 85       	ldd	r24, Z+8	; 0x08
    1be0:	88 23       	and	r24, r24
    1be2:	99 f0       	breq	.+38     	; 0x1c0a <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	08 96       	adiw	r24, 0x08	; 8
    1bea:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <xTaskRemoveFromEventList>
    1bee:	88 23       	and	r24, r24
    1bf0:	61 f0       	breq	.+24     	; 0x1c0a <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    1bf2:	ef 81       	ldd	r30, Y+7	; 0x07
    1bf4:	f8 85       	ldd	r31, Y+8	; 0x08
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	80 83       	st	Z, r24
    1bfa:	07 c0       	rjmp	.+14     	; 0x1c0a <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1bfc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bfe:	fc 81       	ldd	r31, Y+4	; 0x04
    1c00:	81 a1       	ldd	r24, Z+33	; 0x21
    1c02:	8f 5f       	subi	r24, 0xFF	; 255
    1c04:	eb 81       	ldd	r30, Y+3	; 0x03
    1c06:	fc 81       	ldd	r31, Y+4	; 0x04
    1c08:	81 a3       	std	Z+33, r24	; 0x21
			}

			xReturn = pdPASS;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	8a 83       	std	Y+2, r24	; 0x02
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    1c10:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c14:	28 96       	adiw	r28, 0x08	; 8
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <uxQueueMessagesWaiting+0x6>
    1c2c:	0f 92       	push	r0
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	9b 83       	std	Y+3, r25	; 0x03
    1c34:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1c3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1c40:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c42:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1c44:	0f 90       	pop	r0
    1c46:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <uxQueueMessagesWaitingFromISR+0x6>
    1c5c:	0f 92       	push	r0
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	9b 83       	std	Y+3, r25	; 0x03
    1c64:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    1c66:	ea 81       	ldd	r30, Y+2	; 0x02
    1c68:	fb 81       	ldd	r31, Y+3	; 0x03
    1c6a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c6c:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <vQueueDelete+0x6>
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    1c8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortFree>
	vPortFree( pxQueue );
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortFree>
}
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <prvCopyDataToQueue+0x6>
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <prvCopyDataToQueue+0x8>
    1cb0:	0f 92       	push	r0
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	7c 83       	std	Y+4, r23	; 0x04
    1cbc:	6b 83       	std	Y+3, r22	; 0x03
    1cbe:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc4:	80 a1       	ldd	r24, Z+32	; 0x20
    1cc6:	88 23       	and	r24, r24
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <prvCopyDataToQueue+0x24>
    1cca:	74 c0       	rjmp	.+232    	; 0x1db4 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	88 23       	and	r24, r24
    1cd0:	99 f5       	brne	.+102    	; 0x1d38 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd6:	64 81       	ldd	r22, Z+4	; 0x04
    1cd8:	75 81       	ldd	r23, Z+5	; 0x05
    1cda:	e9 81       	ldd	r30, Y+1	; 0x01
    1cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cde:	80 a1       	ldd	r24, Z+32	; 0x20
    1ce0:	48 2f       	mov	r20, r24
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce8:	cb 01       	movw	r24, r22
    1cea:	b9 01       	movw	r22, r18
    1cec:	0e 94 13 18 	call	0x3026	; 0x3026 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1cf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf4:	24 81       	ldd	r18, Z+4	; 0x04
    1cf6:	35 81       	ldd	r19, Z+5	; 0x05
    1cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfc:	80 a1       	ldd	r24, Z+32	; 0x20
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	82 0f       	add	r24, r18
    1d04:	93 1f       	adc	r25, r19
    1d06:	e9 81       	ldd	r30, Y+1	; 0x01
    1d08:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0a:	95 83       	std	Z+5, r25	; 0x05
    1d0c:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d10:	fa 81       	ldd	r31, Y+2	; 0x02
    1d12:	24 81       	ldd	r18, Z+4	; 0x04
    1d14:	35 81       	ldd	r19, Z+5	; 0x05
    1d16:	e9 81       	ldd	r30, Y+1	; 0x01
    1d18:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	28 17       	cp	r18, r24
    1d20:	39 07       	cpc	r19, r25
    1d22:	08 f4       	brcc	.+2      	; 0x1d26 <prvCopyDataToQueue+0x7e>
    1d24:	47 c0       	rjmp	.+142    	; 0x1db4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1d26:	e9 81       	ldd	r30, Y+1	; 0x01
    1d28:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d30:	fa 81       	ldd	r31, Y+2	; 0x02
    1d32:	95 83       	std	Z+5, r25	; 0x05
    1d34:	84 83       	std	Z+4, r24	; 0x04
    1d36:	3e c0       	rjmp	.+124    	; 0x1db4 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1d38:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3c:	66 81       	ldd	r22, Z+6	; 0x06
    1d3e:	77 81       	ldd	r23, Z+7	; 0x07
    1d40:	e9 81       	ldd	r30, Y+1	; 0x01
    1d42:	fa 81       	ldd	r31, Y+2	; 0x02
    1d44:	80 a1       	ldd	r24, Z+32	; 0x20
    1d46:	48 2f       	mov	r20, r24
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4e:	cb 01       	movw	r24, r22
    1d50:	b9 01       	movw	r22, r18
    1d52:	0e 94 13 18 	call	0x3026	; 0x3026 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    1d56:	e9 81       	ldd	r30, Y+1	; 0x01
    1d58:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5a:	26 81       	ldd	r18, Z+6	; 0x06
    1d5c:	37 81       	ldd	r19, Z+7	; 0x07
    1d5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d60:	fa 81       	ldd	r31, Y+2	; 0x02
    1d62:	80 a1       	ldd	r24, Z+32	; 0x20
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	90 95       	com	r25
    1d6a:	81 95       	neg	r24
    1d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6e:	82 0f       	add	r24, r18
    1d70:	93 1f       	adc	r25, r19
    1d72:	e9 81       	ldd	r30, Y+1	; 0x01
    1d74:	fa 81       	ldd	r31, Y+2	; 0x02
    1d76:	97 83       	std	Z+7, r25	; 0x07
    1d78:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    1d7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d7e:	26 81       	ldd	r18, Z+6	; 0x06
    1d80:	37 81       	ldd	r19, Z+7	; 0x07
    1d82:	e9 81       	ldd	r30, Y+1	; 0x01
    1d84:	fa 81       	ldd	r31, Y+2	; 0x02
    1d86:	80 81       	ld	r24, Z
    1d88:	91 81       	ldd	r25, Z+1	; 0x01
    1d8a:	28 17       	cp	r18, r24
    1d8c:	39 07       	cpc	r19, r25
    1d8e:	90 f4       	brcc	.+36     	; 0x1db4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1d90:	e9 81       	ldd	r30, Y+1	; 0x01
    1d92:	fa 81       	ldd	r31, Y+2	; 0x02
    1d94:	22 81       	ldd	r18, Z+2	; 0x02
    1d96:	33 81       	ldd	r19, Z+3	; 0x03
    1d98:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9c:	80 a1       	ldd	r24, Z+32	; 0x20
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	90 95       	com	r25
    1da4:	81 95       	neg	r24
    1da6:	9f 4f       	sbci	r25, 0xFF	; 255
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	e9 81       	ldd	r30, Y+1	; 0x01
    1dae:	fa 81       	ldd	r31, Y+2	; 0x02
    1db0:	97 83       	std	Z+7, r25	; 0x07
    1db2:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1db4:	e9 81       	ldd	r30, Y+1	; 0x01
    1db6:	fa 81       	ldd	r31, Y+2	; 0x02
    1db8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dba:	8f 5f       	subi	r24, 0xFF	; 255
    1dbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc0:	86 8f       	std	Z+30, r24	; 0x1e
}
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <prvCopyDataFromQueue+0x6>
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <prvCopyDataFromQueue+0x8>
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	7c 83       	std	Y+4, r23	; 0x04
    1de4:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1de6:	e9 81       	ldd	r30, Y+1	; 0x01
    1de8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	89 f1       	breq	.+98     	; 0x1e54 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1df2:	e9 81       	ldd	r30, Y+1	; 0x01
    1df4:	fa 81       	ldd	r31, Y+2	; 0x02
    1df6:	26 81       	ldd	r18, Z+6	; 0x06
    1df8:	37 81       	ldd	r19, Z+7	; 0x07
    1dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfe:	80 a1       	ldd	r24, Z+32	; 0x20
    1e00:	88 2f       	mov	r24, r24
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	82 0f       	add	r24, r18
    1e06:	93 1f       	adc	r25, r19
    1e08:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0c:	97 83       	std	Z+7, r25	; 0x07
    1e0e:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1e10:	e9 81       	ldd	r30, Y+1	; 0x01
    1e12:	fa 81       	ldd	r31, Y+2	; 0x02
    1e14:	26 81       	ldd	r18, Z+6	; 0x06
    1e16:	37 81       	ldd	r19, Z+7	; 0x07
    1e18:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	28 17       	cp	r18, r24
    1e22:	39 07       	cpc	r19, r25
    1e24:	40 f0       	brcs	.+16     	; 0x1e36 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    1e26:	e9 81       	ldd	r30, Y+1	; 0x01
    1e28:	fa 81       	ldd	r31, Y+2	; 0x02
    1e2a:	80 81       	ld	r24, Z
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e30:	fa 81       	ldd	r31, Y+2	; 0x02
    1e32:	97 83       	std	Z+7, r25	; 0x07
    1e34:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1e36:	e9 81       	ldd	r30, Y+1	; 0x01
    1e38:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3a:	46 81       	ldd	r20, Z+6	; 0x06
    1e3c:	57 81       	ldd	r21, Z+7	; 0x07
    1e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e40:	fa 81       	ldd	r31, Y+2	; 0x02
    1e42:	80 a1       	ldd	r24, Z+32	; 0x20
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	ba 01       	movw	r22, r20
    1e4e:	a9 01       	movw	r20, r18
    1e50:	0e 94 13 18 	call	0x3026	; 0x3026 <memcpy>
	}
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <prvUnlockQueue+0x6>
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	9a 83       	std	Y+2, r25	; 0x02
    1e6e:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	0f 92       	push	r0
    1e76:	15 c0       	rjmp	.+42     	; 0x1ea2 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1e78:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7c:	83 89       	ldd	r24, Z+19	; 0x13
    1e7e:	88 23       	and	r24, r24
    1e80:	a9 f0       	breq	.+42     	; 0x1eac <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	43 96       	adiw	r24, 0x13	; 19
    1e88:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <xTaskRemoveFromEventList>
    1e8c:	88 23       	and	r24, r24
    1e8e:	11 f0       	breq	.+4      	; 0x1e94 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    1e90:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    1e94:	e9 81       	ldd	r30, Y+1	; 0x01
    1e96:	fa 81       	ldd	r31, Y+2	; 0x02
    1e98:	82 a1       	ldd	r24, Z+34	; 0x22
    1e9a:	81 50       	subi	r24, 0x01	; 1
    1e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea0:	82 a3       	std	Z+34, r24	; 0x22
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	82 a1       	ldd	r24, Z+34	; 0x22
    1ea8:	18 16       	cp	r1, r24
    1eaa:	34 f3       	brlt	.-52     	; 0x1e78 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1eac:	e9 81       	ldd	r30, Y+1	; 0x01
    1eae:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb0:	8f ef       	ldi	r24, 0xFF	; 255
    1eb2:	82 a3       	std	Z+34, r24	; 0x22
	}
	taskEXIT_CRITICAL();
    1eb4:	0f 90       	pop	r0
    1eb6:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	0f 92       	push	r0
    1ebe:	15 c0       	rjmp	.+42     	; 0x1eea <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	80 85       	ldd	r24, Z+8	; 0x08
    1ec6:	88 23       	and	r24, r24
    1ec8:	a9 f0       	breq	.+42     	; 0x1ef4 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	08 96       	adiw	r24, 0x08	; 8
    1ed0:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <xTaskRemoveFromEventList>
    1ed4:	88 23       	and	r24, r24
    1ed6:	11 f0       	breq	.+4      	; 0x1edc <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    1ed8:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	81 a1       	ldd	r24, Z+33	; 0x21
    1ee2:	81 50       	subi	r24, 0x01	; 1
    1ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee8:	81 a3       	std	Z+33, r24	; 0x21
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1eea:	e9 81       	ldd	r30, Y+1	; 0x01
    1eec:	fa 81       	ldd	r31, Y+2	; 0x02
    1eee:	81 a1       	ldd	r24, Z+33	; 0x21
    1ef0:	18 16       	cp	r1, r24
    1ef2:	34 f3       	brlt	.-52     	; 0x1ec0 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef8:	8f ef       	ldi	r24, 0xFF	; 255
    1efa:	81 a3       	std	Z+33, r24	; 0x21
	}
	taskEXIT_CRITICAL();
    1efc:	0f 90       	pop	r0
    1efe:	0f be       	out	0x3f, r0	; 63
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <prvIsQueueEmpty+0x6>
    1f10:	0f 92       	push	r0
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	9b 83       	std	Y+3, r25	; 0x03
    1f18:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1f20:	ea 81       	ldd	r30, Y+2	; 0x02
    1f22:	fb 81       	ldd	r31, Y+3	; 0x03
    1f24:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f26:	19 82       	std	Y+1, r1	; 0x01
    1f28:	88 23       	and	r24, r24
    1f2a:	11 f4       	brne	.+4      	; 0x1f30 <prvIsQueueEmpty+0x26>
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1f30:	0f 90       	pop	r0
    1f32:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <xQueueIsQueueEmptyFromISR+0x6>
    1f48:	0f 92       	push	r0
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	9b 83       	std	Y+3, r25	; 0x03
    1f50:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1f52:	ea 81       	ldd	r30, Y+2	; 0x02
    1f54:	fb 81       	ldd	r31, Y+3	; 0x03
    1f56:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f58:	19 82       	std	Y+1, r1	; 0x01
    1f5a:	88 23       	and	r24, r24
    1f5c:	11 f4       	brne	.+4      	; 0x1f62 <xQueueIsQueueEmptyFromISR+0x20>
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <prvIsQueueFull+0x6>
    1f76:	0f 92       	push	r0
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	9b 83       	std	Y+3, r25	; 0x03
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1f86:	ea 81       	ldd	r30, Y+2	; 0x02
    1f88:	fb 81       	ldd	r31, Y+3	; 0x03
    1f8a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1f8c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f8e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f90:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f92:	19 82       	std	Y+1, r1	; 0x01
    1f94:	98 17       	cp	r25, r24
    1f96:	11 f4       	brne	.+4      	; 0x1f9c <prvIsQueueFull+0x2c>
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1f9c:	0f 90       	pop	r0
    1f9e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <xQueueIsQueueFullFromISR+0x6>
    1fb4:	0f 92       	push	r0
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	9b 83       	std	Y+3, r25	; 0x03
    1fbc:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1fbe:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc2:	96 8d       	ldd	r25, Z+30	; 0x1e
    1fc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc8:	87 8d       	ldd	r24, Z+31	; 0x1f
    1fca:	19 82       	std	Y+1, r1	; 0x01
    1fcc:	98 17       	cp	r25, r24
    1fce:	11 f4       	brne	.+4      	; 0x1fd4 <xQueueIsQueueFullFromISR+0x26>
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    1fe2:	af 92       	push	r10
    1fe4:	bf 92       	push	r11
    1fe6:	cf 92       	push	r12
    1fe8:	df 92       	push	r13
    1fea:	ef 92       	push	r14
    1fec:	ff 92       	push	r15
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	64 97       	sbiw	r28, 0x14	; 20
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	9f 83       	std	Y+7, r25	; 0x07
    2008:	8e 83       	std	Y+6, r24	; 0x06
    200a:	79 87       	std	Y+9, r23	; 0x09
    200c:	68 87       	std	Y+8, r22	; 0x08
    200e:	5b 87       	std	Y+11, r21	; 0x0b
    2010:	4a 87       	std	Y+10, r20	; 0x0a
    2012:	3d 87       	std	Y+13, r19	; 0x0d
    2014:	2c 87       	std	Y+12, r18	; 0x0c
    2016:	0e 87       	std	Y+14, r16	; 0x0e
    2018:	f8 8a       	std	Y+16, r15	; 0x10
    201a:	ef 86       	std	Y+15, r14	; 0x0f
    201c:	da 8a       	std	Y+18, r13	; 0x12
    201e:	c9 8a       	std	Y+17, r12	; 0x11
    2020:	bc 8a       	std	Y+20, r11	; 0x14
    2022:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2024:	8a 85       	ldd	r24, Y+10	; 0x0a
    2026:	9b 85       	ldd	r25, Y+11	; 0x0b
    2028:	29 89       	ldd	r18, Y+17	; 0x11
    202a:	3a 89       	ldd	r19, Y+18	; 0x12
    202c:	b9 01       	movw	r22, r18
    202e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <prvAllocateTCBAndStack>
    2032:	9c 83       	std	Y+4, r25	; 0x04
    2034:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	09 f4       	brne	.+2      	; 0x2040 <xTaskGenericCreate+0x5e>
    203e:	9c c0       	rjmp	.+312    	; 0x2178 <xTaskGenericCreate+0x196>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    2040:	eb 81       	ldd	r30, Y+3	; 0x03
    2042:	fc 81       	ldd	r31, Y+4	; 0x04
    2044:	23 8d       	ldd	r18, Z+27	; 0x1b
    2046:	34 8d       	ldd	r19, Z+28	; 0x1c
    2048:	8a 85       	ldd	r24, Y+10	; 0x0a
    204a:	9b 85       	ldd	r25, Y+11	; 0x0b
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	82 0f       	add	r24, r18
    2050:	93 1f       	adc	r25, r19
    2052:	9a 83       	std	Y+2, r25	; 0x02
    2054:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	28 85       	ldd	r18, Y+8	; 0x08
    205c:	39 85       	ldd	r19, Y+9	; 0x09
    205e:	eb 89       	ldd	r30, Y+19	; 0x13
    2060:	fc 89       	ldd	r31, Y+20	; 0x14
    2062:	aa 85       	ldd	r26, Y+10	; 0x0a
    2064:	bb 85       	ldd	r27, Y+11	; 0x0b
    2066:	b9 01       	movw	r22, r18
    2068:	4e 85       	ldd	r20, Y+14	; 0x0e
    206a:	9f 01       	movw	r18, r30
    206c:	8d 01       	movw	r16, r26
    206e:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	2e 81       	ldd	r18, Y+6	; 0x06
    2078:	3f 81       	ldd	r19, Y+7	; 0x07
    207a:	4c 85       	ldd	r20, Y+12	; 0x0c
    207c:	5d 85       	ldd	r21, Y+13	; 0x0d
    207e:	b9 01       	movw	r22, r18
    2080:	0e 94 61 08 	call	0x10c2	; 0x10c2 <pxPortInitialiseStack>
    2084:	eb 81       	ldd	r30, Y+3	; 0x03
    2086:	fc 81       	ldd	r31, Y+4	; 0x04
    2088:	91 83       	std	Z+1, r25	; 0x01
    208a:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    208c:	8f 85       	ldd	r24, Y+15	; 0x0f
    208e:	98 89       	ldd	r25, Y+16	; 0x10
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	31 f0       	breq	.+12     	; 0x20a0 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    2094:	ef 85       	ldd	r30, Y+15	; 0x0f
    2096:	f8 89       	ldd	r31, Y+16	; 0x10
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    20a6:	80 91 1b 03 	lds	r24, 0x031B
    20aa:	8f 5f       	subi	r24, 0xFF	; 255
    20ac:	80 93 1b 03 	sts	0x031B, r24
			if( pxCurrentTCB == NULL )
    20b0:	80 91 18 03 	lds	r24, 0x0318
    20b4:	90 91 19 03 	lds	r25, 0x0319
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	69 f4       	brne	.+26     	; 0x20d6 <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	90 93 19 03 	sts	0x0319, r25
    20c4:	80 93 18 03 	sts	0x0318, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    20c8:	80 91 1b 03 	lds	r24, 0x031B
    20cc:	81 30       	cpi	r24, 0x01	; 1
    20ce:	a9 f4       	brne	.+42     	; 0x20fa <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    20d0:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <prvInitialiseTaskLists>
    20d4:	12 c0       	rjmp	.+36     	; 0x20fa <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    20d6:	80 91 22 03 	lds	r24, 0x0322
    20da:	88 23       	and	r24, r24
    20dc:	71 f4       	brne	.+28     	; 0x20fa <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    20de:	e0 91 18 03 	lds	r30, 0x0318
    20e2:	f0 91 19 03 	lds	r31, 0x0319
    20e6:	92 8d       	ldd	r25, Z+26	; 0x1a
    20e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ea:	89 17       	cp	r24, r25
    20ec:	30 f0       	brcs	.+12     	; 0x20fa <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	90 93 19 03 	sts	0x0319, r25
    20f6:	80 93 18 03 	sts	0x0318, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    20fa:	eb 81       	ldd	r30, Y+3	; 0x03
    20fc:	fc 81       	ldd	r31, Y+4	; 0x04
    20fe:	92 8d       	ldd	r25, Z+26	; 0x1a
    2100:	80 91 20 03 	lds	r24, 0x0320
    2104:	89 17       	cp	r24, r25
    2106:	28 f4       	brcc	.+10     	; 0x2112 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    2108:	eb 81       	ldd	r30, Y+3	; 0x03
    210a:	fc 81       	ldd	r31, Y+4	; 0x04
    210c:	82 8d       	ldd	r24, Z+26	; 0x1a
    210e:	80 93 20 03 	sts	0x0320, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    2112:	80 91 27 03 	lds	r24, 0x0327
    2116:	8f 5f       	subi	r24, 0xFF	; 255
    2118:	80 93 27 03 	sts	0x0327, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    211c:	eb 81       	ldd	r30, Y+3	; 0x03
    211e:	fc 81       	ldd	r31, Y+4	; 0x04
    2120:	92 8d       	ldd	r25, Z+26	; 0x1a
    2122:	80 91 21 03 	lds	r24, 0x0321
    2126:	89 17       	cp	r24, r25
    2128:	28 f4       	brcc	.+10     	; 0x2134 <xTaskGenericCreate+0x152>
    212a:	eb 81       	ldd	r30, Y+3	; 0x03
    212c:	fc 81       	ldd	r31, Y+4	; 0x04
    212e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2130:	80 93 21 03 	sts	0x0321, r24
    2134:	eb 81       	ldd	r30, Y+3	; 0x03
    2136:	fc 81       	ldd	r31, Y+4	; 0x04
    2138:	82 8d       	ldd	r24, Z+26	; 0x1a
    213a:	48 2f       	mov	r20, r24
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	ca 01       	movw	r24, r20
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	9c 01       	movw	r18, r24
    2146:	22 0f       	add	r18, r18
    2148:	33 1f       	adc	r19, r19
    214a:	22 0f       	add	r18, r18
    214c:	33 1f       	adc	r19, r19
    214e:	82 0f       	add	r24, r18
    2150:	93 1f       	adc	r25, r19
    2152:	84 0f       	add	r24, r20
    2154:	95 1f       	adc	r25, r21
    2156:	ac 01       	movw	r20, r24
    2158:	48 5d       	subi	r20, 0xD8	; 216
    215a:	5c 4f       	sbci	r21, 0xFC	; 252
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	9c 01       	movw	r18, r24
    2162:	2e 5f       	subi	r18, 0xFE	; 254
    2164:	3f 4f       	sbci	r19, 0xFF	; 255
    2166:	ca 01       	movw	r24, r20
    2168:	b9 01       	movw	r22, r18
    216a:	0e 94 01 07 	call	0xe02	; 0xe02 <vListInsertEnd>

			xReturn = pdPASS;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2172:	0f 90       	pop	r0
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	02 c0       	rjmp	.+4      	; 0x217c <xTaskGenericCreate+0x19a>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2178:	8f ef       	ldi	r24, 0xFF	; 255
    217a:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	71 f4       	brne	.+28     	; 0x219e <xTaskGenericCreate+0x1bc>
	{
		if( xSchedulerRunning != pdFALSE )
    2182:	80 91 22 03 	lds	r24, 0x0322
    2186:	88 23       	and	r24, r24
    2188:	51 f0       	breq	.+20     	; 0x219e <xTaskGenericCreate+0x1bc>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    218a:	e0 91 18 03 	lds	r30, 0x0318
    218e:	f0 91 19 03 	lds	r31, 0x0319
    2192:	92 8d       	ldd	r25, Z+26	; 0x1a
    2194:	8e 85       	ldd	r24, Y+14	; 0x0e
    2196:	98 17       	cp	r25, r24
    2198:	10 f4       	brcc	.+4      	; 0x219e <xTaskGenericCreate+0x1bc>
			{
				portYIELD_WITHIN_API();
    219a:	0e 94 20 0a 	call	0x1440	; 0x1440 <vPortYield>
			}
		}
	}

	return xReturn;
    219e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    21a0:	64 96       	adiw	r28, 0x14	; 20
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	1f 91       	pop	r17
    21b2:	0f 91       	pop	r16
    21b4:	ff 90       	pop	r15
    21b6:	ef 90       	pop	r14
    21b8:	df 90       	pop	r13
    21ba:	cf 90       	pop	r12
    21bc:	bf 90       	pop	r11
    21be:	af 90       	pop	r10
    21c0:	08 95       	ret

000021c2 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <vTaskDelete+0x6>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <vTaskDelete+0x8>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <vTaskDelete+0xa>
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	9c 83       	std	Y+4, r25	; 0x04
    21d2:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    21da:	20 91 18 03 	lds	r18, 0x0318
    21de:	30 91 19 03 	lds	r19, 0x0319
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	82 17       	cp	r24, r18
    21e8:	93 07       	cpc	r25, r19
    21ea:	11 f4       	brne	.+4      	; 0x21f0 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    21ec:	1c 82       	std	Y+4, r1	; 0x04
    21ee:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	9c 81       	ldd	r25, Y+4	; 0x04
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	39 f4       	brne	.+14     	; 0x2206 <vTaskDelete+0x44>
    21f8:	80 91 18 03 	lds	r24, 0x0318
    21fc:	90 91 19 03 	lds	r25, 0x0319
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	04 c0       	rjmp	.+8      	; 0x220e <vTaskDelete+0x4c>
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
    221a:	02 96       	adiw	r24, 0x02	; 2
    221c:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    2220:	e9 81       	ldd	r30, Y+1	; 0x01
    2222:	fa 81       	ldd	r31, Y+2	; 0x02
    2224:	80 8d       	ldd	r24, Z+24	; 0x18
    2226:	91 8d       	ldd	r25, Z+25	; 0x19
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	29 f0       	breq	.+10     	; 0x2236 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	9a 81       	ldd	r25, Y+2	; 0x02
    2230:	0e 96       	adiw	r24, 0x0e	; 14
    2232:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	9a 81       	ldd	r25, Y+2	; 0x02
    223a:	9c 01       	movw	r18, r24
    223c:	2e 5f       	subi	r18, 0xFE	; 254
    223e:	3f 4f       	sbci	r19, 0xFF	; 255
    2240:	8e e6       	ldi	r24, 0x6E	; 110
    2242:	93 e0       	ldi	r25, 0x03	; 3
    2244:	b9 01       	movw	r22, r18
    2246:	0e 94 01 07 	call	0xe02	; 0xe02 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    224a:	80 91 1a 03 	lds	r24, 0x031A
    224e:	8f 5f       	subi	r24, 0xFF	; 255
    2250:	80 93 1a 03 	sts	0x031A, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2254:	80 91 27 03 	lds	r24, 0x0327
    2258:	8f 5f       	subi	r24, 0xFF	; 255
    225a:	80 93 27 03 	sts	0x0327, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    225e:	0f 90       	pop	r0
    2260:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    2262:	80 91 22 03 	lds	r24, 0x0322
    2266:	88 23       	and	r24, r24
    2268:	31 f0       	breq	.+12     	; 0x2276 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	11 f4       	brne	.+4      	; 0x2276 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    2272:	0e 94 20 0a 	call	0x1440	; 0x1440 <vPortYield>
			}
		}
	}
    2276:	26 96       	adiw	r28, 0x06	; 6
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	2c 97       	sbiw	r28, 0x0c	; 12
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
    229c:	98 87       	std	Y+8, r25	; 0x08
    229e:	8f 83       	std	Y+7, r24	; 0x07
    22a0:	49 87       	std	Y+9, r20	; 0x09
    22a2:	5a 87       	std	Y+10, r21	; 0x0a
    22a4:	6b 87       	std	Y+11, r22	; 0x0b
    22a6:	7c 87       	std	Y+12, r23	; 0x0c
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    22a8:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    22aa:	0e 94 82 12 	call	0x2504	; 0x2504 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    22ae:	ef 81       	ldd	r30, Y+7	; 0x07
    22b0:	f8 85       	ldd	r31, Y+8	; 0x08
    22b2:	20 81       	ld	r18, Z
    22b4:	31 81       	ldd	r19, Z+1	; 0x01
    22b6:	42 81       	ldd	r20, Z+2	; 0x02
    22b8:	53 81       	ldd	r21, Z+3	; 0x03
    22ba:	89 85       	ldd	r24, Y+9	; 0x09
    22bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22be:	ab 85       	ldd	r26, Y+11	; 0x0b
    22c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    22c2:	82 0f       	add	r24, r18
    22c4:	93 1f       	adc	r25, r19
    22c6:	a4 1f       	adc	r26, r20
    22c8:	b5 1f       	adc	r27, r21
    22ca:	8b 83       	std	Y+3, r24	; 0x03
    22cc:	9c 83       	std	Y+4, r25	; 0x04
    22ce:	ad 83       	std	Y+5, r26	; 0x05
    22d0:	be 83       	std	Y+6, r27	; 0x06

			if( xTickCount < *pxPreviousWakeTime )
    22d2:	ef 81       	ldd	r30, Y+7	; 0x07
    22d4:	f8 85       	ldd	r31, Y+8	; 0x08
    22d6:	20 81       	ld	r18, Z
    22d8:	31 81       	ldd	r19, Z+1	; 0x01
    22da:	42 81       	ldd	r20, Z+2	; 0x02
    22dc:	53 81       	ldd	r21, Z+3	; 0x03
    22de:	80 91 1c 03 	lds	r24, 0x031C
    22e2:	90 91 1d 03 	lds	r25, 0x031D
    22e6:	a0 91 1e 03 	lds	r26, 0x031E
    22ea:	b0 91 1f 03 	lds	r27, 0x031F
    22ee:	82 17       	cp	r24, r18
    22f0:	93 07       	cpc	r25, r19
    22f2:	a4 07       	cpc	r26, r20
    22f4:	b5 07       	cpc	r27, r21
    22f6:	18 f5       	brcc	.+70     	; 0x233e <vTaskDelayUntil+0xb6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    22f8:	ef 81       	ldd	r30, Y+7	; 0x07
    22fa:	f8 85       	ldd	r31, Y+8	; 0x08
    22fc:	20 81       	ld	r18, Z
    22fe:	31 81       	ldd	r19, Z+1	; 0x01
    2300:	42 81       	ldd	r20, Z+2	; 0x02
    2302:	53 81       	ldd	r21, Z+3	; 0x03
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	9c 81       	ldd	r25, Y+4	; 0x04
    2308:	ad 81       	ldd	r26, Y+5	; 0x05
    230a:	be 81       	ldd	r27, Y+6	; 0x06
    230c:	82 17       	cp	r24, r18
    230e:	93 07       	cpc	r25, r19
    2310:	a4 07       	cpc	r26, r20
    2312:	b5 07       	cpc	r27, r21
    2314:	b0 f5       	brcc	.+108    	; 0x2382 <vTaskDelayUntil+0xfa>
    2316:	20 91 1c 03 	lds	r18, 0x031C
    231a:	30 91 1d 03 	lds	r19, 0x031D
    231e:	40 91 1e 03 	lds	r20, 0x031E
    2322:	50 91 1f 03 	lds	r21, 0x031F
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	ad 81       	ldd	r26, Y+5	; 0x05
    232c:	be 81       	ldd	r27, Y+6	; 0x06
    232e:	28 17       	cp	r18, r24
    2330:	39 07       	cpc	r19, r25
    2332:	4a 07       	cpc	r20, r26
    2334:	5b 07       	cpc	r21, r27
    2336:	28 f5       	brcc	.+74     	; 0x2382 <vTaskDelayUntil+0xfa>
				{
					xShouldDelay = pdTRUE;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	22 c0       	rjmp	.+68     	; 0x2382 <vTaskDelayUntil+0xfa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    233e:	ef 81       	ldd	r30, Y+7	; 0x07
    2340:	f8 85       	ldd	r31, Y+8	; 0x08
    2342:	20 81       	ld	r18, Z
    2344:	31 81       	ldd	r19, Z+1	; 0x01
    2346:	42 81       	ldd	r20, Z+2	; 0x02
    2348:	53 81       	ldd	r21, Z+3	; 0x03
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	ad 81       	ldd	r26, Y+5	; 0x05
    2350:	be 81       	ldd	r27, Y+6	; 0x06
    2352:	82 17       	cp	r24, r18
    2354:	93 07       	cpc	r25, r19
    2356:	a4 07       	cpc	r26, r20
    2358:	b5 07       	cpc	r27, r21
    235a:	88 f0       	brcs	.+34     	; 0x237e <vTaskDelayUntil+0xf6>
    235c:	20 91 1c 03 	lds	r18, 0x031C
    2360:	30 91 1d 03 	lds	r19, 0x031D
    2364:	40 91 1e 03 	lds	r20, 0x031E
    2368:	50 91 1f 03 	lds	r21, 0x031F
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	9c 81       	ldd	r25, Y+4	; 0x04
    2370:	ad 81       	ldd	r26, Y+5	; 0x05
    2372:	be 81       	ldd	r27, Y+6	; 0x06
    2374:	28 17       	cp	r18, r24
    2376:	39 07       	cpc	r19, r25
    2378:	4a 07       	cpc	r20, r26
    237a:	5b 07       	cpc	r21, r27
    237c:	10 f4       	brcc	.+4      	; 0x2382 <vTaskDelayUntil+0xfa>
				{
					xShouldDelay = pdTRUE;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2382:	ef 81       	ldd	r30, Y+7	; 0x07
    2384:	f8 85       	ldd	r31, Y+8	; 0x08
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	ad 81       	ldd	r26, Y+5	; 0x05
    238c:	be 81       	ldd	r27, Y+6	; 0x06
    238e:	80 83       	st	Z, r24
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	a2 83       	std	Z+2, r26	; 0x02
    2394:	b3 83       	std	Z+3, r27	; 0x03

			if( xShouldDelay != pdFALSE )
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	88 23       	and	r24, r24
    239a:	79 f0       	breq	.+30     	; 0x23ba <vTaskDelayUntil+0x132>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    239c:	80 91 18 03 	lds	r24, 0x0318
    23a0:	90 91 19 03 	lds	r25, 0x0319
    23a4:	02 96       	adiw	r24, 0x02	; 2
    23a6:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	ad 81       	ldd	r26, Y+5	; 0x05
    23b0:	be 81       	ldd	r27, Y+6	; 0x06
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    23ba:	0e 94 8e 12 	call	0x251c	; 0x251c <xTaskResumeAll>
    23be:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	88 23       	and	r24, r24
    23c4:	11 f4       	brne	.+4      	; 0x23ca <vTaskDelayUntil+0x142>
		{
			portYIELD_WITHIN_API();
    23c6:	0e 94 20 0a 	call	0x1440	; 0x1440 <vPortYield>
		}
	}
    23ca:	2c 96       	adiw	r28, 0x0c	; 12
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	29 97       	sbiw	r28, 0x09	; 9
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	6e 83       	std	Y+6, r22	; 0x06
    23f2:	7f 83       	std	Y+7, r23	; 0x07
    23f4:	88 87       	std	Y+8, r24	; 0x08
    23f6:	99 87       	std	Y+9, r25	; 0x09
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    23f8:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    23fa:	8e 81       	ldd	r24, Y+6	; 0x06
    23fc:	9f 81       	ldd	r25, Y+7	; 0x07
    23fe:	a8 85       	ldd	r26, Y+8	; 0x08
    2400:	b9 85       	ldd	r27, Y+9	; 0x09
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	a1 05       	cpc	r26, r1
    2406:	b1 05       	cpc	r27, r1
    2408:	41 f1       	breq	.+80     	; 0x245a <vTaskDelay+0x7e>
		{
			vTaskSuspendAll();
    240a:	0e 94 82 12 	call	0x2504	; 0x2504 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    240e:	20 91 1c 03 	lds	r18, 0x031C
    2412:	30 91 1d 03 	lds	r19, 0x031D
    2416:	40 91 1e 03 	lds	r20, 0x031E
    241a:	50 91 1f 03 	lds	r21, 0x031F
    241e:	8e 81       	ldd	r24, Y+6	; 0x06
    2420:	9f 81       	ldd	r25, Y+7	; 0x07
    2422:	a8 85       	ldd	r26, Y+8	; 0x08
    2424:	b9 85       	ldd	r27, Y+9	; 0x09
    2426:	82 0f       	add	r24, r18
    2428:	93 1f       	adc	r25, r19
    242a:	a4 1f       	adc	r26, r20
    242c:	b5 1f       	adc	r27, r21
    242e:	8a 83       	std	Y+2, r24	; 0x02
    2430:	9b 83       	std	Y+3, r25	; 0x03
    2432:	ac 83       	std	Y+4, r26	; 0x04
    2434:	bd 83       	std	Y+5, r27	; 0x05

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2436:	80 91 18 03 	lds	r24, 0x0318
    243a:	90 91 19 03 	lds	r25, 0x0319
    243e:	02 96       	adiw	r24, 0x02	; 2
    2440:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	9b 81       	ldd	r25, Y+3	; 0x03
    2448:	ac 81       	ldd	r26, Y+4	; 0x04
    244a:	bd 81       	ldd	r27, Y+5	; 0x05
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2454:	0e 94 8e 12 	call	0x251c	; 0x251c <xTaskResumeAll>
    2458:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	88 23       	and	r24, r24
    245e:	11 f4       	brne	.+4      	; 0x2464 <vTaskDelay+0x88>
		{
			portYIELD_WITHIN_API();
    2460:	0e 94 20 0a 	call	0x1440	; 0x1440 <vPortYield>
		}
	}
    2464:	29 96       	adiw	r28, 0x09	; 9
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    2476:	af 92       	push	r10
    2478:	bf 92       	push	r11
    247a:	cf 92       	push	r12
    247c:	df 92       	push	r13
    247e:	ef 92       	push	r14
    2480:	ff 92       	push	r15
    2482:	0f 93       	push	r16
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	0f 92       	push	r0
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    248e:	2a e6       	ldi	r18, 0x6A	; 106
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	8c e5       	ldi	r24, 0x5C	; 92
    2494:	96 e1       	ldi	r25, 0x16	; 22
    2496:	b9 01       	movw	r22, r18
    2498:	48 ec       	ldi	r20, 0xC8	; 200
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	00 e0       	ldi	r16, 0x00	; 0
    24a2:	ee 24       	eor	r14, r14
    24a4:	ff 24       	eor	r15, r15
    24a6:	cc 24       	eor	r12, r12
    24a8:	dd 24       	eor	r13, r13
    24aa:	aa 24       	eor	r10, r10
    24ac:	bb 24       	eor	r11, r11
    24ae:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <xTaskGenericCreate>
    24b2:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	81 30       	cpi	r24, 0x01	; 1
    24b8:	71 f4       	brne	.+28     	; 0x24d6 <vTaskStartScheduler+0x60>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    24ba:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	80 93 22 03 	sts	0x0322, r24
		xTickCount = ( portTickType ) 0U;
    24c2:	10 92 1c 03 	sts	0x031C, r1
    24c6:	10 92 1d 03 	sts	0x031D, r1
    24ca:	10 92 1e 03 	sts	0x031E, r1
    24ce:	10 92 1f 03 	sts	0x031F, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    24d2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    24d6:	0f 90       	pop	r0
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	0f 91       	pop	r16
    24de:	ff 90       	pop	r15
    24e0:	ef 90       	pop	r14
    24e2:	df 90       	pop	r13
    24e4:	cf 90       	pop	r12
    24e6:	bf 90       	pop	r11
    24e8:	af 90       	pop	r10
    24ea:	08 95       	ret

000024ec <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    24f4:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    24f6:	10 92 22 03 	sts	0x0322, r1
	vPortEndScheduler();
    24fa:	0e 94 19 0a 	call	0x1432	; 0x1432 <vPortEndScheduler>
}
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    250c:	80 91 23 03 	lds	r24, 0x0323
    2510:	8f 5f       	subi	r24, 0xFF	; 255
    2512:	80 93 23 03 	sts	0x0323, r24
}
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	00 d0       	rcall	.+0      	; 0x2522 <xTaskResumeAll+0x6>
    2522:	00 d0       	rcall	.+0      	; 0x2524 <xTaskResumeAll+0x8>
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    2528:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    2530:	80 91 23 03 	lds	r24, 0x0323
    2534:	81 50       	subi	r24, 0x01	; 1
    2536:	80 93 23 03 	sts	0x0323, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    253a:	80 91 23 03 	lds	r24, 0x0323
    253e:	88 23       	and	r24, r24
    2540:	09 f0       	breq	.+2      	; 0x2544 <xTaskResumeAll+0x28>
    2542:	6d c0       	rjmp	.+218    	; 0x261e <xTaskResumeAll+0x102>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    2544:	80 91 1b 03 	lds	r24, 0x031B
    2548:	88 23       	and	r24, r24
    254a:	09 f4       	brne	.+2      	; 0x254e <xTaskResumeAll+0x32>
    254c:	68 c0       	rjmp	.+208    	; 0x261e <xTaskResumeAll+0x102>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    254e:	19 82       	std	Y+1, r1	; 0x01
    2550:	44 c0       	rjmp	.+136    	; 0x25da <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    2552:	e0 91 6a 03 	lds	r30, 0x036A
    2556:	f0 91 6b 03 	lds	r31, 0x036B
    255a:	80 85       	ldd	r24, Z+8	; 0x08
    255c:	91 85       	ldd	r25, Z+9	; 0x09
    255e:	9c 83       	std	Y+4, r25	; 0x04
    2560:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	0e 96       	adiw	r24, 0x0e	; 14
    2568:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	02 96       	adiw	r24, 0x02	; 2
    2572:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2576:	eb 81       	ldd	r30, Y+3	; 0x03
    2578:	fc 81       	ldd	r31, Y+4	; 0x04
    257a:	92 8d       	ldd	r25, Z+26	; 0x1a
    257c:	80 91 21 03 	lds	r24, 0x0321
    2580:	89 17       	cp	r24, r25
    2582:	28 f4       	brcc	.+10     	; 0x258e <xTaskResumeAll+0x72>
    2584:	eb 81       	ldd	r30, Y+3	; 0x03
    2586:	fc 81       	ldd	r31, Y+4	; 0x04
    2588:	82 8d       	ldd	r24, Z+26	; 0x1a
    258a:	80 93 21 03 	sts	0x0321, r24
    258e:	eb 81       	ldd	r30, Y+3	; 0x03
    2590:	fc 81       	ldd	r31, Y+4	; 0x04
    2592:	82 8d       	ldd	r24, Z+26	; 0x1a
    2594:	48 2f       	mov	r20, r24
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	ca 01       	movw	r24, r20
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	9c 01       	movw	r18, r24
    25a0:	22 0f       	add	r18, r18
    25a2:	33 1f       	adc	r19, r19
    25a4:	22 0f       	add	r18, r18
    25a6:	33 1f       	adc	r19, r19
    25a8:	82 0f       	add	r24, r18
    25aa:	93 1f       	adc	r25, r19
    25ac:	84 0f       	add	r24, r20
    25ae:	95 1f       	adc	r25, r21
    25b0:	88 5d       	subi	r24, 0xD8	; 216
    25b2:	9c 4f       	sbci	r25, 0xFC	; 252
    25b4:	2b 81       	ldd	r18, Y+3	; 0x03
    25b6:	3c 81       	ldd	r19, Y+4	; 0x04
    25b8:	2e 5f       	subi	r18, 0xFE	; 254
    25ba:	3f 4f       	sbci	r19, 0xFF	; 255
    25bc:	b9 01       	movw	r22, r18
    25be:	0e 94 01 07 	call	0xe02	; 0xe02 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    25c2:	eb 81       	ldd	r30, Y+3	; 0x03
    25c4:	fc 81       	ldd	r31, Y+4	; 0x04
    25c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    25c8:	e0 91 18 03 	lds	r30, 0x0318
    25cc:	f0 91 19 03 	lds	r31, 0x0319
    25d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    25d2:	98 17       	cp	r25, r24
    25d4:	10 f0       	brcs	.+4      	; 0x25da <xTaskResumeAll+0xbe>
					{
						xYieldRequired = pdTRUE;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    25da:	80 91 63 03 	lds	r24, 0x0363
    25de:	88 23       	and	r24, r24
    25e0:	09 f0       	breq	.+2      	; 0x25e4 <xTaskResumeAll+0xc8>
    25e2:	b7 cf       	rjmp	.-146    	; 0x2552 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    25e4:	80 91 24 03 	lds	r24, 0x0324
    25e8:	88 23       	and	r24, r24
    25ea:	61 f0       	breq	.+24     	; 0x2604 <xTaskResumeAll+0xe8>
    25ec:	07 c0       	rjmp	.+14     	; 0x25fc <xTaskResumeAll+0xe0>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    25ee:	0e 94 68 13 	call	0x26d0	; 0x26d0 <vTaskIncrementTick>
						--uxMissedTicks;
    25f2:	80 91 24 03 	lds	r24, 0x0324
    25f6:	81 50       	subi	r24, 0x01	; 1
    25f8:	80 93 24 03 	sts	0x0324, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    25fc:	80 91 24 03 	lds	r24, 0x0324
    2600:	88 23       	and	r24, r24
    2602:	a9 f7       	brne	.-22     	; 0x25ee <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	21 f0       	breq	.+8      	; 0x2612 <xTaskResumeAll+0xf6>
    260a:	80 91 25 03 	lds	r24, 0x0325
    260e:	81 30       	cpi	r24, 0x01	; 1
    2610:	31 f4       	brne	.+12     	; 0x261e <xTaskResumeAll+0x102>
				{
					xAlreadyYielded = pdTRUE;
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    2616:	10 92 25 03 	sts	0x0325, r1
					portYIELD_WITHIN_API();
    261a:	0e 94 20 0a 	call	0x1440	; 0x1440 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    261e:	0f 90       	pop	r0
    2620:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <xTaskGetTickCount+0x6>
    2638:	00 d0       	rcall	.+0      	; 0x263a <xTaskGetTickCount+0x8>
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    2644:	80 91 1c 03 	lds	r24, 0x031C
    2648:	90 91 1d 03 	lds	r25, 0x031D
    264c:	a0 91 1e 03 	lds	r26, 0x031E
    2650:	b0 91 1f 03 	lds	r27, 0x031F
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	9a 83       	std	Y+2, r25	; 0x02
    2658:	ab 83       	std	Y+3, r26	; 0x03
    265a:	bc 83       	std	Y+4, r27	; 0x04
	}
	taskEXIT_CRITICAL();
    265c:	0f 90       	pop	r0
    265e:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	ab 81       	ldd	r26, Y+3	; 0x03
    2666:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	00 d0       	rcall	.+0      	; 0x2680 <xTaskGetTickCountFromISR+0x6>
    2680:	00 d0       	rcall	.+0      	; 0x2682 <xTaskGetTickCountFromISR+0x8>
    2682:	0f 92       	push	r0
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2688:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    268a:	80 91 1c 03 	lds	r24, 0x031C
    268e:	90 91 1d 03 	lds	r25, 0x031D
    2692:	a0 91 1e 03 	lds	r26, 0x031E
    2696:	b0 91 1f 03 	lds	r27, 0x031F
    269a:	8a 83       	std	Y+2, r24	; 0x02
    269c:	9b 83       	std	Y+3, r25	; 0x03
    269e:	ac 83       	std	Y+4, r26	; 0x04
    26a0:	bd 83       	std	Y+5, r27	; 0x05
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	9b 81       	ldd	r25, Y+3	; 0x03
    26a6:	ac 81       	ldd	r26, Y+4	; 0x04
    26a8:	bd 81       	ldd	r27, Y+5	; 0x05
}
    26aa:	bc 01       	movw	r22, r24
    26ac:	cd 01       	movw	r24, r26
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    26c6:	80 91 1b 03 	lds	r24, 0x031B
}
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	28 97       	sbiw	r28, 0x08	; 8
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    26e4:	80 91 23 03 	lds	r24, 0x0323
    26e8:	88 23       	and	r24, r24
    26ea:	09 f0       	breq	.+2      	; 0x26ee <vTaskIncrementTick+0x1e>
    26ec:	fd c0       	rjmp	.+506    	; 0x28e8 <vTaskIncrementTick+0x218>
	{
		++xTickCount;
    26ee:	80 91 1c 03 	lds	r24, 0x031C
    26f2:	90 91 1d 03 	lds	r25, 0x031D
    26f6:	a0 91 1e 03 	lds	r26, 0x031E
    26fa:	b0 91 1f 03 	lds	r27, 0x031F
    26fe:	01 96       	adiw	r24, 0x01	; 1
    2700:	a1 1d       	adc	r26, r1
    2702:	b1 1d       	adc	r27, r1
    2704:	80 93 1c 03 	sts	0x031C, r24
    2708:	90 93 1d 03 	sts	0x031D, r25
    270c:	a0 93 1e 03 	sts	0x031E, r26
    2710:	b0 93 1f 03 	sts	0x031F, r27
		if( xTickCount == ( portTickType ) 0U )
    2714:	80 91 1c 03 	lds	r24, 0x031C
    2718:	90 91 1d 03 	lds	r25, 0x031D
    271c:	a0 91 1e 03 	lds	r26, 0x031E
    2720:	b0 91 1f 03 	lds	r27, 0x031F
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	a1 05       	cpc	r26, r1
    2728:	b1 05       	cpc	r27, r1
    272a:	09 f0       	breq	.+2      	; 0x272e <vTaskIncrementTick+0x5e>
    272c:	46 c0       	rjmp	.+140    	; 0x27ba <vTaskIncrementTick+0xea>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    272e:	80 91 5f 03 	lds	r24, 0x035F
    2732:	90 91 60 03 	lds	r25, 0x0360
    2736:	9e 83       	std	Y+6, r25	; 0x06
    2738:	8d 83       	std	Y+5, r24	; 0x05
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    273a:	80 91 61 03 	lds	r24, 0x0361
    273e:	90 91 62 03 	lds	r25, 0x0362
    2742:	90 93 60 03 	sts	0x0360, r25
    2746:	80 93 5f 03 	sts	0x035F, r24
			pxOverflowDelayedTaskList = pxTemp;
    274a:	8d 81       	ldd	r24, Y+5	; 0x05
    274c:	9e 81       	ldd	r25, Y+6	; 0x06
    274e:	90 93 62 03 	sts	0x0362, r25
    2752:	80 93 61 03 	sts	0x0361, r24
			xNumOfOverflows++;
    2756:	80 91 26 03 	lds	r24, 0x0326
    275a:	8f 5f       	subi	r24, 0xFF	; 255
    275c:	80 93 26 03 	sts	0x0326, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2760:	e0 91 5f 03 	lds	r30, 0x035F
    2764:	f0 91 60 03 	lds	r31, 0x0360
    2768:	80 81       	ld	r24, Z
    276a:	88 23       	and	r24, r24
    276c:	69 f4       	brne	.+26     	; 0x2788 <vTaskIncrementTick+0xb8>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    276e:	8f ef       	ldi	r24, 0xFF	; 255
    2770:	9f ef       	ldi	r25, 0xFF	; 255
    2772:	af ef       	ldi	r26, 0xFF	; 255
    2774:	bf ef       	ldi	r27, 0xFF	; 255
    2776:	80 93 6f 00 	sts	0x006F, r24
    277a:	90 93 70 00 	sts	0x0070, r25
    277e:	a0 93 71 00 	sts	0x0071, r26
    2782:	b0 93 72 00 	sts	0x0072, r27
    2786:	19 c0       	rjmp	.+50     	; 0x27ba <vTaskIncrementTick+0xea>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2788:	e0 91 5f 03 	lds	r30, 0x035F
    278c:	f0 91 60 03 	lds	r31, 0x0360
    2790:	07 80       	ldd	r0, Z+7	; 0x07
    2792:	f0 85       	ldd	r31, Z+8	; 0x08
    2794:	e0 2d       	mov	r30, r0
    2796:	80 85       	ldd	r24, Z+8	; 0x08
    2798:	91 85       	ldd	r25, Z+9	; 0x09
    279a:	98 87       	std	Y+8, r25	; 0x08
    279c:	8f 83       	std	Y+7, r24	; 0x07
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    279e:	ef 81       	ldd	r30, Y+7	; 0x07
    27a0:	f8 85       	ldd	r31, Y+8	; 0x08
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	a4 81       	ldd	r26, Z+4	; 0x04
    27a8:	b5 81       	ldd	r27, Z+5	; 0x05
    27aa:	80 93 6f 00 	sts	0x006F, r24
    27ae:	90 93 70 00 	sts	0x0070, r25
    27b2:	a0 93 71 00 	sts	0x0071, r26
    27b6:	b0 93 72 00 	sts	0x0072, r27
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    27ba:	20 91 1c 03 	lds	r18, 0x031C
    27be:	30 91 1d 03 	lds	r19, 0x031D
    27c2:	40 91 1e 03 	lds	r20, 0x031E
    27c6:	50 91 1f 03 	lds	r21, 0x031F
    27ca:	80 91 6f 00 	lds	r24, 0x006F
    27ce:	90 91 70 00 	lds	r25, 0x0070
    27d2:	a0 91 71 00 	lds	r26, 0x0071
    27d6:	b0 91 72 00 	lds	r27, 0x0072
    27da:	28 17       	cp	r18, r24
    27dc:	39 07       	cpc	r19, r25
    27de:	4a 07       	cpc	r20, r26
    27e0:	5b 07       	cpc	r21, r27
    27e2:	08 f4       	brcc	.+2      	; 0x27e6 <vTaskIncrementTick+0x116>
    27e4:	86 c0       	rjmp	.+268    	; 0x28f2 <vTaskIncrementTick+0x222>
    27e6:	e0 91 5f 03 	lds	r30, 0x035F
    27ea:	f0 91 60 03 	lds	r31, 0x0360
    27ee:	80 81       	ld	r24, Z
    27f0:	88 23       	and	r24, r24
    27f2:	69 f4       	brne	.+26     	; 0x280e <vTaskIncrementTick+0x13e>
    27f4:	8f ef       	ldi	r24, 0xFF	; 255
    27f6:	9f ef       	ldi	r25, 0xFF	; 255
    27f8:	af ef       	ldi	r26, 0xFF	; 255
    27fa:	bf ef       	ldi	r27, 0xFF	; 255
    27fc:	80 93 6f 00 	sts	0x006F, r24
    2800:	90 93 70 00 	sts	0x0070, r25
    2804:	a0 93 71 00 	sts	0x0071, r26
    2808:	b0 93 72 00 	sts	0x0072, r27
    280c:	72 c0       	rjmp	.+228    	; 0x28f2 <vTaskIncrementTick+0x222>
    280e:	e0 91 5f 03 	lds	r30, 0x035F
    2812:	f0 91 60 03 	lds	r31, 0x0360
    2816:	07 80       	ldd	r0, Z+7	; 0x07
    2818:	f0 85       	ldd	r31, Z+8	; 0x08
    281a:	e0 2d       	mov	r30, r0
    281c:	80 85       	ldd	r24, Z+8	; 0x08
    281e:	91 85       	ldd	r25, Z+9	; 0x09
    2820:	98 87       	std	Y+8, r25	; 0x08
    2822:	8f 83       	std	Y+7, r24	; 0x07
    2824:	ef 81       	ldd	r30, Y+7	; 0x07
    2826:	f8 85       	ldd	r31, Y+8	; 0x08
    2828:	82 81       	ldd	r24, Z+2	; 0x02
    282a:	93 81       	ldd	r25, Z+3	; 0x03
    282c:	a4 81       	ldd	r26, Z+4	; 0x04
    282e:	b5 81       	ldd	r27, Z+5	; 0x05
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	9a 83       	std	Y+2, r25	; 0x02
    2834:	ab 83       	std	Y+3, r26	; 0x03
    2836:	bc 83       	std	Y+4, r27	; 0x04
    2838:	20 91 1c 03 	lds	r18, 0x031C
    283c:	30 91 1d 03 	lds	r19, 0x031D
    2840:	40 91 1e 03 	lds	r20, 0x031E
    2844:	50 91 1f 03 	lds	r21, 0x031F
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	ab 81       	ldd	r26, Y+3	; 0x03
    284e:	bc 81       	ldd	r27, Y+4	; 0x04
    2850:	28 17       	cp	r18, r24
    2852:	39 07       	cpc	r19, r25
    2854:	4a 07       	cpc	r20, r26
    2856:	5b 07       	cpc	r21, r27
    2858:	68 f4       	brcc	.+26     	; 0x2874 <vTaskIncrementTick+0x1a4>
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	9a 81       	ldd	r25, Y+2	; 0x02
    285e:	ab 81       	ldd	r26, Y+3	; 0x03
    2860:	bc 81       	ldd	r27, Y+4	; 0x04
    2862:	80 93 6f 00 	sts	0x006F, r24
    2866:	90 93 70 00 	sts	0x0070, r25
    286a:	a0 93 71 00 	sts	0x0071, r26
    286e:	b0 93 72 00 	sts	0x0072, r27
    2872:	3f c0       	rjmp	.+126    	; 0x28f2 <vTaskIncrementTick+0x222>
    2874:	8f 81       	ldd	r24, Y+7	; 0x07
    2876:	98 85       	ldd	r25, Y+8	; 0x08
    2878:	02 96       	adiw	r24, 0x02	; 2
    287a:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
    287e:	ef 81       	ldd	r30, Y+7	; 0x07
    2880:	f8 85       	ldd	r31, Y+8	; 0x08
    2882:	80 8d       	ldd	r24, Z+24	; 0x18
    2884:	91 8d       	ldd	r25, Z+25	; 0x19
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	29 f0       	breq	.+10     	; 0x2894 <vTaskIncrementTick+0x1c4>
    288a:	8f 81       	ldd	r24, Y+7	; 0x07
    288c:	98 85       	ldd	r25, Y+8	; 0x08
    288e:	0e 96       	adiw	r24, 0x0e	; 14
    2890:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
    2894:	ef 81       	ldd	r30, Y+7	; 0x07
    2896:	f8 85       	ldd	r31, Y+8	; 0x08
    2898:	92 8d       	ldd	r25, Z+26	; 0x1a
    289a:	80 91 21 03 	lds	r24, 0x0321
    289e:	89 17       	cp	r24, r25
    28a0:	28 f4       	brcc	.+10     	; 0x28ac <vTaskIncrementTick+0x1dc>
    28a2:	ef 81       	ldd	r30, Y+7	; 0x07
    28a4:	f8 85       	ldd	r31, Y+8	; 0x08
    28a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    28a8:	80 93 21 03 	sts	0x0321, r24
    28ac:	ef 81       	ldd	r30, Y+7	; 0x07
    28ae:	f8 85       	ldd	r31, Y+8	; 0x08
    28b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    28b2:	48 2f       	mov	r20, r24
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	ca 01       	movw	r24, r20
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	9c 01       	movw	r18, r24
    28be:	22 0f       	add	r18, r18
    28c0:	33 1f       	adc	r19, r19
    28c2:	22 0f       	add	r18, r18
    28c4:	33 1f       	adc	r19, r19
    28c6:	82 0f       	add	r24, r18
    28c8:	93 1f       	adc	r25, r19
    28ca:	84 0f       	add	r24, r20
    28cc:	95 1f       	adc	r25, r21
    28ce:	ac 01       	movw	r20, r24
    28d0:	48 5d       	subi	r20, 0xD8	; 216
    28d2:	5c 4f       	sbci	r21, 0xFC	; 252
    28d4:	8f 81       	ldd	r24, Y+7	; 0x07
    28d6:	98 85       	ldd	r25, Y+8	; 0x08
    28d8:	9c 01       	movw	r18, r24
    28da:	2e 5f       	subi	r18, 0xFE	; 254
    28dc:	3f 4f       	sbci	r19, 0xFF	; 255
    28de:	ca 01       	movw	r24, r20
    28e0:	b9 01       	movw	r22, r18
    28e2:	0e 94 01 07 	call	0xe02	; 0xe02 <vListInsertEnd>
    28e6:	7f cf       	rjmp	.-258    	; 0x27e6 <vTaskIncrementTick+0x116>
	}
	else
	{
		++uxMissedTicks;
    28e8:	80 91 24 03 	lds	r24, 0x0324
    28ec:	8f 5f       	subi	r24, 0xFF	; 255
    28ee:	80 93 24 03 	sts	0x0324, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    28f2:	28 96       	adiw	r28, 0x08	; 8
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	00 d0       	rcall	.+0      	; 0x290a <vTaskSwitchContext+0x6>
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    290e:	80 91 23 03 	lds	r24, 0x0323
    2912:	88 23       	and	r24, r24
    2914:	49 f0       	breq	.+18     	; 0x2928 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	80 93 25 03 	sts	0x0325, r24
    291c:	5a c0       	rjmp	.+180    	; 0x29d2 <vTaskSwitchContext+0xce>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    291e:	80 91 21 03 	lds	r24, 0x0321
    2922:	81 50       	subi	r24, 0x01	; 1
    2924:	80 93 21 03 	sts	0x0321, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2928:	80 91 21 03 	lds	r24, 0x0321
    292c:	48 2f       	mov	r20, r24
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	ca 01       	movw	r24, r20
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	9c 01       	movw	r18, r24
    2938:	22 0f       	add	r18, r18
    293a:	33 1f       	adc	r19, r19
    293c:	22 0f       	add	r18, r18
    293e:	33 1f       	adc	r19, r19
    2940:	82 0f       	add	r24, r18
    2942:	93 1f       	adc	r25, r19
    2944:	84 0f       	add	r24, r20
    2946:	95 1f       	adc	r25, r21
    2948:	fc 01       	movw	r30, r24
    294a:	e8 5d       	subi	r30, 0xD8	; 216
    294c:	fc 4f       	sbci	r31, 0xFC	; 252
    294e:	80 81       	ld	r24, Z
    2950:	88 23       	and	r24, r24
    2952:	29 f3       	breq	.-54     	; 0x291e <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    2954:	80 91 21 03 	lds	r24, 0x0321
    2958:	48 2f       	mov	r20, r24
    295a:	50 e0       	ldi	r21, 0x00	; 0
    295c:	ca 01       	movw	r24, r20
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	9c 01       	movw	r18, r24
    2964:	22 0f       	add	r18, r18
    2966:	33 1f       	adc	r19, r19
    2968:	22 0f       	add	r18, r18
    296a:	33 1f       	adc	r19, r19
    296c:	82 0f       	add	r24, r18
    296e:	93 1f       	adc	r25, r19
    2970:	84 0f       	add	r24, r20
    2972:	95 1f       	adc	r25, r21
    2974:	88 5d       	subi	r24, 0xD8	; 216
    2976:	9c 4f       	sbci	r25, 0xFC	; 252
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	89 83       	std	Y+1, r24	; 0x01
    297c:	e9 81       	ldd	r30, Y+1	; 0x01
    297e:	fa 81       	ldd	r31, Y+2	; 0x02
    2980:	01 80       	ldd	r0, Z+1	; 0x01
    2982:	f2 81       	ldd	r31, Z+2	; 0x02
    2984:	e0 2d       	mov	r30, r0
    2986:	84 81       	ldd	r24, Z+4	; 0x04
    2988:	95 81       	ldd	r25, Z+5	; 0x05
    298a:	e9 81       	ldd	r30, Y+1	; 0x01
    298c:	fa 81       	ldd	r31, Y+2	; 0x02
    298e:	92 83       	std	Z+2, r25	; 0x02
    2990:	81 83       	std	Z+1, r24	; 0x01
    2992:	e9 81       	ldd	r30, Y+1	; 0x01
    2994:	fa 81       	ldd	r31, Y+2	; 0x02
    2996:	21 81       	ldd	r18, Z+1	; 0x01
    2998:	32 81       	ldd	r19, Z+2	; 0x02
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	9a 81       	ldd	r25, Y+2	; 0x02
    299e:	03 96       	adiw	r24, 0x03	; 3
    29a0:	28 17       	cp	r18, r24
    29a2:	39 07       	cpc	r19, r25
    29a4:	59 f4       	brne	.+22     	; 0x29bc <vTaskSwitchContext+0xb8>
    29a6:	e9 81       	ldd	r30, Y+1	; 0x01
    29a8:	fa 81       	ldd	r31, Y+2	; 0x02
    29aa:	01 80       	ldd	r0, Z+1	; 0x01
    29ac:	f2 81       	ldd	r31, Z+2	; 0x02
    29ae:	e0 2d       	mov	r30, r0
    29b0:	84 81       	ldd	r24, Z+4	; 0x04
    29b2:	95 81       	ldd	r25, Z+5	; 0x05
    29b4:	e9 81       	ldd	r30, Y+1	; 0x01
    29b6:	fa 81       	ldd	r31, Y+2	; 0x02
    29b8:	92 83       	std	Z+2, r25	; 0x02
    29ba:	81 83       	std	Z+1, r24	; 0x01
    29bc:	e9 81       	ldd	r30, Y+1	; 0x01
    29be:	fa 81       	ldd	r31, Y+2	; 0x02
    29c0:	01 80       	ldd	r0, Z+1	; 0x01
    29c2:	f2 81       	ldd	r31, Z+2	; 0x02
    29c4:	e0 2d       	mov	r30, r0
    29c6:	80 85       	ldd	r24, Z+8	; 0x08
    29c8:	91 85       	ldd	r25, Z+9	; 0x09
    29ca:	90 93 19 03 	sts	0x0319, r25
    29ce:	80 93 18 03 	sts	0x0318, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	2a 97       	sbiw	r28, 0x0a	; 10
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	9e 83       	std	Y+6, r25	; 0x06
    29f2:	8d 83       	std	Y+5, r24	; 0x05
    29f4:	4f 83       	std	Y+7, r20	; 0x07
    29f6:	58 87       	std	Y+8, r21	; 0x08
    29f8:	69 87       	std	Y+9, r22	; 0x09
    29fa:	7a 87       	std	Y+10, r23	; 0x0a
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    29fc:	4d 81       	ldd	r20, Y+5	; 0x05
    29fe:	5e 81       	ldd	r21, Y+6	; 0x06
    2a00:	80 91 18 03 	lds	r24, 0x0318
    2a04:	90 91 19 03 	lds	r25, 0x0319
    2a08:	9c 01       	movw	r18, r24
    2a0a:	22 5f       	subi	r18, 0xF2	; 242
    2a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0e:	ca 01       	movw	r24, r20
    2a10:	b9 01       	movw	r22, r18
    2a12:	0e 94 4d 07 	call	0xe9a	; 0xe9a <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2a16:	80 91 18 03 	lds	r24, 0x0318
    2a1a:	90 91 19 03 	lds	r25, 0x0319
    2a1e:	02 96       	adiw	r24, 0x02	; 2
    2a20:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    2a24:	20 91 1c 03 	lds	r18, 0x031C
    2a28:	30 91 1d 03 	lds	r19, 0x031D
    2a2c:	40 91 1e 03 	lds	r20, 0x031E
    2a30:	50 91 1f 03 	lds	r21, 0x031F
    2a34:	8f 81       	ldd	r24, Y+7	; 0x07
    2a36:	98 85       	ldd	r25, Y+8	; 0x08
    2a38:	a9 85       	ldd	r26, Y+9	; 0x09
    2a3a:	ba 85       	ldd	r27, Y+10	; 0x0a
    2a3c:	82 0f       	add	r24, r18
    2a3e:	93 1f       	adc	r25, r19
    2a40:	a4 1f       	adc	r26, r20
    2a42:	b5 1f       	adc	r27, r21
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	ab 83       	std	Y+3, r26	; 0x03
    2a4a:	bc 83       	std	Y+4, r27	; 0x04
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	ab 81       	ldd	r26, Y+3	; 0x03
    2a52:	bc 81       	ldd	r27, Y+4	; 0x04
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    2a5c:	2a 96       	adiw	r28, 0x0a	; 10
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	08 95       	ret

00002a6e <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <xTaskRemoveFromEventList+0x6>
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <xTaskRemoveFromEventList+0x8>
    2a76:	0f 92       	push	r0
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	9d 83       	std	Y+5, r25	; 0x05
    2a7e:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2a80:	ec 81       	ldd	r30, Y+4	; 0x04
    2a82:	fd 81       	ldd	r31, Y+5	; 0x05
    2a84:	07 80       	ldd	r0, Z+7	; 0x07
    2a86:	f0 85       	ldd	r31, Z+8	; 0x08
    2a88:	e0 2d       	mov	r30, r0
    2a8a:	80 85       	ldd	r24, Z+8	; 0x08
    2a8c:	91 85       	ldd	r25, Z+9	; 0x09
    2a8e:	9b 83       	std	Y+3, r25	; 0x03
    2a90:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	9b 81       	ldd	r25, Y+3	; 0x03
    2a96:	0e 96       	adiw	r24, 0x0e	; 14
    2a98:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2a9c:	80 91 23 03 	lds	r24, 0x0323
    2aa0:	88 23       	and	r24, r24
    2aa2:	79 f5       	brne	.+94     	; 0x2b02 <xTaskRemoveFromEventList+0x94>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa8:	02 96       	adiw	r24, 0x02	; 2
    2aaa:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2aae:	ea 81       	ldd	r30, Y+2	; 0x02
    2ab0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ab2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ab4:	80 91 21 03 	lds	r24, 0x0321
    2ab8:	89 17       	cp	r24, r25
    2aba:	28 f4       	brcc	.+10     	; 0x2ac6 <xTaskRemoveFromEventList+0x58>
    2abc:	ea 81       	ldd	r30, Y+2	; 0x02
    2abe:	fb 81       	ldd	r31, Y+3	; 0x03
    2ac0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ac2:	80 93 21 03 	sts	0x0321, r24
    2ac6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ac8:	fb 81       	ldd	r31, Y+3	; 0x03
    2aca:	82 8d       	ldd	r24, Z+26	; 0x1a
    2acc:	48 2f       	mov	r20, r24
    2ace:	50 e0       	ldi	r21, 0x00	; 0
    2ad0:	ca 01       	movw	r24, r20
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	9c 01       	movw	r18, r24
    2ad8:	22 0f       	add	r18, r18
    2ada:	33 1f       	adc	r19, r19
    2adc:	22 0f       	add	r18, r18
    2ade:	33 1f       	adc	r19, r19
    2ae0:	82 0f       	add	r24, r18
    2ae2:	93 1f       	adc	r25, r19
    2ae4:	84 0f       	add	r24, r20
    2ae6:	95 1f       	adc	r25, r21
    2ae8:	ac 01       	movw	r20, r24
    2aea:	48 5d       	subi	r20, 0xD8	; 216
    2aec:	5c 4f       	sbci	r21, 0xFC	; 252
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	9b 81       	ldd	r25, Y+3	; 0x03
    2af2:	9c 01       	movw	r18, r24
    2af4:	2e 5f       	subi	r18, 0xFE	; 254
    2af6:	3f 4f       	sbci	r19, 0xFF	; 255
    2af8:	ca 01       	movw	r24, r20
    2afa:	b9 01       	movw	r22, r18
    2afc:	0e 94 01 07 	call	0xe02	; 0xe02 <vListInsertEnd>
    2b00:	0a c0       	rjmp	.+20     	; 0x2b16 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	9b 81       	ldd	r25, Y+3	; 0x03
    2b06:	9c 01       	movw	r18, r24
    2b08:	22 5f       	subi	r18, 0xF2	; 242
    2b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0c:	83 e6       	ldi	r24, 0x63	; 99
    2b0e:	93 e0       	ldi	r25, 0x03	; 3
    2b10:	b9 01       	movw	r22, r18
    2b12:	0e 94 01 07 	call	0xe02	; 0xe02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2b16:	ea 81       	ldd	r30, Y+2	; 0x02
    2b18:	fb 81       	ldd	r31, Y+3	; 0x03
    2b1a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b1c:	e0 91 18 03 	lds	r30, 0x0318
    2b20:	f0 91 19 03 	lds	r31, 0x0319
    2b24:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b26:	98 17       	cp	r25, r24
    2b28:	18 f0       	brcs	.+6      	; 0x2b30 <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	01 c0       	rjmp	.+2      	; 0x2b32 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    2b30:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <vTaskSetTimeOutState+0x6>
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
    2b4e:	9a 83       	std	Y+2, r25	; 0x02
    2b50:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2b52:	80 91 26 03 	lds	r24, 0x0326
    2b56:	e9 81       	ldd	r30, Y+1	; 0x01
    2b58:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5a:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    2b5c:	80 91 1c 03 	lds	r24, 0x031C
    2b60:	90 91 1d 03 	lds	r25, 0x031D
    2b64:	a0 91 1e 03 	lds	r26, 0x031E
    2b68:	b0 91 1f 03 	lds	r27, 0x031F
    2b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b70:	81 83       	std	Z+1, r24	; 0x01
    2b72:	92 83       	std	Z+2, r25	; 0x02
    2b74:	a3 83       	std	Z+3, r26	; 0x03
    2b76:	b4 83       	std	Z+4, r27	; 0x04
}
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    2b82:	af 92       	push	r10
    2b84:	bf 92       	push	r11
    2b86:	cf 92       	push	r12
    2b88:	df 92       	push	r13
    2b8a:	ef 92       	push	r14
    2b8c:	ff 92       	push	r15
    2b8e:	0f 93       	push	r16
    2b90:	1f 93       	push	r17
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	00 d0       	rcall	.+0      	; 0x2b98 <xTaskCheckForTimeOut+0x16>
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <xTaskCheckForTimeOut+0x18>
    2b9a:	0f 92       	push	r0
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	9b 83       	std	Y+3, r25	; 0x03
    2ba2:	8a 83       	std	Y+2, r24	; 0x02
    2ba4:	7d 83       	std	Y+5, r23	; 0x05
    2ba6:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2bae:	ea 81       	ldd	r30, Y+2	; 0x02
    2bb0:	fb 81       	ldd	r31, Y+3	; 0x03
    2bb2:	90 81       	ld	r25, Z
    2bb4:	80 91 26 03 	lds	r24, 0x0326
    2bb8:	98 17       	cp	r25, r24
    2bba:	b1 f0       	breq	.+44     	; 0x2be8 <xTaskCheckForTimeOut+0x66>
    2bbc:	ea 81       	ldd	r30, Y+2	; 0x02
    2bbe:	fb 81       	ldd	r31, Y+3	; 0x03
    2bc0:	21 81       	ldd	r18, Z+1	; 0x01
    2bc2:	32 81       	ldd	r19, Z+2	; 0x02
    2bc4:	43 81       	ldd	r20, Z+3	; 0x03
    2bc6:	54 81       	ldd	r21, Z+4	; 0x04
    2bc8:	80 91 1c 03 	lds	r24, 0x031C
    2bcc:	90 91 1d 03 	lds	r25, 0x031D
    2bd0:	a0 91 1e 03 	lds	r26, 0x031E
    2bd4:	b0 91 1f 03 	lds	r27, 0x031F
    2bd8:	82 17       	cp	r24, r18
    2bda:	93 07       	cpc	r25, r19
    2bdc:	a4 07       	cpc	r26, r20
    2bde:	b5 07       	cpc	r27, r21
    2be0:	18 f0       	brcs	.+6      	; 0x2be8 <xTaskCheckForTimeOut+0x66>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	89 83       	std	Y+1, r24	; 0x01
    2be6:	4b c0       	rjmp	.+150    	; 0x2c7e <xTaskCheckForTimeOut+0xfc>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    2be8:	20 91 1c 03 	lds	r18, 0x031C
    2bec:	30 91 1d 03 	lds	r19, 0x031D
    2bf0:	40 91 1e 03 	lds	r20, 0x031E
    2bf4:	50 91 1f 03 	lds	r21, 0x031F
    2bf8:	ea 81       	ldd	r30, Y+2	; 0x02
    2bfa:	fb 81       	ldd	r31, Y+3	; 0x03
    2bfc:	81 81       	ldd	r24, Z+1	; 0x01
    2bfe:	92 81       	ldd	r25, Z+2	; 0x02
    2c00:	a3 81       	ldd	r26, Z+3	; 0x03
    2c02:	b4 81       	ldd	r27, Z+4	; 0x04
    2c04:	28 1b       	sub	r18, r24
    2c06:	39 0b       	sbc	r19, r25
    2c08:	4a 0b       	sbc	r20, r26
    2c0a:	5b 0b       	sbc	r21, r27
    2c0c:	ec 81       	ldd	r30, Y+4	; 0x04
    2c0e:	fd 81       	ldd	r31, Y+5	; 0x05
    2c10:	80 81       	ld	r24, Z
    2c12:	91 81       	ldd	r25, Z+1	; 0x01
    2c14:	a2 81       	ldd	r26, Z+2	; 0x02
    2c16:	b3 81       	ldd	r27, Z+3	; 0x03
    2c18:	28 17       	cp	r18, r24
    2c1a:	39 07       	cpc	r19, r25
    2c1c:	4a 07       	cpc	r20, r26
    2c1e:	5b 07       	cpc	r21, r27
    2c20:	60 f5       	brcc	.+88     	; 0x2c7a <xTaskCheckForTimeOut+0xf8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    2c22:	ec 81       	ldd	r30, Y+4	; 0x04
    2c24:	fd 81       	ldd	r31, Y+5	; 0x05
    2c26:	e0 80       	ld	r14, Z
    2c28:	f1 80       	ldd	r15, Z+1	; 0x01
    2c2a:	02 81       	ldd	r16, Z+2	; 0x02
    2c2c:	13 81       	ldd	r17, Z+3	; 0x03
    2c2e:	ea 81       	ldd	r30, Y+2	; 0x02
    2c30:	fb 81       	ldd	r31, Y+3	; 0x03
    2c32:	21 81       	ldd	r18, Z+1	; 0x01
    2c34:	32 81       	ldd	r19, Z+2	; 0x02
    2c36:	43 81       	ldd	r20, Z+3	; 0x03
    2c38:	54 81       	ldd	r21, Z+4	; 0x04
    2c3a:	80 91 1c 03 	lds	r24, 0x031C
    2c3e:	90 91 1d 03 	lds	r25, 0x031D
    2c42:	a0 91 1e 03 	lds	r26, 0x031E
    2c46:	b0 91 1f 03 	lds	r27, 0x031F
    2c4a:	59 01       	movw	r10, r18
    2c4c:	6a 01       	movw	r12, r20
    2c4e:	a8 1a       	sub	r10, r24
    2c50:	b9 0a       	sbc	r11, r25
    2c52:	ca 0a       	sbc	r12, r26
    2c54:	db 0a       	sbc	r13, r27
    2c56:	d6 01       	movw	r26, r12
    2c58:	c5 01       	movw	r24, r10
    2c5a:	8e 0d       	add	r24, r14
    2c5c:	9f 1d       	adc	r25, r15
    2c5e:	a0 1f       	adc	r26, r16
    2c60:	b1 1f       	adc	r27, r17
    2c62:	ec 81       	ldd	r30, Y+4	; 0x04
    2c64:	fd 81       	ldd	r31, Y+5	; 0x05
    2c66:	80 83       	st	Z, r24
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	a2 83       	std	Z+2, r26	; 0x02
    2c6c:	b3 83       	std	Z+3, r27	; 0x03
			vTaskSetTimeOutState( pxTimeOut );
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	9b 81       	ldd	r25, Y+3	; 0x03
    2c72:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2c76:	19 82       	std	Y+1, r1	; 0x01
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <xTaskCheckForTimeOut+0xfc>
		}
		else
		{
			xReturn = pdTRUE;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2c7e:	0f 90       	pop	r0
    2c80:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	ff 90       	pop	r15
    2c98:	ef 90       	pop	r14
    2c9a:	df 90       	pop	r13
    2c9c:	cf 90       	pop	r12
    2c9e:	bf 90       	pop	r11
    2ca0:	af 90       	pop	r10
    2ca2:	08 95       	ret

00002ca4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    2ca4:	df 93       	push	r29
    2ca6:	cf 93       	push	r28
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	80 93 25 03 	sts	0x0325, r24
}
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	08 95       	ret

00002cb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2cb8:	df 93       	push	r29
    2cba:	cf 93       	push	r28
    2cbc:	00 d0       	rcall	.+0      	; 0x2cbe <prvIdleTask+0x6>
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	9a 83       	std	Y+2, r25	; 0x02
    2cc4:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    2cc6:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    2cca:	0e 94 20 0a 	call	0x1440	; 0x1440 <vPortYield>
    2cce:	fb cf       	rjmp	.-10     	; 0x2cc6 <prvIdleTask+0xe>

00002cd0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    2cd0:	0f 93       	push	r16
    2cd2:	1f 93       	push	r17
    2cd4:	df 93       	push	r29
    2cd6:	cf 93       	push	r28
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    2cdc:	29 97       	sbiw	r28, 0x09	; 9
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	9a 83       	std	Y+2, r25	; 0x02
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	7c 83       	std	Y+4, r23	; 0x04
    2cee:	6b 83       	std	Y+3, r22	; 0x03
    2cf0:	4d 83       	std	Y+5, r20	; 0x05
    2cf2:	3f 83       	std	Y+7, r19	; 0x07
    2cf4:	2e 83       	std	Y+6, r18	; 0x06
    2cf6:	19 87       	std	Y+9, r17	; 0x09
    2cf8:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	4d 96       	adiw	r24, 0x1d	; 29
    2d00:	2b 81       	ldd	r18, Y+3	; 0x03
    2d02:	3c 81       	ldd	r19, Y+4	; 0x04
    2d04:	b9 01       	movw	r22, r18
    2d06:	40 e1       	ldi	r20, 0x10	; 16
    2d08:	50 e0       	ldi	r21, 0x00	; 0
    2d0a:	0e 94 23 18 	call	0x3046	; 0x3046 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    2d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d10:	fa 81       	ldd	r31, Y+2	; 0x02
    2d12:	14 a6       	std	Z+44, r1	; 0x2c

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	83 30       	cpi	r24, 0x03	; 3
    2d18:	10 f0       	brcs	.+4      	; 0x2d1e <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    2d1a:	82 e0       	ldi	r24, 0x02	; 2
    2d1c:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    2d1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d20:	fa 81       	ldd	r31, Y+2	; 0x02
    2d22:	8d 81       	ldd	r24, Y+5	; 0x05
    2d24:	82 8f       	std	Z+26, r24	; 0x1a
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2a:	02 96       	adiw	r24, 0x02	; 2
    2d2c:	0e 94 f1 06 	call	0xde2	; 0xde2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
    2d34:	0e 96       	adiw	r24, 0x0e	; 14
    2d36:	0e 94 f1 06 	call	0xde2	; 0xde2 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2d3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	9a 81       	ldd	r25, Y+2	; 0x02
    2d42:	93 87       	std	Z+11, r25	; 0x0b
    2d44:	82 87       	std	Z+10, r24	; 0x0a

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2d46:	8d 81       	ldd	r24, Y+5	; 0x05
    2d48:	28 2f       	mov	r18, r24
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e0       	ldi	r20, 0x00	; 0
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
    2d50:	83 e0       	ldi	r24, 0x03	; 3
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	a0 e0       	ldi	r26, 0x00	; 0
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	82 1b       	sub	r24, r18
    2d5a:	93 0b       	sbc	r25, r19
    2d5c:	a4 0b       	sbc	r26, r20
    2d5e:	b5 0b       	sbc	r27, r21
    2d60:	e9 81       	ldd	r30, Y+1	; 0x01
    2d62:	fa 81       	ldd	r31, Y+2	; 0x02
    2d64:	86 87       	std	Z+14, r24	; 0x0e
    2d66:	97 87       	std	Z+15, r25	; 0x0f
    2d68:	a0 8b       	std	Z+16, r26	; 0x10
    2d6a:	b1 8b       	std	Z+17, r27	; 0x11
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    2d6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	9a 81       	ldd	r25, Y+2	; 0x02
    2d74:	97 8b       	std	Z+23, r25	; 0x17
    2d76:	86 8b       	std	Z+22, r24	; 0x16
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    2d78:	29 96       	adiw	r28, 0x09	; 9
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	08 95       	ret

00002d8e <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	0f 92       	push	r0
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2d98:	19 82       	std	Y+1, r1	; 0x01
    2d9a:	16 c0       	rjmp	.+44     	; 0x2dc8 <prvInitialiseTaskLists+0x3a>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	48 2f       	mov	r20, r24
    2da0:	50 e0       	ldi	r21, 0x00	; 0
    2da2:	ca 01       	movw	r24, r20
    2da4:	88 0f       	add	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	9c 01       	movw	r18, r24
    2daa:	22 0f       	add	r18, r18
    2dac:	33 1f       	adc	r19, r19
    2dae:	22 0f       	add	r18, r18
    2db0:	33 1f       	adc	r19, r19
    2db2:	82 0f       	add	r24, r18
    2db4:	93 1f       	adc	r25, r19
    2db6:	84 0f       	add	r24, r20
    2db8:	95 1f       	adc	r25, r21
    2dba:	88 5d       	subi	r24, 0xD8	; 216
    2dbc:	9c 4f       	sbci	r25, 0xFC	; 252
    2dbe:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	8f 5f       	subi	r24, 0xFF	; 255
    2dc6:	89 83       	std	Y+1, r24	; 0x01
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	83 30       	cpi	r24, 0x03	; 3
    2dcc:	38 f3       	brcs	.-50     	; 0x2d9c <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    2dce:	89 e4       	ldi	r24, 0x49	; 73
    2dd0:	93 e0       	ldi	r25, 0x03	; 3
    2dd2:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    2dd6:	84 e5       	ldi	r24, 0x54	; 84
    2dd8:	93 e0       	ldi	r25, 0x03	; 3
    2dda:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    2dde:	83 e6       	ldi	r24, 0x63	; 99
    2de0:	93 e0       	ldi	r25, 0x03	; 3
    2de2:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    2de6:	8e e6       	ldi	r24, 0x6E	; 110
    2de8:	93 e0       	ldi	r25, 0x03	; 3
    2dea:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2dee:	89 e4       	ldi	r24, 0x49	; 73
    2df0:	93 e0       	ldi	r25, 0x03	; 3
    2df2:	90 93 60 03 	sts	0x0360, r25
    2df6:	80 93 5f 03 	sts	0x035F, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2dfa:	84 e5       	ldi	r24, 0x54	; 84
    2dfc:	93 e0       	ldi	r25, 0x03	; 3
    2dfe:	90 93 62 03 	sts	0x0362, r25
    2e02:	80 93 61 03 	sts	0x0361, r24
}
    2e06:	0f 90       	pop	r0
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	00 d0       	rcall	.+0      	; 0x2e14 <prvCheckTasksWaitingTermination+0x6>
    2e14:	0f 92       	push	r0
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    2e1a:	80 91 1a 03 	lds	r24, 0x031A
    2e1e:	88 23       	and	r24, r24
    2e20:	71 f1       	breq	.+92     	; 0x2e7e <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    2e22:	0e 94 82 12 	call	0x2504	; 0x2504 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2e26:	80 91 6e 03 	lds	r24, 0x036E
    2e2a:	1b 82       	std	Y+3, r1	; 0x03
    2e2c:	88 23       	and	r24, r24
    2e2e:	11 f4       	brne	.+4      	; 0x2e34 <prvCheckTasksWaitingTermination+0x26>
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    2e34:	0e 94 8e 12 	call	0x251c	; 0x251c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	88 23       	and	r24, r24
    2e3c:	01 f5       	brne	.+64     	; 0x2e7e <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    2e44:	e0 91 75 03 	lds	r30, 0x0375
    2e48:	f0 91 76 03 	lds	r31, 0x0376
    2e4c:	80 85       	ldd	r24, Z+8	; 0x08
    2e4e:	91 85       	ldd	r25, Z+9	; 0x09
    2e50:	9a 83       	std	Y+2, r25	; 0x02
    2e52:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	9a 81       	ldd	r25, Y+2	; 0x02
    2e58:	02 96       	adiw	r24, 0x02	; 2
    2e5a:	0e 94 c9 07 	call	0xf92	; 0xf92 <vListRemove>
					--uxCurrentNumberOfTasks;
    2e5e:	80 91 1b 03 	lds	r24, 0x031B
    2e62:	81 50       	subi	r24, 0x01	; 1
    2e64:	80 93 1b 03 	sts	0x031B, r24
					--uxTasksDeleted;
    2e68:	80 91 1a 03 	lds	r24, 0x031A
    2e6c:	81 50       	subi	r24, 0x01	; 1
    2e6e:	80 93 1a 03 	sts	0x031A, r24
				}
				taskEXIT_CRITICAL();
    2e72:	0f 90       	pop	r0
    2e74:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7a:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <prvDeleteTCB>
			}
		}
	}
	#endif
}
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	08 95       	ret

00002e8a <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <prvAddCurrentTaskToDelayedList+0x6>
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <prvAddCurrentTaskToDelayedList+0x8>
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	69 83       	std	Y+1, r22	; 0x01
    2e98:	7a 83       	std	Y+2, r23	; 0x02
    2e9a:	8b 83       	std	Y+3, r24	; 0x03
    2e9c:	9c 83       	std	Y+4, r25	; 0x04
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2e9e:	e0 91 18 03 	lds	r30, 0x0318
    2ea2:	f0 91 19 03 	lds	r31, 0x0319
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eaa:	ab 81       	ldd	r26, Y+3	; 0x03
    2eac:	bc 81       	ldd	r27, Y+4	; 0x04
    2eae:	82 83       	std	Z+2, r24	; 0x02
    2eb0:	93 83       	std	Z+3, r25	; 0x03
    2eb2:	a4 83       	std	Z+4, r26	; 0x04
    2eb4:	b5 83       	std	Z+5, r27	; 0x05

	if( xTimeToWake < xTickCount )
    2eb6:	20 91 1c 03 	lds	r18, 0x031C
    2eba:	30 91 1d 03 	lds	r19, 0x031D
    2ebe:	40 91 1e 03 	lds	r20, 0x031E
    2ec2:	50 91 1f 03 	lds	r21, 0x031F
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	ab 81       	ldd	r26, Y+3	; 0x03
    2ecc:	bc 81       	ldd	r27, Y+4	; 0x04
    2ece:	82 17       	cp	r24, r18
    2ed0:	93 07       	cpc	r25, r19
    2ed2:	a4 07       	cpc	r26, r20
    2ed4:	b5 07       	cpc	r27, r21
    2ed6:	70 f4       	brcc	.+28     	; 0x2ef4 <prvAddCurrentTaskToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2ed8:	80 91 61 03 	lds	r24, 0x0361
    2edc:	90 91 62 03 	lds	r25, 0x0362
    2ee0:	20 91 18 03 	lds	r18, 0x0318
    2ee4:	30 91 19 03 	lds	r19, 0x0319
    2ee8:	2e 5f       	subi	r18, 0xFE	; 254
    2eea:	3f 4f       	sbci	r19, 0xFF	; 255
    2eec:	b9 01       	movw	r22, r18
    2eee:	0e 94 4d 07 	call	0xe9a	; 0xe9a <vListInsert>
    2ef2:	2c c0       	rjmp	.+88     	; 0x2f4c <prvAddCurrentTaskToDelayedList+0xc2>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2ef4:	40 91 5f 03 	lds	r20, 0x035F
    2ef8:	50 91 60 03 	lds	r21, 0x0360
    2efc:	80 91 18 03 	lds	r24, 0x0318
    2f00:	90 91 19 03 	lds	r25, 0x0319
    2f04:	9c 01       	movw	r18, r24
    2f06:	2e 5f       	subi	r18, 0xFE	; 254
    2f08:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0a:	ca 01       	movw	r24, r20
    2f0c:	b9 01       	movw	r22, r18
    2f0e:	0e 94 4d 07 	call	0xe9a	; 0xe9a <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    2f12:	20 91 6f 00 	lds	r18, 0x006F
    2f16:	30 91 70 00 	lds	r19, 0x0070
    2f1a:	40 91 71 00 	lds	r20, 0x0071
    2f1e:	50 91 72 00 	lds	r21, 0x0072
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	9a 81       	ldd	r25, Y+2	; 0x02
    2f26:	ab 81       	ldd	r26, Y+3	; 0x03
    2f28:	bc 81       	ldd	r27, Y+4	; 0x04
    2f2a:	82 17       	cp	r24, r18
    2f2c:	93 07       	cpc	r25, r19
    2f2e:	a4 07       	cpc	r26, r20
    2f30:	b5 07       	cpc	r27, r21
    2f32:	60 f4       	brcc	.+24     	; 0x2f4c <prvAddCurrentTaskToDelayedList+0xc2>
		{
			xNextTaskUnblockTime = xTimeToWake;
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	9a 81       	ldd	r25, Y+2	; 0x02
    2f38:	ab 81       	ldd	r26, Y+3	; 0x03
    2f3a:	bc 81       	ldd	r27, Y+4	; 0x04
    2f3c:	80 93 6f 00 	sts	0x006F, r24
    2f40:	90 93 70 00 	sts	0x0070, r25
    2f44:	a0 93 71 00 	sts	0x0071, r26
    2f48:	b0 93 72 00 	sts	0x0072, r27
		}
	}
}
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	cf 91       	pop	r28
    2f56:	df 91       	pop	r29
    2f58:	08 95       	ret

00002f5a <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    2f5a:	df 93       	push	r29
    2f5c:	cf 93       	push	r28
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	28 97       	sbiw	r28, 0x08	; 8
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	f8 94       	cli
    2f68:	de bf       	out	0x3e, r29	; 62
    2f6a:	0f be       	out	0x3f, r0	; 63
    2f6c:	cd bf       	out	0x3d, r28	; 61
    2f6e:	9c 83       	std	Y+4, r25	; 0x04
    2f70:	8b 83       	std	Y+3, r24	; 0x03
    2f72:	7e 83       	std	Y+6, r23	; 0x06
    2f74:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    2f76:	8d e2       	ldi	r24, 0x2D	; 45
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	0e 94 57 06 	call	0xcae	; 0xcae <pvPortMalloc>
    2f7e:	9a 83       	std	Y+2, r25	; 0x02
    2f80:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	9a 81       	ldd	r25, Y+2	; 0x02
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	69 f1       	breq	.+90     	; 0x2fe4 <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	39 f4       	brne	.+14     	; 0x2fa0 <prvAllocateTCBAndStack+0x46>
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	9c 81       	ldd	r25, Y+4	; 0x04
    2f96:	0e 94 57 06 	call	0xcae	; 0xcae <pvPortMalloc>
    2f9a:	98 87       	std	Y+8, r25	; 0x08
    2f9c:	8f 83       	std	Y+7, r24	; 0x07
    2f9e:	04 c0       	rjmp	.+8      	; 0x2fa8 <prvAllocateTCBAndStack+0x4e>
    2fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa4:	98 87       	std	Y+8, r25	; 0x08
    2fa6:	8f 83       	std	Y+7, r24	; 0x07
    2fa8:	e9 81       	ldd	r30, Y+1	; 0x01
    2faa:	fa 81       	ldd	r31, Y+2	; 0x02
    2fac:	8f 81       	ldd	r24, Y+7	; 0x07
    2fae:	98 85       	ldd	r25, Y+8	; 0x08
    2fb0:	94 8f       	std	Z+28, r25	; 0x1c
    2fb2:	83 8f       	std	Z+27, r24	; 0x1b

		if( pxNewTCB->pxStack == NULL )
    2fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb8:	83 8d       	ldd	r24, Z+27	; 0x1b
    2fba:	94 8d       	ldd	r25, Z+28	; 0x1c
    2fbc:	00 97       	sbiw	r24, 0x00	; 0
    2fbe:	39 f4       	brne	.+14     	; 0x2fce <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortFree>
			pxNewTCB = NULL;
    2fc8:	1a 82       	std	Y+2, r1	; 0x02
    2fca:	19 82       	std	Y+1, r1	; 0x01
    2fcc:	0b c0       	rjmp	.+22     	; 0x2fe4 <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    2fce:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd2:	83 8d       	ldd	r24, Z+27	; 0x1b
    2fd4:	94 8d       	ldd	r25, Z+28	; 0x1c
    2fd6:	2b 81       	ldd	r18, Y+3	; 0x03
    2fd8:	3c 81       	ldd	r19, Y+4	; 0x04
    2fda:	65 ea       	ldi	r22, 0xA5	; 165
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	a9 01       	movw	r20, r18
    2fe0:	0e 94 1c 18 	call	0x3038	; 0x3038 <memset>
		}
	}

	return pxNewTCB;
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2fe8:	28 96       	adiw	r28, 0x08	; 8
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	cf 91       	pop	r28
    2ff6:	df 91       	pop	r29
    2ff8:	08 95       	ret

00002ffa <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	00 d0       	rcall	.+0      	; 0x3000 <prvDeleteTCB+0x6>
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    3008:	e9 81       	ldd	r30, Y+1	; 0x01
    300a:	fa 81       	ldd	r31, Y+2	; 0x02
    300c:	83 8d       	ldd	r24, Z+27	; 0x1b
    300e:	94 8d       	ldd	r25, Z+28	; 0x1c
    3010:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortFree>
		vPortFree( pxTCB );
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	9a 81       	ldd	r25, Y+2	; 0x02
    3018:	0e 94 9d 06 	call	0xd3a	; 0xd3a <vPortFree>
	}
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <memcpy>:
    3026:	fb 01       	movw	r30, r22
    3028:	dc 01       	movw	r26, r24
    302a:	02 c0       	rjmp	.+4      	; 0x3030 <memcpy+0xa>
    302c:	01 90       	ld	r0, Z+
    302e:	0d 92       	st	X+, r0
    3030:	41 50       	subi	r20, 0x01	; 1
    3032:	50 40       	sbci	r21, 0x00	; 0
    3034:	d8 f7       	brcc	.-10     	; 0x302c <memcpy+0x6>
    3036:	08 95       	ret

00003038 <memset>:
    3038:	dc 01       	movw	r26, r24
    303a:	01 c0       	rjmp	.+2      	; 0x303e <memset+0x6>
    303c:	6d 93       	st	X+, r22
    303e:	41 50       	subi	r20, 0x01	; 1
    3040:	50 40       	sbci	r21, 0x00	; 0
    3042:	e0 f7       	brcc	.-8      	; 0x303c <memset+0x4>
    3044:	08 95       	ret

00003046 <strncpy>:
    3046:	fb 01       	movw	r30, r22
    3048:	dc 01       	movw	r26, r24
    304a:	41 50       	subi	r20, 0x01	; 1
    304c:	50 40       	sbci	r21, 0x00	; 0
    304e:	48 f0       	brcs	.+18     	; 0x3062 <strncpy+0x1c>
    3050:	01 90       	ld	r0, Z+
    3052:	0d 92       	st	X+, r0
    3054:	00 20       	and	r0, r0
    3056:	c9 f7       	brne	.-14     	; 0x304a <strncpy+0x4>
    3058:	01 c0       	rjmp	.+2      	; 0x305c <strncpy+0x16>
    305a:	1d 92       	st	X+, r1
    305c:	41 50       	subi	r20, 0x01	; 1
    305e:	50 40       	sbci	r21, 0x00	; 0
    3060:	e0 f7       	brcc	.-8      	; 0x305a <strncpy+0x14>
    3062:	08 95       	ret

00003064 <_exit>:
    3064:	f8 94       	cli

00003066 <__stop_program>:
    3066:	ff cf       	rjmp	.-2      	; 0x3066 <__stop_program>
