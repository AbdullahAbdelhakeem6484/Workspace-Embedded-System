
CALLLLLAC_MUL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000515e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  0000515e  000051f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000055  008001a6  008001a6  00005338  2**0
                  ALLOC
  3 .stab         000021cc  00000000  00000000  00005338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011fc  00000000  00000000  00007504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00008700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ce  00000000  00000000  00008880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002bc9  00000000  00000000  00008a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001293  00000000  00000000  0000b617  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012d1  00000000  00000000  0000c8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000db7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000031b  00000000  00000000  0000dd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021c0  00000000  00000000  0000e037  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  000101f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3f       	cpi	r26, 0xFB	; 251
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <main>
      8a:	0c 94 ad 28 	jmp	0x515a	; 0x515a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 ae 13 	call	0x275c	; 0x275c <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 26 12 	call	0x244c	; 0x244c <__subsf3>
      be:	0e 94 0e 14 	call	0x281c	; 0x281c <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 0e 14 	call	0x281c	; 0x281c <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__divdi3>:
      ea:	a2 e7       	ldi	r26, 0x72	; 114
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 66 28 	jmp	0x50cc	; 0x50cc <__prologue_saves__>
      f6:	98 2e       	mov	r9, r24
      f8:	89 2e       	mov	r8, r25
      fa:	71 2e       	mov	r7, r17
      fc:	88 e0       	ldi	r24, 0x08	; 8
      fe:	fe 01       	movw	r30, r28
     100:	31 96       	adiw	r30, 0x01	; 1
     102:	df 01       	movw	r26, r30
     104:	68 2e       	mov	r6, r24
     106:	1d 92       	st	X+, r1
     108:	6a 94       	dec	r6
     10a:	e9 f7       	brne	.-6      	; 0x106 <__divdi3+0x1c>
     10c:	29 83       	std	Y+1, r18	; 0x01
     10e:	3a 83       	std	Y+2, r19	; 0x02
     110:	4b 83       	std	Y+3, r20	; 0x03
     112:	5c 83       	std	Y+4, r21	; 0x04
     114:	6d 83       	std	Y+5, r22	; 0x05
     116:	7e 83       	std	Y+6, r23	; 0x06
     118:	9f 82       	std	Y+7, r9	; 0x07
     11a:	98 87       	std	Y+8, r25	; 0x08
     11c:	fe 01       	movw	r30, r28
     11e:	39 96       	adiw	r30, 0x09	; 9
     120:	df 01       	movw	r26, r30
     122:	1d 92       	st	X+, r1
     124:	8a 95       	dec	r24
     126:	e9 f7       	brne	.-6      	; 0x122 <__divdi3+0x38>
     128:	a9 86       	std	Y+9, r10	; 0x09
     12a:	ba 86       	std	Y+10, r11	; 0x0a
     12c:	cb 86       	std	Y+11, r12	; 0x0b
     12e:	dc 86       	std	Y+12, r13	; 0x0c
     130:	ed 86       	std	Y+13, r14	; 0x0d
     132:	fe 86       	std	Y+14, r15	; 0x0e
     134:	0f 87       	std	Y+15, r16	; 0x0f
     136:	18 8b       	std	Y+16, r17	; 0x10
     138:	8d 81       	ldd	r24, Y+5	; 0x05
     13a:	9e 81       	ldd	r25, Y+6	; 0x06
     13c:	af 81       	ldd	r26, Y+7	; 0x07
     13e:	b8 85       	ldd	r27, Y+8	; 0x08
     140:	b7 fd       	sbrc	r27, 7
     142:	07 c0       	rjmp	.+14     	; 0x152 <__divdi3+0x68>
     144:	e1 96       	adiw	r28, 0x31	; 49
     146:	1c ae       	std	Y+60, r1	; 0x3c
     148:	1d ae       	std	Y+61, r1	; 0x3d
     14a:	1e ae       	std	Y+62, r1	; 0x3e
     14c:	1f ae       	std	Y+63, r1	; 0x3f
     14e:	e1 97       	sbiw	r28, 0x31	; 49
     150:	64 c0       	rjmp	.+200    	; 0x21a <__divdi3+0x130>
     152:	21 95       	neg	r18
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	12 16       	cp	r1, r18
     158:	08 f0       	brcs	.+2      	; 0x15c <__divdi3+0x72>
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	31 95       	neg	r19
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	13 16       	cp	r1, r19
     162:	08 f0       	brcs	.+2      	; 0x166 <__divdi3+0x7c>
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	b3 2f       	mov	r27, r19
     168:	b8 1b       	sub	r27, r24
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	3b 17       	cp	r19, r27
     16e:	08 f0       	brcs	.+2      	; 0x172 <__divdi3+0x88>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	98 2b       	or	r25, r24
     174:	41 95       	neg	r20
     176:	31 e0       	ldi	r19, 0x01	; 1
     178:	14 16       	cp	r1, r20
     17a:	08 f0       	brcs	.+2      	; 0x17e <__divdi3+0x94>
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	a4 2f       	mov	r26, r20
     180:	a9 1b       	sub	r26, r25
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	4a 17       	cp	r20, r26
     186:	08 f0       	brcs	.+2      	; 0x18a <__divdi3+0xa0>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	38 2b       	or	r19, r24
     18c:	51 95       	neg	r21
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	15 16       	cp	r1, r21
     192:	08 f0       	brcs	.+2      	; 0x196 <__divdi3+0xac>
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	f5 2f       	mov	r31, r21
     198:	f3 1b       	sub	r31, r19
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	5f 17       	cp	r21, r31
     19e:	08 f0       	brcs	.+2      	; 0x1a2 <__divdi3+0xb8>
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	98 2b       	or	r25, r24
     1a4:	61 95       	neg	r22
     1a6:	31 e0       	ldi	r19, 0x01	; 1
     1a8:	16 16       	cp	r1, r22
     1aa:	08 f0       	brcs	.+2      	; 0x1ae <__divdi3+0xc4>
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	e6 2f       	mov	r30, r22
     1b0:	e9 1b       	sub	r30, r25
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	6e 17       	cp	r22, r30
     1b6:	08 f0       	brcs	.+2      	; 0x1ba <__divdi3+0xd0>
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	38 2b       	or	r19, r24
     1bc:	71 95       	neg	r23
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	17 16       	cp	r1, r23
     1c2:	08 f0       	brcs	.+2      	; 0x1c6 <__divdi3+0xdc>
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	57 2f       	mov	r21, r23
     1c8:	53 1b       	sub	r21, r19
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	75 17       	cp	r23, r21
     1ce:	08 f0       	brcs	.+2      	; 0x1d2 <__divdi3+0xe8>
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	48 2b       	or	r20, r24
     1d4:	89 2d       	mov	r24, r9
     1d6:	81 95       	neg	r24
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	18 16       	cp	r1, r24
     1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__divdi3+0xf6>
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	68 2e       	mov	r6, r24
     1e2:	64 1a       	sub	r6, r20
     1e4:	46 2d       	mov	r20, r6
     1e6:	31 e0       	ldi	r19, 0x01	; 1
     1e8:	86 15       	cp	r24, r6
     1ea:	08 f0       	brcs	.+2      	; 0x1ee <__divdi3+0x104>
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	93 2b       	or	r25, r19
     1f0:	88 2d       	mov	r24, r8
     1f2:	81 95       	neg	r24
     1f4:	89 1b       	sub	r24, r25
     1f6:	29 83       	std	Y+1, r18	; 0x01
     1f8:	ba 83       	std	Y+2, r27	; 0x02
     1fa:	ab 83       	std	Y+3, r26	; 0x03
     1fc:	fc 83       	std	Y+4, r31	; 0x04
     1fe:	ed 83       	std	Y+5, r30	; 0x05
     200:	5e 83       	std	Y+6, r21	; 0x06
     202:	4f 83       	std	Y+7, r20	; 0x07
     204:	88 87       	std	Y+8, r24	; 0x08
     206:	2f ef       	ldi	r18, 0xFF	; 255
     208:	3f ef       	ldi	r19, 0xFF	; 255
     20a:	4f ef       	ldi	r20, 0xFF	; 255
     20c:	5f ef       	ldi	r21, 0xFF	; 255
     20e:	e1 96       	adiw	r28, 0x31	; 49
     210:	2c af       	std	Y+60, r18	; 0x3c
     212:	3d af       	std	Y+61, r19	; 0x3d
     214:	4e af       	std	Y+62, r20	; 0x3e
     216:	5f af       	std	Y+63, r21	; 0x3f
     218:	e1 97       	sbiw	r28, 0x31	; 49
     21a:	8d 85       	ldd	r24, Y+13	; 0x0d
     21c:	9e 85       	ldd	r25, Y+14	; 0x0e
     21e:	af 85       	ldd	r26, Y+15	; 0x0f
     220:	b8 89       	ldd	r27, Y+16	; 0x10
     222:	b7 ff       	sbrs	r27, 7
     224:	6a c0       	rjmp	.+212    	; 0x2fa <__divdi3+0x210>
     226:	e1 96       	adiw	r28, 0x31	; 49
     228:	4c ad       	ldd	r20, Y+60	; 0x3c
     22a:	5d ad       	ldd	r21, Y+61	; 0x3d
     22c:	6e ad       	ldd	r22, Y+62	; 0x3e
     22e:	7f ad       	ldd	r23, Y+63	; 0x3f
     230:	e1 97       	sbiw	r28, 0x31	; 49
     232:	40 95       	com	r20
     234:	50 95       	com	r21
     236:	60 95       	com	r22
     238:	70 95       	com	r23
     23a:	e1 96       	adiw	r28, 0x31	; 49
     23c:	4c af       	std	Y+60, r20	; 0x3c
     23e:	5d af       	std	Y+61, r21	; 0x3d
     240:	6e af       	std	Y+62, r22	; 0x3e
     242:	7f af       	std	Y+63, r23	; 0x3f
     244:	e1 97       	sbiw	r28, 0x31	; 49
     246:	a1 94       	neg	r10
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	1a 14       	cp	r1, r10
     24c:	08 f0       	brcs	.+2      	; 0x250 <__divdi3+0x166>
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	b1 94       	neg	r11
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	1b 14       	cp	r1, r11
     256:	08 f0       	brcs	.+2      	; 0x25a <__divdi3+0x170>
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	6b 2d       	mov	r22, r11
     25c:	68 1b       	sub	r22, r24
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	b6 16       	cp	r11, r22
     262:	08 f0       	brcs	.+2      	; 0x266 <__divdi3+0x17c>
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	98 2b       	or	r25, r24
     268:	c1 94       	neg	r12
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	1c 14       	cp	r1, r12
     26e:	08 f0       	brcs	.+2      	; 0x272 <__divdi3+0x188>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	5c 2d       	mov	r21, r12
     274:	59 1b       	sub	r21, r25
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	c5 16       	cp	r12, r21
     27a:	08 f0       	brcs	.+2      	; 0x27e <__divdi3+0x194>
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	28 2b       	or	r18, r24
     280:	d1 94       	neg	r13
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	1d 14       	cp	r1, r13
     286:	08 f0       	brcs	.+2      	; 0x28a <__divdi3+0x1a0>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	4d 2d       	mov	r20, r13
     28c:	42 1b       	sub	r20, r18
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	d4 16       	cp	r13, r20
     292:	08 f0       	brcs	.+2      	; 0x296 <__divdi3+0x1ac>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	98 2b       	or	r25, r24
     298:	e1 94       	neg	r14
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	1e 14       	cp	r1, r14
     29e:	08 f0       	brcs	.+2      	; 0x2a2 <__divdi3+0x1b8>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	3e 2d       	mov	r19, r14
     2a4:	39 1b       	sub	r19, r25
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	e3 16       	cp	r14, r19
     2aa:	08 f0       	brcs	.+2      	; 0x2ae <__divdi3+0x1c4>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	28 2b       	or	r18, r24
     2b0:	f1 94       	neg	r15
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	1f 14       	cp	r1, r15
     2b6:	08 f0       	brcs	.+2      	; 0x2ba <__divdi3+0x1d0>
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	7f 2d       	mov	r23, r15
     2bc:	72 1b       	sub	r23, r18
     2be:	27 2f       	mov	r18, r23
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	f7 16       	cp	r15, r23
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <__divdi3+0x1de>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	98 2b       	or	r25, r24
     2ca:	01 95       	neg	r16
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	10 16       	cp	r1, r16
     2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__divdi3+0x1ea>
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	80 2f       	mov	r24, r16
     2d6:	89 1b       	sub	r24, r25
     2d8:	98 2f       	mov	r25, r24
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	09 17       	cp	r16, r25
     2de:	08 f0       	brcs	.+2      	; 0x2e2 <__divdi3+0x1f8>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	18 2b       	or	r17, r24
     2e4:	87 2d       	mov	r24, r7
     2e6:	81 95       	neg	r24
     2e8:	81 1b       	sub	r24, r17
     2ea:	a9 86       	std	Y+9, r10	; 0x09
     2ec:	6a 87       	std	Y+10, r22	; 0x0a
     2ee:	5b 87       	std	Y+11, r21	; 0x0b
     2f0:	4c 87       	std	Y+12, r20	; 0x0c
     2f2:	3d 87       	std	Y+13, r19	; 0x0d
     2f4:	2e 87       	std	Y+14, r18	; 0x0e
     2f6:	9f 87       	std	Y+15, r25	; 0x0f
     2f8:	88 8b       	std	Y+16, r24	; 0x10
     2fa:	99 81       	ldd	r25, Y+1	; 0x01
     2fc:	2a 81       	ldd	r18, Y+2	; 0x02
     2fe:	3b 81       	ldd	r19, Y+3	; 0x03
     300:	4c 81       	ldd	r20, Y+4	; 0x04
     302:	5d 81       	ldd	r21, Y+5	; 0x05
     304:	6e 81       	ldd	r22, Y+6	; 0x06
     306:	7f 81       	ldd	r23, Y+7	; 0x07
     308:	a8 85       	ldd	r26, Y+8	; 0x08
     30a:	b9 85       	ldd	r27, Y+9	; 0x09
     30c:	1a 85       	ldd	r17, Y+10	; 0x0a
     30e:	0b 85       	ldd	r16, Y+11	; 0x0b
     310:	fc 84       	ldd	r15, Y+12	; 0x0c
     312:	ed 84       	ldd	r14, Y+13	; 0x0d
     314:	de 84       	ldd	r13, Y+14	; 0x0e
     316:	cf 84       	ldd	r12, Y+15	; 0x0f
     318:	b8 88       	ldd	r11, Y+16	; 0x10
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	e1 e1       	ldi	r30, 0x11	; 17
     31e:	8e 2e       	mov	r8, r30
     320:	91 2c       	mov	r9, r1
     322:	8c 0e       	add	r8, r28
     324:	9d 1e       	adc	r9, r29
     326:	f4 01       	movw	r30, r8
     328:	68 2e       	mov	r6, r24
     32a:	11 92       	st	Z+, r1
     32c:	6a 94       	dec	r6
     32e:	e9 f7       	brne	.-6      	; 0x32a <__divdi3+0x240>
     330:	99 8b       	std	Y+17, r25	; 0x11
     332:	2a 8b       	std	Y+18, r18	; 0x12
     334:	3b 8b       	std	Y+19, r19	; 0x13
     336:	4c 8b       	std	Y+20, r20	; 0x14
     338:	5d 8b       	std	Y+21, r21	; 0x15
     33a:	6e 8b       	std	Y+22, r22	; 0x16
     33c:	7f 8b       	std	Y+23, r23	; 0x17
     33e:	a8 8f       	std	Y+24, r26	; 0x18
     340:	9e 01       	movw	r18, r28
     342:	27 5e       	subi	r18, 0xE7	; 231
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	f9 01       	movw	r30, r18
     348:	11 92       	st	Z+, r1
     34a:	8a 95       	dec	r24
     34c:	e9 f7       	brne	.-6      	; 0x348 <__divdi3+0x25e>
     34e:	b9 8f       	std	Y+25, r27	; 0x19
     350:	1a 8f       	std	Y+26, r17	; 0x1a
     352:	0b 8f       	std	Y+27, r16	; 0x1b
     354:	fc 8e       	std	Y+28, r15	; 0x1c
     356:	ed 8e       	std	Y+29, r14	; 0x1d
     358:	de 8e       	std	Y+30, r13	; 0x1e
     35a:	cf 8e       	std	Y+31, r12	; 0x1f
     35c:	b8 a2       	std	Y+32, r11	; 0x20
     35e:	29 8c       	ldd	r2, Y+25	; 0x19
     360:	3a 8c       	ldd	r3, Y+26	; 0x1a
     362:	4b 8c       	ldd	r4, Y+27	; 0x1b
     364:	5c 8c       	ldd	r5, Y+28	; 0x1c
     366:	ed 8c       	ldd	r14, Y+29	; 0x1d
     368:	fe 8c       	ldd	r15, Y+30	; 0x1e
     36a:	0f 8d       	ldd	r16, Y+31	; 0x1f
     36c:	18 a1       	ldd	r17, Y+32	; 0x20
     36e:	69 88       	ldd	r6, Y+17	; 0x11
     370:	7a 88       	ldd	r7, Y+18	; 0x12
     372:	8b 88       	ldd	r8, Y+19	; 0x13
     374:	9c 88       	ldd	r9, Y+20	; 0x14
     376:	21 96       	adiw	r28, 0x01	; 1
     378:	6c ae       	std	Y+60, r6	; 0x3c
     37a:	7d ae       	std	Y+61, r7	; 0x3d
     37c:	8e ae       	std	Y+62, r8	; 0x3e
     37e:	9f ae       	std	Y+63, r9	; 0x3f
     380:	21 97       	sbiw	r28, 0x01	; 1
     382:	6d 88       	ldd	r6, Y+21	; 0x15
     384:	7e 88       	ldd	r7, Y+22	; 0x16
     386:	8f 88       	ldd	r8, Y+23	; 0x17
     388:	98 8c       	ldd	r9, Y+24	; 0x18
     38a:	e1 14       	cp	r14, r1
     38c:	f1 04       	cpc	r15, r1
     38e:	01 05       	cpc	r16, r1
     390:	11 05       	cpc	r17, r1
     392:	09 f0       	breq	.+2      	; 0x396 <__divdi3+0x2ac>
     394:	d9 c3       	rjmp	.+1970   	; 0xb48 <__stack+0x2e9>
     396:	62 14       	cp	r6, r2
     398:	73 04       	cpc	r7, r3
     39a:	84 04       	cpc	r8, r4
     39c:	95 04       	cpc	r9, r5
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <__divdi3+0x2b8>
     3a0:	57 c1       	rjmp	.+686    	; 0x650 <__divdi3+0x566>
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	20 16       	cp	r2, r16
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	30 06       	cpc	r3, r16
     3aa:	01 e0       	ldi	r16, 0x01	; 1
     3ac:	40 06       	cpc	r4, r16
     3ae:	00 e0       	ldi	r16, 0x00	; 0
     3b0:	50 06       	cpc	r5, r16
     3b2:	88 f4       	brcc	.+34     	; 0x3d6 <__divdi3+0x2ec>
     3b4:	1f ef       	ldi	r17, 0xFF	; 255
     3b6:	21 16       	cp	r2, r17
     3b8:	31 04       	cpc	r3, r1
     3ba:	41 04       	cpc	r4, r1
     3bc:	51 04       	cpc	r5, r1
     3be:	39 f0       	breq	.+14     	; 0x3ce <__divdi3+0x2e4>
     3c0:	30 f0       	brcs	.+12     	; 0x3ce <__divdi3+0x2e4>
     3c2:	48 e0       	ldi	r20, 0x08	; 8
     3c4:	e4 2e       	mov	r14, r20
     3c6:	f1 2c       	mov	r15, r1
     3c8:	01 2d       	mov	r16, r1
     3ca:	11 2d       	mov	r17, r1
     3cc:	18 c0       	rjmp	.+48     	; 0x3fe <__divdi3+0x314>
     3ce:	ee 24       	eor	r14, r14
     3d0:	ff 24       	eor	r15, r15
     3d2:	87 01       	movw	r16, r14
     3d4:	14 c0       	rjmp	.+40     	; 0x3fe <__divdi3+0x314>
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	22 16       	cp	r2, r18
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	32 06       	cpc	r3, r18
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	42 06       	cpc	r4, r18
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	52 06       	cpc	r5, r18
     3e6:	30 f0       	brcs	.+12     	; 0x3f4 <__divdi3+0x30a>
     3e8:	38 e1       	ldi	r19, 0x18	; 24
     3ea:	e3 2e       	mov	r14, r19
     3ec:	f1 2c       	mov	r15, r1
     3ee:	01 2d       	mov	r16, r1
     3f0:	11 2d       	mov	r17, r1
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__divdi3+0x314>
     3f4:	20 e1       	ldi	r18, 0x10	; 16
     3f6:	e2 2e       	mov	r14, r18
     3f8:	f1 2c       	mov	r15, r1
     3fa:	01 2d       	mov	r16, r1
     3fc:	11 2d       	mov	r17, r1
     3fe:	d2 01       	movw	r26, r4
     400:	c1 01       	movw	r24, r2
     402:	0e 2c       	mov	r0, r14
     404:	04 c0       	rjmp	.+8      	; 0x40e <__divdi3+0x324>
     406:	b6 95       	lsr	r27
     408:	a7 95       	ror	r26
     40a:	97 95       	ror	r25
     40c:	87 95       	ror	r24
     40e:	0a 94       	dec	r0
     410:	d2 f7       	brpl	.-12     	; 0x406 <__divdi3+0x31c>
     412:	8c 55       	subi	r24, 0x5C	; 92
     414:	9f 4f       	sbci	r25, 0xFF	; 255
     416:	dc 01       	movw	r26, r24
     418:	2c 91       	ld	r18, X
     41a:	80 e2       	ldi	r24, 0x20	; 32
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	8e 19       	sub	r24, r14
     424:	9f 09       	sbc	r25, r15
     426:	a0 0b       	sbc	r26, r16
     428:	b1 0b       	sbc	r27, r17
     42a:	7c 01       	movw	r14, r24
     42c:	8d 01       	movw	r16, r26
     42e:	e2 1a       	sub	r14, r18
     430:	f1 08       	sbc	r15, r1
     432:	01 09       	sbc	r16, r1
     434:	11 09       	sbc	r17, r1
     436:	e1 14       	cp	r14, r1
     438:	f1 04       	cpc	r15, r1
     43a:	01 05       	cpc	r16, r1
     43c:	11 05       	cpc	r17, r1
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <__divdi3+0x3ca>
     440:	0e 2c       	mov	r0, r14
     442:	04 c0       	rjmp	.+8      	; 0x44c <__divdi3+0x362>
     444:	22 0c       	add	r2, r2
     446:	33 1c       	adc	r3, r3
     448:	44 1c       	adc	r4, r4
     44a:	55 1c       	adc	r5, r5
     44c:	0a 94       	dec	r0
     44e:	d2 f7       	brpl	.-12     	; 0x444 <__divdi3+0x35a>
     450:	a4 01       	movw	r20, r8
     452:	93 01       	movw	r18, r6
     454:	0e 2c       	mov	r0, r14
     456:	04 c0       	rjmp	.+8      	; 0x460 <__divdi3+0x376>
     458:	22 0f       	add	r18, r18
     45a:	33 1f       	adc	r19, r19
     45c:	44 1f       	adc	r20, r20
     45e:	55 1f       	adc	r21, r21
     460:	0a 94       	dec	r0
     462:	d2 f7       	brpl	.-12     	; 0x458 <__divdi3+0x36e>
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	8e 19       	sub	r24, r14
     46a:	9f 09       	sbc	r25, r15
     46c:	21 96       	adiw	r28, 0x01	; 1
     46e:	6c ac       	ldd	r6, Y+60	; 0x3c
     470:	7d ac       	ldd	r7, Y+61	; 0x3d
     472:	8e ac       	ldd	r8, Y+62	; 0x3e
     474:	9f ac       	ldd	r9, Y+63	; 0x3f
     476:	21 97       	sbiw	r28, 0x01	; 1
     478:	04 c0       	rjmp	.+8      	; 0x482 <__divdi3+0x398>
     47a:	96 94       	lsr	r9
     47c:	87 94       	ror	r8
     47e:	77 94       	ror	r7
     480:	67 94       	ror	r6
     482:	8a 95       	dec	r24
     484:	d2 f7       	brpl	.-12     	; 0x47a <__divdi3+0x390>
     486:	62 2a       	or	r6, r18
     488:	73 2a       	or	r7, r19
     48a:	84 2a       	or	r8, r20
     48c:	95 2a       	or	r9, r21
     48e:	21 96       	adiw	r28, 0x01	; 1
     490:	ac ac       	ldd	r10, Y+60	; 0x3c
     492:	bd ac       	ldd	r11, Y+61	; 0x3d
     494:	ce ac       	ldd	r12, Y+62	; 0x3e
     496:	df ac       	ldd	r13, Y+63	; 0x3f
     498:	21 97       	sbiw	r28, 0x01	; 1
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__divdi3+0x3ba>
     49c:	aa 0c       	add	r10, r10
     49e:	bb 1c       	adc	r11, r11
     4a0:	cc 1c       	adc	r12, r12
     4a2:	dd 1c       	adc	r13, r13
     4a4:	ea 94       	dec	r14
     4a6:	d2 f7       	brpl	.-12     	; 0x49c <__divdi3+0x3b2>
     4a8:	21 96       	adiw	r28, 0x01	; 1
     4aa:	ac ae       	std	Y+60, r10	; 0x3c
     4ac:	bd ae       	std	Y+61, r11	; 0x3d
     4ae:	ce ae       	std	Y+62, r12	; 0x3e
     4b0:	df ae       	std	Y+63, r13	; 0x3f
     4b2:	21 97       	sbiw	r28, 0x01	; 1
     4b4:	62 01       	movw	r12, r4
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
     4ba:	29 96       	adiw	r28, 0x09	; 9
     4bc:	cc ae       	std	Y+60, r12	; 0x3c
     4be:	dd ae       	std	Y+61, r13	; 0x3d
     4c0:	ee ae       	std	Y+62, r14	; 0x3e
     4c2:	ff ae       	std	Y+63, r15	; 0x3f
     4c4:	29 97       	sbiw	r28, 0x09	; 9
     4c6:	92 01       	movw	r18, r4
     4c8:	81 01       	movw	r16, r2
     4ca:	20 70       	andi	r18, 0x00	; 0
     4cc:	30 70       	andi	r19, 0x00	; 0
     4ce:	2d 96       	adiw	r28, 0x0d	; 13
     4d0:	0c af       	std	Y+60, r16	; 0x3c
     4d2:	1d af       	std	Y+61, r17	; 0x3d
     4d4:	2e af       	std	Y+62, r18	; 0x3e
     4d6:	3f af       	std	Y+63, r19	; 0x3f
     4d8:	2d 97       	sbiw	r28, 0x0d	; 13
     4da:	c4 01       	movw	r24, r8
     4dc:	b3 01       	movw	r22, r6
     4de:	a7 01       	movw	r20, r14
     4e0:	96 01       	movw	r18, r12
     4e2:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     4e6:	7b 01       	movw	r14, r22
     4e8:	8c 01       	movw	r16, r24
     4ea:	c4 01       	movw	r24, r8
     4ec:	b3 01       	movw	r22, r6
     4ee:	29 96       	adiw	r28, 0x09	; 9
     4f0:	2c ad       	ldd	r18, Y+60	; 0x3c
     4f2:	3d ad       	ldd	r19, Y+61	; 0x3d
     4f4:	4e ad       	ldd	r20, Y+62	; 0x3e
     4f6:	5f ad       	ldd	r21, Y+63	; 0x3f
     4f8:	29 97       	sbiw	r28, 0x09	; 9
     4fa:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     4fe:	c9 01       	movw	r24, r18
     500:	da 01       	movw	r26, r20
     502:	3c 01       	movw	r6, r24
     504:	4d 01       	movw	r8, r26
     506:	c4 01       	movw	r24, r8
     508:	b3 01       	movw	r22, r6
     50a:	2d 96       	adiw	r28, 0x0d	; 13
     50c:	2c ad       	ldd	r18, Y+60	; 0x3c
     50e:	3d ad       	ldd	r19, Y+61	; 0x3d
     510:	4e ad       	ldd	r20, Y+62	; 0x3e
     512:	5f ad       	ldd	r21, Y+63	; 0x3f
     514:	2d 97       	sbiw	r28, 0x0d	; 13
     516:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
     51a:	9b 01       	movw	r18, r22
     51c:	ac 01       	movw	r20, r24
     51e:	87 01       	movw	r16, r14
     520:	ff 24       	eor	r15, r15
     522:	ee 24       	eor	r14, r14
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	ac ac       	ldd	r10, Y+60	; 0x3c
     528:	bd ac       	ldd	r11, Y+61	; 0x3d
     52a:	ce ac       	ldd	r12, Y+62	; 0x3e
     52c:	df ac       	ldd	r13, Y+63	; 0x3f
     52e:	21 97       	sbiw	r28, 0x01	; 1
     530:	c6 01       	movw	r24, r12
     532:	aa 27       	eor	r26, r26
     534:	bb 27       	eor	r27, r27
     536:	57 01       	movw	r10, r14
     538:	68 01       	movw	r12, r16
     53a:	a8 2a       	or	r10, r24
     53c:	b9 2a       	or	r11, r25
     53e:	ca 2a       	or	r12, r26
     540:	db 2a       	or	r13, r27
     542:	a2 16       	cp	r10, r18
     544:	b3 06       	cpc	r11, r19
     546:	c4 06       	cpc	r12, r20
     548:	d5 06       	cpc	r13, r21
     54a:	e0 f4       	brcc	.+56     	; 0x584 <__divdi3+0x49a>
     54c:	08 94       	sec
     54e:	61 08       	sbc	r6, r1
     550:	71 08       	sbc	r7, r1
     552:	81 08       	sbc	r8, r1
     554:	91 08       	sbc	r9, r1
     556:	a2 0c       	add	r10, r2
     558:	b3 1c       	adc	r11, r3
     55a:	c4 1c       	adc	r12, r4
     55c:	d5 1c       	adc	r13, r5
     55e:	a2 14       	cp	r10, r2
     560:	b3 04       	cpc	r11, r3
     562:	c4 04       	cpc	r12, r4
     564:	d5 04       	cpc	r13, r5
     566:	70 f0       	brcs	.+28     	; 0x584 <__divdi3+0x49a>
     568:	a2 16       	cp	r10, r18
     56a:	b3 06       	cpc	r11, r19
     56c:	c4 06       	cpc	r12, r20
     56e:	d5 06       	cpc	r13, r21
     570:	48 f4       	brcc	.+18     	; 0x584 <__divdi3+0x49a>
     572:	08 94       	sec
     574:	61 08       	sbc	r6, r1
     576:	71 08       	sbc	r7, r1
     578:	81 08       	sbc	r8, r1
     57a:	91 08       	sbc	r9, r1
     57c:	a2 0c       	add	r10, r2
     57e:	b3 1c       	adc	r11, r3
     580:	c4 1c       	adc	r12, r4
     582:	d5 1c       	adc	r13, r5
     584:	a2 1a       	sub	r10, r18
     586:	b3 0a       	sbc	r11, r19
     588:	c4 0a       	sbc	r12, r20
     58a:	d5 0a       	sbc	r13, r21
     58c:	c6 01       	movw	r24, r12
     58e:	b5 01       	movw	r22, r10
     590:	29 96       	adiw	r28, 0x09	; 9
     592:	2c ad       	ldd	r18, Y+60	; 0x3c
     594:	3d ad       	ldd	r19, Y+61	; 0x3d
     596:	4e ad       	ldd	r20, Y+62	; 0x3e
     598:	5f ad       	ldd	r21, Y+63	; 0x3f
     59a:	29 97       	sbiw	r28, 0x09	; 9
     59c:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     5a0:	7b 01       	movw	r14, r22
     5a2:	8c 01       	movw	r16, r24
     5a4:	c6 01       	movw	r24, r12
     5a6:	b5 01       	movw	r22, r10
     5a8:	29 96       	adiw	r28, 0x09	; 9
     5aa:	2c ad       	ldd	r18, Y+60	; 0x3c
     5ac:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ae:	4e ad       	ldd	r20, Y+62	; 0x3e
     5b0:	5f ad       	ldd	r21, Y+63	; 0x3f
     5b2:	29 97       	sbiw	r28, 0x09	; 9
     5b4:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     5b8:	c9 01       	movw	r24, r18
     5ba:	da 01       	movw	r26, r20
     5bc:	5c 01       	movw	r10, r24
     5be:	6d 01       	movw	r12, r26
     5c0:	c6 01       	movw	r24, r12
     5c2:	b5 01       	movw	r22, r10
     5c4:	2d 96       	adiw	r28, 0x0d	; 13
     5c6:	2c ad       	ldd	r18, Y+60	; 0x3c
     5c8:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ca:	4e ad       	ldd	r20, Y+62	; 0x3e
     5cc:	5f ad       	ldd	r21, Y+63	; 0x3f
     5ce:	2d 97       	sbiw	r28, 0x0d	; 13
     5d0:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
     5d4:	9b 01       	movw	r18, r22
     5d6:	ac 01       	movw	r20, r24
     5d8:	87 01       	movw	r16, r14
     5da:	ff 24       	eor	r15, r15
     5dc:	ee 24       	eor	r14, r14
     5de:	21 96       	adiw	r28, 0x01	; 1
     5e0:	8c ad       	ldd	r24, Y+60	; 0x3c
     5e2:	9d ad       	ldd	r25, Y+61	; 0x3d
     5e4:	ae ad       	ldd	r26, Y+62	; 0x3e
     5e6:	bf ad       	ldd	r27, Y+63	; 0x3f
     5e8:	21 97       	sbiw	r28, 0x01	; 1
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	e8 2a       	or	r14, r24
     5f0:	f9 2a       	or	r15, r25
     5f2:	0a 2b       	or	r16, r26
     5f4:	1b 2b       	or	r17, r27
     5f6:	e2 16       	cp	r14, r18
     5f8:	f3 06       	cpc	r15, r19
     5fa:	04 07       	cpc	r16, r20
     5fc:	15 07       	cpc	r17, r21
     5fe:	c0 f4       	brcc	.+48     	; 0x630 <__divdi3+0x546>
     600:	08 94       	sec
     602:	a1 08       	sbc	r10, r1
     604:	b1 08       	sbc	r11, r1
     606:	c1 08       	sbc	r12, r1
     608:	d1 08       	sbc	r13, r1
     60a:	e2 0c       	add	r14, r2
     60c:	f3 1c       	adc	r15, r3
     60e:	04 1d       	adc	r16, r4
     610:	15 1d       	adc	r17, r5
     612:	e2 14       	cp	r14, r2
     614:	f3 04       	cpc	r15, r3
     616:	04 05       	cpc	r16, r4
     618:	15 05       	cpc	r17, r5
     61a:	50 f0       	brcs	.+20     	; 0x630 <__divdi3+0x546>
     61c:	e2 16       	cp	r14, r18
     61e:	f3 06       	cpc	r15, r19
     620:	04 07       	cpc	r16, r20
     622:	15 07       	cpc	r17, r21
     624:	28 f4       	brcc	.+10     	; 0x630 <__divdi3+0x546>
     626:	08 94       	sec
     628:	a1 08       	sbc	r10, r1
     62a:	b1 08       	sbc	r11, r1
     62c:	c1 08       	sbc	r12, r1
     62e:	d1 08       	sbc	r13, r1
     630:	d3 01       	movw	r26, r6
     632:	99 27       	eor	r25, r25
     634:	88 27       	eor	r24, r24
     636:	86 01       	movw	r16, r12
     638:	75 01       	movw	r14, r10
     63a:	e8 2a       	or	r14, r24
     63c:	f9 2a       	or	r15, r25
     63e:	0a 2b       	or	r16, r26
     640:	1b 2b       	or	r17, r27
     642:	25 96       	adiw	r28, 0x05	; 5
     644:	ec ae       	std	Y+60, r14	; 0x3c
     646:	fd ae       	std	Y+61, r15	; 0x3d
     648:	0e af       	std	Y+62, r16	; 0x3e
     64a:	1f af       	std	Y+63, r17	; 0x3f
     64c:	25 97       	sbiw	r28, 0x05	; 5
     64e:	eb c4       	rjmp	.+2518   	; 0x1026 <__stack+0x7c7>
     650:	21 14       	cp	r2, r1
     652:	31 04       	cpc	r3, r1
     654:	41 04       	cpc	r4, r1
     656:	51 04       	cpc	r5, r1
     658:	71 f4       	brne	.+28     	; 0x676 <__divdi3+0x58c>
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	1c 01       	movw	r2, r24
     674:	2d 01       	movw	r4, r26
     676:	00 e0       	ldi	r16, 0x00	; 0
     678:	20 16       	cp	r2, r16
     67a:	00 e0       	ldi	r16, 0x00	; 0
     67c:	30 06       	cpc	r3, r16
     67e:	01 e0       	ldi	r16, 0x01	; 1
     680:	40 06       	cpc	r4, r16
     682:	00 e0       	ldi	r16, 0x00	; 0
     684:	50 06       	cpc	r5, r16
     686:	88 f4       	brcc	.+34     	; 0x6aa <__divdi3+0x5c0>
     688:	1f ef       	ldi	r17, 0xFF	; 255
     68a:	21 16       	cp	r2, r17
     68c:	31 04       	cpc	r3, r1
     68e:	41 04       	cpc	r4, r1
     690:	51 04       	cpc	r5, r1
     692:	31 f0       	breq	.+12     	; 0x6a0 <__divdi3+0x5b6>
     694:	28 f0       	brcs	.+10     	; 0x6a0 <__divdi3+0x5b6>
     696:	48 e0       	ldi	r20, 0x08	; 8
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	17 c0       	rjmp	.+46     	; 0x6ce <__divdi3+0x5e4>
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	12 c0       	rjmp	.+36     	; 0x6ce <__divdi3+0x5e4>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	22 16       	cp	r2, r18
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	32 06       	cpc	r3, r18
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	42 06       	cpc	r4, r18
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	52 06       	cpc	r5, r18
     6ba:	28 f0       	brcs	.+10     	; 0x6c6 <__divdi3+0x5dc>
     6bc:	48 e1       	ldi	r20, 0x18	; 24
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__divdi3+0x5e4>
     6c6:	40 e1       	ldi	r20, 0x10	; 16
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	d2 01       	movw	r26, r4
     6d0:	c1 01       	movw	r24, r2
     6d2:	04 2e       	mov	r0, r20
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <__divdi3+0x5f4>
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	0a 94       	dec	r0
     6e0:	d2 f7       	brpl	.-12     	; 0x6d6 <__divdi3+0x5ec>
     6e2:	8c 55       	subi	r24, 0x5C	; 92
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	dc 01       	movw	r26, r24
     6e8:	2c 91       	ld	r18, X
     6ea:	e0 e2       	ldi	r30, 0x20	; 32
     6ec:	ee 2e       	mov	r14, r30
     6ee:	f1 2c       	mov	r15, r1
     6f0:	01 2d       	mov	r16, r1
     6f2:	11 2d       	mov	r17, r1
     6f4:	d8 01       	movw	r26, r16
     6f6:	c7 01       	movw	r24, r14
     6f8:	84 1b       	sub	r24, r20
     6fa:	95 0b       	sbc	r25, r21
     6fc:	a6 0b       	sbc	r26, r22
     6fe:	b7 0b       	sbc	r27, r23
     700:	82 1b       	sub	r24, r18
     702:	91 09       	sbc	r25, r1
     704:	a1 09       	sbc	r26, r1
     706:	b1 09       	sbc	r27, r1
     708:	00 97       	sbiw	r24, 0x00	; 0
     70a:	a1 05       	cpc	r26, r1
     70c:	b1 05       	cpc	r27, r1
     70e:	61 f4       	brne	.+24     	; 0x728 <__divdi3+0x63e>
     710:	64 01       	movw	r12, r8
     712:	53 01       	movw	r10, r6
     714:	a2 18       	sub	r10, r2
     716:	b3 08       	sbc	r11, r3
     718:	c4 08       	sbc	r12, r4
     71a:	d5 08       	sbc	r13, r5
     71c:	31 e0       	ldi	r19, 0x01	; 1
     71e:	63 2e       	mov	r6, r19
     720:	71 2c       	mov	r7, r1
     722:	81 2c       	mov	r8, r1
     724:	91 2c       	mov	r9, r1
     726:	24 c1       	rjmp	.+584    	; 0x970 <__stack+0x111>
     728:	e3 96       	adiw	r28, 0x33	; 51
     72a:	8f af       	std	Y+63, r24	; 0x3f
     72c:	e3 97       	sbiw	r28, 0x33	; 51
     72e:	08 2e       	mov	r0, r24
     730:	04 c0       	rjmp	.+8      	; 0x73a <__divdi3+0x650>
     732:	22 0c       	add	r2, r2
     734:	33 1c       	adc	r3, r3
     736:	44 1c       	adc	r4, r4
     738:	55 1c       	adc	r5, r5
     73a:	0a 94       	dec	r0
     73c:	d2 f7       	brpl	.-12     	; 0x732 <__divdi3+0x648>
     73e:	ee 2d       	mov	r30, r14
     740:	e8 1b       	sub	r30, r24
     742:	64 01       	movw	r12, r8
     744:	53 01       	movw	r10, r6
     746:	0e 2e       	mov	r0, r30
     748:	04 c0       	rjmp	.+8      	; 0x752 <__divdi3+0x668>
     74a:	d6 94       	lsr	r13
     74c:	c7 94       	ror	r12
     74e:	b7 94       	ror	r11
     750:	a7 94       	ror	r10
     752:	0a 94       	dec	r0
     754:	d2 f7       	brpl	.-12     	; 0x74a <__divdi3+0x660>
     756:	a4 01       	movw	r20, r8
     758:	93 01       	movw	r18, r6
     75a:	e3 96       	adiw	r28, 0x33	; 51
     75c:	0f ac       	ldd	r0, Y+63	; 0x3f
     75e:	e3 97       	sbiw	r28, 0x33	; 51
     760:	04 c0       	rjmp	.+8      	; 0x76a <__divdi3+0x680>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	44 1f       	adc	r20, r20
     768:	55 1f       	adc	r21, r21
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__divdi3+0x678>
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	6c ac       	ldd	r6, Y+60	; 0x3c
     772:	7d ac       	ldd	r7, Y+61	; 0x3d
     774:	8e ac       	ldd	r8, Y+62	; 0x3e
     776:	9f ac       	ldd	r9, Y+63	; 0x3f
     778:	21 97       	sbiw	r28, 0x01	; 1
     77a:	0e 2e       	mov	r0, r30
     77c:	04 c0       	rjmp	.+8      	; 0x786 <__divdi3+0x69c>
     77e:	96 94       	lsr	r9
     780:	87 94       	ror	r8
     782:	77 94       	ror	r7
     784:	67 94       	ror	r6
     786:	0a 94       	dec	r0
     788:	d2 f7       	brpl	.-12     	; 0x77e <__divdi3+0x694>
     78a:	84 01       	movw	r16, r8
     78c:	73 01       	movw	r14, r6
     78e:	e2 2a       	or	r14, r18
     790:	f3 2a       	or	r15, r19
     792:	04 2b       	or	r16, r20
     794:	15 2b       	or	r17, r21
     796:	e9 ae       	std	Y+57, r14	; 0x39
     798:	fa ae       	std	Y+58, r15	; 0x3a
     79a:	0b af       	std	Y+59, r16	; 0x3b
     79c:	1c af       	std	Y+60, r17	; 0x3c
     79e:	32 01       	movw	r6, r4
     7a0:	88 24       	eor	r8, r8
     7a2:	99 24       	eor	r9, r9
     7a4:	92 01       	movw	r18, r4
     7a6:	81 01       	movw	r16, r2
     7a8:	20 70       	andi	r18, 0x00	; 0
     7aa:	30 70       	andi	r19, 0x00	; 0
     7ac:	61 96       	adiw	r28, 0x11	; 17
     7ae:	0c af       	std	Y+60, r16	; 0x3c
     7b0:	1d af       	std	Y+61, r17	; 0x3d
     7b2:	2e af       	std	Y+62, r18	; 0x3e
     7b4:	3f af       	std	Y+63, r19	; 0x3f
     7b6:	61 97       	sbiw	r28, 0x11	; 17
     7b8:	c6 01       	movw	r24, r12
     7ba:	b5 01       	movw	r22, r10
     7bc:	a4 01       	movw	r20, r8
     7be:	93 01       	movw	r18, r6
     7c0:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     7c4:	7b 01       	movw	r14, r22
     7c6:	8c 01       	movw	r16, r24
     7c8:	c6 01       	movw	r24, r12
     7ca:	b5 01       	movw	r22, r10
     7cc:	a4 01       	movw	r20, r8
     7ce:	93 01       	movw	r18, r6
     7d0:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     7d4:	c9 01       	movw	r24, r18
     7d6:	da 01       	movw	r26, r20
     7d8:	65 96       	adiw	r28, 0x15	; 21
     7da:	8c af       	std	Y+60, r24	; 0x3c
     7dc:	9d af       	std	Y+61, r25	; 0x3d
     7de:	ae af       	std	Y+62, r26	; 0x3e
     7e0:	bf af       	std	Y+63, r27	; 0x3f
     7e2:	65 97       	sbiw	r28, 0x15	; 21
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	61 96       	adiw	r28, 0x11	; 17
     7ea:	2c ad       	ldd	r18, Y+60	; 0x3c
     7ec:	3d ad       	ldd	r19, Y+61	; 0x3d
     7ee:	4e ad       	ldd	r20, Y+62	; 0x3e
     7f0:	5f ad       	ldd	r21, Y+63	; 0x3f
     7f2:	61 97       	sbiw	r28, 0x11	; 17
     7f4:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	87 01       	movw	r16, r14
     7fe:	ff 24       	eor	r15, r15
     800:	ee 24       	eor	r14, r14
     802:	a9 ac       	ldd	r10, Y+57	; 0x39
     804:	ba ac       	ldd	r11, Y+58	; 0x3a
     806:	cb ac       	ldd	r12, Y+59	; 0x3b
     808:	dc ac       	ldd	r13, Y+60	; 0x3c
     80a:	c6 01       	movw	r24, r12
     80c:	aa 27       	eor	r26, r26
     80e:	bb 27       	eor	r27, r27
     810:	5c 01       	movw	r10, r24
     812:	6d 01       	movw	r12, r26
     814:	ae 28       	or	r10, r14
     816:	bf 28       	or	r11, r15
     818:	c0 2a       	or	r12, r16
     81a:	d1 2a       	or	r13, r17
     81c:	a2 16       	cp	r10, r18
     81e:	b3 06       	cpc	r11, r19
     820:	c4 06       	cpc	r12, r20
     822:	d5 06       	cpc	r13, r21
     824:	60 f5       	brcc	.+88     	; 0x87e <__stack+0x1f>
     826:	65 96       	adiw	r28, 0x15	; 21
     828:	6c ad       	ldd	r22, Y+60	; 0x3c
     82a:	7d ad       	ldd	r23, Y+61	; 0x3d
     82c:	8e ad       	ldd	r24, Y+62	; 0x3e
     82e:	9f ad       	ldd	r25, Y+63	; 0x3f
     830:	65 97       	sbiw	r28, 0x15	; 21
     832:	61 50       	subi	r22, 0x01	; 1
     834:	70 40       	sbci	r23, 0x00	; 0
     836:	80 40       	sbci	r24, 0x00	; 0
     838:	90 40       	sbci	r25, 0x00	; 0
     83a:	65 96       	adiw	r28, 0x15	; 21
     83c:	6c af       	std	Y+60, r22	; 0x3c
     83e:	7d af       	std	Y+61, r23	; 0x3d
     840:	8e af       	std	Y+62, r24	; 0x3e
     842:	9f af       	std	Y+63, r25	; 0x3f
     844:	65 97       	sbiw	r28, 0x15	; 21
     846:	a2 0c       	add	r10, r2
     848:	b3 1c       	adc	r11, r3
     84a:	c4 1c       	adc	r12, r4
     84c:	d5 1c       	adc	r13, r5
     84e:	a2 14       	cp	r10, r2
     850:	b3 04       	cpc	r11, r3
     852:	c4 04       	cpc	r12, r4
     854:	d5 04       	cpc	r13, r5
     856:	98 f0       	brcs	.+38     	; 0x87e <__stack+0x1f>
     858:	a2 16       	cp	r10, r18
     85a:	b3 06       	cpc	r11, r19
     85c:	c4 06       	cpc	r12, r20
     85e:	d5 06       	cpc	r13, r21
     860:	70 f4       	brcc	.+28     	; 0x87e <__stack+0x1f>
     862:	61 50       	subi	r22, 0x01	; 1
     864:	70 40       	sbci	r23, 0x00	; 0
     866:	80 40       	sbci	r24, 0x00	; 0
     868:	90 40       	sbci	r25, 0x00	; 0
     86a:	65 96       	adiw	r28, 0x15	; 21
     86c:	6c af       	std	Y+60, r22	; 0x3c
     86e:	7d af       	std	Y+61, r23	; 0x3d
     870:	8e af       	std	Y+62, r24	; 0x3e
     872:	9f af       	std	Y+63, r25	; 0x3f
     874:	65 97       	sbiw	r28, 0x15	; 21
     876:	a2 0c       	add	r10, r2
     878:	b3 1c       	adc	r11, r3
     87a:	c4 1c       	adc	r12, r4
     87c:	d5 1c       	adc	r13, r5
     87e:	a2 1a       	sub	r10, r18
     880:	b3 0a       	sbc	r11, r19
     882:	c4 0a       	sbc	r12, r20
     884:	d5 0a       	sbc	r13, r21
     886:	c6 01       	movw	r24, r12
     888:	b5 01       	movw	r22, r10
     88a:	a4 01       	movw	r20, r8
     88c:	93 01       	movw	r18, r6
     88e:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     892:	7b 01       	movw	r14, r22
     894:	8c 01       	movw	r16, r24
     896:	c6 01       	movw	r24, r12
     898:	b5 01       	movw	r22, r10
     89a:	a4 01       	movw	r20, r8
     89c:	93 01       	movw	r18, r6
     89e:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     8a2:	c9 01       	movw	r24, r18
     8a4:	da 01       	movw	r26, r20
     8a6:	3c 01       	movw	r6, r24
     8a8:	4d 01       	movw	r8, r26
     8aa:	c4 01       	movw	r24, r8
     8ac:	b3 01       	movw	r22, r6
     8ae:	61 96       	adiw	r28, 0x11	; 17
     8b0:	2c ad       	ldd	r18, Y+60	; 0x3c
     8b2:	3d ad       	ldd	r19, Y+61	; 0x3d
     8b4:	4e ad       	ldd	r20, Y+62	; 0x3e
     8b6:	5f ad       	ldd	r21, Y+63	; 0x3f
     8b8:	61 97       	sbiw	r28, 0x11	; 17
     8ba:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
     8be:	9b 01       	movw	r18, r22
     8c0:	ac 01       	movw	r20, r24
     8c2:	87 01       	movw	r16, r14
     8c4:	ff 24       	eor	r15, r15
     8c6:	ee 24       	eor	r14, r14
     8c8:	89 ad       	ldd	r24, Y+57	; 0x39
     8ca:	9a ad       	ldd	r25, Y+58	; 0x3a
     8cc:	ab ad       	ldd	r26, Y+59	; 0x3b
     8ce:	bc ad       	ldd	r27, Y+60	; 0x3c
     8d0:	a0 70       	andi	r26, 0x00	; 0
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	57 01       	movw	r10, r14
     8d6:	68 01       	movw	r12, r16
     8d8:	a8 2a       	or	r10, r24
     8da:	b9 2a       	or	r11, r25
     8dc:	ca 2a       	or	r12, r26
     8de:	db 2a       	or	r13, r27
     8e0:	a2 16       	cp	r10, r18
     8e2:	b3 06       	cpc	r11, r19
     8e4:	c4 06       	cpc	r12, r20
     8e6:	d5 06       	cpc	r13, r21
     8e8:	e0 f4       	brcc	.+56     	; 0x922 <__stack+0xc3>
     8ea:	08 94       	sec
     8ec:	61 08       	sbc	r6, r1
     8ee:	71 08       	sbc	r7, r1
     8f0:	81 08       	sbc	r8, r1
     8f2:	91 08       	sbc	r9, r1
     8f4:	a2 0c       	add	r10, r2
     8f6:	b3 1c       	adc	r11, r3
     8f8:	c4 1c       	adc	r12, r4
     8fa:	d5 1c       	adc	r13, r5
     8fc:	a2 14       	cp	r10, r2
     8fe:	b3 04       	cpc	r11, r3
     900:	c4 04       	cpc	r12, r4
     902:	d5 04       	cpc	r13, r5
     904:	70 f0       	brcs	.+28     	; 0x922 <__stack+0xc3>
     906:	a2 16       	cp	r10, r18
     908:	b3 06       	cpc	r11, r19
     90a:	c4 06       	cpc	r12, r20
     90c:	d5 06       	cpc	r13, r21
     90e:	48 f4       	brcc	.+18     	; 0x922 <__stack+0xc3>
     910:	08 94       	sec
     912:	61 08       	sbc	r6, r1
     914:	71 08       	sbc	r7, r1
     916:	81 08       	sbc	r8, r1
     918:	91 08       	sbc	r9, r1
     91a:	a2 0c       	add	r10, r2
     91c:	b3 1c       	adc	r11, r3
     91e:	c4 1c       	adc	r12, r4
     920:	d5 1c       	adc	r13, r5
     922:	21 96       	adiw	r28, 0x01	; 1
     924:	8c ad       	ldd	r24, Y+60	; 0x3c
     926:	9d ad       	ldd	r25, Y+61	; 0x3d
     928:	ae ad       	ldd	r26, Y+62	; 0x3e
     92a:	bf ad       	ldd	r27, Y+63	; 0x3f
     92c:	21 97       	sbiw	r28, 0x01	; 1
     92e:	e3 96       	adiw	r28, 0x33	; 51
     930:	0f ac       	ldd	r0, Y+63	; 0x3f
     932:	e3 97       	sbiw	r28, 0x33	; 51
     934:	04 c0       	rjmp	.+8      	; 0x93e <__stack+0xdf>
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	aa 1f       	adc	r26, r26
     93c:	bb 1f       	adc	r27, r27
     93e:	0a 94       	dec	r0
     940:	d2 f7       	brpl	.-12     	; 0x936 <__stack+0xd7>
     942:	21 96       	adiw	r28, 0x01	; 1
     944:	8c af       	std	Y+60, r24	; 0x3c
     946:	9d af       	std	Y+61, r25	; 0x3d
     948:	ae af       	std	Y+62, r26	; 0x3e
     94a:	bf af       	std	Y+63, r27	; 0x3f
     94c:	21 97       	sbiw	r28, 0x01	; 1
     94e:	a2 1a       	sub	r10, r18
     950:	b3 0a       	sbc	r11, r19
     952:	c4 0a       	sbc	r12, r20
     954:	d5 0a       	sbc	r13, r21
     956:	65 96       	adiw	r28, 0x15	; 21
     958:	ec ac       	ldd	r14, Y+60	; 0x3c
     95a:	fd ac       	ldd	r15, Y+61	; 0x3d
     95c:	0e ad       	ldd	r16, Y+62	; 0x3e
     95e:	1f ad       	ldd	r17, Y+63	; 0x3f
     960:	65 97       	sbiw	r28, 0x15	; 21
     962:	d7 01       	movw	r26, r14
     964:	99 27       	eor	r25, r25
     966:	88 27       	eor	r24, r24
     968:	68 2a       	or	r6, r24
     96a:	79 2a       	or	r7, r25
     96c:	8a 2a       	or	r8, r26
     96e:	9b 2a       	or	r9, r27
     970:	82 01       	movw	r16, r4
     972:	22 27       	eor	r18, r18
     974:	33 27       	eor	r19, r19
     976:	69 96       	adiw	r28, 0x19	; 25
     978:	0c af       	std	Y+60, r16	; 0x3c
     97a:	1d af       	std	Y+61, r17	; 0x3d
     97c:	2e af       	std	Y+62, r18	; 0x3e
     97e:	3f af       	std	Y+63, r19	; 0x3f
     980:	69 97       	sbiw	r28, 0x19	; 25
     982:	a2 01       	movw	r20, r4
     984:	91 01       	movw	r18, r2
     986:	40 70       	andi	r20, 0x00	; 0
     988:	50 70       	andi	r21, 0x00	; 0
     98a:	6d 96       	adiw	r28, 0x1d	; 29
     98c:	2c af       	std	Y+60, r18	; 0x3c
     98e:	3d af       	std	Y+61, r19	; 0x3d
     990:	4e af       	std	Y+62, r20	; 0x3e
     992:	5f af       	std	Y+63, r21	; 0x3f
     994:	6d 97       	sbiw	r28, 0x1d	; 29
     996:	c6 01       	movw	r24, r12
     998:	b5 01       	movw	r22, r10
     99a:	69 96       	adiw	r28, 0x19	; 25
     99c:	2c ad       	ldd	r18, Y+60	; 0x3c
     99e:	3d ad       	ldd	r19, Y+61	; 0x3d
     9a0:	4e ad       	ldd	r20, Y+62	; 0x3e
     9a2:	5f ad       	ldd	r21, Y+63	; 0x3f
     9a4:	69 97       	sbiw	r28, 0x19	; 25
     9a6:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     9aa:	7b 01       	movw	r14, r22
     9ac:	8c 01       	movw	r16, r24
     9ae:	c6 01       	movw	r24, r12
     9b0:	b5 01       	movw	r22, r10
     9b2:	69 96       	adiw	r28, 0x19	; 25
     9b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     9b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     9b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     9ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     9bc:	69 97       	sbiw	r28, 0x19	; 25
     9be:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     9c2:	c9 01       	movw	r24, r18
     9c4:	da 01       	movw	r26, r20
     9c6:	a1 96       	adiw	r28, 0x21	; 33
     9c8:	8c af       	std	Y+60, r24	; 0x3c
     9ca:	9d af       	std	Y+61, r25	; 0x3d
     9cc:	ae af       	std	Y+62, r26	; 0x3e
     9ce:	bf af       	std	Y+63, r27	; 0x3f
     9d0:	a1 97       	sbiw	r28, 0x21	; 33
     9d2:	bc 01       	movw	r22, r24
     9d4:	cd 01       	movw	r24, r26
     9d6:	6d 96       	adiw	r28, 0x1d	; 29
     9d8:	2c ad       	ldd	r18, Y+60	; 0x3c
     9da:	3d ad       	ldd	r19, Y+61	; 0x3d
     9dc:	4e ad       	ldd	r20, Y+62	; 0x3e
     9de:	5f ad       	ldd	r21, Y+63	; 0x3f
     9e0:	6d 97       	sbiw	r28, 0x1d	; 29
     9e2:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	87 01       	movw	r16, r14
     9ec:	ff 24       	eor	r15, r15
     9ee:	ee 24       	eor	r14, r14
     9f0:	21 96       	adiw	r28, 0x01	; 1
     9f2:	ac ac       	ldd	r10, Y+60	; 0x3c
     9f4:	bd ac       	ldd	r11, Y+61	; 0x3d
     9f6:	ce ac       	ldd	r12, Y+62	; 0x3e
     9f8:	df ac       	ldd	r13, Y+63	; 0x3f
     9fa:	21 97       	sbiw	r28, 0x01	; 1
     9fc:	c6 01       	movw	r24, r12
     9fe:	aa 27       	eor	r26, r26
     a00:	bb 27       	eor	r27, r27
     a02:	57 01       	movw	r10, r14
     a04:	68 01       	movw	r12, r16
     a06:	a8 2a       	or	r10, r24
     a08:	b9 2a       	or	r11, r25
     a0a:	ca 2a       	or	r12, r26
     a0c:	db 2a       	or	r13, r27
     a0e:	a2 16       	cp	r10, r18
     a10:	b3 06       	cpc	r11, r19
     a12:	c4 06       	cpc	r12, r20
     a14:	d5 06       	cpc	r13, r21
     a16:	60 f5       	brcc	.+88     	; 0xa70 <__stack+0x211>
     a18:	a1 96       	adiw	r28, 0x21	; 33
     a1a:	6c ad       	ldd	r22, Y+60	; 0x3c
     a1c:	7d ad       	ldd	r23, Y+61	; 0x3d
     a1e:	8e ad       	ldd	r24, Y+62	; 0x3e
     a20:	9f ad       	ldd	r25, Y+63	; 0x3f
     a22:	a1 97       	sbiw	r28, 0x21	; 33
     a24:	61 50       	subi	r22, 0x01	; 1
     a26:	70 40       	sbci	r23, 0x00	; 0
     a28:	80 40       	sbci	r24, 0x00	; 0
     a2a:	90 40       	sbci	r25, 0x00	; 0
     a2c:	a1 96       	adiw	r28, 0x21	; 33
     a2e:	6c af       	std	Y+60, r22	; 0x3c
     a30:	7d af       	std	Y+61, r23	; 0x3d
     a32:	8e af       	std	Y+62, r24	; 0x3e
     a34:	9f af       	std	Y+63, r25	; 0x3f
     a36:	a1 97       	sbiw	r28, 0x21	; 33
     a38:	a2 0c       	add	r10, r2
     a3a:	b3 1c       	adc	r11, r3
     a3c:	c4 1c       	adc	r12, r4
     a3e:	d5 1c       	adc	r13, r5
     a40:	a2 14       	cp	r10, r2
     a42:	b3 04       	cpc	r11, r3
     a44:	c4 04       	cpc	r12, r4
     a46:	d5 04       	cpc	r13, r5
     a48:	98 f0       	brcs	.+38     	; 0xa70 <__stack+0x211>
     a4a:	a2 16       	cp	r10, r18
     a4c:	b3 06       	cpc	r11, r19
     a4e:	c4 06       	cpc	r12, r20
     a50:	d5 06       	cpc	r13, r21
     a52:	70 f4       	brcc	.+28     	; 0xa70 <__stack+0x211>
     a54:	61 50       	subi	r22, 0x01	; 1
     a56:	70 40       	sbci	r23, 0x00	; 0
     a58:	80 40       	sbci	r24, 0x00	; 0
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	a1 96       	adiw	r28, 0x21	; 33
     a5e:	6c af       	std	Y+60, r22	; 0x3c
     a60:	7d af       	std	Y+61, r23	; 0x3d
     a62:	8e af       	std	Y+62, r24	; 0x3e
     a64:	9f af       	std	Y+63, r25	; 0x3f
     a66:	a1 97       	sbiw	r28, 0x21	; 33
     a68:	a2 0c       	add	r10, r2
     a6a:	b3 1c       	adc	r11, r3
     a6c:	c4 1c       	adc	r12, r4
     a6e:	d5 1c       	adc	r13, r5
     a70:	a2 1a       	sub	r10, r18
     a72:	b3 0a       	sbc	r11, r19
     a74:	c4 0a       	sbc	r12, r20
     a76:	d5 0a       	sbc	r13, r21
     a78:	c6 01       	movw	r24, r12
     a7a:	b5 01       	movw	r22, r10
     a7c:	69 96       	adiw	r28, 0x19	; 25
     a7e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a80:	3d ad       	ldd	r19, Y+61	; 0x3d
     a82:	4e ad       	ldd	r20, Y+62	; 0x3e
     a84:	5f ad       	ldd	r21, Y+63	; 0x3f
     a86:	69 97       	sbiw	r28, 0x19	; 25
     a88:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     a8c:	7b 01       	movw	r14, r22
     a8e:	8c 01       	movw	r16, r24
     a90:	c6 01       	movw	r24, r12
     a92:	b5 01       	movw	r22, r10
     a94:	69 96       	adiw	r28, 0x19	; 25
     a96:	2c ad       	ldd	r18, Y+60	; 0x3c
     a98:	3d ad       	ldd	r19, Y+61	; 0x3d
     a9a:	4e ad       	ldd	r20, Y+62	; 0x3e
     a9c:	5f ad       	ldd	r21, Y+63	; 0x3f
     a9e:	69 97       	sbiw	r28, 0x19	; 25
     aa0:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     aa4:	c9 01       	movw	r24, r18
     aa6:	da 01       	movw	r26, r20
     aa8:	5c 01       	movw	r10, r24
     aaa:	6d 01       	movw	r12, r26
     aac:	c6 01       	movw	r24, r12
     aae:	b5 01       	movw	r22, r10
     ab0:	6d 96       	adiw	r28, 0x1d	; 29
     ab2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ab4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ab6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ab8:	5f ad       	ldd	r21, Y+63	; 0x3f
     aba:	6d 97       	sbiw	r28, 0x1d	; 29
     abc:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	87 01       	movw	r16, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	ee 24       	eor	r14, r14
     aca:	21 96       	adiw	r28, 0x01	; 1
     acc:	8c ad       	ldd	r24, Y+60	; 0x3c
     ace:	9d ad       	ldd	r25, Y+61	; 0x3d
     ad0:	ae ad       	ldd	r26, Y+62	; 0x3e
     ad2:	bf ad       	ldd	r27, Y+63	; 0x3f
     ad4:	21 97       	sbiw	r28, 0x01	; 1
     ad6:	a0 70       	andi	r26, 0x00	; 0
     ad8:	b0 70       	andi	r27, 0x00	; 0
     ada:	e8 2a       	or	r14, r24
     adc:	f9 2a       	or	r15, r25
     ade:	0a 2b       	or	r16, r26
     ae0:	1b 2b       	or	r17, r27
     ae2:	e2 16       	cp	r14, r18
     ae4:	f3 06       	cpc	r15, r19
     ae6:	04 07       	cpc	r16, r20
     ae8:	15 07       	cpc	r17, r21
     aea:	c0 f4       	brcc	.+48     	; 0xb1c <__stack+0x2bd>
     aec:	08 94       	sec
     aee:	a1 08       	sbc	r10, r1
     af0:	b1 08       	sbc	r11, r1
     af2:	c1 08       	sbc	r12, r1
     af4:	d1 08       	sbc	r13, r1
     af6:	e2 0c       	add	r14, r2
     af8:	f3 1c       	adc	r15, r3
     afa:	04 1d       	adc	r16, r4
     afc:	15 1d       	adc	r17, r5
     afe:	e2 14       	cp	r14, r2
     b00:	f3 04       	cpc	r15, r3
     b02:	04 05       	cpc	r16, r4
     b04:	15 05       	cpc	r17, r5
     b06:	50 f0       	brcs	.+20     	; 0xb1c <__stack+0x2bd>
     b08:	e2 16       	cp	r14, r18
     b0a:	f3 06       	cpc	r15, r19
     b0c:	04 07       	cpc	r16, r20
     b0e:	15 07       	cpc	r17, r21
     b10:	28 f4       	brcc	.+10     	; 0xb1c <__stack+0x2bd>
     b12:	08 94       	sec
     b14:	a1 08       	sbc	r10, r1
     b16:	b1 08       	sbc	r11, r1
     b18:	c1 08       	sbc	r12, r1
     b1a:	d1 08       	sbc	r13, r1
     b1c:	a1 96       	adiw	r28, 0x21	; 33
     b1e:	ec ac       	ldd	r14, Y+60	; 0x3c
     b20:	fd ac       	ldd	r15, Y+61	; 0x3d
     b22:	0e ad       	ldd	r16, Y+62	; 0x3e
     b24:	1f ad       	ldd	r17, Y+63	; 0x3f
     b26:	a1 97       	sbiw	r28, 0x21	; 33
     b28:	d7 01       	movw	r26, r14
     b2a:	99 27       	eor	r25, r25
     b2c:	88 27       	eor	r24, r24
     b2e:	96 01       	movw	r18, r12
     b30:	85 01       	movw	r16, r10
     b32:	08 2b       	or	r16, r24
     b34:	19 2b       	or	r17, r25
     b36:	2a 2b       	or	r18, r26
     b38:	3b 2b       	or	r19, r27
     b3a:	25 96       	adiw	r28, 0x05	; 5
     b3c:	0c af       	std	Y+60, r16	; 0x3c
     b3e:	1d af       	std	Y+61, r17	; 0x3d
     b40:	2e af       	std	Y+62, r18	; 0x3e
     b42:	3f af       	std	Y+63, r19	; 0x3f
     b44:	25 97       	sbiw	r28, 0x05	; 5
     b46:	72 c2       	rjmp	.+1252   	; 0x102c <__stack+0x7cd>
     b48:	6e 14       	cp	r6, r14
     b4a:	7f 04       	cpc	r7, r15
     b4c:	80 06       	cpc	r8, r16
     b4e:	91 06       	cpc	r9, r17
     b50:	08 f4       	brcc	.+2      	; 0xb54 <__stack+0x2f5>
     b52:	5f c2       	rjmp	.+1214   	; 0x1012 <__stack+0x7b3>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	e2 16       	cp	r14, r18
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	f2 06       	cpc	r15, r18
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	02 07       	cpc	r16, r18
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	12 07       	cpc	r17, r18
     b64:	88 f4       	brcc	.+34     	; 0xb88 <__stack+0x329>
     b66:	3f ef       	ldi	r19, 0xFF	; 255
     b68:	e3 16       	cp	r14, r19
     b6a:	f1 04       	cpc	r15, r1
     b6c:	01 05       	cpc	r16, r1
     b6e:	11 05       	cpc	r17, r1
     b70:	31 f0       	breq	.+12     	; 0xb7e <__stack+0x31f>
     b72:	28 f0       	brcs	.+10     	; 0xb7e <__stack+0x31f>
     b74:	48 e0       	ldi	r20, 0x08	; 8
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	17 c0       	rjmp	.+46     	; 0xbac <__stack+0x34d>
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	12 c0       	rjmp	.+36     	; 0xbac <__stack+0x34d>
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	e4 16       	cp	r14, r20
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	f4 06       	cpc	r15, r20
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	04 07       	cpc	r16, r20
     b94:	41 e0       	ldi	r20, 0x01	; 1
     b96:	14 07       	cpc	r17, r20
     b98:	28 f0       	brcs	.+10     	; 0xba4 <__stack+0x345>
     b9a:	48 e1       	ldi	r20, 0x18	; 24
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <__stack+0x34d>
     ba4:	40 e1       	ldi	r20, 0x10	; 16
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	d8 01       	movw	r26, r16
     bae:	c7 01       	movw	r24, r14
     bb0:	04 2e       	mov	r0, r20
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__stack+0x35d>
     bb4:	b6 95       	lsr	r27
     bb6:	a7 95       	ror	r26
     bb8:	97 95       	ror	r25
     bba:	87 95       	ror	r24
     bbc:	0a 94       	dec	r0
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__stack+0x355>
     bc0:	8c 55       	subi	r24, 0x5C	; 92
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	dc 01       	movw	r26, r24
     bc6:	2c 91       	ld	r18, X
     bc8:	30 e2       	ldi	r19, 0x20	; 32
     bca:	a3 2e       	mov	r10, r19
     bcc:	b1 2c       	mov	r11, r1
     bce:	c1 2c       	mov	r12, r1
     bd0:	d1 2c       	mov	r13, r1
     bd2:	d6 01       	movw	r26, r12
     bd4:	c5 01       	movw	r24, r10
     bd6:	84 1b       	sub	r24, r20
     bd8:	95 0b       	sbc	r25, r21
     bda:	a6 0b       	sbc	r26, r22
     bdc:	b7 0b       	sbc	r27, r23
     bde:	82 1b       	sub	r24, r18
     be0:	91 09       	sbc	r25, r1
     be2:	a1 09       	sbc	r26, r1
     be4:	b1 09       	sbc	r27, r1
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	a1 05       	cpc	r26, r1
     bea:	b1 05       	cpc	r27, r1
     bec:	99 f4       	brne	.+38     	; 0xc14 <__stack+0x3b5>
     bee:	e6 14       	cp	r14, r6
     bf0:	f7 04       	cpc	r15, r7
     bf2:	08 05       	cpc	r16, r8
     bf4:	19 05       	cpc	r17, r9
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__stack+0x39b>
     bf8:	fe c1       	rjmp	.+1020   	; 0xff6 <__stack+0x797>
     bfa:	21 96       	adiw	r28, 0x01	; 1
     bfc:	6c ac       	ldd	r6, Y+60	; 0x3c
     bfe:	7d ac       	ldd	r7, Y+61	; 0x3d
     c00:	8e ac       	ldd	r8, Y+62	; 0x3e
     c02:	9f ac       	ldd	r9, Y+63	; 0x3f
     c04:	21 97       	sbiw	r28, 0x01	; 1
     c06:	62 14       	cp	r6, r2
     c08:	73 04       	cpc	r7, r3
     c0a:	84 04       	cpc	r8, r4
     c0c:	95 04       	cpc	r9, r5
     c0e:	08 f0       	brcs	.+2      	; 0xc12 <__stack+0x3b3>
     c10:	f2 c1       	rjmp	.+996    	; 0xff6 <__stack+0x797>
     c12:	ff c1       	rjmp	.+1022   	; 0x1012 <__stack+0x7b3>
     c14:	e2 96       	adiw	r28, 0x32	; 50
     c16:	8f af       	std	Y+63, r24	; 0x3f
     c18:	e2 97       	sbiw	r28, 0x32	; 50
     c1a:	08 2e       	mov	r0, r24
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <__stack+0x3c7>
     c1e:	ee 0c       	add	r14, r14
     c20:	ff 1c       	adc	r15, r15
     c22:	00 1f       	adc	r16, r16
     c24:	11 1f       	adc	r17, r17
     c26:	0a 94       	dec	r0
     c28:	d2 f7       	brpl	.-12     	; 0xc1e <__stack+0x3bf>
     c2a:	6a 2d       	mov	r22, r10
     c2c:	68 1b       	sub	r22, r24
     c2e:	d2 01       	movw	r26, r4
     c30:	c1 01       	movw	r24, r2
     c32:	06 2e       	mov	r0, r22
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__stack+0x3df>
     c36:	b6 95       	lsr	r27
     c38:	a7 95       	ror	r26
     c3a:	97 95       	ror	r25
     c3c:	87 95       	ror	r24
     c3e:	0a 94       	dec	r0
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__stack+0x3d7>
     c42:	5c 01       	movw	r10, r24
     c44:	6d 01       	movw	r12, r26
     c46:	ae 28       	or	r10, r14
     c48:	bf 28       	or	r11, r15
     c4a:	c0 2a       	or	r12, r16
     c4c:	d1 2a       	or	r13, r17
     c4e:	ad aa       	std	Y+53, r10	; 0x35
     c50:	be aa       	std	Y+54, r11	; 0x36
     c52:	cf aa       	std	Y+55, r12	; 0x37
     c54:	d8 ae       	std	Y+56, r13	; 0x38
     c56:	72 01       	movw	r14, r4
     c58:	61 01       	movw	r12, r2
     c5a:	e2 96       	adiw	r28, 0x32	; 50
     c5c:	0f ac       	ldd	r0, Y+63	; 0x3f
     c5e:	e2 97       	sbiw	r28, 0x32	; 50
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <__stack+0x40b>
     c62:	cc 0c       	add	r12, r12
     c64:	dd 1c       	adc	r13, r13
     c66:	ee 1c       	adc	r14, r14
     c68:	ff 1c       	adc	r15, r15
     c6a:	0a 94       	dec	r0
     c6c:	d2 f7       	brpl	.-12     	; 0xc62 <__stack+0x403>
     c6e:	c9 aa       	std	Y+49, r12	; 0x31
     c70:	da aa       	std	Y+50, r13	; 0x32
     c72:	eb aa       	std	Y+51, r14	; 0x33
     c74:	fc aa       	std	Y+52, r15	; 0x34
     c76:	64 01       	movw	r12, r8
     c78:	53 01       	movw	r10, r6
     c7a:	06 2e       	mov	r0, r22
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__stack+0x427>
     c7e:	d6 94       	lsr	r13
     c80:	c7 94       	ror	r12
     c82:	b7 94       	ror	r11
     c84:	a7 94       	ror	r10
     c86:	0a 94       	dec	r0
     c88:	d2 f7       	brpl	.-12     	; 0xc7e <__stack+0x41f>
     c8a:	d4 01       	movw	r26, r8
     c8c:	c3 01       	movw	r24, r6
     c8e:	e2 96       	adiw	r28, 0x32	; 50
     c90:	0f ac       	ldd	r0, Y+63	; 0x3f
     c92:	e2 97       	sbiw	r28, 0x32	; 50
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__stack+0x43f>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	aa 1f       	adc	r26, r26
     c9c:	bb 1f       	adc	r27, r27
     c9e:	0a 94       	dec	r0
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__stack+0x437>
     ca2:	21 96       	adiw	r28, 0x01	; 1
     ca4:	ec ac       	ldd	r14, Y+60	; 0x3c
     ca6:	fd ac       	ldd	r15, Y+61	; 0x3d
     ca8:	0e ad       	ldd	r16, Y+62	; 0x3e
     caa:	1f ad       	ldd	r17, Y+63	; 0x3f
     cac:	21 97       	sbiw	r28, 0x01	; 1
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__stack+0x459>
     cb0:	16 95       	lsr	r17
     cb2:	07 95       	ror	r16
     cb4:	f7 94       	ror	r15
     cb6:	e7 94       	ror	r14
     cb8:	6a 95       	dec	r22
     cba:	d2 f7       	brpl	.-12     	; 0xcb0 <__stack+0x451>
     cbc:	37 01       	movw	r6, r14
     cbe:	48 01       	movw	r8, r16
     cc0:	68 2a       	or	r6, r24
     cc2:	79 2a       	or	r7, r25
     cc4:	8a 2a       	or	r8, r26
     cc6:	9b 2a       	or	r9, r27
     cc8:	6d a6       	std	Y+45, r6	; 0x2d
     cca:	7e a6       	std	Y+46, r7	; 0x2e
     ccc:	8f a6       	std	Y+47, r8	; 0x2f
     cce:	98 aa       	std	Y+48, r9	; 0x30
     cd0:	ed a8       	ldd	r14, Y+53	; 0x35
     cd2:	fe a8       	ldd	r15, Y+54	; 0x36
     cd4:	0f a9       	ldd	r16, Y+55	; 0x37
     cd6:	18 ad       	ldd	r17, Y+56	; 0x38
     cd8:	38 01       	movw	r6, r16
     cda:	88 24       	eor	r8, r8
     cdc:	99 24       	eor	r9, r9
     cde:	98 01       	movw	r18, r16
     ce0:	87 01       	movw	r16, r14
     ce2:	20 70       	andi	r18, 0x00	; 0
     ce4:	30 70       	andi	r19, 0x00	; 0
     ce6:	a5 96       	adiw	r28, 0x25	; 37
     ce8:	0c af       	std	Y+60, r16	; 0x3c
     cea:	1d af       	std	Y+61, r17	; 0x3d
     cec:	2e af       	std	Y+62, r18	; 0x3e
     cee:	3f af       	std	Y+63, r19	; 0x3f
     cf0:	a5 97       	sbiw	r28, 0x25	; 37
     cf2:	c6 01       	movw	r24, r12
     cf4:	b5 01       	movw	r22, r10
     cf6:	a4 01       	movw	r20, r8
     cf8:	93 01       	movw	r18, r6
     cfa:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     cfe:	7b 01       	movw	r14, r22
     d00:	8c 01       	movw	r16, r24
     d02:	c6 01       	movw	r24, r12
     d04:	b5 01       	movw	r22, r10
     d06:	a4 01       	movw	r20, r8
     d08:	93 01       	movw	r18, r6
     d0a:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     d0e:	c9 01       	movw	r24, r18
     d10:	da 01       	movw	r26, r20
     d12:	1c 01       	movw	r2, r24
     d14:	2d 01       	movw	r4, r26
     d16:	c2 01       	movw	r24, r4
     d18:	b1 01       	movw	r22, r2
     d1a:	a5 96       	adiw	r28, 0x25	; 37
     d1c:	2c ad       	ldd	r18, Y+60	; 0x3c
     d1e:	3d ad       	ldd	r19, Y+61	; 0x3d
     d20:	4e ad       	ldd	r20, Y+62	; 0x3e
     d22:	5f ad       	ldd	r21, Y+63	; 0x3f
     d24:	a5 97       	sbiw	r28, 0x25	; 37
     d26:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	87 01       	movw	r16, r14
     d30:	ff 24       	eor	r15, r15
     d32:	ee 24       	eor	r14, r14
     d34:	ad a4       	ldd	r10, Y+45	; 0x2d
     d36:	be a4       	ldd	r11, Y+46	; 0x2e
     d38:	cf a4       	ldd	r12, Y+47	; 0x2f
     d3a:	d8 a8       	ldd	r13, Y+48	; 0x30
     d3c:	c6 01       	movw	r24, r12
     d3e:	aa 27       	eor	r26, r26
     d40:	bb 27       	eor	r27, r27
     d42:	57 01       	movw	r10, r14
     d44:	68 01       	movw	r12, r16
     d46:	a8 2a       	or	r10, r24
     d48:	b9 2a       	or	r11, r25
     d4a:	ca 2a       	or	r12, r26
     d4c:	db 2a       	or	r13, r27
     d4e:	a2 16       	cp	r10, r18
     d50:	b3 06       	cpc	r11, r19
     d52:	c4 06       	cpc	r12, r20
     d54:	d5 06       	cpc	r13, r21
     d56:	00 f5       	brcc	.+64     	; 0xd98 <__stack+0x539>
     d58:	08 94       	sec
     d5a:	21 08       	sbc	r2, r1
     d5c:	31 08       	sbc	r3, r1
     d5e:	41 08       	sbc	r4, r1
     d60:	51 08       	sbc	r5, r1
     d62:	ed a8       	ldd	r14, Y+53	; 0x35
     d64:	fe a8       	ldd	r15, Y+54	; 0x36
     d66:	0f a9       	ldd	r16, Y+55	; 0x37
     d68:	18 ad       	ldd	r17, Y+56	; 0x38
     d6a:	ae 0c       	add	r10, r14
     d6c:	bf 1c       	adc	r11, r15
     d6e:	c0 1e       	adc	r12, r16
     d70:	d1 1e       	adc	r13, r17
     d72:	ae 14       	cp	r10, r14
     d74:	bf 04       	cpc	r11, r15
     d76:	c0 06       	cpc	r12, r16
     d78:	d1 06       	cpc	r13, r17
     d7a:	70 f0       	brcs	.+28     	; 0xd98 <__stack+0x539>
     d7c:	a2 16       	cp	r10, r18
     d7e:	b3 06       	cpc	r11, r19
     d80:	c4 06       	cpc	r12, r20
     d82:	d5 06       	cpc	r13, r21
     d84:	48 f4       	brcc	.+18     	; 0xd98 <__stack+0x539>
     d86:	08 94       	sec
     d88:	21 08       	sbc	r2, r1
     d8a:	31 08       	sbc	r3, r1
     d8c:	41 08       	sbc	r4, r1
     d8e:	51 08       	sbc	r5, r1
     d90:	ae 0c       	add	r10, r14
     d92:	bf 1c       	adc	r11, r15
     d94:	c0 1e       	adc	r12, r16
     d96:	d1 1e       	adc	r13, r17
     d98:	a2 1a       	sub	r10, r18
     d9a:	b3 0a       	sbc	r11, r19
     d9c:	c4 0a       	sbc	r12, r20
     d9e:	d5 0a       	sbc	r13, r21
     da0:	c6 01       	movw	r24, r12
     da2:	b5 01       	movw	r22, r10
     da4:	a4 01       	movw	r20, r8
     da6:	93 01       	movw	r18, r6
     da8:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     dac:	7b 01       	movw	r14, r22
     dae:	8c 01       	movw	r16, r24
     db0:	c6 01       	movw	r24, r12
     db2:	b5 01       	movw	r22, r10
     db4:	a4 01       	movw	r20, r8
     db6:	93 01       	movw	r18, r6
     db8:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
     dbc:	c9 01       	movw	r24, r18
     dbe:	da 01       	movw	r26, r20
     dc0:	3c 01       	movw	r6, r24
     dc2:	4d 01       	movw	r8, r26
     dc4:	c4 01       	movw	r24, r8
     dc6:	b3 01       	movw	r22, r6
     dc8:	a5 96       	adiw	r28, 0x25	; 37
     dca:	2c ad       	ldd	r18, Y+60	; 0x3c
     dcc:	3d ad       	ldd	r19, Y+61	; 0x3d
     dce:	4e ad       	ldd	r20, Y+62	; 0x3e
     dd0:	5f ad       	ldd	r21, Y+63	; 0x3f
     dd2:	a5 97       	sbiw	r28, 0x25	; 37
     dd4:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
     ddc:	87 01       	movw	r16, r14
     dde:	ff 24       	eor	r15, r15
     de0:	ee 24       	eor	r14, r14
     de2:	8d a5       	ldd	r24, Y+45	; 0x2d
     de4:	9e a5       	ldd	r25, Y+46	; 0x2e
     de6:	af a5       	ldd	r26, Y+47	; 0x2f
     de8:	b8 a9       	ldd	r27, Y+48	; 0x30
     dea:	a0 70       	andi	r26, 0x00	; 0
     dec:	b0 70       	andi	r27, 0x00	; 0
     dee:	57 01       	movw	r10, r14
     df0:	68 01       	movw	r12, r16
     df2:	a8 2a       	or	r10, r24
     df4:	b9 2a       	or	r11, r25
     df6:	ca 2a       	or	r12, r26
     df8:	db 2a       	or	r13, r27
     dfa:	a2 16       	cp	r10, r18
     dfc:	b3 06       	cpc	r11, r19
     dfe:	c4 06       	cpc	r12, r20
     e00:	d5 06       	cpc	r13, r21
     e02:	00 f5       	brcc	.+64     	; 0xe44 <__stack+0x5e5>
     e04:	08 94       	sec
     e06:	61 08       	sbc	r6, r1
     e08:	71 08       	sbc	r7, r1
     e0a:	81 08       	sbc	r8, r1
     e0c:	91 08       	sbc	r9, r1
     e0e:	6d a9       	ldd	r22, Y+53	; 0x35
     e10:	7e a9       	ldd	r23, Y+54	; 0x36
     e12:	8f a9       	ldd	r24, Y+55	; 0x37
     e14:	98 ad       	ldd	r25, Y+56	; 0x38
     e16:	a6 0e       	add	r10, r22
     e18:	b7 1e       	adc	r11, r23
     e1a:	c8 1e       	adc	r12, r24
     e1c:	d9 1e       	adc	r13, r25
     e1e:	a6 16       	cp	r10, r22
     e20:	b7 06       	cpc	r11, r23
     e22:	c8 06       	cpc	r12, r24
     e24:	d9 06       	cpc	r13, r25
     e26:	70 f0       	brcs	.+28     	; 0xe44 <__stack+0x5e5>
     e28:	a2 16       	cp	r10, r18
     e2a:	b3 06       	cpc	r11, r19
     e2c:	c4 06       	cpc	r12, r20
     e2e:	d5 06       	cpc	r13, r21
     e30:	48 f4       	brcc	.+18     	; 0xe44 <__stack+0x5e5>
     e32:	08 94       	sec
     e34:	61 08       	sbc	r6, r1
     e36:	71 08       	sbc	r7, r1
     e38:	81 08       	sbc	r8, r1
     e3a:	91 08       	sbc	r9, r1
     e3c:	a6 0e       	add	r10, r22
     e3e:	b7 1e       	adc	r11, r23
     e40:	c8 1e       	adc	r12, r24
     e42:	d9 1e       	adc	r13, r25
     e44:	d6 01       	movw	r26, r12
     e46:	c5 01       	movw	r24, r10
     e48:	82 1b       	sub	r24, r18
     e4a:	93 0b       	sbc	r25, r19
     e4c:	a4 0b       	sbc	r26, r20
     e4e:	b5 0b       	sbc	r27, r21
     e50:	89 a7       	std	Y+41, r24	; 0x29
     e52:	9a a7       	std	Y+42, r25	; 0x2a
     e54:	ab a7       	std	Y+43, r26	; 0x2b
     e56:	bc a7       	std	Y+44, r27	; 0x2c
     e58:	d1 01       	movw	r26, r2
     e5a:	99 27       	eor	r25, r25
     e5c:	88 27       	eor	r24, r24
     e5e:	64 01       	movw	r12, r8
     e60:	53 01       	movw	r10, r6
     e62:	a8 2a       	or	r10, r24
     e64:	b9 2a       	or	r11, r25
     e66:	ca 2a       	or	r12, r26
     e68:	db 2a       	or	r13, r27
     e6a:	25 96       	adiw	r28, 0x05	; 5
     e6c:	ac ae       	std	Y+60, r10	; 0x3c
     e6e:	bd ae       	std	Y+61, r11	; 0x3d
     e70:	ce ae       	std	Y+62, r12	; 0x3e
     e72:	df ae       	std	Y+63, r13	; 0x3f
     e74:	25 97       	sbiw	r28, 0x05	; 5
     e76:	86 01       	movw	r16, r12
     e78:	75 01       	movw	r14, r10
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	3f ef       	ldi	r19, 0xFF	; 255
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	e2 22       	and	r14, r18
     e84:	f3 22       	and	r15, r19
     e86:	04 23       	and	r16, r20
     e88:	15 23       	and	r17, r21
     e8a:	a6 01       	movw	r20, r12
     e8c:	66 27       	eor	r22, r22
     e8e:	77 27       	eor	r23, r23
     e90:	ad 96       	adiw	r28, 0x2d	; 45
     e92:	4c af       	std	Y+60, r20	; 0x3c
     e94:	5d af       	std	Y+61, r21	; 0x3d
     e96:	6e af       	std	Y+62, r22	; 0x3e
     e98:	7f af       	std	Y+63, r23	; 0x3f
     e9a:	ad 97       	sbiw	r28, 0x2d	; 45
     e9c:	a9 a8       	ldd	r10, Y+49	; 0x31
     e9e:	ba a8       	ldd	r11, Y+50	; 0x32
     ea0:	cb a8       	ldd	r12, Y+51	; 0x33
     ea2:	dc a8       	ldd	r13, Y+52	; 0x34
     ea4:	6f ef       	ldi	r22, 0xFF	; 255
     ea6:	7f ef       	ldi	r23, 0xFF	; 255
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a6 22       	and	r10, r22
     eae:	b7 22       	and	r11, r23
     eb0:	c8 22       	and	r12, r24
     eb2:	d9 22       	and	r13, r25
     eb4:	89 a9       	ldd	r24, Y+49	; 0x31
     eb6:	9a a9       	ldd	r25, Y+50	; 0x32
     eb8:	ab a9       	ldd	r26, Y+51	; 0x33
     eba:	bc a9       	ldd	r27, Y+52	; 0x34
     ebc:	1d 01       	movw	r2, r26
     ebe:	44 24       	eor	r4, r4
     ec0:	55 24       	eor	r5, r5
     ec2:	c8 01       	movw	r24, r16
     ec4:	b7 01       	movw	r22, r14
     ec6:	a6 01       	movw	r20, r12
     ec8:	95 01       	movw	r18, r10
     eca:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
     ece:	a9 96       	adiw	r28, 0x29	; 41
     ed0:	6c af       	std	Y+60, r22	; 0x3c
     ed2:	7d af       	std	Y+61, r23	; 0x3d
     ed4:	8e af       	std	Y+62, r24	; 0x3e
     ed6:	9f af       	std	Y+63, r25	; 0x3f
     ed8:	a9 97       	sbiw	r28, 0x29	; 41
     eda:	c8 01       	movw	r24, r16
     edc:	b7 01       	movw	r22, r14
     ede:	a2 01       	movw	r20, r4
     ee0:	91 01       	movw	r18, r2
     ee2:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
     ee6:	3b 01       	movw	r6, r22
     ee8:	4c 01       	movw	r8, r24
     eea:	ad 96       	adiw	r28, 0x2d	; 45
     eec:	6c ad       	ldd	r22, Y+60	; 0x3c
     eee:	7d ad       	ldd	r23, Y+61	; 0x3d
     ef0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ef4:	ad 97       	sbiw	r28, 0x2d	; 45
     ef6:	a6 01       	movw	r20, r12
     ef8:	95 01       	movw	r18, r10
     efa:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
     efe:	7b 01       	movw	r14, r22
     f00:	8c 01       	movw	r16, r24
     f02:	ad 96       	adiw	r28, 0x2d	; 45
     f04:	6c ad       	ldd	r22, Y+60	; 0x3c
     f06:	7d ad       	ldd	r23, Y+61	; 0x3d
     f08:	8e ad       	ldd	r24, Y+62	; 0x3e
     f0a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f0c:	ad 97       	sbiw	r28, 0x2d	; 45
     f0e:	a2 01       	movw	r20, r4
     f10:	91 01       	movw	r18, r2
     f12:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
     f16:	5b 01       	movw	r10, r22
     f18:	6c 01       	movw	r12, r24
     f1a:	a8 01       	movw	r20, r16
     f1c:	97 01       	movw	r18, r14
     f1e:	26 0d       	add	r18, r6
     f20:	37 1d       	adc	r19, r7
     f22:	48 1d       	adc	r20, r8
     f24:	59 1d       	adc	r21, r9
     f26:	a9 96       	adiw	r28, 0x29	; 41
     f28:	6c ac       	ldd	r6, Y+60	; 0x3c
     f2a:	7d ac       	ldd	r7, Y+61	; 0x3d
     f2c:	8e ac       	ldd	r8, Y+62	; 0x3e
     f2e:	9f ac       	ldd	r9, Y+63	; 0x3f
     f30:	a9 97       	sbiw	r28, 0x29	; 41
     f32:	c4 01       	movw	r24, r8
     f34:	aa 27       	eor	r26, r26
     f36:	bb 27       	eor	r27, r27
     f38:	28 0f       	add	r18, r24
     f3a:	39 1f       	adc	r19, r25
     f3c:	4a 1f       	adc	r20, r26
     f3e:	5b 1f       	adc	r21, r27
     f40:	2e 15       	cp	r18, r14
     f42:	3f 05       	cpc	r19, r15
     f44:	40 07       	cpc	r20, r16
     f46:	51 07       	cpc	r21, r17
     f48:	48 f4       	brcc	.+18     	; 0xf5c <__stack+0x6fd>
     f4a:	e1 2c       	mov	r14, r1
     f4c:	f1 2c       	mov	r15, r1
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	06 2f       	mov	r16, r22
     f52:	11 2d       	mov	r17, r1
     f54:	ae 0c       	add	r10, r14
     f56:	bf 1c       	adc	r11, r15
     f58:	c0 1e       	adc	r12, r16
     f5a:	d1 1e       	adc	r13, r17
     f5c:	ca 01       	movw	r24, r20
     f5e:	aa 27       	eor	r26, r26
     f60:	bb 27       	eor	r27, r27
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	6a 0d       	add	r22, r10
     f68:	7b 1d       	adc	r23, r11
     f6a:	8c 1d       	adc	r24, r12
     f6c:	9d 1d       	adc	r25, r13
     f6e:	69 a4       	ldd	r6, Y+41	; 0x29
     f70:	7a a4       	ldd	r7, Y+42	; 0x2a
     f72:	8b a4       	ldd	r8, Y+43	; 0x2b
     f74:	9c a4       	ldd	r9, Y+44	; 0x2c
     f76:	66 16       	cp	r6, r22
     f78:	77 06       	cpc	r7, r23
     f7a:	88 06       	cpc	r8, r24
     f7c:	99 06       	cpc	r9, r25
     f7e:	50 f1       	brcs	.+84     	; 0xfd4 <__stack+0x775>
     f80:	66 15       	cp	r22, r6
     f82:	77 05       	cpc	r23, r7
     f84:	88 05       	cpc	r24, r8
     f86:	99 05       	cpc	r25, r9
     f88:	09 f0       	breq	.+2      	; 0xf8c <__stack+0x72d>
     f8a:	4d c0       	rjmp	.+154    	; 0x1026 <__stack+0x7c7>
     f8c:	d9 01       	movw	r26, r18
     f8e:	99 27       	eor	r25, r25
     f90:	88 27       	eor	r24, r24
     f92:	a9 96       	adiw	r28, 0x29	; 41
     f94:	2c ad       	ldd	r18, Y+60	; 0x3c
     f96:	3d ad       	ldd	r19, Y+61	; 0x3d
     f98:	4e ad       	ldd	r20, Y+62	; 0x3e
     f9a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f9c:	a9 97       	sbiw	r28, 0x29	; 41
     f9e:	40 70       	andi	r20, 0x00	; 0
     fa0:	50 70       	andi	r21, 0x00	; 0
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	a4 1f       	adc	r26, r20
     fa8:	b5 1f       	adc	r27, r21
     faa:	21 96       	adiw	r28, 0x01	; 1
     fac:	2c ad       	ldd	r18, Y+60	; 0x3c
     fae:	3d ad       	ldd	r19, Y+61	; 0x3d
     fb0:	4e ad       	ldd	r20, Y+62	; 0x3e
     fb2:	5f ad       	ldd	r21, Y+63	; 0x3f
     fb4:	21 97       	sbiw	r28, 0x01	; 1
     fb6:	e2 96       	adiw	r28, 0x32	; 50
     fb8:	0f ac       	ldd	r0, Y+63	; 0x3f
     fba:	e2 97       	sbiw	r28, 0x32	; 50
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <__stack+0x767>
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	44 1f       	adc	r20, r20
     fc4:	55 1f       	adc	r21, r21
     fc6:	0a 94       	dec	r0
     fc8:	d2 f7       	brpl	.-12     	; 0xfbe <__stack+0x75f>
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	4a 07       	cpc	r20, r26
     fd0:	5b 07       	cpc	r21, r27
     fd2:	48 f5       	brcc	.+82     	; 0x1026 <__stack+0x7c7>
     fd4:	25 96       	adiw	r28, 0x05	; 5
     fd6:	0c ad       	ldd	r16, Y+60	; 0x3c
     fd8:	1d ad       	ldd	r17, Y+61	; 0x3d
     fda:	2e ad       	ldd	r18, Y+62	; 0x3e
     fdc:	3f ad       	ldd	r19, Y+63	; 0x3f
     fde:	25 97       	sbiw	r28, 0x05	; 5
     fe0:	01 50       	subi	r16, 0x01	; 1
     fe2:	10 40       	sbci	r17, 0x00	; 0
     fe4:	20 40       	sbci	r18, 0x00	; 0
     fe6:	30 40       	sbci	r19, 0x00	; 0
     fe8:	25 96       	adiw	r28, 0x05	; 5
     fea:	0c af       	std	Y+60, r16	; 0x3c
     fec:	1d af       	std	Y+61, r17	; 0x3d
     fee:	2e af       	std	Y+62, r18	; 0x3e
     ff0:	3f af       	std	Y+63, r19	; 0x3f
     ff2:	25 97       	sbiw	r28, 0x05	; 5
     ff4:	18 c0       	rjmp	.+48     	; 0x1026 <__stack+0x7c7>
     ff6:	66 24       	eor	r6, r6
     ff8:	77 24       	eor	r7, r7
     ffa:	43 01       	movw	r8, r6
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	25 96       	adiw	r28, 0x05	; 5
    1006:	2c af       	std	Y+60, r18	; 0x3c
    1008:	3d af       	std	Y+61, r19	; 0x3d
    100a:	4e af       	std	Y+62, r20	; 0x3e
    100c:	5f af       	std	Y+63, r21	; 0x3f
    100e:	25 97       	sbiw	r28, 0x05	; 5
    1010:	0d c0       	rjmp	.+26     	; 0x102c <__stack+0x7cd>
    1012:	66 24       	eor	r6, r6
    1014:	77 24       	eor	r7, r7
    1016:	43 01       	movw	r8, r6
    1018:	25 96       	adiw	r28, 0x05	; 5
    101a:	1c ae       	std	Y+60, r1	; 0x3c
    101c:	1d ae       	std	Y+61, r1	; 0x3d
    101e:	1e ae       	std	Y+62, r1	; 0x3e
    1020:	1f ae       	std	Y+63, r1	; 0x3f
    1022:	25 97       	sbiw	r28, 0x05	; 5
    1024:	03 c0       	rjmp	.+6      	; 0x102c <__stack+0x7cd>
    1026:	66 24       	eor	r6, r6
    1028:	77 24       	eor	r7, r7
    102a:	43 01       	movw	r8, r6
    102c:	fe 01       	movw	r30, r28
    102e:	b1 96       	adiw	r30, 0x21	; 33
    1030:	88 e0       	ldi	r24, 0x08	; 8
    1032:	df 01       	movw	r26, r30
    1034:	1d 92       	st	X+, r1
    1036:	8a 95       	dec	r24
    1038:	e9 f7       	brne	.-6      	; 0x1034 <__stack+0x7d5>
    103a:	25 96       	adiw	r28, 0x05	; 5
    103c:	ac ac       	ldd	r10, Y+60	; 0x3c
    103e:	bd ac       	ldd	r11, Y+61	; 0x3d
    1040:	ce ac       	ldd	r12, Y+62	; 0x3e
    1042:	df ac       	ldd	r13, Y+63	; 0x3f
    1044:	25 97       	sbiw	r28, 0x05	; 5
    1046:	a9 a2       	std	Y+33, r10	; 0x21
    1048:	ba a2       	std	Y+34, r11	; 0x22
    104a:	cb a2       	std	Y+35, r12	; 0x23
    104c:	dc a2       	std	Y+36, r13	; 0x24
    104e:	6d a2       	std	Y+37, r6	; 0x25
    1050:	7e a2       	std	Y+38, r7	; 0x26
    1052:	8f a2       	std	Y+39, r8	; 0x27
    1054:	98 a6       	std	Y+40, r9	; 0x28
    1056:	22 96       	adiw	r28, 0x02	; 2
    1058:	2f ad       	ldd	r18, Y+63	; 0x3f
    105a:	22 97       	sbiw	r28, 0x02	; 2
    105c:	3a a1       	ldd	r19, Y+34	; 0x22
    105e:	4b a1       	ldd	r20, Y+35	; 0x23
    1060:	5c a1       	ldd	r21, Y+36	; 0x24
    1062:	66 2d       	mov	r22, r6
    1064:	7e a1       	ldd	r23, Y+38	; 0x26
    1066:	df a0       	ldd	r13, Y+39	; 0x27
    1068:	98 a5       	ldd	r25, Y+40	; 0x28
    106a:	e1 96       	adiw	r28, 0x31	; 49
    106c:	ec ac       	ldd	r14, Y+60	; 0x3c
    106e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1070:	0e ad       	ldd	r16, Y+62	; 0x3e
    1072:	1f ad       	ldd	r17, Y+63	; 0x3f
    1074:	e1 97       	sbiw	r28, 0x31	; 49
    1076:	e1 14       	cp	r14, r1
    1078:	f1 04       	cpc	r15, r1
    107a:	01 05       	cpc	r16, r1
    107c:	11 05       	cpc	r17, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <__stack+0x823>
    1080:	56 c0       	rjmp	.+172    	; 0x112e <__stack+0x8cf>
    1082:	21 95       	neg	r18
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	12 16       	cp	r1, r18
    1088:	08 f0       	brcs	.+2      	; 0x108c <__stack+0x82d>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	31 95       	neg	r19
    108e:	e1 e0       	ldi	r30, 0x01	; 1
    1090:	13 16       	cp	r1, r19
    1092:	08 f0       	brcs	.+2      	; 0x1096 <__stack+0x837>
    1094:	e0 e0       	ldi	r30, 0x00	; 0
    1096:	93 2e       	mov	r9, r19
    1098:	98 1a       	sub	r9, r24
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	39 15       	cp	r19, r9
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <__stack+0x843>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	e8 2b       	or	r30, r24
    10a4:	41 95       	neg	r20
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	14 16       	cp	r1, r20
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__stack+0x84f>
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	a4 2e       	mov	r10, r20
    10b0:	ae 1a       	sub	r10, r30
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	4a 15       	cp	r20, r10
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <__stack+0x85b>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	f8 2b       	or	r31, r24
    10bc:	51 95       	neg	r21
    10be:	e1 e0       	ldi	r30, 0x01	; 1
    10c0:	15 16       	cp	r1, r21
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__stack+0x867>
    10c4:	e0 e0       	ldi	r30, 0x00	; 0
    10c6:	b5 2e       	mov	r11, r21
    10c8:	bf 1a       	sub	r11, r31
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	5b 15       	cp	r21, r11
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <__stack+0x873>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	e8 2b       	or	r30, r24
    10d4:	61 95       	neg	r22
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	16 16       	cp	r1, r22
    10da:	08 f0       	brcs	.+2      	; 0x10de <__stack+0x87f>
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	a6 2f       	mov	r26, r22
    10e0:	ae 1b       	sub	r26, r30
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	6a 17       	cp	r22, r26
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <__stack+0x88b>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	f8 2b       	or	r31, r24
    10ec:	71 95       	neg	r23
    10ee:	e1 e0       	ldi	r30, 0x01	; 1
    10f0:	17 16       	cp	r1, r23
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <__stack+0x897>
    10f4:	e0 e0       	ldi	r30, 0x00	; 0
    10f6:	c7 2e       	mov	r12, r23
    10f8:	cf 1a       	sub	r12, r31
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	7c 15       	cp	r23, r12
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <__stack+0x8a3>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	e8 2b       	or	r30, r24
    1104:	8d 2d       	mov	r24, r13
    1106:	81 95       	neg	r24
    1108:	f1 e0       	ldi	r31, 0x01	; 1
    110a:	18 16       	cp	r1, r24
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__stack+0x8b1>
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	d8 2e       	mov	r13, r24
    1112:	de 1a       	sub	r13, r30
    1114:	e1 e0       	ldi	r30, 0x01	; 1
    1116:	8d 15       	cp	r24, r13
    1118:	08 f0       	brcs	.+2      	; 0x111c <__stack+0x8bd>
    111a:	e0 e0       	ldi	r30, 0x00	; 0
    111c:	fe 2b       	or	r31, r30
    111e:	89 2f       	mov	r24, r25
    1120:	81 95       	neg	r24
    1122:	39 2d       	mov	r19, r9
    1124:	a5 01       	movw	r20, r10
    1126:	6a 2f       	mov	r22, r26
    1128:	7c 2d       	mov	r23, r12
    112a:	98 2f       	mov	r25, r24
    112c:	9f 1b       	sub	r25, r31
    112e:	8d 2d       	mov	r24, r13
    1130:	ce 58       	subi	r28, 0x8E	; 142
    1132:	df 4f       	sbci	r29, 0xFF	; 255
    1134:	e2 e1       	ldi	r30, 0x12	; 18
    1136:	0c 94 82 28 	jmp	0x5104	; 0x5104 <__epilogue_restores__>

0000113a <__moddi3>:
    113a:	a7 e7       	ldi	r26, 0x77	; 119
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 ea       	ldi	r30, 0xA3	; 163
    1140:	f8 e0       	ldi	r31, 0x08	; 8
    1142:	0c 94 66 28 	jmp	0x50cc	; 0x50cc <__prologue_saves__>
    1146:	98 2e       	mov	r9, r24
    1148:	89 2e       	mov	r8, r25
    114a:	71 2e       	mov	r7, r17
    114c:	88 e0       	ldi	r24, 0x08	; 8
    114e:	fe 01       	movw	r30, r28
    1150:	31 96       	adiw	r30, 0x01	; 1
    1152:	df 01       	movw	r26, r30
    1154:	68 2e       	mov	r6, r24
    1156:	1d 92       	st	X+, r1
    1158:	6a 94       	dec	r6
    115a:	e9 f7       	brne	.-6      	; 0x1156 <__moddi3+0x1c>
    115c:	29 83       	std	Y+1, r18	; 0x01
    115e:	3a 83       	std	Y+2, r19	; 0x02
    1160:	4b 83       	std	Y+3, r20	; 0x03
    1162:	5c 83       	std	Y+4, r21	; 0x04
    1164:	6d 83       	std	Y+5, r22	; 0x05
    1166:	7e 83       	std	Y+6, r23	; 0x06
    1168:	9f 82       	std	Y+7, r9	; 0x07
    116a:	98 87       	std	Y+8, r25	; 0x08
    116c:	fe 01       	movw	r30, r28
    116e:	39 96       	adiw	r30, 0x09	; 9
    1170:	df 01       	movw	r26, r30
    1172:	1d 92       	st	X+, r1
    1174:	8a 95       	dec	r24
    1176:	e9 f7       	brne	.-6      	; 0x1172 <__moddi3+0x38>
    1178:	a9 86       	std	Y+9, r10	; 0x09
    117a:	ba 86       	std	Y+10, r11	; 0x0a
    117c:	cb 86       	std	Y+11, r12	; 0x0b
    117e:	dc 86       	std	Y+12, r13	; 0x0c
    1180:	ed 86       	std	Y+13, r14	; 0x0d
    1182:	fe 86       	std	Y+14, r15	; 0x0e
    1184:	0f 87       	std	Y+15, r16	; 0x0f
    1186:	18 8b       	std	Y+16, r17	; 0x10
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	af 81       	ldd	r26, Y+7	; 0x07
    118e:	b8 85       	ldd	r27, Y+8	; 0x08
    1190:	b7 fd       	sbrc	r27, 7
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <__moddi3+0x68>
    1194:	e1 96       	adiw	r28, 0x31	; 49
    1196:	1c ae       	std	Y+60, r1	; 0x3c
    1198:	1d ae       	std	Y+61, r1	; 0x3d
    119a:	1e ae       	std	Y+62, r1	; 0x3e
    119c:	1f ae       	std	Y+63, r1	; 0x3f
    119e:	e1 97       	sbiw	r28, 0x31	; 49
    11a0:	64 c0       	rjmp	.+200    	; 0x126a <__moddi3+0x130>
    11a2:	21 95       	neg	r18
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	12 16       	cp	r1, r18
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <__moddi3+0x72>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	31 95       	neg	r19
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	13 16       	cp	r1, r19
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <__moddi3+0x7c>
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	b3 2f       	mov	r27, r19
    11b8:	b8 1b       	sub	r27, r24
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	3b 17       	cp	r19, r27
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <__moddi3+0x88>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	98 2b       	or	r25, r24
    11c4:	41 95       	neg	r20
    11c6:	31 e0       	ldi	r19, 0x01	; 1
    11c8:	14 16       	cp	r1, r20
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <__moddi3+0x94>
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	a4 2f       	mov	r26, r20
    11d0:	a9 1b       	sub	r26, r25
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	4a 17       	cp	r20, r26
    11d6:	08 f0       	brcs	.+2      	; 0x11da <__moddi3+0xa0>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	38 2b       	or	r19, r24
    11dc:	51 95       	neg	r21
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	15 16       	cp	r1, r21
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <__moddi3+0xac>
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	f5 2f       	mov	r31, r21
    11e8:	f3 1b       	sub	r31, r19
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	5f 17       	cp	r21, r31
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <__moddi3+0xb8>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	98 2b       	or	r25, r24
    11f4:	61 95       	neg	r22
    11f6:	31 e0       	ldi	r19, 0x01	; 1
    11f8:	16 16       	cp	r1, r22
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <__moddi3+0xc4>
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	e6 2f       	mov	r30, r22
    1200:	e9 1b       	sub	r30, r25
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	6e 17       	cp	r22, r30
    1206:	08 f0       	brcs	.+2      	; 0x120a <__moddi3+0xd0>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	38 2b       	or	r19, r24
    120c:	71 95       	neg	r23
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	17 16       	cp	r1, r23
    1212:	08 f0       	brcs	.+2      	; 0x1216 <__moddi3+0xdc>
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	57 2f       	mov	r21, r23
    1218:	53 1b       	sub	r21, r19
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	75 17       	cp	r23, r21
    121e:	08 f0       	brcs	.+2      	; 0x1222 <__moddi3+0xe8>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	48 2b       	or	r20, r24
    1224:	89 2d       	mov	r24, r9
    1226:	81 95       	neg	r24
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	18 16       	cp	r1, r24
    122c:	08 f0       	brcs	.+2      	; 0x1230 <__moddi3+0xf6>
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	68 2e       	mov	r6, r24
    1232:	64 1a       	sub	r6, r20
    1234:	46 2d       	mov	r20, r6
    1236:	31 e0       	ldi	r19, 0x01	; 1
    1238:	86 15       	cp	r24, r6
    123a:	08 f0       	brcs	.+2      	; 0x123e <__moddi3+0x104>
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	93 2b       	or	r25, r19
    1240:	88 2d       	mov	r24, r8
    1242:	81 95       	neg	r24
    1244:	89 1b       	sub	r24, r25
    1246:	29 83       	std	Y+1, r18	; 0x01
    1248:	ba 83       	std	Y+2, r27	; 0x02
    124a:	ab 83       	std	Y+3, r26	; 0x03
    124c:	fc 83       	std	Y+4, r31	; 0x04
    124e:	ed 83       	std	Y+5, r30	; 0x05
    1250:	5e 83       	std	Y+6, r21	; 0x06
    1252:	4f 83       	std	Y+7, r20	; 0x07
    1254:	88 87       	std	Y+8, r24	; 0x08
    1256:	2f ef       	ldi	r18, 0xFF	; 255
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f ef       	ldi	r20, 0xFF	; 255
    125c:	5f ef       	ldi	r21, 0xFF	; 255
    125e:	e1 96       	adiw	r28, 0x31	; 49
    1260:	2c af       	std	Y+60, r18	; 0x3c
    1262:	3d af       	std	Y+61, r19	; 0x3d
    1264:	4e af       	std	Y+62, r20	; 0x3e
    1266:	5f af       	std	Y+63, r21	; 0x3f
    1268:	e1 97       	sbiw	r28, 0x31	; 49
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	af 85       	ldd	r26, Y+15	; 0x0f
    1270:	b8 89       	ldd	r27, Y+16	; 0x10
    1272:	b7 ff       	sbrs	r27, 7
    1274:	5a c0       	rjmp	.+180    	; 0x132a <__moddi3+0x1f0>
    1276:	a1 94       	neg	r10
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	1a 14       	cp	r1, r10
    127c:	08 f0       	brcs	.+2      	; 0x1280 <__moddi3+0x146>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	b1 94       	neg	r11
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	1b 14       	cp	r1, r11
    1286:	08 f0       	brcs	.+2      	; 0x128a <__moddi3+0x150>
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	6b 2d       	mov	r22, r11
    128c:	68 1b       	sub	r22, r24
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	b6 16       	cp	r11, r22
    1292:	08 f0       	brcs	.+2      	; 0x1296 <__moddi3+0x15c>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	98 2b       	or	r25, r24
    1298:	c1 94       	neg	r12
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	1c 14       	cp	r1, r12
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <__moddi3+0x168>
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	5c 2d       	mov	r21, r12
    12a4:	59 1b       	sub	r21, r25
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	c5 16       	cp	r12, r21
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <__moddi3+0x174>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	28 2b       	or	r18, r24
    12b0:	d1 94       	neg	r13
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	1d 14       	cp	r1, r13
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <__moddi3+0x180>
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	4d 2d       	mov	r20, r13
    12bc:	42 1b       	sub	r20, r18
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	d4 16       	cp	r13, r20
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <__moddi3+0x18c>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	98 2b       	or	r25, r24
    12c8:	e1 94       	neg	r14
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	1e 14       	cp	r1, r14
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <__moddi3+0x198>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3e 2d       	mov	r19, r14
    12d4:	39 1b       	sub	r19, r25
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	e3 16       	cp	r14, r19
    12da:	08 f0       	brcs	.+2      	; 0x12de <__moddi3+0x1a4>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	28 2b       	or	r18, r24
    12e0:	f1 94       	neg	r15
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	1f 14       	cp	r1, r15
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <__moddi3+0x1b0>
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	7f 2d       	mov	r23, r15
    12ec:	72 1b       	sub	r23, r18
    12ee:	27 2f       	mov	r18, r23
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	f7 16       	cp	r15, r23
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <__moddi3+0x1be>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	98 2b       	or	r25, r24
    12fa:	01 95       	neg	r16
    12fc:	11 e0       	ldi	r17, 0x01	; 1
    12fe:	10 16       	cp	r1, r16
    1300:	08 f0       	brcs	.+2      	; 0x1304 <__moddi3+0x1ca>
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	80 2f       	mov	r24, r16
    1306:	89 1b       	sub	r24, r25
    1308:	98 2f       	mov	r25, r24
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	09 17       	cp	r16, r25
    130e:	08 f0       	brcs	.+2      	; 0x1312 <__moddi3+0x1d8>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	18 2b       	or	r17, r24
    1314:	87 2d       	mov	r24, r7
    1316:	81 95       	neg	r24
    1318:	81 1b       	sub	r24, r17
    131a:	a9 86       	std	Y+9, r10	; 0x09
    131c:	6a 87       	std	Y+10, r22	; 0x0a
    131e:	5b 87       	std	Y+11, r21	; 0x0b
    1320:	4c 87       	std	Y+12, r20	; 0x0c
    1322:	3d 87       	std	Y+13, r19	; 0x0d
    1324:	2e 87       	std	Y+14, r18	; 0x0e
    1326:	9f 87       	std	Y+15, r25	; 0x0f
    1328:	88 8b       	std	Y+16, r24	; 0x10
    132a:	99 81       	ldd	r25, Y+1	; 0x01
    132c:	2a 81       	ldd	r18, Y+2	; 0x02
    132e:	3b 81       	ldd	r19, Y+3	; 0x03
    1330:	4c 81       	ldd	r20, Y+4	; 0x04
    1332:	5d 81       	ldd	r21, Y+5	; 0x05
    1334:	6e 81       	ldd	r22, Y+6	; 0x06
    1336:	7f 81       	ldd	r23, Y+7	; 0x07
    1338:	a8 85       	ldd	r26, Y+8	; 0x08
    133a:	b9 85       	ldd	r27, Y+9	; 0x09
    133c:	1a 85       	ldd	r17, Y+10	; 0x0a
    133e:	0b 85       	ldd	r16, Y+11	; 0x0b
    1340:	fc 84       	ldd	r15, Y+12	; 0x0c
    1342:	ed 84       	ldd	r14, Y+13	; 0x0d
    1344:	de 84       	ldd	r13, Y+14	; 0x0e
    1346:	cf 84       	ldd	r12, Y+15	; 0x0f
    1348:	b8 88       	ldd	r11, Y+16	; 0x10
    134a:	88 e0       	ldi	r24, 0x08	; 8
    134c:	e9 e1       	ldi	r30, 0x19	; 25
    134e:	8e 2e       	mov	r8, r30
    1350:	91 2c       	mov	r9, r1
    1352:	8c 0e       	add	r8, r28
    1354:	9d 1e       	adc	r9, r29
    1356:	f4 01       	movw	r30, r8
    1358:	68 2e       	mov	r6, r24
    135a:	11 92       	st	Z+, r1
    135c:	6a 94       	dec	r6
    135e:	e9 f7       	brne	.-6      	; 0x135a <__moddi3+0x220>
    1360:	99 8f       	std	Y+25, r25	; 0x19
    1362:	2a 8f       	std	Y+26, r18	; 0x1a
    1364:	3b 8f       	std	Y+27, r19	; 0x1b
    1366:	4c 8f       	std	Y+28, r20	; 0x1c
    1368:	5d 8f       	std	Y+29, r21	; 0x1d
    136a:	6e 8f       	std	Y+30, r22	; 0x1e
    136c:	7f 8f       	std	Y+31, r23	; 0x1f
    136e:	a8 a3       	std	Y+32, r26	; 0x20
    1370:	9e 01       	movw	r18, r28
    1372:	2f 5d       	subi	r18, 0xDF	; 223
    1374:	3f 4f       	sbci	r19, 0xFF	; 255
    1376:	f9 01       	movw	r30, r18
    1378:	11 92       	st	Z+, r1
    137a:	8a 95       	dec	r24
    137c:	e9 f7       	brne	.-6      	; 0x1378 <__moddi3+0x23e>
    137e:	b9 a3       	std	Y+33, r27	; 0x21
    1380:	1a a3       	std	Y+34, r17	; 0x22
    1382:	0b a3       	std	Y+35, r16	; 0x23
    1384:	fc a2       	std	Y+36, r15	; 0x24
    1386:	ed a2       	std	Y+37, r14	; 0x25
    1388:	de a2       	std	Y+38, r13	; 0x26
    138a:	cf a2       	std	Y+39, r12	; 0x27
    138c:	b8 a6       	std	Y+40, r11	; 0x28
    138e:	29 a0       	ldd	r2, Y+33	; 0x21
    1390:	3a a0       	ldd	r3, Y+34	; 0x22
    1392:	4b a0       	ldd	r4, Y+35	; 0x23
    1394:	5c a0       	ldd	r5, Y+36	; 0x24
    1396:	ad a0       	ldd	r10, Y+37	; 0x25
    1398:	be a0       	ldd	r11, Y+38	; 0x26
    139a:	cf a0       	ldd	r12, Y+39	; 0x27
    139c:	d8 a4       	ldd	r13, Y+40	; 0x28
    139e:	49 8d       	ldd	r20, Y+25	; 0x19
    13a0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    13a2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    13a4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    13a6:	e5 96       	adiw	r28, 0x35	; 53
    13a8:	4f af       	std	Y+63, r20	; 0x3f
    13aa:	e5 97       	sbiw	r28, 0x35	; 53
    13ac:	e6 96       	adiw	r28, 0x36	; 54
    13ae:	5f af       	std	Y+63, r21	; 0x3f
    13b0:	e6 97       	sbiw	r28, 0x36	; 54
    13b2:	e7 96       	adiw	r28, 0x37	; 55
    13b4:	6f af       	std	Y+63, r22	; 0x3f
    13b6:	e7 97       	sbiw	r28, 0x37	; 55
    13b8:	e8 96       	adiw	r28, 0x38	; 56
    13ba:	7f af       	std	Y+63, r23	; 0x3f
    13bc:	e8 97       	sbiw	r28, 0x38	; 56
    13be:	e8 96       	adiw	r28, 0x38	; 56
    13c0:	6c ac       	ldd	r6, Y+60	; 0x3c
    13c2:	7d ac       	ldd	r7, Y+61	; 0x3d
    13c4:	8e ac       	ldd	r8, Y+62	; 0x3e
    13c6:	9f ac       	ldd	r9, Y+63	; 0x3f
    13c8:	e8 97       	sbiw	r28, 0x38	; 56
    13ca:	2d 96       	adiw	r28, 0x0d	; 13
    13cc:	6c ae       	std	Y+60, r6	; 0x3c
    13ce:	7d ae       	std	Y+61, r7	; 0x3d
    13d0:	8e ae       	std	Y+62, r8	; 0x3e
    13d2:	9f ae       	std	Y+63, r9	; 0x3f
    13d4:	2d 97       	sbiw	r28, 0x0d	; 13
    13d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13da:	2f 8d       	ldd	r18, Y+31	; 0x1f
    13dc:	38 a1       	ldd	r19, Y+32	; 0x20
    13de:	3c 01       	movw	r6, r24
    13e0:	49 01       	movw	r8, r18
    13e2:	61 96       	adiw	r28, 0x11	; 17
    13e4:	6c ae       	std	Y+60, r6	; 0x3c
    13e6:	7d ae       	std	Y+61, r7	; 0x3d
    13e8:	8e ae       	std	Y+62, r8	; 0x3e
    13ea:	9f ae       	std	Y+63, r9	; 0x3f
    13ec:	61 97       	sbiw	r28, 0x11	; 17
    13ee:	a1 14       	cp	r10, r1
    13f0:	b1 04       	cpc	r11, r1
    13f2:	c1 04       	cpc	r12, r1
    13f4:	d1 04       	cpc	r13, r1
    13f6:	09 f0       	breq	.+2      	; 0x13fa <__moddi3+0x2c0>
    13f8:	28 c3       	rjmp	.+1616   	; 0x1a4a <__moddi3+0x910>
    13fa:	62 14       	cp	r6, r2
    13fc:	73 04       	cpc	r7, r3
    13fe:	84 04       	cpc	r8, r4
    1400:	95 04       	cpc	r9, r5
    1402:	08 f0       	brcs	.+2      	; 0x1406 <__moddi3+0x2cc>
    1404:	0e c1       	rjmp	.+540    	; 0x1622 <__moddi3+0x4e8>
    1406:	00 e0       	ldi	r16, 0x00	; 0
    1408:	20 16       	cp	r2, r16
    140a:	00 e0       	ldi	r16, 0x00	; 0
    140c:	30 06       	cpc	r3, r16
    140e:	01 e0       	ldi	r16, 0x01	; 1
    1410:	40 06       	cpc	r4, r16
    1412:	00 e0       	ldi	r16, 0x00	; 0
    1414:	50 06       	cpc	r5, r16
    1416:	88 f4       	brcc	.+34     	; 0x143a <__moddi3+0x300>
    1418:	1f ef       	ldi	r17, 0xFF	; 255
    141a:	21 16       	cp	r2, r17
    141c:	31 04       	cpc	r3, r1
    141e:	41 04       	cpc	r4, r1
    1420:	51 04       	cpc	r5, r1
    1422:	39 f0       	breq	.+14     	; 0x1432 <__moddi3+0x2f8>
    1424:	30 f0       	brcs	.+12     	; 0x1432 <__moddi3+0x2f8>
    1426:	88 e0       	ldi	r24, 0x08	; 8
    1428:	e8 2e       	mov	r14, r24
    142a:	f1 2c       	mov	r15, r1
    142c:	01 2d       	mov	r16, r1
    142e:	11 2d       	mov	r17, r1
    1430:	18 c0       	rjmp	.+48     	; 0x1462 <__moddi3+0x328>
    1432:	ee 24       	eor	r14, r14
    1434:	ff 24       	eor	r15, r15
    1436:	87 01       	movw	r16, r14
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <__moddi3+0x328>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	22 16       	cp	r2, r18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	32 06       	cpc	r3, r18
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	42 06       	cpc	r4, r18
    1446:	21 e0       	ldi	r18, 0x01	; 1
    1448:	52 06       	cpc	r5, r18
    144a:	30 f0       	brcs	.+12     	; 0x1458 <__moddi3+0x31e>
    144c:	b8 e1       	ldi	r27, 0x18	; 24
    144e:	eb 2e       	mov	r14, r27
    1450:	f1 2c       	mov	r15, r1
    1452:	01 2d       	mov	r16, r1
    1454:	11 2d       	mov	r17, r1
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <__moddi3+0x328>
    1458:	a0 e1       	ldi	r26, 0x10	; 16
    145a:	ea 2e       	mov	r14, r26
    145c:	f1 2c       	mov	r15, r1
    145e:	01 2d       	mov	r16, r1
    1460:	11 2d       	mov	r17, r1
    1462:	d2 01       	movw	r26, r4
    1464:	c1 01       	movw	r24, r2
    1466:	0e 2c       	mov	r0, r14
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__moddi3+0x338>
    146a:	b6 95       	lsr	r27
    146c:	a7 95       	ror	r26
    146e:	97 95       	ror	r25
    1470:	87 95       	ror	r24
    1472:	0a 94       	dec	r0
    1474:	d2 f7       	brpl	.-12     	; 0x146a <__moddi3+0x330>
    1476:	8c 55       	subi	r24, 0x5C	; 92
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	dc 01       	movw	r26, r24
    147c:	2c 91       	ld	r18, X
    147e:	80 e2       	ldi	r24, 0x20	; 32
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e0       	ldi	r26, 0x00	; 0
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	8e 19       	sub	r24, r14
    1488:	9f 09       	sbc	r25, r15
    148a:	a0 0b       	sbc	r26, r16
    148c:	b1 0b       	sbc	r27, r17
    148e:	5c 01       	movw	r10, r24
    1490:	6d 01       	movw	r12, r26
    1492:	a2 1a       	sub	r10, r18
    1494:	b1 08       	sbc	r11, r1
    1496:	c1 08       	sbc	r12, r1
    1498:	d1 08       	sbc	r13, r1
    149a:	65 96       	adiw	r28, 0x15	; 21
    149c:	ac ae       	std	Y+60, r10	; 0x3c
    149e:	bd ae       	std	Y+61, r11	; 0x3d
    14a0:	ce ae       	std	Y+62, r12	; 0x3e
    14a2:	df ae       	std	Y+63, r13	; 0x3f
    14a4:	65 97       	sbiw	r28, 0x15	; 21
    14a6:	a1 14       	cp	r10, r1
    14a8:	b1 04       	cpc	r11, r1
    14aa:	c1 04       	cpc	r12, r1
    14ac:	d1 04       	cpc	r13, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <__moddi3+0x378>
    14b0:	45 c0       	rjmp	.+138    	; 0x153c <__moddi3+0x402>
    14b2:	62 96       	adiw	r28, 0x12	; 18
    14b4:	6f ad       	ldd	r22, Y+63	; 0x3f
    14b6:	62 97       	sbiw	r28, 0x12	; 18
    14b8:	06 2e       	mov	r0, r22
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <__moddi3+0x38a>
    14bc:	22 0c       	add	r2, r2
    14be:	33 1c       	adc	r3, r3
    14c0:	44 1c       	adc	r4, r4
    14c2:	55 1c       	adc	r5, r5
    14c4:	0a 94       	dec	r0
    14c6:	d2 f7       	brpl	.-12     	; 0x14bc <__moddi3+0x382>
    14c8:	a4 01       	movw	r20, r8
    14ca:	93 01       	movw	r18, r6
    14cc:	06 2e       	mov	r0, r22
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <__moddi3+0x39e>
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	44 1f       	adc	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	0a 94       	dec	r0
    14da:	d2 f7       	brpl	.-12     	; 0x14d0 <__moddi3+0x396>
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	8a 19       	sub	r24, r10
    14e2:	9b 09       	sbc	r25, r11
    14e4:	e8 96       	adiw	r28, 0x38	; 56
    14e6:	cc ac       	ldd	r12, Y+60	; 0x3c
    14e8:	dd ac       	ldd	r13, Y+61	; 0x3d
    14ea:	ee ac       	ldd	r14, Y+62	; 0x3e
    14ec:	ff ac       	ldd	r15, Y+63	; 0x3f
    14ee:	e8 97       	sbiw	r28, 0x38	; 56
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <__moddi3+0x3c0>
    14f2:	f6 94       	lsr	r15
    14f4:	e7 94       	ror	r14
    14f6:	d7 94       	ror	r13
    14f8:	c7 94       	ror	r12
    14fa:	8a 95       	dec	r24
    14fc:	d2 f7       	brpl	.-12     	; 0x14f2 <__moddi3+0x3b8>
    14fe:	87 01       	movw	r16, r14
    1500:	76 01       	movw	r14, r12
    1502:	e2 2a       	or	r14, r18
    1504:	f3 2a       	or	r15, r19
    1506:	04 2b       	or	r16, r20
    1508:	15 2b       	or	r17, r21
    150a:	61 96       	adiw	r28, 0x11	; 17
    150c:	ec ae       	std	Y+60, r14	; 0x3c
    150e:	fd ae       	std	Y+61, r15	; 0x3d
    1510:	0e af       	std	Y+62, r16	; 0x3e
    1512:	1f af       	std	Y+63, r17	; 0x3f
    1514:	61 97       	sbiw	r28, 0x11	; 17
    1516:	e8 96       	adiw	r28, 0x38	; 56
    1518:	0c ad       	ldd	r16, Y+60	; 0x3c
    151a:	1d ad       	ldd	r17, Y+61	; 0x3d
    151c:	2e ad       	ldd	r18, Y+62	; 0x3e
    151e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1520:	e8 97       	sbiw	r28, 0x38	; 56
    1522:	04 c0       	rjmp	.+8      	; 0x152c <__moddi3+0x3f2>
    1524:	00 0f       	add	r16, r16
    1526:	11 1f       	adc	r17, r17
    1528:	22 1f       	adc	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	6a 95       	dec	r22
    152e:	d2 f7       	brpl	.-12     	; 0x1524 <__moddi3+0x3ea>
    1530:	2d 96       	adiw	r28, 0x0d	; 13
    1532:	0c af       	std	Y+60, r16	; 0x3c
    1534:	1d af       	std	Y+61, r17	; 0x3d
    1536:	2e af       	std	Y+62, r18	; 0x3e
    1538:	3f af       	std	Y+63, r19	; 0x3f
    153a:	2d 97       	sbiw	r28, 0x0d	; 13
    153c:	32 01       	movw	r6, r4
    153e:	88 24       	eor	r8, r8
    1540:	99 24       	eor	r9, r9
    1542:	a2 01       	movw	r20, r4
    1544:	91 01       	movw	r18, r2
    1546:	40 70       	andi	r20, 0x00	; 0
    1548:	50 70       	andi	r21, 0x00	; 0
    154a:	69 96       	adiw	r28, 0x19	; 25
    154c:	2c af       	std	Y+60, r18	; 0x3c
    154e:	3d af       	std	Y+61, r19	; 0x3d
    1550:	4e af       	std	Y+62, r20	; 0x3e
    1552:	5f af       	std	Y+63, r21	; 0x3f
    1554:	69 97       	sbiw	r28, 0x19	; 25
    1556:	61 96       	adiw	r28, 0x11	; 17
    1558:	6c ad       	ldd	r22, Y+60	; 0x3c
    155a:	7d ad       	ldd	r23, Y+61	; 0x3d
    155c:	8e ad       	ldd	r24, Y+62	; 0x3e
    155e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1560:	61 97       	sbiw	r28, 0x11	; 17
    1562:	a4 01       	movw	r20, r8
    1564:	93 01       	movw	r18, r6
    1566:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    156a:	7b 01       	movw	r14, r22
    156c:	8c 01       	movw	r16, r24
    156e:	61 96       	adiw	r28, 0x11	; 17
    1570:	6c ad       	ldd	r22, Y+60	; 0x3c
    1572:	7d ad       	ldd	r23, Y+61	; 0x3d
    1574:	8e ad       	ldd	r24, Y+62	; 0x3e
    1576:	9f ad       	ldd	r25, Y+63	; 0x3f
    1578:	61 97       	sbiw	r28, 0x11	; 17
    157a:	a4 01       	movw	r20, r8
    157c:	93 01       	movw	r18, r6
    157e:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1582:	ca 01       	movw	r24, r20
    1584:	b9 01       	movw	r22, r18
    1586:	69 96       	adiw	r28, 0x19	; 25
    1588:	2c ad       	ldd	r18, Y+60	; 0x3c
    158a:	3d ad       	ldd	r19, Y+61	; 0x3d
    158c:	4e ad       	ldd	r20, Y+62	; 0x3e
    158e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1590:	69 97       	sbiw	r28, 0x19	; 25
    1592:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	87 01       	movw	r16, r14
    159c:	ff 24       	eor	r15, r15
    159e:	ee 24       	eor	r14, r14
    15a0:	2d 96       	adiw	r28, 0x0d	; 13
    15a2:	ac ac       	ldd	r10, Y+60	; 0x3c
    15a4:	bd ac       	ldd	r11, Y+61	; 0x3d
    15a6:	ce ac       	ldd	r12, Y+62	; 0x3e
    15a8:	df ac       	ldd	r13, Y+63	; 0x3f
    15aa:	2d 97       	sbiw	r28, 0x0d	; 13
    15ac:	c6 01       	movw	r24, r12
    15ae:	aa 27       	eor	r26, r26
    15b0:	bb 27       	eor	r27, r27
    15b2:	57 01       	movw	r10, r14
    15b4:	68 01       	movw	r12, r16
    15b6:	a8 2a       	or	r10, r24
    15b8:	b9 2a       	or	r11, r25
    15ba:	ca 2a       	or	r12, r26
    15bc:	db 2a       	or	r13, r27
    15be:	a2 16       	cp	r10, r18
    15c0:	b3 06       	cpc	r11, r19
    15c2:	c4 06       	cpc	r12, r20
    15c4:	d5 06       	cpc	r13, r21
    15c6:	90 f4       	brcc	.+36     	; 0x15ec <__moddi3+0x4b2>
    15c8:	a2 0c       	add	r10, r2
    15ca:	b3 1c       	adc	r11, r3
    15cc:	c4 1c       	adc	r12, r4
    15ce:	d5 1c       	adc	r13, r5
    15d0:	a2 14       	cp	r10, r2
    15d2:	b3 04       	cpc	r11, r3
    15d4:	c4 04       	cpc	r12, r4
    15d6:	d5 04       	cpc	r13, r5
    15d8:	48 f0       	brcs	.+18     	; 0x15ec <__moddi3+0x4b2>
    15da:	a2 16       	cp	r10, r18
    15dc:	b3 06       	cpc	r11, r19
    15de:	c4 06       	cpc	r12, r20
    15e0:	d5 06       	cpc	r13, r21
    15e2:	20 f4       	brcc	.+8      	; 0x15ec <__moddi3+0x4b2>
    15e4:	a2 0c       	add	r10, r2
    15e6:	b3 1c       	adc	r11, r3
    15e8:	c4 1c       	adc	r12, r4
    15ea:	d5 1c       	adc	r13, r5
    15ec:	a2 1a       	sub	r10, r18
    15ee:	b3 0a       	sbc	r11, r19
    15f0:	c4 0a       	sbc	r12, r20
    15f2:	d5 0a       	sbc	r13, r21
    15f4:	c6 01       	movw	r24, r12
    15f6:	b5 01       	movw	r22, r10
    15f8:	a4 01       	movw	r20, r8
    15fa:	93 01       	movw	r18, r6
    15fc:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1600:	7b 01       	movw	r14, r22
    1602:	8c 01       	movw	r16, r24
    1604:	c6 01       	movw	r24, r12
    1606:	b5 01       	movw	r22, r10
    1608:	a4 01       	movw	r20, r8
    160a:	93 01       	movw	r18, r6
    160c:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1610:	ca 01       	movw	r24, r20
    1612:	b9 01       	movw	r22, r18
    1614:	69 96       	adiw	r28, 0x19	; 25
    1616:	2c ad       	ldd	r18, Y+60	; 0x3c
    1618:	3d ad       	ldd	r19, Y+61	; 0x3d
    161a:	4e ad       	ldd	r20, Y+62	; 0x3e
    161c:	5f ad       	ldd	r21, Y+63	; 0x3f
    161e:	69 97       	sbiw	r28, 0x19	; 25
    1620:	c8 c1       	rjmp	.+912    	; 0x19b2 <__moddi3+0x878>
    1622:	21 14       	cp	r2, r1
    1624:	31 04       	cpc	r3, r1
    1626:	41 04       	cpc	r4, r1
    1628:	51 04       	cpc	r5, r1
    162a:	71 f4       	brne	.+28     	; 0x1648 <__moddi3+0x50e>
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1640:	c9 01       	movw	r24, r18
    1642:	da 01       	movw	r26, r20
    1644:	1c 01       	movw	r2, r24
    1646:	2d 01       	movw	r4, r26
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	20 16       	cp	r2, r16
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	30 06       	cpc	r3, r16
    1650:	01 e0       	ldi	r16, 0x01	; 1
    1652:	40 06       	cpc	r4, r16
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	50 06       	cpc	r5, r16
    1658:	88 f4       	brcc	.+34     	; 0x167c <__moddi3+0x542>
    165a:	1f ef       	ldi	r17, 0xFF	; 255
    165c:	21 16       	cp	r2, r17
    165e:	31 04       	cpc	r3, r1
    1660:	41 04       	cpc	r4, r1
    1662:	51 04       	cpc	r5, r1
    1664:	39 f0       	breq	.+14     	; 0x1674 <__moddi3+0x53a>
    1666:	30 f0       	brcs	.+12     	; 0x1674 <__moddi3+0x53a>
    1668:	68 e0       	ldi	r22, 0x08	; 8
    166a:	e6 2e       	mov	r14, r22
    166c:	f1 2c       	mov	r15, r1
    166e:	01 2d       	mov	r16, r1
    1670:	11 2d       	mov	r17, r1
    1672:	18 c0       	rjmp	.+48     	; 0x16a4 <__moddi3+0x56a>
    1674:	ee 24       	eor	r14, r14
    1676:	ff 24       	eor	r15, r15
    1678:	87 01       	movw	r16, r14
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <__moddi3+0x56a>
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	22 16       	cp	r2, r18
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	32 06       	cpc	r3, r18
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	42 06       	cpc	r4, r18
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	52 06       	cpc	r5, r18
    168c:	30 f0       	brcs	.+12     	; 0x169a <__moddi3+0x560>
    168e:	58 e1       	ldi	r21, 0x18	; 24
    1690:	e5 2e       	mov	r14, r21
    1692:	f1 2c       	mov	r15, r1
    1694:	01 2d       	mov	r16, r1
    1696:	11 2d       	mov	r17, r1
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <__moddi3+0x56a>
    169a:	40 e1       	ldi	r20, 0x10	; 16
    169c:	e4 2e       	mov	r14, r20
    169e:	f1 2c       	mov	r15, r1
    16a0:	01 2d       	mov	r16, r1
    16a2:	11 2d       	mov	r17, r1
    16a4:	d2 01       	movw	r26, r4
    16a6:	c1 01       	movw	r24, r2
    16a8:	0e 2c       	mov	r0, r14
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <__moddi3+0x57a>
    16ac:	b6 95       	lsr	r27
    16ae:	a7 95       	ror	r26
    16b0:	97 95       	ror	r25
    16b2:	87 95       	ror	r24
    16b4:	0a 94       	dec	r0
    16b6:	d2 f7       	brpl	.-12     	; 0x16ac <__moddi3+0x572>
    16b8:	8c 55       	subi	r24, 0x5C	; 92
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	dc 01       	movw	r26, r24
    16be:	2c 91       	ld	r18, X
    16c0:	30 e2       	ldi	r19, 0x20	; 32
    16c2:	a3 2e       	mov	r10, r19
    16c4:	b1 2c       	mov	r11, r1
    16c6:	c1 2c       	mov	r12, r1
    16c8:	d1 2c       	mov	r13, r1
    16ca:	d6 01       	movw	r26, r12
    16cc:	c5 01       	movw	r24, r10
    16ce:	8e 19       	sub	r24, r14
    16d0:	9f 09       	sbc	r25, r15
    16d2:	a0 0b       	sbc	r26, r16
    16d4:	b1 0b       	sbc	r27, r17
    16d6:	7c 01       	movw	r14, r24
    16d8:	8d 01       	movw	r16, r26
    16da:	e2 1a       	sub	r14, r18
    16dc:	f1 08       	sbc	r15, r1
    16de:	01 09       	sbc	r16, r1
    16e0:	11 09       	sbc	r17, r1
    16e2:	65 96       	adiw	r28, 0x15	; 21
    16e4:	ec ae       	std	Y+60, r14	; 0x3c
    16e6:	fd ae       	std	Y+61, r15	; 0x3d
    16e8:	0e af       	std	Y+62, r16	; 0x3e
    16ea:	1f af       	std	Y+63, r17	; 0x3f
    16ec:	65 97       	sbiw	r28, 0x15	; 21
    16ee:	e1 14       	cp	r14, r1
    16f0:	f1 04       	cpc	r15, r1
    16f2:	01 05       	cpc	r16, r1
    16f4:	11 05       	cpc	r17, r1
    16f6:	39 f4       	brne	.+14     	; 0x1706 <__moddi3+0x5cc>
    16f8:	64 01       	movw	r12, r8
    16fa:	53 01       	movw	r10, r6
    16fc:	a2 18       	sub	r10, r2
    16fe:	b3 08       	sbc	r11, r3
    1700:	c4 08       	sbc	r12, r4
    1702:	d5 08       	sbc	r13, r5
    1704:	ec c0       	rjmp	.+472    	; 0x18de <__moddi3+0x7a4>
    1706:	62 96       	adiw	r28, 0x12	; 18
    1708:	ff ac       	ldd	r15, Y+63	; 0x3f
    170a:	62 97       	sbiw	r28, 0x12	; 18
    170c:	e4 96       	adiw	r28, 0x34	; 52
    170e:	ff ae       	std	Y+63, r15	; 0x3f
    1710:	e4 97       	sbiw	r28, 0x34	; 52
    1712:	0f 2c       	mov	r0, r15
    1714:	04 c0       	rjmp	.+8      	; 0x171e <__moddi3+0x5e4>
    1716:	22 0c       	add	r2, r2
    1718:	33 1c       	adc	r3, r3
    171a:	44 1c       	adc	r4, r4
    171c:	55 1c       	adc	r5, r5
    171e:	0a 94       	dec	r0
    1720:	d2 f7       	brpl	.-12     	; 0x1716 <__moddi3+0x5dc>
    1722:	8a 2d       	mov	r24, r10
    1724:	8f 19       	sub	r24, r15
    1726:	64 01       	movw	r12, r8
    1728:	53 01       	movw	r10, r6
    172a:	08 2e       	mov	r0, r24
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <__moddi3+0x5fc>
    172e:	d6 94       	lsr	r13
    1730:	c7 94       	ror	r12
    1732:	b7 94       	ror	r11
    1734:	a7 94       	ror	r10
    1736:	0a 94       	dec	r0
    1738:	d2 f7       	brpl	.-12     	; 0x172e <__moddi3+0x5f4>
    173a:	a4 01       	movw	r20, r8
    173c:	93 01       	movw	r18, r6
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <__moddi3+0x60e>
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	44 1f       	adc	r20, r20
    1746:	55 1f       	adc	r21, r21
    1748:	fa 94       	dec	r15
    174a:	d2 f7       	brpl	.-12     	; 0x1740 <__moddi3+0x606>
    174c:	e8 96       	adiw	r28, 0x38	; 56
    174e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1750:	7d ac       	ldd	r7, Y+61	; 0x3d
    1752:	8e ac       	ldd	r8, Y+62	; 0x3e
    1754:	9f ac       	ldd	r9, Y+63	; 0x3f
    1756:	e8 97       	sbiw	r28, 0x38	; 56
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <__moddi3+0x628>
    175a:	96 94       	lsr	r9
    175c:	87 94       	ror	r8
    175e:	77 94       	ror	r7
    1760:	67 94       	ror	r6
    1762:	8a 95       	dec	r24
    1764:	d2 f7       	brpl	.-12     	; 0x175a <__moddi3+0x620>
    1766:	84 01       	movw	r16, r8
    1768:	73 01       	movw	r14, r6
    176a:	e2 2a       	or	r14, r18
    176c:	f3 2a       	or	r15, r19
    176e:	04 2b       	or	r16, r20
    1770:	15 2b       	or	r17, r21
    1772:	29 96       	adiw	r28, 0x09	; 9
    1774:	ec ae       	std	Y+60, r14	; 0x3c
    1776:	fd ae       	std	Y+61, r15	; 0x3d
    1778:	0e af       	std	Y+62, r16	; 0x3e
    177a:	1f af       	std	Y+63, r17	; 0x3f
    177c:	29 97       	sbiw	r28, 0x09	; 9
    177e:	32 01       	movw	r6, r4
    1780:	88 24       	eor	r8, r8
    1782:	99 24       	eor	r9, r9
    1784:	92 01       	movw	r18, r4
    1786:	81 01       	movw	r16, r2
    1788:	20 70       	andi	r18, 0x00	; 0
    178a:	30 70       	andi	r19, 0x00	; 0
    178c:	6d 96       	adiw	r28, 0x1d	; 29
    178e:	0c af       	std	Y+60, r16	; 0x3c
    1790:	1d af       	std	Y+61, r17	; 0x3d
    1792:	2e af       	std	Y+62, r18	; 0x3e
    1794:	3f af       	std	Y+63, r19	; 0x3f
    1796:	6d 97       	sbiw	r28, 0x1d	; 29
    1798:	c6 01       	movw	r24, r12
    179a:	b5 01       	movw	r22, r10
    179c:	a4 01       	movw	r20, r8
    179e:	93 01       	movw	r18, r6
    17a0:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    17a4:	7b 01       	movw	r14, r22
    17a6:	8c 01       	movw	r16, r24
    17a8:	c6 01       	movw	r24, r12
    17aa:	b5 01       	movw	r22, r10
    17ac:	a4 01       	movw	r20, r8
    17ae:	93 01       	movw	r18, r6
    17b0:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    17b4:	ca 01       	movw	r24, r20
    17b6:	b9 01       	movw	r22, r18
    17b8:	6d 96       	adiw	r28, 0x1d	; 29
    17ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    17bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    17be:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    17c2:	6d 97       	sbiw	r28, 0x1d	; 29
    17c4:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	87 01       	movw	r16, r14
    17ce:	ff 24       	eor	r15, r15
    17d0:	ee 24       	eor	r14, r14
    17d2:	29 96       	adiw	r28, 0x09	; 9
    17d4:	ac ac       	ldd	r10, Y+60	; 0x3c
    17d6:	bd ac       	ldd	r11, Y+61	; 0x3d
    17d8:	ce ac       	ldd	r12, Y+62	; 0x3e
    17da:	df ac       	ldd	r13, Y+63	; 0x3f
    17dc:	29 97       	sbiw	r28, 0x09	; 9
    17de:	c6 01       	movw	r24, r12
    17e0:	aa 27       	eor	r26, r26
    17e2:	bb 27       	eor	r27, r27
    17e4:	5c 01       	movw	r10, r24
    17e6:	6d 01       	movw	r12, r26
    17e8:	ae 28       	or	r10, r14
    17ea:	bf 28       	or	r11, r15
    17ec:	c0 2a       	or	r12, r16
    17ee:	d1 2a       	or	r13, r17
    17f0:	a2 16       	cp	r10, r18
    17f2:	b3 06       	cpc	r11, r19
    17f4:	c4 06       	cpc	r12, r20
    17f6:	d5 06       	cpc	r13, r21
    17f8:	90 f4       	brcc	.+36     	; 0x181e <__moddi3+0x6e4>
    17fa:	a2 0c       	add	r10, r2
    17fc:	b3 1c       	adc	r11, r3
    17fe:	c4 1c       	adc	r12, r4
    1800:	d5 1c       	adc	r13, r5
    1802:	a2 14       	cp	r10, r2
    1804:	b3 04       	cpc	r11, r3
    1806:	c4 04       	cpc	r12, r4
    1808:	d5 04       	cpc	r13, r5
    180a:	48 f0       	brcs	.+18     	; 0x181e <__moddi3+0x6e4>
    180c:	a2 16       	cp	r10, r18
    180e:	b3 06       	cpc	r11, r19
    1810:	c4 06       	cpc	r12, r20
    1812:	d5 06       	cpc	r13, r21
    1814:	20 f4       	brcc	.+8      	; 0x181e <__moddi3+0x6e4>
    1816:	a2 0c       	add	r10, r2
    1818:	b3 1c       	adc	r11, r3
    181a:	c4 1c       	adc	r12, r4
    181c:	d5 1c       	adc	r13, r5
    181e:	a2 1a       	sub	r10, r18
    1820:	b3 0a       	sbc	r11, r19
    1822:	c4 0a       	sbc	r12, r20
    1824:	d5 0a       	sbc	r13, r21
    1826:	c6 01       	movw	r24, r12
    1828:	b5 01       	movw	r22, r10
    182a:	a4 01       	movw	r20, r8
    182c:	93 01       	movw	r18, r6
    182e:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1832:	7b 01       	movw	r14, r22
    1834:	8c 01       	movw	r16, r24
    1836:	c6 01       	movw	r24, r12
    1838:	b5 01       	movw	r22, r10
    183a:	a4 01       	movw	r20, r8
    183c:	93 01       	movw	r18, r6
    183e:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1842:	ca 01       	movw	r24, r20
    1844:	b9 01       	movw	r22, r18
    1846:	6d 96       	adiw	r28, 0x1d	; 29
    1848:	2c ad       	ldd	r18, Y+60	; 0x3c
    184a:	3d ad       	ldd	r19, Y+61	; 0x3d
    184c:	4e ad       	ldd	r20, Y+62	; 0x3e
    184e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1850:	6d 97       	sbiw	r28, 0x1d	; 29
    1852:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	87 01       	movw	r16, r14
    185c:	ff 24       	eor	r15, r15
    185e:	ee 24       	eor	r14, r14
    1860:	29 96       	adiw	r28, 0x09	; 9
    1862:	8c ad       	ldd	r24, Y+60	; 0x3c
    1864:	9d ad       	ldd	r25, Y+61	; 0x3d
    1866:	ae ad       	ldd	r26, Y+62	; 0x3e
    1868:	bf ad       	ldd	r27, Y+63	; 0x3f
    186a:	29 97       	sbiw	r28, 0x09	; 9
    186c:	a0 70       	andi	r26, 0x00	; 0
    186e:	b0 70       	andi	r27, 0x00	; 0
    1870:	57 01       	movw	r10, r14
    1872:	68 01       	movw	r12, r16
    1874:	a8 2a       	or	r10, r24
    1876:	b9 2a       	or	r11, r25
    1878:	ca 2a       	or	r12, r26
    187a:	db 2a       	or	r13, r27
    187c:	a2 16       	cp	r10, r18
    187e:	b3 06       	cpc	r11, r19
    1880:	c4 06       	cpc	r12, r20
    1882:	d5 06       	cpc	r13, r21
    1884:	90 f4       	brcc	.+36     	; 0x18aa <__moddi3+0x770>
    1886:	a2 0c       	add	r10, r2
    1888:	b3 1c       	adc	r11, r3
    188a:	c4 1c       	adc	r12, r4
    188c:	d5 1c       	adc	r13, r5
    188e:	a2 14       	cp	r10, r2
    1890:	b3 04       	cpc	r11, r3
    1892:	c4 04       	cpc	r12, r4
    1894:	d5 04       	cpc	r13, r5
    1896:	48 f0       	brcs	.+18     	; 0x18aa <__moddi3+0x770>
    1898:	a2 16       	cp	r10, r18
    189a:	b3 06       	cpc	r11, r19
    189c:	c4 06       	cpc	r12, r20
    189e:	d5 06       	cpc	r13, r21
    18a0:	20 f4       	brcc	.+8      	; 0x18aa <__moddi3+0x770>
    18a2:	a2 0c       	add	r10, r2
    18a4:	b3 1c       	adc	r11, r3
    18a6:	c4 1c       	adc	r12, r4
    18a8:	d5 1c       	adc	r13, r5
    18aa:	e8 96       	adiw	r28, 0x38	; 56
    18ac:	ec ac       	ldd	r14, Y+60	; 0x3c
    18ae:	fd ac       	ldd	r15, Y+61	; 0x3d
    18b0:	0e ad       	ldd	r16, Y+62	; 0x3e
    18b2:	1f ad       	ldd	r17, Y+63	; 0x3f
    18b4:	e8 97       	sbiw	r28, 0x38	; 56
    18b6:	e4 96       	adiw	r28, 0x34	; 52
    18b8:	0f ac       	ldd	r0, Y+63	; 0x3f
    18ba:	e4 97       	sbiw	r28, 0x34	; 52
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <__moddi3+0x78c>
    18be:	ee 0c       	add	r14, r14
    18c0:	ff 1c       	adc	r15, r15
    18c2:	00 1f       	adc	r16, r16
    18c4:	11 1f       	adc	r17, r17
    18c6:	0a 94       	dec	r0
    18c8:	d2 f7       	brpl	.-12     	; 0x18be <__moddi3+0x784>
    18ca:	2d 96       	adiw	r28, 0x0d	; 13
    18cc:	ec ae       	std	Y+60, r14	; 0x3c
    18ce:	fd ae       	std	Y+61, r15	; 0x3d
    18d0:	0e af       	std	Y+62, r16	; 0x3e
    18d2:	1f af       	std	Y+63, r17	; 0x3f
    18d4:	2d 97       	sbiw	r28, 0x0d	; 13
    18d6:	a2 1a       	sub	r10, r18
    18d8:	b3 0a       	sbc	r11, r19
    18da:	c4 0a       	sbc	r12, r20
    18dc:	d5 0a       	sbc	r13, r21
    18de:	32 01       	movw	r6, r4
    18e0:	88 24       	eor	r8, r8
    18e2:	99 24       	eor	r9, r9
    18e4:	92 01       	movw	r18, r4
    18e6:	81 01       	movw	r16, r2
    18e8:	20 70       	andi	r18, 0x00	; 0
    18ea:	30 70       	andi	r19, 0x00	; 0
    18ec:	a1 96       	adiw	r28, 0x21	; 33
    18ee:	0c af       	std	Y+60, r16	; 0x3c
    18f0:	1d af       	std	Y+61, r17	; 0x3d
    18f2:	2e af       	std	Y+62, r18	; 0x3e
    18f4:	3f af       	std	Y+63, r19	; 0x3f
    18f6:	a1 97       	sbiw	r28, 0x21	; 33
    18f8:	c6 01       	movw	r24, r12
    18fa:	b5 01       	movw	r22, r10
    18fc:	a4 01       	movw	r20, r8
    18fe:	93 01       	movw	r18, r6
    1900:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1904:	7b 01       	movw	r14, r22
    1906:	8c 01       	movw	r16, r24
    1908:	c6 01       	movw	r24, r12
    190a:	b5 01       	movw	r22, r10
    190c:	a4 01       	movw	r20, r8
    190e:	93 01       	movw	r18, r6
    1910:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1914:	ca 01       	movw	r24, r20
    1916:	b9 01       	movw	r22, r18
    1918:	a1 96       	adiw	r28, 0x21	; 33
    191a:	2c ad       	ldd	r18, Y+60	; 0x3c
    191c:	3d ad       	ldd	r19, Y+61	; 0x3d
    191e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1920:	5f ad       	ldd	r21, Y+63	; 0x3f
    1922:	a1 97       	sbiw	r28, 0x21	; 33
    1924:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24
    192c:	87 01       	movw	r16, r14
    192e:	ff 24       	eor	r15, r15
    1930:	ee 24       	eor	r14, r14
    1932:	2d 96       	adiw	r28, 0x0d	; 13
    1934:	ac ac       	ldd	r10, Y+60	; 0x3c
    1936:	bd ac       	ldd	r11, Y+61	; 0x3d
    1938:	ce ac       	ldd	r12, Y+62	; 0x3e
    193a:	df ac       	ldd	r13, Y+63	; 0x3f
    193c:	2d 97       	sbiw	r28, 0x0d	; 13
    193e:	c6 01       	movw	r24, r12
    1940:	aa 27       	eor	r26, r26
    1942:	bb 27       	eor	r27, r27
    1944:	57 01       	movw	r10, r14
    1946:	68 01       	movw	r12, r16
    1948:	a8 2a       	or	r10, r24
    194a:	b9 2a       	or	r11, r25
    194c:	ca 2a       	or	r12, r26
    194e:	db 2a       	or	r13, r27
    1950:	a2 16       	cp	r10, r18
    1952:	b3 06       	cpc	r11, r19
    1954:	c4 06       	cpc	r12, r20
    1956:	d5 06       	cpc	r13, r21
    1958:	90 f4       	brcc	.+36     	; 0x197e <__moddi3+0x844>
    195a:	a2 0c       	add	r10, r2
    195c:	b3 1c       	adc	r11, r3
    195e:	c4 1c       	adc	r12, r4
    1960:	d5 1c       	adc	r13, r5
    1962:	a2 14       	cp	r10, r2
    1964:	b3 04       	cpc	r11, r3
    1966:	c4 04       	cpc	r12, r4
    1968:	d5 04       	cpc	r13, r5
    196a:	48 f0       	brcs	.+18     	; 0x197e <__moddi3+0x844>
    196c:	a2 16       	cp	r10, r18
    196e:	b3 06       	cpc	r11, r19
    1970:	c4 06       	cpc	r12, r20
    1972:	d5 06       	cpc	r13, r21
    1974:	20 f4       	brcc	.+8      	; 0x197e <__moddi3+0x844>
    1976:	a2 0c       	add	r10, r2
    1978:	b3 1c       	adc	r11, r3
    197a:	c4 1c       	adc	r12, r4
    197c:	d5 1c       	adc	r13, r5
    197e:	a2 1a       	sub	r10, r18
    1980:	b3 0a       	sbc	r11, r19
    1982:	c4 0a       	sbc	r12, r20
    1984:	d5 0a       	sbc	r13, r21
    1986:	c6 01       	movw	r24, r12
    1988:	b5 01       	movw	r22, r10
    198a:	a4 01       	movw	r20, r8
    198c:	93 01       	movw	r18, r6
    198e:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1992:	7b 01       	movw	r14, r22
    1994:	8c 01       	movw	r16, r24
    1996:	c6 01       	movw	r24, r12
    1998:	b5 01       	movw	r22, r10
    199a:	a4 01       	movw	r20, r8
    199c:	93 01       	movw	r18, r6
    199e:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    19a2:	ca 01       	movw	r24, r20
    19a4:	b9 01       	movw	r22, r18
    19a6:	a1 96       	adiw	r28, 0x21	; 33
    19a8:	2c ad       	ldd	r18, Y+60	; 0x3c
    19aa:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    19ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    19b0:	a1 97       	sbiw	r28, 0x21	; 33
    19b2:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	87 01       	movw	r16, r14
    19bc:	ff 24       	eor	r15, r15
    19be:	ee 24       	eor	r14, r14
    19c0:	2d 96       	adiw	r28, 0x0d	; 13
    19c2:	8c ad       	ldd	r24, Y+60	; 0x3c
    19c4:	9d ad       	ldd	r25, Y+61	; 0x3d
    19c6:	ae ad       	ldd	r26, Y+62	; 0x3e
    19c8:	bf ad       	ldd	r27, Y+63	; 0x3f
    19ca:	2d 97       	sbiw	r28, 0x0d	; 13
    19cc:	a0 70       	andi	r26, 0x00	; 0
    19ce:	b0 70       	andi	r27, 0x00	; 0
    19d0:	e8 2a       	or	r14, r24
    19d2:	f9 2a       	or	r15, r25
    19d4:	0a 2b       	or	r16, r26
    19d6:	1b 2b       	or	r17, r27
    19d8:	e2 16       	cp	r14, r18
    19da:	f3 06       	cpc	r15, r19
    19dc:	04 07       	cpc	r16, r20
    19de:	15 07       	cpc	r17, r21
    19e0:	90 f4       	brcc	.+36     	; 0x1a06 <__moddi3+0x8cc>
    19e2:	e2 0c       	add	r14, r2
    19e4:	f3 1c       	adc	r15, r3
    19e6:	04 1d       	adc	r16, r4
    19e8:	15 1d       	adc	r17, r5
    19ea:	e2 14       	cp	r14, r2
    19ec:	f3 04       	cpc	r15, r3
    19ee:	04 05       	cpc	r16, r4
    19f0:	15 05       	cpc	r17, r5
    19f2:	48 f0       	brcs	.+18     	; 0x1a06 <__moddi3+0x8cc>
    19f4:	e2 16       	cp	r14, r18
    19f6:	f3 06       	cpc	r15, r19
    19f8:	04 07       	cpc	r16, r20
    19fa:	15 07       	cpc	r17, r21
    19fc:	20 f4       	brcc	.+8      	; 0x1a06 <__moddi3+0x8cc>
    19fe:	e2 0c       	add	r14, r2
    1a00:	f3 1c       	adc	r15, r3
    1a02:	04 1d       	adc	r16, r4
    1a04:	15 1d       	adc	r17, r5
    1a06:	e2 1a       	sub	r14, r18
    1a08:	f3 0a       	sbc	r15, r19
    1a0a:	04 0b       	sbc	r16, r20
    1a0c:	15 0b       	sbc	r17, r21
    1a0e:	d8 01       	movw	r26, r16
    1a10:	c7 01       	movw	r24, r14
    1a12:	62 96       	adiw	r28, 0x12	; 18
    1a14:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a16:	62 97       	sbiw	r28, 0x12	; 18
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <__moddi3+0x8e8>
    1a1a:	b6 95       	lsr	r27
    1a1c:	a7 95       	ror	r26
    1a1e:	97 95       	ror	r25
    1a20:	87 95       	ror	r24
    1a22:	0a 94       	dec	r0
    1a24:	d2 f7       	brpl	.-12     	; 0x1a1a <__moddi3+0x8e0>
    1a26:	89 a7       	std	Y+41, r24	; 0x29
    1a28:	9a a7       	std	Y+42, r25	; 0x2a
    1a2a:	ab a7       	std	Y+43, r26	; 0x2b
    1a2c:	bc a7       	std	Y+44, r27	; 0x2c
    1a2e:	1d a6       	std	Y+45, r1	; 0x2d
    1a30:	1e a6       	std	Y+46, r1	; 0x2e
    1a32:	1f a6       	std	Y+47, r1	; 0x2f
    1a34:	18 aa       	std	Y+48, r1	; 0x30
    1a36:	89 8b       	std	Y+17, r24	; 0x11
    1a38:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a3a:	8a 8b       	std	Y+18, r24	; 0x12
    1a3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a42:	8c 8b       	std	Y+20, r24	; 0x14
    1a44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a46:	8d 8b       	std	Y+21, r24	; 0x15
    1a48:	2f c3       	rjmp	.+1630   	; 0x20a8 <__moddi3+0xf6e>
    1a4a:	6a 14       	cp	r6, r10
    1a4c:	7b 04       	cpc	r7, r11
    1a4e:	8c 04       	cpc	r8, r12
    1a50:	9d 04       	cpc	r9, r13
    1a52:	48 f4       	brcc	.+18     	; 0x1a66 <__moddi3+0x92c>
    1a54:	49 8b       	std	Y+17, r20	; 0x11
    1a56:	5a 8b       	std	Y+18, r21	; 0x12
    1a58:	6b 8b       	std	Y+19, r22	; 0x13
    1a5a:	7c 8b       	std	Y+20, r23	; 0x14
    1a5c:	8d 8b       	std	Y+21, r24	; 0x15
    1a5e:	9e 8b       	std	Y+22, r25	; 0x16
    1a60:	2f 8b       	std	Y+23, r18	; 0x17
    1a62:	38 8f       	std	Y+24, r19	; 0x18
    1a64:	27 c3       	rjmp	.+1614   	; 0x20b4 <__moddi3+0xf7a>
    1a66:	00 e0       	ldi	r16, 0x00	; 0
    1a68:	a0 16       	cp	r10, r16
    1a6a:	00 e0       	ldi	r16, 0x00	; 0
    1a6c:	b0 06       	cpc	r11, r16
    1a6e:	01 e0       	ldi	r16, 0x01	; 1
    1a70:	c0 06       	cpc	r12, r16
    1a72:	00 e0       	ldi	r16, 0x00	; 0
    1a74:	d0 06       	cpc	r13, r16
    1a76:	88 f4       	brcc	.+34     	; 0x1a9a <__moddi3+0x960>
    1a78:	1f ef       	ldi	r17, 0xFF	; 255
    1a7a:	a1 16       	cp	r10, r17
    1a7c:	b1 04       	cpc	r11, r1
    1a7e:	c1 04       	cpc	r12, r1
    1a80:	d1 04       	cpc	r13, r1
    1a82:	39 f0       	breq	.+14     	; 0x1a92 <__moddi3+0x958>
    1a84:	30 f0       	brcs	.+12     	; 0x1a92 <__moddi3+0x958>
    1a86:	28 e0       	ldi	r18, 0x08	; 8
    1a88:	e2 2e       	mov	r14, r18
    1a8a:	f1 2c       	mov	r15, r1
    1a8c:	01 2d       	mov	r16, r1
    1a8e:	11 2d       	mov	r17, r1
    1a90:	18 c0       	rjmp	.+48     	; 0x1ac2 <__moddi3+0x988>
    1a92:	ee 24       	eor	r14, r14
    1a94:	ff 24       	eor	r15, r15
    1a96:	87 01       	movw	r16, r14
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <__moddi3+0x988>
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	a2 16       	cp	r10, r18
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	b2 06       	cpc	r11, r18
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	c2 06       	cpc	r12, r18
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	d2 06       	cpc	r13, r18
    1aaa:	30 f0       	brcs	.+12     	; 0x1ab8 <__moddi3+0x97e>
    1aac:	98 e1       	ldi	r25, 0x18	; 24
    1aae:	e9 2e       	mov	r14, r25
    1ab0:	f1 2c       	mov	r15, r1
    1ab2:	01 2d       	mov	r16, r1
    1ab4:	11 2d       	mov	r17, r1
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <__moddi3+0x988>
    1ab8:	80 e1       	ldi	r24, 0x10	; 16
    1aba:	e8 2e       	mov	r14, r24
    1abc:	f1 2c       	mov	r15, r1
    1abe:	01 2d       	mov	r16, r1
    1ac0:	11 2d       	mov	r17, r1
    1ac2:	d6 01       	movw	r26, r12
    1ac4:	c5 01       	movw	r24, r10
    1ac6:	0e 2c       	mov	r0, r14
    1ac8:	04 c0       	rjmp	.+8      	; 0x1ad2 <__moddi3+0x998>
    1aca:	b6 95       	lsr	r27
    1acc:	a7 95       	ror	r26
    1ace:	97 95       	ror	r25
    1ad0:	87 95       	ror	r24
    1ad2:	0a 94       	dec	r0
    1ad4:	d2 f7       	brpl	.-12     	; 0x1aca <__moddi3+0x990>
    1ad6:	8c 55       	subi	r24, 0x5C	; 92
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	dc 01       	movw	r26, r24
    1adc:	2c 91       	ld	r18, X
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e0       	ldi	r26, 0x00	; 0
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	8e 19       	sub	r24, r14
    1ae8:	9f 09       	sbc	r25, r15
    1aea:	a0 0b       	sbc	r26, r16
    1aec:	b1 0b       	sbc	r27, r17
    1aee:	82 1b       	sub	r24, r18
    1af0:	91 09       	sbc	r25, r1
    1af2:	a1 09       	sbc	r26, r1
    1af4:	b1 09       	sbc	r27, r1
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	a1 05       	cpc	r26, r1
    1afa:	b1 05       	cpc	r27, r1
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <__moddi3+0x9c6>
    1afe:	59 c0       	rjmp	.+178    	; 0x1bb2 <__moddi3+0xa78>
    1b00:	a6 14       	cp	r10, r6
    1b02:	b7 04       	cpc	r11, r7
    1b04:	c8 04       	cpc	r12, r8
    1b06:	d9 04       	cpc	r13, r9
    1b08:	70 f0       	brcs	.+28     	; 0x1b26 <__moddi3+0x9ec>
    1b0a:	e8 96       	adiw	r28, 0x38	; 56
    1b0c:	ec ac       	ldd	r14, Y+60	; 0x3c
    1b0e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1b10:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b12:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b14:	e8 97       	sbiw	r28, 0x38	; 56
    1b16:	e2 14       	cp	r14, r2
    1b18:	f3 04       	cpc	r15, r3
    1b1a:	04 05       	cpc	r16, r4
    1b1c:	15 05       	cpc	r17, r5
    1b1e:	18 f4       	brcc	.+6      	; 0x1b26 <__moddi3+0x9ec>
    1b20:	d8 01       	movw	r26, r16
    1b22:	c7 01       	movw	r24, r14
    1b24:	2f c0       	rjmp	.+94     	; 0x1b84 <__moddi3+0xa4a>
    1b26:	e8 96       	adiw	r28, 0x38	; 56
    1b28:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b2a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b30:	e8 97       	sbiw	r28, 0x38	; 56
    1b32:	82 19       	sub	r24, r2
    1b34:	93 09       	sbc	r25, r3
    1b36:	a4 09       	sbc	r26, r4
    1b38:	b5 09       	sbc	r27, r5
    1b3a:	a4 01       	movw	r20, r8
    1b3c:	93 01       	movw	r18, r6
    1b3e:	2a 19       	sub	r18, r10
    1b40:	3b 09       	sbc	r19, r11
    1b42:	4c 09       	sbc	r20, r12
    1b44:	5d 09       	sbc	r21, r13
    1b46:	aa 24       	eor	r10, r10
    1b48:	bb 24       	eor	r11, r11
    1b4a:	65 01       	movw	r12, r10
    1b4c:	e8 96       	adiw	r28, 0x38	; 56
    1b4e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1b50:	7d ac       	ldd	r7, Y+61	; 0x3d
    1b52:	8e ac       	ldd	r8, Y+62	; 0x3e
    1b54:	9f ac       	ldd	r9, Y+63	; 0x3f
    1b56:	e8 97       	sbiw	r28, 0x38	; 56
    1b58:	68 16       	cp	r6, r24
    1b5a:	79 06       	cpc	r7, r25
    1b5c:	8a 06       	cpc	r8, r26
    1b5e:	9b 06       	cpc	r9, r27
    1b60:	28 f4       	brcc	.+10     	; 0x1b6c <__moddi3+0xa32>
    1b62:	11 e0       	ldi	r17, 0x01	; 1
    1b64:	a1 2e       	mov	r10, r17
    1b66:	b1 2c       	mov	r11, r1
    1b68:	c1 2c       	mov	r12, r1
    1b6a:	d1 2c       	mov	r13, r1
    1b6c:	79 01       	movw	r14, r18
    1b6e:	8a 01       	movw	r16, r20
    1b70:	ea 18       	sub	r14, r10
    1b72:	fb 08       	sbc	r15, r11
    1b74:	0c 09       	sbc	r16, r12
    1b76:	1d 09       	sbc	r17, r13
    1b78:	61 96       	adiw	r28, 0x11	; 17
    1b7a:	ec ae       	std	Y+60, r14	; 0x3c
    1b7c:	fd ae       	std	Y+61, r15	; 0x3d
    1b7e:	0e af       	std	Y+62, r16	; 0x3e
    1b80:	1f af       	std	Y+63, r17	; 0x3f
    1b82:	61 97       	sbiw	r28, 0x11	; 17
    1b84:	89 a7       	std	Y+41, r24	; 0x29
    1b86:	9a a7       	std	Y+42, r25	; 0x2a
    1b88:	ab a7       	std	Y+43, r26	; 0x2b
    1b8a:	bc a7       	std	Y+44, r27	; 0x2c
    1b8c:	61 96       	adiw	r28, 0x11	; 17
    1b8e:	0c ad       	ldd	r16, Y+60	; 0x3c
    1b90:	1d ad       	ldd	r17, Y+61	; 0x3d
    1b92:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b94:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b96:	61 97       	sbiw	r28, 0x11	; 17
    1b98:	0d a7       	std	Y+45, r16	; 0x2d
    1b9a:	1e a7       	std	Y+46, r17	; 0x2e
    1b9c:	2f a7       	std	Y+47, r18	; 0x2f
    1b9e:	38 ab       	std	Y+48, r19	; 0x30
    1ba0:	89 8b       	std	Y+17, r24	; 0x11
    1ba2:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ba4:	8a 8b       	std	Y+18, r24	; 0x12
    1ba6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba8:	8b 8b       	std	Y+19, r24	; 0x13
    1baa:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bac:	8c 8b       	std	Y+20, r24	; 0x14
    1bae:	0d 8b       	std	Y+21, r16	; 0x15
    1bb0:	7b c2       	rjmp	.+1270   	; 0x20a8 <__moddi3+0xf6e>
    1bb2:	e3 96       	adiw	r28, 0x33	; 51
    1bb4:	8f af       	std	Y+63, r24	; 0x3f
    1bb6:	e3 97       	sbiw	r28, 0x33	; 51
    1bb8:	a6 01       	movw	r20, r12
    1bba:	95 01       	movw	r18, r10
    1bbc:	08 2e       	mov	r0, r24
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <__moddi3+0xa8e>
    1bc0:	22 0f       	add	r18, r18
    1bc2:	33 1f       	adc	r19, r19
    1bc4:	44 1f       	adc	r20, r20
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	0a 94       	dec	r0
    1bca:	d2 f7       	brpl	.-12     	; 0x1bc0 <__moddi3+0xa86>
    1bcc:	10 e2       	ldi	r17, 0x20	; 32
    1bce:	18 1b       	sub	r17, r24
    1bd0:	e2 96       	adiw	r28, 0x32	; 50
    1bd2:	1f af       	std	Y+63, r17	; 0x3f
    1bd4:	e2 97       	sbiw	r28, 0x32	; 50
    1bd6:	d2 01       	movw	r26, r4
    1bd8:	c1 01       	movw	r24, r2
    1bda:	01 2e       	mov	r0, r17
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <__moddi3+0xaac>
    1bde:	b6 95       	lsr	r27
    1be0:	a7 95       	ror	r26
    1be2:	97 95       	ror	r25
    1be4:	87 95       	ror	r24
    1be6:	0a 94       	dec	r0
    1be8:	d2 f7       	brpl	.-12     	; 0x1bde <__moddi3+0xaa4>
    1bea:	5c 01       	movw	r10, r24
    1bec:	6d 01       	movw	r12, r26
    1bee:	a2 2a       	or	r10, r18
    1bf0:	b3 2a       	or	r11, r19
    1bf2:	c4 2a       	or	r12, r20
    1bf4:	d5 2a       	or	r13, r21
    1bf6:	25 96       	adiw	r28, 0x05	; 5
    1bf8:	ac ae       	std	Y+60, r10	; 0x3c
    1bfa:	bd ae       	std	Y+61, r11	; 0x3d
    1bfc:	ce ae       	std	Y+62, r12	; 0x3e
    1bfe:	df ae       	std	Y+63, r13	; 0x3f
    1c00:	25 97       	sbiw	r28, 0x05	; 5
    1c02:	72 01       	movw	r14, r4
    1c04:	61 01       	movw	r12, r2
    1c06:	e3 96       	adiw	r28, 0x33	; 51
    1c08:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c0a:	e3 97       	sbiw	r28, 0x33	; 51
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <__moddi3+0xadc>
    1c0e:	cc 0c       	add	r12, r12
    1c10:	dd 1c       	adc	r13, r13
    1c12:	ee 1c       	adc	r14, r14
    1c14:	ff 1c       	adc	r15, r15
    1c16:	0a 94       	dec	r0
    1c18:	d2 f7       	brpl	.-12     	; 0x1c0e <__moddi3+0xad4>
    1c1a:	21 96       	adiw	r28, 0x01	; 1
    1c1c:	cc ae       	std	Y+60, r12	; 0x3c
    1c1e:	dd ae       	std	Y+61, r13	; 0x3d
    1c20:	ee ae       	std	Y+62, r14	; 0x3e
    1c22:	ff ae       	std	Y+63, r15	; 0x3f
    1c24:	21 97       	sbiw	r28, 0x01	; 1
    1c26:	64 01       	movw	r12, r8
    1c28:	53 01       	movw	r10, r6
    1c2a:	01 2e       	mov	r0, r17
    1c2c:	04 c0       	rjmp	.+8      	; 0x1c36 <__moddi3+0xafc>
    1c2e:	d6 94       	lsr	r13
    1c30:	c7 94       	ror	r12
    1c32:	b7 94       	ror	r11
    1c34:	a7 94       	ror	r10
    1c36:	0a 94       	dec	r0
    1c38:	d2 f7       	brpl	.-12     	; 0x1c2e <__moddi3+0xaf4>
    1c3a:	a4 01       	movw	r20, r8
    1c3c:	93 01       	movw	r18, r6
    1c3e:	e3 96       	adiw	r28, 0x33	; 51
    1c40:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c42:	e3 97       	sbiw	r28, 0x33	; 51
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <__moddi3+0xb14>
    1c46:	22 0f       	add	r18, r18
    1c48:	33 1f       	adc	r19, r19
    1c4a:	44 1f       	adc	r20, r20
    1c4c:	55 1f       	adc	r21, r21
    1c4e:	0a 94       	dec	r0
    1c50:	d2 f7       	brpl	.-12     	; 0x1c46 <__moddi3+0xb0c>
    1c52:	e8 96       	adiw	r28, 0x38	; 56
    1c54:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c56:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c58:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c5a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c5c:	e8 97       	sbiw	r28, 0x38	; 56
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <__moddi3+0xb2e>
    1c60:	b6 95       	lsr	r27
    1c62:	a7 95       	ror	r26
    1c64:	97 95       	ror	r25
    1c66:	87 95       	ror	r24
    1c68:	1a 95       	dec	r17
    1c6a:	d2 f7       	brpl	.-12     	; 0x1c60 <__moddi3+0xb26>
    1c6c:	7c 01       	movw	r14, r24
    1c6e:	8d 01       	movw	r16, r26
    1c70:	e2 2a       	or	r14, r18
    1c72:	f3 2a       	or	r15, r19
    1c74:	04 2b       	or	r16, r20
    1c76:	15 2b       	or	r17, r21
    1c78:	e9 ae       	std	Y+57, r14	; 0x39
    1c7a:	fa ae       	std	Y+58, r15	; 0x3a
    1c7c:	0b af       	std	Y+59, r16	; 0x3b
    1c7e:	1c af       	std	Y+60, r17	; 0x3c
    1c80:	e8 96       	adiw	r28, 0x38	; 56
    1c82:	0c ad       	ldd	r16, Y+60	; 0x3c
    1c84:	1d ad       	ldd	r17, Y+61	; 0x3d
    1c86:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c88:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c8a:	e8 97       	sbiw	r28, 0x38	; 56
    1c8c:	e3 96       	adiw	r28, 0x33	; 51
    1c8e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c90:	e3 97       	sbiw	r28, 0x33	; 51
    1c92:	04 c0       	rjmp	.+8      	; 0x1c9c <__moddi3+0xb62>
    1c94:	00 0f       	add	r16, r16
    1c96:	11 1f       	adc	r17, r17
    1c98:	22 1f       	adc	r18, r18
    1c9a:	33 1f       	adc	r19, r19
    1c9c:	0a 94       	dec	r0
    1c9e:	d2 f7       	brpl	.-12     	; 0x1c94 <__moddi3+0xb5a>
    1ca0:	0d ab       	std	Y+53, r16	; 0x35
    1ca2:	1e ab       	std	Y+54, r17	; 0x36
    1ca4:	2f ab       	std	Y+55, r18	; 0x37
    1ca6:	38 af       	std	Y+56, r19	; 0x38
    1ca8:	25 96       	adiw	r28, 0x05	; 5
    1caa:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cac:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cae:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cb0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cb2:	25 97       	sbiw	r28, 0x05	; 5
    1cb4:	3a 01       	movw	r6, r20
    1cb6:	88 24       	eor	r8, r8
    1cb8:	99 24       	eor	r9, r9
    1cba:	40 70       	andi	r20, 0x00	; 0
    1cbc:	50 70       	andi	r21, 0x00	; 0
    1cbe:	a5 96       	adiw	r28, 0x25	; 37
    1cc0:	2c af       	std	Y+60, r18	; 0x3c
    1cc2:	3d af       	std	Y+61, r19	; 0x3d
    1cc4:	4e af       	std	Y+62, r20	; 0x3e
    1cc6:	5f af       	std	Y+63, r21	; 0x3f
    1cc8:	a5 97       	sbiw	r28, 0x25	; 37
    1cca:	c6 01       	movw	r24, r12
    1ccc:	b5 01       	movw	r22, r10
    1cce:	a4 01       	movw	r20, r8
    1cd0:	93 01       	movw	r18, r6
    1cd2:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1cd6:	7b 01       	movw	r14, r22
    1cd8:	8c 01       	movw	r16, r24
    1cda:	c6 01       	movw	r24, r12
    1cdc:	b5 01       	movw	r22, r10
    1cde:	a4 01       	movw	r20, r8
    1ce0:	93 01       	movw	r18, r6
    1ce2:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1ce6:	c9 01       	movw	r24, r18
    1ce8:	da 01       	movw	r26, r20
    1cea:	1c 01       	movw	r2, r24
    1cec:	2d 01       	movw	r4, r26
    1cee:	c2 01       	movw	r24, r4
    1cf0:	b1 01       	movw	r22, r2
    1cf2:	a5 96       	adiw	r28, 0x25	; 37
    1cf4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cf6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cf8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cfa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cfc:	a5 97       	sbiw	r28, 0x25	; 37
    1cfe:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	87 01       	movw	r16, r14
    1d08:	ff 24       	eor	r15, r15
    1d0a:	ee 24       	eor	r14, r14
    1d0c:	a9 ac       	ldd	r10, Y+57	; 0x39
    1d0e:	ba ac       	ldd	r11, Y+58	; 0x3a
    1d10:	cb ac       	ldd	r12, Y+59	; 0x3b
    1d12:	dc ac       	ldd	r13, Y+60	; 0x3c
    1d14:	c6 01       	movw	r24, r12
    1d16:	aa 27       	eor	r26, r26
    1d18:	bb 27       	eor	r27, r27
    1d1a:	57 01       	movw	r10, r14
    1d1c:	68 01       	movw	r12, r16
    1d1e:	a8 2a       	or	r10, r24
    1d20:	b9 2a       	or	r11, r25
    1d22:	ca 2a       	or	r12, r26
    1d24:	db 2a       	or	r13, r27
    1d26:	a2 16       	cp	r10, r18
    1d28:	b3 06       	cpc	r11, r19
    1d2a:	c4 06       	cpc	r12, r20
    1d2c:	d5 06       	cpc	r13, r21
    1d2e:	10 f5       	brcc	.+68     	; 0x1d74 <__moddi3+0xc3a>
    1d30:	08 94       	sec
    1d32:	21 08       	sbc	r2, r1
    1d34:	31 08       	sbc	r3, r1
    1d36:	41 08       	sbc	r4, r1
    1d38:	51 08       	sbc	r5, r1
    1d3a:	25 96       	adiw	r28, 0x05	; 5
    1d3c:	ec ac       	ldd	r14, Y+60	; 0x3c
    1d3e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1d40:	0e ad       	ldd	r16, Y+62	; 0x3e
    1d42:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d44:	25 97       	sbiw	r28, 0x05	; 5
    1d46:	ae 0c       	add	r10, r14
    1d48:	bf 1c       	adc	r11, r15
    1d4a:	c0 1e       	adc	r12, r16
    1d4c:	d1 1e       	adc	r13, r17
    1d4e:	ae 14       	cp	r10, r14
    1d50:	bf 04       	cpc	r11, r15
    1d52:	c0 06       	cpc	r12, r16
    1d54:	d1 06       	cpc	r13, r17
    1d56:	70 f0       	brcs	.+28     	; 0x1d74 <__moddi3+0xc3a>
    1d58:	a2 16       	cp	r10, r18
    1d5a:	b3 06       	cpc	r11, r19
    1d5c:	c4 06       	cpc	r12, r20
    1d5e:	d5 06       	cpc	r13, r21
    1d60:	48 f4       	brcc	.+18     	; 0x1d74 <__moddi3+0xc3a>
    1d62:	08 94       	sec
    1d64:	21 08       	sbc	r2, r1
    1d66:	31 08       	sbc	r3, r1
    1d68:	41 08       	sbc	r4, r1
    1d6a:	51 08       	sbc	r5, r1
    1d6c:	ae 0c       	add	r10, r14
    1d6e:	bf 1c       	adc	r11, r15
    1d70:	c0 1e       	adc	r12, r16
    1d72:	d1 1e       	adc	r13, r17
    1d74:	a2 1a       	sub	r10, r18
    1d76:	b3 0a       	sbc	r11, r19
    1d78:	c4 0a       	sbc	r12, r20
    1d7a:	d5 0a       	sbc	r13, r21
    1d7c:	c6 01       	movw	r24, r12
    1d7e:	b5 01       	movw	r22, r10
    1d80:	a4 01       	movw	r20, r8
    1d82:	93 01       	movw	r18, r6
    1d84:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1d88:	7b 01       	movw	r14, r22
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	c6 01       	movw	r24, r12
    1d8e:	b5 01       	movw	r22, r10
    1d90:	a4 01       	movw	r20, r8
    1d92:	93 01       	movw	r18, r6
    1d94:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    1d98:	c9 01       	movw	r24, r18
    1d9a:	da 01       	movw	r26, r20
    1d9c:	3c 01       	movw	r6, r24
    1d9e:	4d 01       	movw	r8, r26
    1da0:	c4 01       	movw	r24, r8
    1da2:	b3 01       	movw	r22, r6
    1da4:	a5 96       	adiw	r28, 0x25	; 37
    1da6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1da8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1daa:	4e ad       	ldd	r20, Y+62	; 0x3e
    1dac:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dae:	a5 97       	sbiw	r28, 0x25	; 37
    1db0:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    1db4:	9b 01       	movw	r18, r22
    1db6:	ac 01       	movw	r20, r24
    1db8:	87 01       	movw	r16, r14
    1dba:	ff 24       	eor	r15, r15
    1dbc:	ee 24       	eor	r14, r14
    1dbe:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dc2:	ab ad       	ldd	r26, Y+59	; 0x3b
    1dc4:	bc ad       	ldd	r27, Y+60	; 0x3c
    1dc6:	a0 70       	andi	r26, 0x00	; 0
    1dc8:	b0 70       	andi	r27, 0x00	; 0
    1dca:	57 01       	movw	r10, r14
    1dcc:	68 01       	movw	r12, r16
    1dce:	a8 2a       	or	r10, r24
    1dd0:	b9 2a       	or	r11, r25
    1dd2:	ca 2a       	or	r12, r26
    1dd4:	db 2a       	or	r13, r27
    1dd6:	a2 16       	cp	r10, r18
    1dd8:	b3 06       	cpc	r11, r19
    1dda:	c4 06       	cpc	r12, r20
    1ddc:	d5 06       	cpc	r13, r21
    1dde:	10 f5       	brcc	.+68     	; 0x1e24 <__moddi3+0xcea>
    1de0:	08 94       	sec
    1de2:	61 08       	sbc	r6, r1
    1de4:	71 08       	sbc	r7, r1
    1de6:	81 08       	sbc	r8, r1
    1de8:	91 08       	sbc	r9, r1
    1dea:	25 96       	adiw	r28, 0x05	; 5
    1dec:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dee:	7d ad       	ldd	r23, Y+61	; 0x3d
    1df0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1df2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1df4:	25 97       	sbiw	r28, 0x05	; 5
    1df6:	a6 0e       	add	r10, r22
    1df8:	b7 1e       	adc	r11, r23
    1dfa:	c8 1e       	adc	r12, r24
    1dfc:	d9 1e       	adc	r13, r25
    1dfe:	a6 16       	cp	r10, r22
    1e00:	b7 06       	cpc	r11, r23
    1e02:	c8 06       	cpc	r12, r24
    1e04:	d9 06       	cpc	r13, r25
    1e06:	70 f0       	brcs	.+28     	; 0x1e24 <__moddi3+0xcea>
    1e08:	a2 16       	cp	r10, r18
    1e0a:	b3 06       	cpc	r11, r19
    1e0c:	c4 06       	cpc	r12, r20
    1e0e:	d5 06       	cpc	r13, r21
    1e10:	48 f4       	brcc	.+18     	; 0x1e24 <__moddi3+0xcea>
    1e12:	08 94       	sec
    1e14:	61 08       	sbc	r6, r1
    1e16:	71 08       	sbc	r7, r1
    1e18:	81 08       	sbc	r8, r1
    1e1a:	91 08       	sbc	r9, r1
    1e1c:	a6 0e       	add	r10, r22
    1e1e:	b7 1e       	adc	r11, r23
    1e20:	c8 1e       	adc	r12, r24
    1e22:	d9 1e       	adc	r13, r25
    1e24:	d6 01       	movw	r26, r12
    1e26:	c5 01       	movw	r24, r10
    1e28:	82 1b       	sub	r24, r18
    1e2a:	93 0b       	sbc	r25, r19
    1e2c:	a4 0b       	sbc	r26, r20
    1e2e:	b5 0b       	sbc	r27, r21
    1e30:	89 ab       	std	Y+49, r24	; 0x31
    1e32:	9a ab       	std	Y+50, r25	; 0x32
    1e34:	ab ab       	std	Y+51, r26	; 0x33
    1e36:	bc ab       	std	Y+52, r27	; 0x34
    1e38:	d1 01       	movw	r26, r2
    1e3a:	99 27       	eor	r25, r25
    1e3c:	88 27       	eor	r24, r24
    1e3e:	84 01       	movw	r16, r8
    1e40:	73 01       	movw	r14, r6
    1e42:	e8 2a       	or	r14, r24
    1e44:	f9 2a       	or	r15, r25
    1e46:	0a 2b       	or	r16, r26
    1e48:	1b 2b       	or	r17, r27
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	a8 2e       	mov	r10, r24
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	b8 2e       	mov	r11, r24
    1e52:	c1 2c       	mov	r12, r1
    1e54:	d1 2c       	mov	r13, r1
    1e56:	ae 20       	and	r10, r14
    1e58:	bf 20       	and	r11, r15
    1e5a:	c0 22       	and	r12, r16
    1e5c:	d1 22       	and	r13, r17
    1e5e:	78 01       	movw	r14, r16
    1e60:	00 27       	eor	r16, r16
    1e62:	11 27       	eor	r17, r17
    1e64:	21 96       	adiw	r28, 0x01	; 1
    1e66:	6c ac       	ldd	r6, Y+60	; 0x3c
    1e68:	7d ac       	ldd	r7, Y+61	; 0x3d
    1e6a:	8e ac       	ldd	r8, Y+62	; 0x3e
    1e6c:	9f ac       	ldd	r9, Y+63	; 0x3f
    1e6e:	21 97       	sbiw	r28, 0x01	; 1
    1e70:	2f ef       	ldi	r18, 0xFF	; 255
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	62 22       	and	r6, r18
    1e7a:	73 22       	and	r7, r19
    1e7c:	84 22       	and	r8, r20
    1e7e:	95 22       	and	r9, r21
    1e80:	21 96       	adiw	r28, 0x01	; 1
    1e82:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e84:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e8a:	21 97       	sbiw	r28, 0x01	; 1
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	66 27       	eor	r22, r22
    1e90:	77 27       	eor	r23, r23
    1e92:	ad 96       	adiw	r28, 0x2d	; 45
    1e94:	4c af       	std	Y+60, r20	; 0x3c
    1e96:	5d af       	std	Y+61, r21	; 0x3d
    1e98:	6e af       	std	Y+62, r22	; 0x3e
    1e9a:	7f af       	std	Y+63, r23	; 0x3f
    1e9c:	ad 97       	sbiw	r28, 0x2d	; 45
    1e9e:	c6 01       	movw	r24, r12
    1ea0:	b5 01       	movw	r22, r10
    1ea2:	a4 01       	movw	r20, r8
    1ea4:	93 01       	movw	r18, r6
    1ea6:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    1eaa:	a9 96       	adiw	r28, 0x29	; 41
    1eac:	6c af       	std	Y+60, r22	; 0x3c
    1eae:	7d af       	std	Y+61, r23	; 0x3d
    1eb0:	8e af       	std	Y+62, r24	; 0x3e
    1eb2:	9f af       	std	Y+63, r25	; 0x3f
    1eb4:	a9 97       	sbiw	r28, 0x29	; 41
    1eb6:	c6 01       	movw	r24, r12
    1eb8:	b5 01       	movw	r22, r10
    1eba:	ad 96       	adiw	r28, 0x2d	; 45
    1ebc:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ebe:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ec0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ec2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ec4:	ad 97       	sbiw	r28, 0x2d	; 45
    1ec6:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    1eca:	1b 01       	movw	r2, r22
    1ecc:	2c 01       	movw	r4, r24
    1ece:	c8 01       	movw	r24, r16
    1ed0:	b7 01       	movw	r22, r14
    1ed2:	a4 01       	movw	r20, r8
    1ed4:	93 01       	movw	r18, r6
    1ed6:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    1eda:	5b 01       	movw	r10, r22
    1edc:	6c 01       	movw	r12, r24
    1ede:	c8 01       	movw	r24, r16
    1ee0:	b7 01       	movw	r22, r14
    1ee2:	ad 96       	adiw	r28, 0x2d	; 45
    1ee4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ee6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ee8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eea:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eec:	ad 97       	sbiw	r28, 0x2d	; 45
    1eee:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    1ef2:	7b 01       	movw	r14, r22
    1ef4:	8c 01       	movw	r16, r24
    1ef6:	a6 01       	movw	r20, r12
    1ef8:	95 01       	movw	r18, r10
    1efa:	22 0d       	add	r18, r2
    1efc:	33 1d       	adc	r19, r3
    1efe:	44 1d       	adc	r20, r4
    1f00:	55 1d       	adc	r21, r5
    1f02:	a9 96       	adiw	r28, 0x29	; 41
    1f04:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f06:	7d ac       	ldd	r7, Y+61	; 0x3d
    1f08:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f0a:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f0c:	a9 97       	sbiw	r28, 0x29	; 41
    1f0e:	c4 01       	movw	r24, r8
    1f10:	aa 27       	eor	r26, r26
    1f12:	bb 27       	eor	r27, r27
    1f14:	28 0f       	add	r18, r24
    1f16:	39 1f       	adc	r19, r25
    1f18:	4a 1f       	adc	r20, r26
    1f1a:	5b 1f       	adc	r21, r27
    1f1c:	2a 15       	cp	r18, r10
    1f1e:	3b 05       	cpc	r19, r11
    1f20:	4c 05       	cpc	r20, r12
    1f22:	5d 05       	cpc	r21, r13
    1f24:	48 f4       	brcc	.+18     	; 0x1f38 <__moddi3+0xdfe>
    1f26:	81 2c       	mov	r8, r1
    1f28:	91 2c       	mov	r9, r1
    1f2a:	e1 e0       	ldi	r30, 0x01	; 1
    1f2c:	ae 2e       	mov	r10, r30
    1f2e:	b1 2c       	mov	r11, r1
    1f30:	e8 0c       	add	r14, r8
    1f32:	f9 1c       	adc	r15, r9
    1f34:	0a 1d       	adc	r16, r10
    1f36:	1b 1d       	adc	r17, r11
    1f38:	ca 01       	movw	r24, r20
    1f3a:	aa 27       	eor	r26, r26
    1f3c:	bb 27       	eor	r27, r27
    1f3e:	57 01       	movw	r10, r14
    1f40:	68 01       	movw	r12, r16
    1f42:	a8 0e       	add	r10, r24
    1f44:	b9 1e       	adc	r11, r25
    1f46:	ca 1e       	adc	r12, r26
    1f48:	db 1e       	adc	r13, r27
    1f4a:	a9 01       	movw	r20, r18
    1f4c:	33 27       	eor	r19, r19
    1f4e:	22 27       	eor	r18, r18
    1f50:	a9 96       	adiw	r28, 0x29	; 41
    1f52:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f54:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f56:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f58:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f5a:	a9 97       	sbiw	r28, 0x29	; 41
    1f5c:	a0 70       	andi	r26, 0x00	; 0
    1f5e:	b0 70       	andi	r27, 0x00	; 0
    1f60:	28 0f       	add	r18, r24
    1f62:	39 1f       	adc	r19, r25
    1f64:	4a 1f       	adc	r20, r26
    1f66:	5b 1f       	adc	r21, r27
    1f68:	e9 a8       	ldd	r14, Y+49	; 0x31
    1f6a:	fa a8       	ldd	r15, Y+50	; 0x32
    1f6c:	0b a9       	ldd	r16, Y+51	; 0x33
    1f6e:	1c a9       	ldd	r17, Y+52	; 0x34
    1f70:	ea 14       	cp	r14, r10
    1f72:	fb 04       	cpc	r15, r11
    1f74:	0c 05       	cpc	r16, r12
    1f76:	1d 05       	cpc	r17, r13
    1f78:	70 f0       	brcs	.+28     	; 0x1f96 <__moddi3+0xe5c>
    1f7a:	ae 14       	cp	r10, r14
    1f7c:	bf 04       	cpc	r11, r15
    1f7e:	c0 06       	cpc	r12, r16
    1f80:	d1 06       	cpc	r13, r17
    1f82:	89 f5       	brne	.+98     	; 0x1fe6 <__moddi3+0xeac>
    1f84:	6d a9       	ldd	r22, Y+53	; 0x35
    1f86:	7e a9       	ldd	r23, Y+54	; 0x36
    1f88:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f8c:	62 17       	cp	r22, r18
    1f8e:	73 07       	cpc	r23, r19
    1f90:	84 07       	cpc	r24, r20
    1f92:	95 07       	cpc	r25, r21
    1f94:	40 f5       	brcc	.+80     	; 0x1fe6 <__moddi3+0xeac>
    1f96:	da 01       	movw	r26, r20
    1f98:	c9 01       	movw	r24, r18
    1f9a:	21 96       	adiw	r28, 0x01	; 1
    1f9c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f9e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1fa0:	8e ac       	ldd	r8, Y+62	; 0x3e
    1fa2:	9f ac       	ldd	r9, Y+63	; 0x3f
    1fa4:	21 97       	sbiw	r28, 0x01	; 1
    1fa6:	86 19       	sub	r24, r6
    1fa8:	97 09       	sbc	r25, r7
    1faa:	a8 09       	sbc	r26, r8
    1fac:	b9 09       	sbc	r27, r9
    1fae:	25 96       	adiw	r28, 0x05	; 5
    1fb0:	ec ac       	ldd	r14, Y+60	; 0x3c
    1fb2:	fd ac       	ldd	r15, Y+61	; 0x3d
    1fb4:	0e ad       	ldd	r16, Y+62	; 0x3e
    1fb6:	1f ad       	ldd	r17, Y+63	; 0x3f
    1fb8:	25 97       	sbiw	r28, 0x05	; 5
    1fba:	ae 18       	sub	r10, r14
    1fbc:	bf 08       	sbc	r11, r15
    1fbe:	c0 0a       	sbc	r12, r16
    1fc0:	d1 0a       	sbc	r13, r17
    1fc2:	ee 24       	eor	r14, r14
    1fc4:	ff 24       	eor	r15, r15
    1fc6:	87 01       	movw	r16, r14
    1fc8:	28 17       	cp	r18, r24
    1fca:	39 07       	cpc	r19, r25
    1fcc:	4a 07       	cpc	r20, r26
    1fce:	5b 07       	cpc	r21, r27
    1fd0:	28 f4       	brcc	.+10     	; 0x1fdc <__moddi3+0xea2>
    1fd2:	21 e0       	ldi	r18, 0x01	; 1
    1fd4:	e2 2e       	mov	r14, r18
    1fd6:	f1 2c       	mov	r15, r1
    1fd8:	01 2d       	mov	r16, r1
    1fda:	11 2d       	mov	r17, r1
    1fdc:	ae 18       	sub	r10, r14
    1fde:	bf 08       	sbc	r11, r15
    1fe0:	c0 0a       	sbc	r12, r16
    1fe2:	d1 0a       	sbc	r13, r17
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <__moddi3+0xeb0>
    1fe6:	da 01       	movw	r26, r20
    1fe8:	c9 01       	movw	r24, r18
    1fea:	6d a8       	ldd	r6, Y+53	; 0x35
    1fec:	7e a8       	ldd	r7, Y+54	; 0x36
    1fee:	8f a8       	ldd	r8, Y+55	; 0x37
    1ff0:	98 ac       	ldd	r9, Y+56	; 0x38
    1ff2:	68 1a       	sub	r6, r24
    1ff4:	79 0a       	sbc	r7, r25
    1ff6:	8a 0a       	sbc	r8, r26
    1ff8:	9b 0a       	sbc	r9, r27
    1ffa:	09 a9       	ldd	r16, Y+49	; 0x31
    1ffc:	1a a9       	ldd	r17, Y+50	; 0x32
    1ffe:	2b a9       	ldd	r18, Y+51	; 0x33
    2000:	3c a9       	ldd	r19, Y+52	; 0x34
    2002:	0a 19       	sub	r16, r10
    2004:	1b 09       	sbc	r17, r11
    2006:	2c 09       	sbc	r18, r12
    2008:	3d 09       	sbc	r19, r13
    200a:	58 01       	movw	r10, r16
    200c:	69 01       	movw	r12, r18
    200e:	22 24       	eor	r2, r2
    2010:	33 24       	eor	r3, r3
    2012:	21 01       	movw	r4, r2
    2014:	2d a9       	ldd	r18, Y+53	; 0x35
    2016:	3e a9       	ldd	r19, Y+54	; 0x36
    2018:	4f a9       	ldd	r20, Y+55	; 0x37
    201a:	58 ad       	ldd	r21, Y+56	; 0x38
    201c:	26 15       	cp	r18, r6
    201e:	37 05       	cpc	r19, r7
    2020:	48 05       	cpc	r20, r8
    2022:	59 05       	cpc	r21, r9
    2024:	28 f4       	brcc	.+10     	; 0x2030 <__moddi3+0xef6>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	28 2e       	mov	r2, r24
    202a:	31 2c       	mov	r3, r1
    202c:	41 2c       	mov	r4, r1
    202e:	51 2c       	mov	r5, r1
    2030:	86 01       	movw	r16, r12
    2032:	75 01       	movw	r14, r10
    2034:	e2 18       	sub	r14, r2
    2036:	f3 08       	sbc	r15, r3
    2038:	04 09       	sbc	r16, r4
    203a:	15 09       	sbc	r17, r5
    203c:	a8 01       	movw	r20, r16
    203e:	97 01       	movw	r18, r14
    2040:	e2 96       	adiw	r28, 0x32	; 50
    2042:	0f ac       	ldd	r0, Y+63	; 0x3f
    2044:	e2 97       	sbiw	r28, 0x32	; 50
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <__moddi3+0xf16>
    2048:	22 0f       	add	r18, r18
    204a:	33 1f       	adc	r19, r19
    204c:	44 1f       	adc	r20, r20
    204e:	55 1f       	adc	r21, r21
    2050:	0a 94       	dec	r0
    2052:	d2 f7       	brpl	.-12     	; 0x2048 <__moddi3+0xf0e>
    2054:	d4 01       	movw	r26, r8
    2056:	c3 01       	movw	r24, r6
    2058:	e3 96       	adiw	r28, 0x33	; 51
    205a:	0f ac       	ldd	r0, Y+63	; 0x3f
    205c:	e3 97       	sbiw	r28, 0x33	; 51
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <__moddi3+0xf2e>
    2060:	b6 95       	lsr	r27
    2062:	a7 95       	ror	r26
    2064:	97 95       	ror	r25
    2066:	87 95       	ror	r24
    2068:	0a 94       	dec	r0
    206a:	d2 f7       	brpl	.-12     	; 0x2060 <__moddi3+0xf26>
    206c:	28 2b       	or	r18, r24
    206e:	39 2b       	or	r19, r25
    2070:	4a 2b       	or	r20, r26
    2072:	5b 2b       	or	r21, r27
    2074:	29 a7       	std	Y+41, r18	; 0x29
    2076:	3a a7       	std	Y+42, r19	; 0x2a
    2078:	4b a7       	std	Y+43, r20	; 0x2b
    207a:	5c a7       	std	Y+44, r21	; 0x2c
    207c:	e3 96       	adiw	r28, 0x33	; 51
    207e:	0f ac       	ldd	r0, Y+63	; 0x3f
    2080:	e3 97       	sbiw	r28, 0x33	; 51
    2082:	04 c0       	rjmp	.+8      	; 0x208c <__moddi3+0xf52>
    2084:	16 95       	lsr	r17
    2086:	07 95       	ror	r16
    2088:	f7 94       	ror	r15
    208a:	e7 94       	ror	r14
    208c:	0a 94       	dec	r0
    208e:	d2 f7       	brpl	.-12     	; 0x2084 <__moddi3+0xf4a>
    2090:	ed a6       	std	Y+45, r14	; 0x2d
    2092:	fe a6       	std	Y+46, r15	; 0x2e
    2094:	0f a7       	std	Y+47, r16	; 0x2f
    2096:	18 ab       	std	Y+48, r17	; 0x30
    2098:	29 8b       	std	Y+17, r18	; 0x11
    209a:	8a a5       	ldd	r24, Y+42	; 0x2a
    209c:	8a 8b       	std	Y+18, r24	; 0x12
    209e:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a0:	8b 8b       	std	Y+19, r24	; 0x13
    20a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    20a4:	8c 8b       	std	Y+20, r24	; 0x14
    20a6:	ed 8a       	std	Y+21, r14	; 0x15
    20a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    20aa:	8e 8b       	std	Y+22, r24	; 0x16
    20ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ae:	8f 8b       	std	Y+23, r24	; 0x17
    20b0:	88 a9       	ldd	r24, Y+48	; 0x30
    20b2:	88 8f       	std	Y+24, r24	; 0x18
    20b4:	e1 96       	adiw	r28, 0x31	; 49
    20b6:	4c ad       	ldd	r20, Y+60	; 0x3c
    20b8:	5d ad       	ldd	r21, Y+61	; 0x3d
    20ba:	6e ad       	ldd	r22, Y+62	; 0x3e
    20bc:	7f ad       	ldd	r23, Y+63	; 0x3f
    20be:	e1 97       	sbiw	r28, 0x31	; 49
    20c0:	41 15       	cp	r20, r1
    20c2:	51 05       	cpc	r21, r1
    20c4:	61 05       	cpc	r22, r1
    20c6:	71 05       	cpc	r23, r1
    20c8:	09 f4       	brne	.+2      	; 0x20cc <__moddi3+0xf92>
    20ca:	67 c0       	rjmp	.+206    	; 0x219a <__moddi3+0x1060>
    20cc:	89 89       	ldd	r24, Y+17	; 0x11
    20ce:	2a 89       	ldd	r18, Y+18	; 0x12
    20d0:	3b 89       	ldd	r19, Y+19	; 0x13
    20d2:	4c 89       	ldd	r20, Y+20	; 0x14
    20d4:	5d 89       	ldd	r21, Y+21	; 0x15
    20d6:	ae 89       	ldd	r26, Y+22	; 0x16
    20d8:	bf 89       	ldd	r27, Y+23	; 0x17
    20da:	18 8d       	ldd	r17, Y+24	; 0x18
    20dc:	f8 2f       	mov	r31, r24
    20de:	f1 95       	neg	r31
    20e0:	91 e0       	ldi	r25, 0x01	; 1
    20e2:	1f 16       	cp	r1, r31
    20e4:	08 f0       	brcs	.+2      	; 0x20e8 <__moddi3+0xfae>
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	82 2f       	mov	r24, r18
    20ea:	81 95       	neg	r24
    20ec:	21 e0       	ldi	r18, 0x01	; 1
    20ee:	18 16       	cp	r1, r24
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <__moddi3+0xfba>
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	e8 2f       	mov	r30, r24
    20f6:	e9 1b       	sub	r30, r25
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	8e 17       	cp	r24, r30
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <__moddi3+0xfc6>
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	29 2b       	or	r18, r25
    2102:	83 2f       	mov	r24, r19
    2104:	81 95       	neg	r24
    2106:	31 e0       	ldi	r19, 0x01	; 1
    2108:	18 16       	cp	r1, r24
    210a:	08 f0       	brcs	.+2      	; 0x210e <__moddi3+0xfd4>
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	78 2f       	mov	r23, r24
    2110:	72 1b       	sub	r23, r18
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	87 17       	cp	r24, r23
    2116:	08 f0       	brcs	.+2      	; 0x211a <__moddi3+0xfe0>
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	39 2b       	or	r19, r25
    211c:	84 2f       	mov	r24, r20
    211e:	81 95       	neg	r24
    2120:	21 e0       	ldi	r18, 0x01	; 1
    2122:	18 16       	cp	r1, r24
    2124:	08 f0       	brcs	.+2      	; 0x2128 <__moddi3+0xfee>
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	68 2f       	mov	r22, r24
    212a:	63 1b       	sub	r22, r19
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	86 17       	cp	r24, r22
    2130:	08 f0       	brcs	.+2      	; 0x2134 <__moddi3+0xffa>
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	29 2b       	or	r18, r25
    2136:	85 2f       	mov	r24, r21
    2138:	81 95       	neg	r24
    213a:	31 e0       	ldi	r19, 0x01	; 1
    213c:	18 16       	cp	r1, r24
    213e:	08 f0       	brcs	.+2      	; 0x2142 <__moddi3+0x1008>
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	58 2f       	mov	r21, r24
    2144:	52 1b       	sub	r21, r18
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	85 17       	cp	r24, r21
    214a:	08 f0       	brcs	.+2      	; 0x214e <__moddi3+0x1014>
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	39 2b       	or	r19, r25
    2150:	8a 2f       	mov	r24, r26
    2152:	81 95       	neg	r24
    2154:	21 e0       	ldi	r18, 0x01	; 1
    2156:	18 16       	cp	r1, r24
    2158:	08 f0       	brcs	.+2      	; 0x215c <__moddi3+0x1022>
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	48 2f       	mov	r20, r24
    215e:	43 1b       	sub	r20, r19
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	84 17       	cp	r24, r20
    2164:	08 f0       	brcs	.+2      	; 0x2168 <__moddi3+0x102e>
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	29 2b       	or	r18, r25
    216a:	8b 2f       	mov	r24, r27
    216c:	81 95       	neg	r24
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	18 16       	cp	r1, r24
    2172:	08 f0       	brcs	.+2      	; 0x2176 <__moddi3+0x103c>
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	38 2f       	mov	r19, r24
    2178:	32 1b       	sub	r19, r18
    217a:	21 e0       	ldi	r18, 0x01	; 1
    217c:	83 17       	cp	r24, r19
    217e:	08 f0       	brcs	.+2      	; 0x2182 <__moddi3+0x1048>
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	92 2b       	or	r25, r18
    2184:	81 2f       	mov	r24, r17
    2186:	81 95       	neg	r24
    2188:	89 1b       	sub	r24, r25
    218a:	f9 8b       	std	Y+17, r31	; 0x11
    218c:	ea 8b       	std	Y+18, r30	; 0x12
    218e:	7b 8b       	std	Y+19, r23	; 0x13
    2190:	6c 8b       	std	Y+20, r22	; 0x14
    2192:	5d 8b       	std	Y+21, r21	; 0x15
    2194:	4e 8b       	std	Y+22, r20	; 0x16
    2196:	3f 8b       	std	Y+23, r19	; 0x17
    2198:	88 8f       	std	Y+24, r24	; 0x18
    219a:	29 89       	ldd	r18, Y+17	; 0x11
    219c:	3a 89       	ldd	r19, Y+18	; 0x12
    219e:	4b 89       	ldd	r20, Y+19	; 0x13
    21a0:	5c 89       	ldd	r21, Y+20	; 0x14
    21a2:	6d 89       	ldd	r22, Y+21	; 0x15
    21a4:	7e 89       	ldd	r23, Y+22	; 0x16
    21a6:	8f 89       	ldd	r24, Y+23	; 0x17
    21a8:	98 8d       	ldd	r25, Y+24	; 0x18
    21aa:	c9 58       	subi	r28, 0x89	; 137
    21ac:	df 4f       	sbci	r29, 0xFF	; 255
    21ae:	e2 e1       	ldi	r30, 0x12	; 18
    21b0:	0c 94 82 28 	jmp	0x5104	; 0x5104 <__epilogue_restores__>

000021b4 <_fpadd_parts>:
    21b4:	a0 e0       	ldi	r26, 0x00	; 0
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e0 ee       	ldi	r30, 0xE0	; 224
    21ba:	f0 e1       	ldi	r31, 0x10	; 16
    21bc:	0c 94 66 28 	jmp	0x50cc	; 0x50cc <__prologue_saves__>
    21c0:	dc 01       	movw	r26, r24
    21c2:	2b 01       	movw	r4, r22
    21c4:	fa 01       	movw	r30, r20
    21c6:	9c 91       	ld	r25, X
    21c8:	92 30       	cpi	r25, 0x02	; 2
    21ca:	08 f4       	brcc	.+2      	; 0x21ce <_fpadd_parts+0x1a>
    21cc:	39 c1       	rjmp	.+626    	; 0x2440 <_fpadd_parts+0x28c>
    21ce:	eb 01       	movw	r28, r22
    21d0:	88 81       	ld	r24, Y
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	08 f4       	brcc	.+2      	; 0x21d8 <_fpadd_parts+0x24>
    21d6:	33 c1       	rjmp	.+614    	; 0x243e <_fpadd_parts+0x28a>
    21d8:	94 30       	cpi	r25, 0x04	; 4
    21da:	69 f4       	brne	.+26     	; 0x21f6 <_fpadd_parts+0x42>
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	09 f0       	breq	.+2      	; 0x21e2 <_fpadd_parts+0x2e>
    21e0:	2f c1       	rjmp	.+606    	; 0x2440 <_fpadd_parts+0x28c>
    21e2:	11 96       	adiw	r26, 0x01	; 1
    21e4:	9c 91       	ld	r25, X
    21e6:	11 97       	sbiw	r26, 0x01	; 1
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	98 17       	cp	r25, r24
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <_fpadd_parts+0x3c>
    21ee:	28 c1       	rjmp	.+592    	; 0x2440 <_fpadd_parts+0x28c>
    21f0:	ac e9       	ldi	r26, 0x9C	; 156
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	25 c1       	rjmp	.+586    	; 0x2440 <_fpadd_parts+0x28c>
    21f6:	84 30       	cpi	r24, 0x04	; 4
    21f8:	09 f4       	brne	.+2      	; 0x21fc <_fpadd_parts+0x48>
    21fa:	21 c1       	rjmp	.+578    	; 0x243e <_fpadd_parts+0x28a>
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	a9 f4       	brne	.+42     	; 0x222a <_fpadd_parts+0x76>
    2200:	92 30       	cpi	r25, 0x02	; 2
    2202:	09 f0       	breq	.+2      	; 0x2206 <_fpadd_parts+0x52>
    2204:	1d c1       	rjmp	.+570    	; 0x2440 <_fpadd_parts+0x28c>
    2206:	9a 01       	movw	r18, r20
    2208:	ad 01       	movw	r20, r26
    220a:	88 e0       	ldi	r24, 0x08	; 8
    220c:	ea 01       	movw	r28, r20
    220e:	09 90       	ld	r0, Y+
    2210:	ae 01       	movw	r20, r28
    2212:	e9 01       	movw	r28, r18
    2214:	09 92       	st	Y+, r0
    2216:	9e 01       	movw	r18, r28
    2218:	81 50       	subi	r24, 0x01	; 1
    221a:	c1 f7       	brne	.-16     	; 0x220c <_fpadd_parts+0x58>
    221c:	e2 01       	movw	r28, r4
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	11 96       	adiw	r26, 0x01	; 1
    2222:	9c 91       	ld	r25, X
    2224:	89 23       	and	r24, r25
    2226:	81 83       	std	Z+1, r24	; 0x01
    2228:	08 c1       	rjmp	.+528    	; 0x243a <_fpadd_parts+0x286>
    222a:	92 30       	cpi	r25, 0x02	; 2
    222c:	09 f4       	brne	.+2      	; 0x2230 <_fpadd_parts+0x7c>
    222e:	07 c1       	rjmp	.+526    	; 0x243e <_fpadd_parts+0x28a>
    2230:	12 96       	adiw	r26, 0x02	; 2
    2232:	2d 90       	ld	r2, X+
    2234:	3c 90       	ld	r3, X
    2236:	13 97       	sbiw	r26, 0x03	; 3
    2238:	eb 01       	movw	r28, r22
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	14 96       	adiw	r26, 0x04	; 4
    2240:	ad 90       	ld	r10, X+
    2242:	bd 90       	ld	r11, X+
    2244:	cd 90       	ld	r12, X+
    2246:	dc 90       	ld	r13, X
    2248:	17 97       	sbiw	r26, 0x07	; 7
    224a:	ec 80       	ldd	r14, Y+4	; 0x04
    224c:	fd 80       	ldd	r15, Y+5	; 0x05
    224e:	0e 81       	ldd	r16, Y+6	; 0x06
    2250:	1f 81       	ldd	r17, Y+7	; 0x07
    2252:	91 01       	movw	r18, r2
    2254:	28 1b       	sub	r18, r24
    2256:	39 0b       	sbc	r19, r25
    2258:	b9 01       	movw	r22, r18
    225a:	37 ff       	sbrs	r19, 7
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <_fpadd_parts+0xb2>
    225e:	66 27       	eor	r22, r22
    2260:	77 27       	eor	r23, r23
    2262:	62 1b       	sub	r22, r18
    2264:	73 0b       	sbc	r23, r19
    2266:	60 32       	cpi	r22, 0x20	; 32
    2268:	71 05       	cpc	r23, r1
    226a:	0c f0       	brlt	.+2      	; 0x226e <_fpadd_parts+0xba>
    226c:	61 c0       	rjmp	.+194    	; 0x2330 <_fpadd_parts+0x17c>
    226e:	12 16       	cp	r1, r18
    2270:	13 06       	cpc	r1, r19
    2272:	6c f5       	brge	.+90     	; 0x22ce <_fpadd_parts+0x11a>
    2274:	37 01       	movw	r6, r14
    2276:	48 01       	movw	r8, r16
    2278:	06 2e       	mov	r0, r22
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <_fpadd_parts+0xd0>
    227c:	96 94       	lsr	r9
    227e:	87 94       	ror	r8
    2280:	77 94       	ror	r7
    2282:	67 94       	ror	r6
    2284:	0a 94       	dec	r0
    2286:	d2 f7       	brpl	.-12     	; 0x227c <_fpadd_parts+0xc8>
    2288:	21 e0       	ldi	r18, 0x01	; 1
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	04 c0       	rjmp	.+8      	; 0x229a <_fpadd_parts+0xe6>
    2292:	22 0f       	add	r18, r18
    2294:	33 1f       	adc	r19, r19
    2296:	44 1f       	adc	r20, r20
    2298:	55 1f       	adc	r21, r21
    229a:	6a 95       	dec	r22
    229c:	d2 f7       	brpl	.-12     	; 0x2292 <_fpadd_parts+0xde>
    229e:	21 50       	subi	r18, 0x01	; 1
    22a0:	30 40       	sbci	r19, 0x00	; 0
    22a2:	40 40       	sbci	r20, 0x00	; 0
    22a4:	50 40       	sbci	r21, 0x00	; 0
    22a6:	2e 21       	and	r18, r14
    22a8:	3f 21       	and	r19, r15
    22aa:	40 23       	and	r20, r16
    22ac:	51 23       	and	r21, r17
    22ae:	21 15       	cp	r18, r1
    22b0:	31 05       	cpc	r19, r1
    22b2:	41 05       	cpc	r20, r1
    22b4:	51 05       	cpc	r21, r1
    22b6:	21 f0       	breq	.+8      	; 0x22c0 <_fpadd_parts+0x10c>
    22b8:	21 e0       	ldi	r18, 0x01	; 1
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	79 01       	movw	r14, r18
    22c2:	8a 01       	movw	r16, r20
    22c4:	e6 28       	or	r14, r6
    22c6:	f7 28       	or	r15, r7
    22c8:	08 29       	or	r16, r8
    22ca:	19 29       	or	r17, r9
    22cc:	3c c0       	rjmp	.+120    	; 0x2346 <_fpadd_parts+0x192>
    22ce:	23 2b       	or	r18, r19
    22d0:	d1 f1       	breq	.+116    	; 0x2346 <_fpadd_parts+0x192>
    22d2:	26 0e       	add	r2, r22
    22d4:	37 1e       	adc	r3, r23
    22d6:	35 01       	movw	r6, r10
    22d8:	46 01       	movw	r8, r12
    22da:	06 2e       	mov	r0, r22
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <_fpadd_parts+0x132>
    22de:	96 94       	lsr	r9
    22e0:	87 94       	ror	r8
    22e2:	77 94       	ror	r7
    22e4:	67 94       	ror	r6
    22e6:	0a 94       	dec	r0
    22e8:	d2 f7       	brpl	.-12     	; 0x22de <_fpadd_parts+0x12a>
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <_fpadd_parts+0x148>
    22f4:	22 0f       	add	r18, r18
    22f6:	33 1f       	adc	r19, r19
    22f8:	44 1f       	adc	r20, r20
    22fa:	55 1f       	adc	r21, r21
    22fc:	6a 95       	dec	r22
    22fe:	d2 f7       	brpl	.-12     	; 0x22f4 <_fpadd_parts+0x140>
    2300:	21 50       	subi	r18, 0x01	; 1
    2302:	30 40       	sbci	r19, 0x00	; 0
    2304:	40 40       	sbci	r20, 0x00	; 0
    2306:	50 40       	sbci	r21, 0x00	; 0
    2308:	2a 21       	and	r18, r10
    230a:	3b 21       	and	r19, r11
    230c:	4c 21       	and	r20, r12
    230e:	5d 21       	and	r21, r13
    2310:	21 15       	cp	r18, r1
    2312:	31 05       	cpc	r19, r1
    2314:	41 05       	cpc	r20, r1
    2316:	51 05       	cpc	r21, r1
    2318:	21 f0       	breq	.+8      	; 0x2322 <_fpadd_parts+0x16e>
    231a:	21 e0       	ldi	r18, 0x01	; 1
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	59 01       	movw	r10, r18
    2324:	6a 01       	movw	r12, r20
    2326:	a6 28       	or	r10, r6
    2328:	b7 28       	or	r11, r7
    232a:	c8 28       	or	r12, r8
    232c:	d9 28       	or	r13, r9
    232e:	0b c0       	rjmp	.+22     	; 0x2346 <_fpadd_parts+0x192>
    2330:	82 15       	cp	r24, r2
    2332:	93 05       	cpc	r25, r3
    2334:	2c f0       	brlt	.+10     	; 0x2340 <_fpadd_parts+0x18c>
    2336:	1c 01       	movw	r2, r24
    2338:	aa 24       	eor	r10, r10
    233a:	bb 24       	eor	r11, r11
    233c:	65 01       	movw	r12, r10
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <_fpadd_parts+0x192>
    2340:	ee 24       	eor	r14, r14
    2342:	ff 24       	eor	r15, r15
    2344:	87 01       	movw	r16, r14
    2346:	11 96       	adiw	r26, 0x01	; 1
    2348:	9c 91       	ld	r25, X
    234a:	d2 01       	movw	r26, r4
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	8c 91       	ld	r24, X
    2350:	98 17       	cp	r25, r24
    2352:	09 f4       	brne	.+2      	; 0x2356 <_fpadd_parts+0x1a2>
    2354:	45 c0       	rjmp	.+138    	; 0x23e0 <_fpadd_parts+0x22c>
    2356:	99 23       	and	r25, r25
    2358:	39 f0       	breq	.+14     	; 0x2368 <_fpadd_parts+0x1b4>
    235a:	a8 01       	movw	r20, r16
    235c:	97 01       	movw	r18, r14
    235e:	2a 19       	sub	r18, r10
    2360:	3b 09       	sbc	r19, r11
    2362:	4c 09       	sbc	r20, r12
    2364:	5d 09       	sbc	r21, r13
    2366:	06 c0       	rjmp	.+12     	; 0x2374 <_fpadd_parts+0x1c0>
    2368:	a6 01       	movw	r20, r12
    236a:	95 01       	movw	r18, r10
    236c:	2e 19       	sub	r18, r14
    236e:	3f 09       	sbc	r19, r15
    2370:	40 0b       	sbc	r20, r16
    2372:	51 0b       	sbc	r21, r17
    2374:	57 fd       	sbrc	r21, 7
    2376:	08 c0       	rjmp	.+16     	; 0x2388 <_fpadd_parts+0x1d4>
    2378:	11 82       	std	Z+1, r1	; 0x01
    237a:	33 82       	std	Z+3, r3	; 0x03
    237c:	22 82       	std	Z+2, r2	; 0x02
    237e:	24 83       	std	Z+4, r18	; 0x04
    2380:	35 83       	std	Z+5, r19	; 0x05
    2382:	46 83       	std	Z+6, r20	; 0x06
    2384:	57 83       	std	Z+7, r21	; 0x07
    2386:	1d c0       	rjmp	.+58     	; 0x23c2 <_fpadd_parts+0x20e>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	81 83       	std	Z+1, r24	; 0x01
    238c:	33 82       	std	Z+3, r3	; 0x03
    238e:	22 82       	std	Z+2, r2	; 0x02
    2390:	88 27       	eor	r24, r24
    2392:	99 27       	eor	r25, r25
    2394:	dc 01       	movw	r26, r24
    2396:	82 1b       	sub	r24, r18
    2398:	93 0b       	sbc	r25, r19
    239a:	a4 0b       	sbc	r26, r20
    239c:	b5 0b       	sbc	r27, r21
    239e:	84 83       	std	Z+4, r24	; 0x04
    23a0:	95 83       	std	Z+5, r25	; 0x05
    23a2:	a6 83       	std	Z+6, r26	; 0x06
    23a4:	b7 83       	std	Z+7, r27	; 0x07
    23a6:	0d c0       	rjmp	.+26     	; 0x23c2 <_fpadd_parts+0x20e>
    23a8:	22 0f       	add	r18, r18
    23aa:	33 1f       	adc	r19, r19
    23ac:	44 1f       	adc	r20, r20
    23ae:	55 1f       	adc	r21, r21
    23b0:	24 83       	std	Z+4, r18	; 0x04
    23b2:	35 83       	std	Z+5, r19	; 0x05
    23b4:	46 83       	std	Z+6, r20	; 0x06
    23b6:	57 83       	std	Z+7, r21	; 0x07
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	93 83       	std	Z+3, r25	; 0x03
    23c0:	82 83       	std	Z+2, r24	; 0x02
    23c2:	24 81       	ldd	r18, Z+4	; 0x04
    23c4:	35 81       	ldd	r19, Z+5	; 0x05
    23c6:	46 81       	ldd	r20, Z+6	; 0x06
    23c8:	57 81       	ldd	r21, Z+7	; 0x07
    23ca:	da 01       	movw	r26, r20
    23cc:	c9 01       	movw	r24, r18
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	a1 09       	sbc	r26, r1
    23d2:	b1 09       	sbc	r27, r1
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	af 4f       	sbci	r26, 0xFF	; 255
    23da:	bf 43       	sbci	r27, 0x3F	; 63
    23dc:	28 f3       	brcs	.-54     	; 0x23a8 <_fpadd_parts+0x1f4>
    23de:	0b c0       	rjmp	.+22     	; 0x23f6 <_fpadd_parts+0x242>
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	33 82       	std	Z+3, r3	; 0x03
    23e4:	22 82       	std	Z+2, r2	; 0x02
    23e6:	ea 0c       	add	r14, r10
    23e8:	fb 1c       	adc	r15, r11
    23ea:	0c 1d       	adc	r16, r12
    23ec:	1d 1d       	adc	r17, r13
    23ee:	e4 82       	std	Z+4, r14	; 0x04
    23f0:	f5 82       	std	Z+5, r15	; 0x05
    23f2:	06 83       	std	Z+6, r16	; 0x06
    23f4:	17 83       	std	Z+7, r17	; 0x07
    23f6:	83 e0       	ldi	r24, 0x03	; 3
    23f8:	80 83       	st	Z, r24
    23fa:	24 81       	ldd	r18, Z+4	; 0x04
    23fc:	35 81       	ldd	r19, Z+5	; 0x05
    23fe:	46 81       	ldd	r20, Z+6	; 0x06
    2400:	57 81       	ldd	r21, Z+7	; 0x07
    2402:	57 ff       	sbrs	r21, 7
    2404:	1a c0       	rjmp	.+52     	; 0x243a <_fpadd_parts+0x286>
    2406:	c9 01       	movw	r24, r18
    2408:	aa 27       	eor	r26, r26
    240a:	97 fd       	sbrc	r25, 7
    240c:	a0 95       	com	r26
    240e:	ba 2f       	mov	r27, r26
    2410:	81 70       	andi	r24, 0x01	; 1
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	a0 70       	andi	r26, 0x00	; 0
    2416:	b0 70       	andi	r27, 0x00	; 0
    2418:	56 95       	lsr	r21
    241a:	47 95       	ror	r20
    241c:	37 95       	ror	r19
    241e:	27 95       	ror	r18
    2420:	82 2b       	or	r24, r18
    2422:	93 2b       	or	r25, r19
    2424:	a4 2b       	or	r26, r20
    2426:	b5 2b       	or	r27, r21
    2428:	84 83       	std	Z+4, r24	; 0x04
    242a:	95 83       	std	Z+5, r25	; 0x05
    242c:	a6 83       	std	Z+6, r26	; 0x06
    242e:	b7 83       	std	Z+7, r27	; 0x07
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	93 83       	std	Z+3, r25	; 0x03
    2438:	82 83       	std	Z+2, r24	; 0x02
    243a:	df 01       	movw	r26, r30
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <_fpadd_parts+0x28c>
    243e:	d2 01       	movw	r26, r4
    2440:	cd 01       	movw	r24, r26
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	e2 e1       	ldi	r30, 0x12	; 18
    2448:	0c 94 82 28 	jmp	0x5104	; 0x5104 <__epilogue_restores__>

0000244c <__subsf3>:
    244c:	a0 e2       	ldi	r26, 0x20	; 32
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	ec e2       	ldi	r30, 0x2C	; 44
    2452:	f2 e1       	ldi	r31, 0x12	; 18
    2454:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__prologue_saves__+0x18>
    2458:	69 83       	std	Y+1, r22	; 0x01
    245a:	7a 83       	std	Y+2, r23	; 0x02
    245c:	8b 83       	std	Y+3, r24	; 0x03
    245e:	9c 83       	std	Y+4, r25	; 0x04
    2460:	2d 83       	std	Y+5, r18	; 0x05
    2462:	3e 83       	std	Y+6, r19	; 0x06
    2464:	4f 83       	std	Y+7, r20	; 0x07
    2466:	58 87       	std	Y+8, r21	; 0x08
    2468:	e9 e0       	ldi	r30, 0x09	; 9
    246a:	ee 2e       	mov	r14, r30
    246c:	f1 2c       	mov	r15, r1
    246e:	ec 0e       	add	r14, r28
    2470:	fd 1e       	adc	r15, r29
    2472:	ce 01       	movw	r24, r28
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	b7 01       	movw	r22, r14
    2478:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    247c:	8e 01       	movw	r16, r28
    247e:	0f 5e       	subi	r16, 0xEF	; 239
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	ce 01       	movw	r24, r28
    2484:	05 96       	adiw	r24, 0x05	; 5
    2486:	b8 01       	movw	r22, r16
    2488:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    248c:	8a 89       	ldd	r24, Y+18	; 0x12
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	89 27       	eor	r24, r25
    2492:	8a 8b       	std	Y+18, r24	; 0x12
    2494:	c7 01       	movw	r24, r14
    2496:	b8 01       	movw	r22, r16
    2498:	ae 01       	movw	r20, r28
    249a:	47 5e       	subi	r20, 0xE7	; 231
    249c:	5f 4f       	sbci	r21, 0xFF	; 255
    249e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_fpadd_parts>
    24a2:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__pack_f>
    24a6:	a0 96       	adiw	r28, 0x20	; 32
    24a8:	e6 e0       	ldi	r30, 0x06	; 6
    24aa:	0c 94 8e 28 	jmp	0x511c	; 0x511c <__epilogue_restores__+0x18>

000024ae <__addsf3>:
    24ae:	a0 e2       	ldi	r26, 0x20	; 32
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ed e5       	ldi	r30, 0x5D	; 93
    24b4:	f2 e1       	ldi	r31, 0x12	; 18
    24b6:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__prologue_saves__+0x18>
    24ba:	69 83       	std	Y+1, r22	; 0x01
    24bc:	7a 83       	std	Y+2, r23	; 0x02
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	2d 83       	std	Y+5, r18	; 0x05
    24c4:	3e 83       	std	Y+6, r19	; 0x06
    24c6:	4f 83       	std	Y+7, r20	; 0x07
    24c8:	58 87       	std	Y+8, r21	; 0x08
    24ca:	f9 e0       	ldi	r31, 0x09	; 9
    24cc:	ef 2e       	mov	r14, r31
    24ce:	f1 2c       	mov	r15, r1
    24d0:	ec 0e       	add	r14, r28
    24d2:	fd 1e       	adc	r15, r29
    24d4:	ce 01       	movw	r24, r28
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	b7 01       	movw	r22, r14
    24da:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    24de:	8e 01       	movw	r16, r28
    24e0:	0f 5e       	subi	r16, 0xEF	; 239
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	ce 01       	movw	r24, r28
    24e6:	05 96       	adiw	r24, 0x05	; 5
    24e8:	b8 01       	movw	r22, r16
    24ea:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    24ee:	c7 01       	movw	r24, r14
    24f0:	b8 01       	movw	r22, r16
    24f2:	ae 01       	movw	r20, r28
    24f4:	47 5e       	subi	r20, 0xE7	; 231
    24f6:	5f 4f       	sbci	r21, 0xFF	; 255
    24f8:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_fpadd_parts>
    24fc:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__pack_f>
    2500:	a0 96       	adiw	r28, 0x20	; 32
    2502:	e6 e0       	ldi	r30, 0x06	; 6
    2504:	0c 94 8e 28 	jmp	0x511c	; 0x511c <__epilogue_restores__+0x18>

00002508 <__mulsf3>:
    2508:	a0 e2       	ldi	r26, 0x20	; 32
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ea e8       	ldi	r30, 0x8A	; 138
    250e:	f2 e1       	ldi	r31, 0x12	; 18
    2510:	0c 94 66 28 	jmp	0x50cc	; 0x50cc <__prologue_saves__>
    2514:	69 83       	std	Y+1, r22	; 0x01
    2516:	7a 83       	std	Y+2, r23	; 0x02
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	2d 83       	std	Y+5, r18	; 0x05
    251e:	3e 83       	std	Y+6, r19	; 0x06
    2520:	4f 83       	std	Y+7, r20	; 0x07
    2522:	58 87       	std	Y+8, r21	; 0x08
    2524:	ce 01       	movw	r24, r28
    2526:	01 96       	adiw	r24, 0x01	; 1
    2528:	be 01       	movw	r22, r28
    252a:	67 5f       	subi	r22, 0xF7	; 247
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    2532:	ce 01       	movw	r24, r28
    2534:	05 96       	adiw	r24, 0x05	; 5
    2536:	be 01       	movw	r22, r28
    2538:	6f 5e       	subi	r22, 0xEF	; 239
    253a:	7f 4f       	sbci	r23, 0xFF	; 255
    253c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    2540:	99 85       	ldd	r25, Y+9	; 0x09
    2542:	92 30       	cpi	r25, 0x02	; 2
    2544:	88 f0       	brcs	.+34     	; 0x2568 <__mulsf3+0x60>
    2546:	89 89       	ldd	r24, Y+17	; 0x11
    2548:	82 30       	cpi	r24, 0x02	; 2
    254a:	c8 f0       	brcs	.+50     	; 0x257e <__mulsf3+0x76>
    254c:	94 30       	cpi	r25, 0x04	; 4
    254e:	19 f4       	brne	.+6      	; 0x2556 <__mulsf3+0x4e>
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	51 f4       	brne	.+20     	; 0x2568 <__mulsf3+0x60>
    2554:	04 c0       	rjmp	.+8      	; 0x255e <__mulsf3+0x56>
    2556:	84 30       	cpi	r24, 0x04	; 4
    2558:	29 f4       	brne	.+10     	; 0x2564 <__mulsf3+0x5c>
    255a:	92 30       	cpi	r25, 0x02	; 2
    255c:	81 f4       	brne	.+32     	; 0x257e <__mulsf3+0x76>
    255e:	8c e9       	ldi	r24, 0x9C	; 156
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	c6 c0       	rjmp	.+396    	; 0x26f0 <__mulsf3+0x1e8>
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	49 f4       	brne	.+18     	; 0x257a <__mulsf3+0x72>
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	8a 89       	ldd	r24, Y+18	; 0x12
    256e:	98 13       	cpse	r25, r24
    2570:	21 e0       	ldi	r18, 0x01	; 1
    2572:	2a 87       	std	Y+10, r18	; 0x0a
    2574:	ce 01       	movw	r24, r28
    2576:	09 96       	adiw	r24, 0x09	; 9
    2578:	bb c0       	rjmp	.+374    	; 0x26f0 <__mulsf3+0x1e8>
    257a:	82 30       	cpi	r24, 0x02	; 2
    257c:	49 f4       	brne	.+18     	; 0x2590 <__mulsf3+0x88>
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	8a 89       	ldd	r24, Y+18	; 0x12
    2584:	98 13       	cpse	r25, r24
    2586:	21 e0       	ldi	r18, 0x01	; 1
    2588:	2a 8b       	std	Y+18, r18	; 0x12
    258a:	ce 01       	movw	r24, r28
    258c:	41 96       	adiw	r24, 0x11	; 17
    258e:	b0 c0       	rjmp	.+352    	; 0x26f0 <__mulsf3+0x1e8>
    2590:	2d 84       	ldd	r2, Y+13	; 0x0d
    2592:	3e 84       	ldd	r3, Y+14	; 0x0e
    2594:	4f 84       	ldd	r4, Y+15	; 0x0f
    2596:	58 88       	ldd	r5, Y+16	; 0x10
    2598:	6d 88       	ldd	r6, Y+21	; 0x15
    259a:	7e 88       	ldd	r7, Y+22	; 0x16
    259c:	8f 88       	ldd	r8, Y+23	; 0x17
    259e:	98 8c       	ldd	r9, Y+24	; 0x18
    25a0:	ee 24       	eor	r14, r14
    25a2:	ff 24       	eor	r15, r15
    25a4:	87 01       	movw	r16, r14
    25a6:	aa 24       	eor	r10, r10
    25a8:	bb 24       	eor	r11, r11
    25aa:	65 01       	movw	r12, r10
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	e0 e0       	ldi	r30, 0x00	; 0
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	c1 01       	movw	r24, r2
    25ba:	81 70       	andi	r24, 0x01	; 1
    25bc:	90 70       	andi	r25, 0x00	; 0
    25be:	89 2b       	or	r24, r25
    25c0:	e9 f0       	breq	.+58     	; 0x25fc <__mulsf3+0xf4>
    25c2:	e6 0c       	add	r14, r6
    25c4:	f7 1c       	adc	r15, r7
    25c6:	08 1d       	adc	r16, r8
    25c8:	19 1d       	adc	r17, r9
    25ca:	9a 01       	movw	r18, r20
    25cc:	ab 01       	movw	r20, r22
    25ce:	2a 0d       	add	r18, r10
    25d0:	3b 1d       	adc	r19, r11
    25d2:	4c 1d       	adc	r20, r12
    25d4:	5d 1d       	adc	r21, r13
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e6 14       	cp	r14, r6
    25e0:	f7 04       	cpc	r15, r7
    25e2:	08 05       	cpc	r16, r8
    25e4:	19 05       	cpc	r17, r9
    25e6:	20 f4       	brcc	.+8      	; 0x25f0 <__mulsf3+0xe8>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e0       	ldi	r26, 0x00	; 0
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	ba 01       	movw	r22, r20
    25f2:	a9 01       	movw	r20, r18
    25f4:	48 0f       	add	r20, r24
    25f6:	59 1f       	adc	r21, r25
    25f8:	6a 1f       	adc	r22, r26
    25fa:	7b 1f       	adc	r23, r27
    25fc:	aa 0c       	add	r10, r10
    25fe:	bb 1c       	adc	r11, r11
    2600:	cc 1c       	adc	r12, r12
    2602:	dd 1c       	adc	r13, r13
    2604:	97 fe       	sbrs	r9, 7
    2606:	08 c0       	rjmp	.+16     	; 0x2618 <__mulsf3+0x110>
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	a8 2a       	or	r10, r24
    2612:	b9 2a       	or	r11, r25
    2614:	ca 2a       	or	r12, r26
    2616:	db 2a       	or	r13, r27
    2618:	31 96       	adiw	r30, 0x01	; 1
    261a:	e0 32       	cpi	r30, 0x20	; 32
    261c:	f1 05       	cpc	r31, r1
    261e:	49 f0       	breq	.+18     	; 0x2632 <__mulsf3+0x12a>
    2620:	66 0c       	add	r6, r6
    2622:	77 1c       	adc	r7, r7
    2624:	88 1c       	adc	r8, r8
    2626:	99 1c       	adc	r9, r9
    2628:	56 94       	lsr	r5
    262a:	47 94       	ror	r4
    262c:	37 94       	ror	r3
    262e:	27 94       	ror	r2
    2630:	c3 cf       	rjmp	.-122    	; 0x25b8 <__mulsf3+0xb0>
    2632:	fa 85       	ldd	r31, Y+10	; 0x0a
    2634:	ea 89       	ldd	r30, Y+18	; 0x12
    2636:	2b 89       	ldd	r18, Y+19	; 0x13
    2638:	3c 89       	ldd	r19, Y+20	; 0x14
    263a:	8b 85       	ldd	r24, Y+11	; 0x0b
    263c:	9c 85       	ldd	r25, Y+12	; 0x0c
    263e:	28 0f       	add	r18, r24
    2640:	39 1f       	adc	r19, r25
    2642:	2e 5f       	subi	r18, 0xFE	; 254
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	17 c0       	rjmp	.+46     	; 0x2676 <__mulsf3+0x16e>
    2648:	ca 01       	movw	r24, r20
    264a:	81 70       	andi	r24, 0x01	; 1
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	89 2b       	or	r24, r25
    2650:	61 f0       	breq	.+24     	; 0x266a <__mulsf3+0x162>
    2652:	16 95       	lsr	r17
    2654:	07 95       	ror	r16
    2656:	f7 94       	ror	r15
    2658:	e7 94       	ror	r14
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a0 e0       	ldi	r26, 0x00	; 0
    2660:	b0 e8       	ldi	r27, 0x80	; 128
    2662:	e8 2a       	or	r14, r24
    2664:	f9 2a       	or	r15, r25
    2666:	0a 2b       	or	r16, r26
    2668:	1b 2b       	or	r17, r27
    266a:	76 95       	lsr	r23
    266c:	67 95       	ror	r22
    266e:	57 95       	ror	r21
    2670:	47 95       	ror	r20
    2672:	2f 5f       	subi	r18, 0xFF	; 255
    2674:	3f 4f       	sbci	r19, 0xFF	; 255
    2676:	77 fd       	sbrc	r23, 7
    2678:	e7 cf       	rjmp	.-50     	; 0x2648 <__mulsf3+0x140>
    267a:	0c c0       	rjmp	.+24     	; 0x2694 <__mulsf3+0x18c>
    267c:	44 0f       	add	r20, r20
    267e:	55 1f       	adc	r21, r21
    2680:	66 1f       	adc	r22, r22
    2682:	77 1f       	adc	r23, r23
    2684:	17 fd       	sbrc	r17, 7
    2686:	41 60       	ori	r20, 0x01	; 1
    2688:	ee 0c       	add	r14, r14
    268a:	ff 1c       	adc	r15, r15
    268c:	00 1f       	adc	r16, r16
    268e:	11 1f       	adc	r17, r17
    2690:	21 50       	subi	r18, 0x01	; 1
    2692:	30 40       	sbci	r19, 0x00	; 0
    2694:	40 30       	cpi	r20, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	59 07       	cpc	r21, r25
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	69 07       	cpc	r22, r25
    269e:	90 e4       	ldi	r25, 0x40	; 64
    26a0:	79 07       	cpc	r23, r25
    26a2:	60 f3       	brcs	.-40     	; 0x267c <__mulsf3+0x174>
    26a4:	2b 8f       	std	Y+27, r18	; 0x1b
    26a6:	3c 8f       	std	Y+28, r19	; 0x1c
    26a8:	db 01       	movw	r26, r22
    26aa:	ca 01       	movw	r24, r20
    26ac:	8f 77       	andi	r24, 0x7F	; 127
    26ae:	90 70       	andi	r25, 0x00	; 0
    26b0:	a0 70       	andi	r26, 0x00	; 0
    26b2:	b0 70       	andi	r27, 0x00	; 0
    26b4:	80 34       	cpi	r24, 0x40	; 64
    26b6:	91 05       	cpc	r25, r1
    26b8:	a1 05       	cpc	r26, r1
    26ba:	b1 05       	cpc	r27, r1
    26bc:	61 f4       	brne	.+24     	; 0x26d6 <__mulsf3+0x1ce>
    26be:	47 fd       	sbrc	r20, 7
    26c0:	0a c0       	rjmp	.+20     	; 0x26d6 <__mulsf3+0x1ce>
    26c2:	e1 14       	cp	r14, r1
    26c4:	f1 04       	cpc	r15, r1
    26c6:	01 05       	cpc	r16, r1
    26c8:	11 05       	cpc	r17, r1
    26ca:	29 f0       	breq	.+10     	; 0x26d6 <__mulsf3+0x1ce>
    26cc:	40 5c       	subi	r20, 0xC0	; 192
    26ce:	5f 4f       	sbci	r21, 0xFF	; 255
    26d0:	6f 4f       	sbci	r22, 0xFF	; 255
    26d2:	7f 4f       	sbci	r23, 0xFF	; 255
    26d4:	40 78       	andi	r20, 0x80	; 128
    26d6:	1a 8e       	std	Y+26, r1	; 0x1a
    26d8:	fe 17       	cp	r31, r30
    26da:	11 f0       	breq	.+4      	; 0x26e0 <__mulsf3+0x1d8>
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	8a 8f       	std	Y+26, r24	; 0x1a
    26e0:	4d 8f       	std	Y+29, r20	; 0x1d
    26e2:	5e 8f       	std	Y+30, r21	; 0x1e
    26e4:	6f 8f       	std	Y+31, r22	; 0x1f
    26e6:	78 a3       	std	Y+32, r23	; 0x20
    26e8:	83 e0       	ldi	r24, 0x03	; 3
    26ea:	89 8f       	std	Y+25, r24	; 0x19
    26ec:	ce 01       	movw	r24, r28
    26ee:	49 96       	adiw	r24, 0x19	; 25
    26f0:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__pack_f>
    26f4:	a0 96       	adiw	r28, 0x20	; 32
    26f6:	e2 e1       	ldi	r30, 0x12	; 18
    26f8:	0c 94 82 28 	jmp	0x5104	; 0x5104 <__epilogue_restores__>

000026fc <__gtsf2>:
    26fc:	a8 e1       	ldi	r26, 0x18	; 24
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e4 e8       	ldi	r30, 0x84	; 132
    2702:	f3 e1       	ldi	r31, 0x13	; 19
    2704:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__prologue_saves__+0x18>
    2708:	69 83       	std	Y+1, r22	; 0x01
    270a:	7a 83       	std	Y+2, r23	; 0x02
    270c:	8b 83       	std	Y+3, r24	; 0x03
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	2d 83       	std	Y+5, r18	; 0x05
    2712:	3e 83       	std	Y+6, r19	; 0x06
    2714:	4f 83       	std	Y+7, r20	; 0x07
    2716:	58 87       	std	Y+8, r21	; 0x08
    2718:	89 e0       	ldi	r24, 0x09	; 9
    271a:	e8 2e       	mov	r14, r24
    271c:	f1 2c       	mov	r15, r1
    271e:	ec 0e       	add	r14, r28
    2720:	fd 1e       	adc	r15, r29
    2722:	ce 01       	movw	r24, r28
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	b7 01       	movw	r22, r14
    2728:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    272c:	8e 01       	movw	r16, r28
    272e:	0f 5e       	subi	r16, 0xEF	; 239
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	ce 01       	movw	r24, r28
    2734:	05 96       	adiw	r24, 0x05	; 5
    2736:	b8 01       	movw	r22, r16
    2738:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    273c:	89 85       	ldd	r24, Y+9	; 0x09
    273e:	82 30       	cpi	r24, 0x02	; 2
    2740:	40 f0       	brcs	.+16     	; 0x2752 <__gtsf2+0x56>
    2742:	89 89       	ldd	r24, Y+17	; 0x11
    2744:	82 30       	cpi	r24, 0x02	; 2
    2746:	28 f0       	brcs	.+10     	; 0x2752 <__gtsf2+0x56>
    2748:	c7 01       	movw	r24, r14
    274a:	b8 01       	movw	r22, r16
    274c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fpcmp_parts_f>
    2750:	01 c0       	rjmp	.+2      	; 0x2754 <__gtsf2+0x58>
    2752:	8f ef       	ldi	r24, 0xFF	; 255
    2754:	68 96       	adiw	r28, 0x18	; 24
    2756:	e6 e0       	ldi	r30, 0x06	; 6
    2758:	0c 94 8e 28 	jmp	0x511c	; 0x511c <__epilogue_restores__+0x18>

0000275c <__gesf2>:
    275c:	a8 e1       	ldi	r26, 0x18	; 24
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e4 eb       	ldi	r30, 0xB4	; 180
    2762:	f3 e1       	ldi	r31, 0x13	; 19
    2764:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__prologue_saves__+0x18>
    2768:	69 83       	std	Y+1, r22	; 0x01
    276a:	7a 83       	std	Y+2, r23	; 0x02
    276c:	8b 83       	std	Y+3, r24	; 0x03
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	2d 83       	std	Y+5, r18	; 0x05
    2772:	3e 83       	std	Y+6, r19	; 0x06
    2774:	4f 83       	std	Y+7, r20	; 0x07
    2776:	58 87       	std	Y+8, r21	; 0x08
    2778:	89 e0       	ldi	r24, 0x09	; 9
    277a:	e8 2e       	mov	r14, r24
    277c:	f1 2c       	mov	r15, r1
    277e:	ec 0e       	add	r14, r28
    2780:	fd 1e       	adc	r15, r29
    2782:	ce 01       	movw	r24, r28
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	b7 01       	movw	r22, r14
    2788:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    278c:	8e 01       	movw	r16, r28
    278e:	0f 5e       	subi	r16, 0xEF	; 239
    2790:	1f 4f       	sbci	r17, 0xFF	; 255
    2792:	ce 01       	movw	r24, r28
    2794:	05 96       	adiw	r24, 0x05	; 5
    2796:	b8 01       	movw	r22, r16
    2798:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	82 30       	cpi	r24, 0x02	; 2
    27a0:	40 f0       	brcs	.+16     	; 0x27b2 <__gesf2+0x56>
    27a2:	89 89       	ldd	r24, Y+17	; 0x11
    27a4:	82 30       	cpi	r24, 0x02	; 2
    27a6:	28 f0       	brcs	.+10     	; 0x27b2 <__gesf2+0x56>
    27a8:	c7 01       	movw	r24, r14
    27aa:	b8 01       	movw	r22, r16
    27ac:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fpcmp_parts_f>
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <__gesf2+0x58>
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
    27b4:	68 96       	adiw	r28, 0x18	; 24
    27b6:	e6 e0       	ldi	r30, 0x06	; 6
    27b8:	0c 94 8e 28 	jmp	0x511c	; 0x511c <__epilogue_restores__+0x18>

000027bc <__ltsf2>:
    27bc:	a8 e1       	ldi	r26, 0x18	; 24
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e4 ee       	ldi	r30, 0xE4	; 228
    27c2:	f3 e1       	ldi	r31, 0x13	; 19
    27c4:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__prologue_saves__+0x18>
    27c8:	69 83       	std	Y+1, r22	; 0x01
    27ca:	7a 83       	std	Y+2, r23	; 0x02
    27cc:	8b 83       	std	Y+3, r24	; 0x03
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	2d 83       	std	Y+5, r18	; 0x05
    27d2:	3e 83       	std	Y+6, r19	; 0x06
    27d4:	4f 83       	std	Y+7, r20	; 0x07
    27d6:	58 87       	std	Y+8, r21	; 0x08
    27d8:	89 e0       	ldi	r24, 0x09	; 9
    27da:	e8 2e       	mov	r14, r24
    27dc:	f1 2c       	mov	r15, r1
    27de:	ec 0e       	add	r14, r28
    27e0:	fd 1e       	adc	r15, r29
    27e2:	ce 01       	movw	r24, r28
    27e4:	01 96       	adiw	r24, 0x01	; 1
    27e6:	b7 01       	movw	r22, r14
    27e8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    27ec:	8e 01       	movw	r16, r28
    27ee:	0f 5e       	subi	r16, 0xEF	; 239
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	ce 01       	movw	r24, r28
    27f4:	05 96       	adiw	r24, 0x05	; 5
    27f6:	b8 01       	movw	r22, r16
    27f8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    27fc:	89 85       	ldd	r24, Y+9	; 0x09
    27fe:	82 30       	cpi	r24, 0x02	; 2
    2800:	40 f0       	brcs	.+16     	; 0x2812 <__ltsf2+0x56>
    2802:	89 89       	ldd	r24, Y+17	; 0x11
    2804:	82 30       	cpi	r24, 0x02	; 2
    2806:	28 f0       	brcs	.+10     	; 0x2812 <__ltsf2+0x56>
    2808:	c7 01       	movw	r24, r14
    280a:	b8 01       	movw	r22, r16
    280c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fpcmp_parts_f>
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <__ltsf2+0x58>
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	68 96       	adiw	r28, 0x18	; 24
    2816:	e6 e0       	ldi	r30, 0x06	; 6
    2818:	0c 94 8e 28 	jmp	0x511c	; 0x511c <__epilogue_restores__+0x18>

0000281c <__fixsfsi>:
    281c:	ac e0       	ldi	r26, 0x0C	; 12
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e4 e1       	ldi	r30, 0x14	; 20
    2822:	f4 e1       	ldi	r31, 0x14	; 20
    2824:	0c 94 76 28 	jmp	0x50ec	; 0x50ec <__prologue_saves__+0x20>
    2828:	69 83       	std	Y+1, r22	; 0x01
    282a:	7a 83       	std	Y+2, r23	; 0x02
    282c:	8b 83       	std	Y+3, r24	; 0x03
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	ce 01       	movw	r24, r28
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	be 01       	movw	r22, r28
    2836:	6b 5f       	subi	r22, 0xFB	; 251
    2838:	7f 4f       	sbci	r23, 0xFF	; 255
    283a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	82 30       	cpi	r24, 0x02	; 2
    2842:	61 f1       	breq	.+88     	; 0x289c <__fixsfsi+0x80>
    2844:	82 30       	cpi	r24, 0x02	; 2
    2846:	50 f1       	brcs	.+84     	; 0x289c <__fixsfsi+0x80>
    2848:	84 30       	cpi	r24, 0x04	; 4
    284a:	21 f4       	brne	.+8      	; 0x2854 <__fixsfsi+0x38>
    284c:	8e 81       	ldd	r24, Y+6	; 0x06
    284e:	88 23       	and	r24, r24
    2850:	51 f1       	breq	.+84     	; 0x28a6 <__fixsfsi+0x8a>
    2852:	2e c0       	rjmp	.+92     	; 0x28b0 <__fixsfsi+0x94>
    2854:	2f 81       	ldd	r18, Y+7	; 0x07
    2856:	38 85       	ldd	r19, Y+8	; 0x08
    2858:	37 fd       	sbrc	r19, 7
    285a:	20 c0       	rjmp	.+64     	; 0x289c <__fixsfsi+0x80>
    285c:	6e 81       	ldd	r22, Y+6	; 0x06
    285e:	2f 31       	cpi	r18, 0x1F	; 31
    2860:	31 05       	cpc	r19, r1
    2862:	1c f0       	brlt	.+6      	; 0x286a <__fixsfsi+0x4e>
    2864:	66 23       	and	r22, r22
    2866:	f9 f0       	breq	.+62     	; 0x28a6 <__fixsfsi+0x8a>
    2868:	23 c0       	rjmp	.+70     	; 0x28b0 <__fixsfsi+0x94>
    286a:	8e e1       	ldi	r24, 0x1E	; 30
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	82 1b       	sub	r24, r18
    2870:	93 0b       	sbc	r25, r19
    2872:	29 85       	ldd	r18, Y+9	; 0x09
    2874:	3a 85       	ldd	r19, Y+10	; 0x0a
    2876:	4b 85       	ldd	r20, Y+11	; 0x0b
    2878:	5c 85       	ldd	r21, Y+12	; 0x0c
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <__fixsfsi+0x68>
    287c:	56 95       	lsr	r21
    287e:	47 95       	ror	r20
    2880:	37 95       	ror	r19
    2882:	27 95       	ror	r18
    2884:	8a 95       	dec	r24
    2886:	d2 f7       	brpl	.-12     	; 0x287c <__fixsfsi+0x60>
    2888:	66 23       	and	r22, r22
    288a:	b1 f0       	breq	.+44     	; 0x28b8 <__fixsfsi+0x9c>
    288c:	50 95       	com	r21
    288e:	40 95       	com	r20
    2890:	30 95       	com	r19
    2892:	21 95       	neg	r18
    2894:	3f 4f       	sbci	r19, 0xFF	; 255
    2896:	4f 4f       	sbci	r20, 0xFF	; 255
    2898:	5f 4f       	sbci	r21, 0xFF	; 255
    289a:	0e c0       	rjmp	.+28     	; 0x28b8 <__fixsfsi+0x9c>
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	09 c0       	rjmp	.+18     	; 0x28b8 <__fixsfsi+0x9c>
    28a6:	2f ef       	ldi	r18, 0xFF	; 255
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f ef       	ldi	r20, 0xFF	; 255
    28ac:	5f e7       	ldi	r21, 0x7F	; 127
    28ae:	04 c0       	rjmp	.+8      	; 0x28b8 <__fixsfsi+0x9c>
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	50 e8       	ldi	r21, 0x80	; 128
    28b8:	b9 01       	movw	r22, r18
    28ba:	ca 01       	movw	r24, r20
    28bc:	2c 96       	adiw	r28, 0x0c	; 12
    28be:	e2 e0       	ldi	r30, 0x02	; 2
    28c0:	0c 94 92 28 	jmp	0x5124	; 0x5124 <__epilogue_restores__+0x20>

000028c4 <__pack_f>:
    28c4:	df 92       	push	r13
    28c6:	ef 92       	push	r14
    28c8:	ff 92       	push	r15
    28ca:	0f 93       	push	r16
    28cc:	1f 93       	push	r17
    28ce:	fc 01       	movw	r30, r24
    28d0:	e4 80       	ldd	r14, Z+4	; 0x04
    28d2:	f5 80       	ldd	r15, Z+5	; 0x05
    28d4:	06 81       	ldd	r16, Z+6	; 0x06
    28d6:	17 81       	ldd	r17, Z+7	; 0x07
    28d8:	d1 80       	ldd	r13, Z+1	; 0x01
    28da:	80 81       	ld	r24, Z
    28dc:	82 30       	cpi	r24, 0x02	; 2
    28de:	48 f4       	brcc	.+18     	; 0x28f2 <__pack_f+0x2e>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 e1       	ldi	r26, 0x10	; 16
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e8 2a       	or	r14, r24
    28ea:	f9 2a       	or	r15, r25
    28ec:	0a 2b       	or	r16, r26
    28ee:	1b 2b       	or	r17, r27
    28f0:	a5 c0       	rjmp	.+330    	; 0x2a3c <__pack_f+0x178>
    28f2:	84 30       	cpi	r24, 0x04	; 4
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <__pack_f+0x34>
    28f6:	9f c0       	rjmp	.+318    	; 0x2a36 <__pack_f+0x172>
    28f8:	82 30       	cpi	r24, 0x02	; 2
    28fa:	21 f4       	brne	.+8      	; 0x2904 <__pack_f+0x40>
    28fc:	ee 24       	eor	r14, r14
    28fe:	ff 24       	eor	r15, r15
    2900:	87 01       	movw	r16, r14
    2902:	05 c0       	rjmp	.+10     	; 0x290e <__pack_f+0x4a>
    2904:	e1 14       	cp	r14, r1
    2906:	f1 04       	cpc	r15, r1
    2908:	01 05       	cpc	r16, r1
    290a:	11 05       	cpc	r17, r1
    290c:	19 f4       	brne	.+6      	; 0x2914 <__pack_f+0x50>
    290e:	e0 e0       	ldi	r30, 0x00	; 0
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	96 c0       	rjmp	.+300    	; 0x2a40 <__pack_f+0x17c>
    2914:	62 81       	ldd	r22, Z+2	; 0x02
    2916:	73 81       	ldd	r23, Z+3	; 0x03
    2918:	9f ef       	ldi	r25, 0xFF	; 255
    291a:	62 38       	cpi	r22, 0x82	; 130
    291c:	79 07       	cpc	r23, r25
    291e:	0c f0       	brlt	.+2      	; 0x2922 <__pack_f+0x5e>
    2920:	5b c0       	rjmp	.+182    	; 0x29d8 <__pack_f+0x114>
    2922:	22 e8       	ldi	r18, 0x82	; 130
    2924:	3f ef       	ldi	r19, 0xFF	; 255
    2926:	26 1b       	sub	r18, r22
    2928:	37 0b       	sbc	r19, r23
    292a:	2a 31       	cpi	r18, 0x1A	; 26
    292c:	31 05       	cpc	r19, r1
    292e:	2c f0       	brlt	.+10     	; 0x293a <__pack_f+0x76>
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	2a c0       	rjmp	.+84     	; 0x298e <__pack_f+0xca>
    293a:	b8 01       	movw	r22, r16
    293c:	a7 01       	movw	r20, r14
    293e:	02 2e       	mov	r0, r18
    2940:	04 c0       	rjmp	.+8      	; 0x294a <__pack_f+0x86>
    2942:	76 95       	lsr	r23
    2944:	67 95       	ror	r22
    2946:	57 95       	ror	r21
    2948:	47 95       	ror	r20
    294a:	0a 94       	dec	r0
    294c:	d2 f7       	brpl	.-12     	; 0x2942 <__pack_f+0x7e>
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a0 e0       	ldi	r26, 0x00	; 0
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	04 c0       	rjmp	.+8      	; 0x2960 <__pack_f+0x9c>
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	aa 1f       	adc	r26, r26
    295e:	bb 1f       	adc	r27, r27
    2960:	2a 95       	dec	r18
    2962:	d2 f7       	brpl	.-12     	; 0x2958 <__pack_f+0x94>
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	a1 09       	sbc	r26, r1
    2968:	b1 09       	sbc	r27, r1
    296a:	8e 21       	and	r24, r14
    296c:	9f 21       	and	r25, r15
    296e:	a0 23       	and	r26, r16
    2970:	b1 23       	and	r27, r17
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	a1 05       	cpc	r26, r1
    2976:	b1 05       	cpc	r27, r1
    2978:	21 f0       	breq	.+8      	; 0x2982 <__pack_f+0xbe>
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 e0       	ldi	r26, 0x00	; 0
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	9a 01       	movw	r18, r20
    2984:	ab 01       	movw	r20, r22
    2986:	28 2b       	or	r18, r24
    2988:	39 2b       	or	r19, r25
    298a:	4a 2b       	or	r20, r26
    298c:	5b 2b       	or	r21, r27
    298e:	da 01       	movw	r26, r20
    2990:	c9 01       	movw	r24, r18
    2992:	8f 77       	andi	r24, 0x7F	; 127
    2994:	90 70       	andi	r25, 0x00	; 0
    2996:	a0 70       	andi	r26, 0x00	; 0
    2998:	b0 70       	andi	r27, 0x00	; 0
    299a:	80 34       	cpi	r24, 0x40	; 64
    299c:	91 05       	cpc	r25, r1
    299e:	a1 05       	cpc	r26, r1
    29a0:	b1 05       	cpc	r27, r1
    29a2:	39 f4       	brne	.+14     	; 0x29b2 <__pack_f+0xee>
    29a4:	27 ff       	sbrs	r18, 7
    29a6:	09 c0       	rjmp	.+18     	; 0x29ba <__pack_f+0xf6>
    29a8:	20 5c       	subi	r18, 0xC0	; 192
    29aa:	3f 4f       	sbci	r19, 0xFF	; 255
    29ac:	4f 4f       	sbci	r20, 0xFF	; 255
    29ae:	5f 4f       	sbci	r21, 0xFF	; 255
    29b0:	04 c0       	rjmp	.+8      	; 0x29ba <__pack_f+0xf6>
    29b2:	21 5c       	subi	r18, 0xC1	; 193
    29b4:	3f 4f       	sbci	r19, 0xFF	; 255
    29b6:	4f 4f       	sbci	r20, 0xFF	; 255
    29b8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ba:	e0 e0       	ldi	r30, 0x00	; 0
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	20 30       	cpi	r18, 0x00	; 0
    29c0:	a0 e0       	ldi	r26, 0x00	; 0
    29c2:	3a 07       	cpc	r19, r26
    29c4:	a0 e0       	ldi	r26, 0x00	; 0
    29c6:	4a 07       	cpc	r20, r26
    29c8:	a0 e4       	ldi	r26, 0x40	; 64
    29ca:	5a 07       	cpc	r21, r26
    29cc:	10 f0       	brcs	.+4      	; 0x29d2 <__pack_f+0x10e>
    29ce:	e1 e0       	ldi	r30, 0x01	; 1
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	79 01       	movw	r14, r18
    29d4:	8a 01       	movw	r16, r20
    29d6:	27 c0       	rjmp	.+78     	; 0x2a26 <__pack_f+0x162>
    29d8:	60 38       	cpi	r22, 0x80	; 128
    29da:	71 05       	cpc	r23, r1
    29dc:	64 f5       	brge	.+88     	; 0x2a36 <__pack_f+0x172>
    29de:	fb 01       	movw	r30, r22
    29e0:	e1 58       	subi	r30, 0x81	; 129
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	d8 01       	movw	r26, r16
    29e6:	c7 01       	movw	r24, r14
    29e8:	8f 77       	andi	r24, 0x7F	; 127
    29ea:	90 70       	andi	r25, 0x00	; 0
    29ec:	a0 70       	andi	r26, 0x00	; 0
    29ee:	b0 70       	andi	r27, 0x00	; 0
    29f0:	80 34       	cpi	r24, 0x40	; 64
    29f2:	91 05       	cpc	r25, r1
    29f4:	a1 05       	cpc	r26, r1
    29f6:	b1 05       	cpc	r27, r1
    29f8:	39 f4       	brne	.+14     	; 0x2a08 <__pack_f+0x144>
    29fa:	e7 fe       	sbrs	r14, 7
    29fc:	0d c0       	rjmp	.+26     	; 0x2a18 <__pack_f+0x154>
    29fe:	80 e4       	ldi	r24, 0x40	; 64
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	04 c0       	rjmp	.+8      	; 0x2a10 <__pack_f+0x14c>
    2a08:	8f e3       	ldi	r24, 0x3F	; 63
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	a0 e0       	ldi	r26, 0x00	; 0
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e8 0e       	add	r14, r24
    2a12:	f9 1e       	adc	r15, r25
    2a14:	0a 1f       	adc	r16, r26
    2a16:	1b 1f       	adc	r17, r27
    2a18:	17 ff       	sbrs	r17, 7
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <__pack_f+0x162>
    2a1c:	16 95       	lsr	r17
    2a1e:	07 95       	ror	r16
    2a20:	f7 94       	ror	r15
    2a22:	e7 94       	ror	r14
    2a24:	31 96       	adiw	r30, 0x01	; 1
    2a26:	87 e0       	ldi	r24, 0x07	; 7
    2a28:	16 95       	lsr	r17
    2a2a:	07 95       	ror	r16
    2a2c:	f7 94       	ror	r15
    2a2e:	e7 94       	ror	r14
    2a30:	8a 95       	dec	r24
    2a32:	d1 f7       	brne	.-12     	; 0x2a28 <__pack_f+0x164>
    2a34:	05 c0       	rjmp	.+10     	; 0x2a40 <__pack_f+0x17c>
    2a36:	ee 24       	eor	r14, r14
    2a38:	ff 24       	eor	r15, r15
    2a3a:	87 01       	movw	r16, r14
    2a3c:	ef ef       	ldi	r30, 0xFF	; 255
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	6e 2f       	mov	r22, r30
    2a42:	67 95       	ror	r22
    2a44:	66 27       	eor	r22, r22
    2a46:	67 95       	ror	r22
    2a48:	90 2f       	mov	r25, r16
    2a4a:	9f 77       	andi	r25, 0x7F	; 127
    2a4c:	d7 94       	ror	r13
    2a4e:	dd 24       	eor	r13, r13
    2a50:	d7 94       	ror	r13
    2a52:	8e 2f       	mov	r24, r30
    2a54:	86 95       	lsr	r24
    2a56:	49 2f       	mov	r20, r25
    2a58:	46 2b       	or	r20, r22
    2a5a:	58 2f       	mov	r21, r24
    2a5c:	5d 29       	or	r21, r13
    2a5e:	b7 01       	movw	r22, r14
    2a60:	ca 01       	movw	r24, r20
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	df 90       	pop	r13
    2a6c:	08 95       	ret

00002a6e <__unpack_f>:
    2a6e:	fc 01       	movw	r30, r24
    2a70:	db 01       	movw	r26, r22
    2a72:	40 81       	ld	r20, Z
    2a74:	51 81       	ldd	r21, Z+1	; 0x01
    2a76:	22 81       	ldd	r18, Z+2	; 0x02
    2a78:	62 2f       	mov	r22, r18
    2a7a:	6f 77       	andi	r22, 0x7F	; 127
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	22 1f       	adc	r18, r18
    2a80:	22 27       	eor	r18, r18
    2a82:	22 1f       	adc	r18, r18
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	89 2f       	mov	r24, r25
    2a88:	88 0f       	add	r24, r24
    2a8a:	82 2b       	or	r24, r18
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	99 1f       	adc	r25, r25
    2a92:	99 27       	eor	r25, r25
    2a94:	99 1f       	adc	r25, r25
    2a96:	11 96       	adiw	r26, 0x01	; 1
    2a98:	9c 93       	st	X, r25
    2a9a:	11 97       	sbiw	r26, 0x01	; 1
    2a9c:	21 15       	cp	r18, r1
    2a9e:	31 05       	cpc	r19, r1
    2aa0:	a9 f5       	brne	.+106    	; 0x2b0c <__unpack_f+0x9e>
    2aa2:	41 15       	cp	r20, r1
    2aa4:	51 05       	cpc	r21, r1
    2aa6:	61 05       	cpc	r22, r1
    2aa8:	71 05       	cpc	r23, r1
    2aaa:	11 f4       	brne	.+4      	; 0x2ab0 <__unpack_f+0x42>
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	37 c0       	rjmp	.+110    	; 0x2b1e <__unpack_f+0xb0>
    2ab0:	82 e8       	ldi	r24, 0x82	; 130
    2ab2:	9f ef       	ldi	r25, 0xFF	; 255
    2ab4:	13 96       	adiw	r26, 0x03	; 3
    2ab6:	9c 93       	st	X, r25
    2ab8:	8e 93       	st	-X, r24
    2aba:	12 97       	sbiw	r26, 0x02	; 2
    2abc:	9a 01       	movw	r18, r20
    2abe:	ab 01       	movw	r20, r22
    2ac0:	67 e0       	ldi	r22, 0x07	; 7
    2ac2:	22 0f       	add	r18, r18
    2ac4:	33 1f       	adc	r19, r19
    2ac6:	44 1f       	adc	r20, r20
    2ac8:	55 1f       	adc	r21, r21
    2aca:	6a 95       	dec	r22
    2acc:	d1 f7       	brne	.-12     	; 0x2ac2 <__unpack_f+0x54>
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	8c 93       	st	X, r24
    2ad2:	0d c0       	rjmp	.+26     	; 0x2aee <__unpack_f+0x80>
    2ad4:	22 0f       	add	r18, r18
    2ad6:	33 1f       	adc	r19, r19
    2ad8:	44 1f       	adc	r20, r20
    2ada:	55 1f       	adc	r21, r21
    2adc:	12 96       	adiw	r26, 0x02	; 2
    2ade:	8d 91       	ld	r24, X+
    2ae0:	9c 91       	ld	r25, X
    2ae2:	13 97       	sbiw	r26, 0x03	; 3
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	13 96       	adiw	r26, 0x03	; 3
    2ae8:	9c 93       	st	X, r25
    2aea:	8e 93       	st	-X, r24
    2aec:	12 97       	sbiw	r26, 0x02	; 2
    2aee:	20 30       	cpi	r18, 0x00	; 0
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	38 07       	cpc	r19, r24
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	48 07       	cpc	r20, r24
    2af8:	80 e4       	ldi	r24, 0x40	; 64
    2afa:	58 07       	cpc	r21, r24
    2afc:	58 f3       	brcs	.-42     	; 0x2ad4 <__unpack_f+0x66>
    2afe:	14 96       	adiw	r26, 0x04	; 4
    2b00:	2d 93       	st	X+, r18
    2b02:	3d 93       	st	X+, r19
    2b04:	4d 93       	st	X+, r20
    2b06:	5c 93       	st	X, r21
    2b08:	17 97       	sbiw	r26, 0x07	; 7
    2b0a:	08 95       	ret
    2b0c:	2f 3f       	cpi	r18, 0xFF	; 255
    2b0e:	31 05       	cpc	r19, r1
    2b10:	79 f4       	brne	.+30     	; 0x2b30 <__unpack_f+0xc2>
    2b12:	41 15       	cp	r20, r1
    2b14:	51 05       	cpc	r21, r1
    2b16:	61 05       	cpc	r22, r1
    2b18:	71 05       	cpc	r23, r1
    2b1a:	19 f4       	brne	.+6      	; 0x2b22 <__unpack_f+0xb4>
    2b1c:	84 e0       	ldi	r24, 0x04	; 4
    2b1e:	8c 93       	st	X, r24
    2b20:	08 95       	ret
    2b22:	64 ff       	sbrs	r22, 4
    2b24:	03 c0       	rjmp	.+6      	; 0x2b2c <__unpack_f+0xbe>
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	8c 93       	st	X, r24
    2b2a:	12 c0       	rjmp	.+36     	; 0x2b50 <__unpack_f+0xe2>
    2b2c:	1c 92       	st	X, r1
    2b2e:	10 c0       	rjmp	.+32     	; 0x2b50 <__unpack_f+0xe2>
    2b30:	2f 57       	subi	r18, 0x7F	; 127
    2b32:	30 40       	sbci	r19, 0x00	; 0
    2b34:	13 96       	adiw	r26, 0x03	; 3
    2b36:	3c 93       	st	X, r19
    2b38:	2e 93       	st	-X, r18
    2b3a:	12 97       	sbiw	r26, 0x02	; 2
    2b3c:	83 e0       	ldi	r24, 0x03	; 3
    2b3e:	8c 93       	st	X, r24
    2b40:	87 e0       	ldi	r24, 0x07	; 7
    2b42:	44 0f       	add	r20, r20
    2b44:	55 1f       	adc	r21, r21
    2b46:	66 1f       	adc	r22, r22
    2b48:	77 1f       	adc	r23, r23
    2b4a:	8a 95       	dec	r24
    2b4c:	d1 f7       	brne	.-12     	; 0x2b42 <__unpack_f+0xd4>
    2b4e:	70 64       	ori	r23, 0x40	; 64
    2b50:	14 96       	adiw	r26, 0x04	; 4
    2b52:	4d 93       	st	X+, r20
    2b54:	5d 93       	st	X+, r21
    2b56:	6d 93       	st	X+, r22
    2b58:	7c 93       	st	X, r23
    2b5a:	17 97       	sbiw	r26, 0x07	; 7
    2b5c:	08 95       	ret

00002b5e <__fpcmp_parts_f>:
    2b5e:	1f 93       	push	r17
    2b60:	dc 01       	movw	r26, r24
    2b62:	fb 01       	movw	r30, r22
    2b64:	9c 91       	ld	r25, X
    2b66:	92 30       	cpi	r25, 0x02	; 2
    2b68:	08 f4       	brcc	.+2      	; 0x2b6c <__fpcmp_parts_f+0xe>
    2b6a:	47 c0       	rjmp	.+142    	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2b6c:	80 81       	ld	r24, Z
    2b6e:	82 30       	cpi	r24, 0x02	; 2
    2b70:	08 f4       	brcc	.+2      	; 0x2b74 <__fpcmp_parts_f+0x16>
    2b72:	43 c0       	rjmp	.+134    	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2b74:	94 30       	cpi	r25, 0x04	; 4
    2b76:	51 f4       	brne	.+20     	; 0x2b8c <__fpcmp_parts_f+0x2e>
    2b78:	11 96       	adiw	r26, 0x01	; 1
    2b7a:	1c 91       	ld	r17, X
    2b7c:	84 30       	cpi	r24, 0x04	; 4
    2b7e:	99 f5       	brne	.+102    	; 0x2be6 <__fpcmp_parts_f+0x88>
    2b80:	81 81       	ldd	r24, Z+1	; 0x01
    2b82:	68 2f       	mov	r22, r24
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	61 1b       	sub	r22, r17
    2b88:	71 09       	sbc	r23, r1
    2b8a:	3f c0       	rjmp	.+126    	; 0x2c0a <__fpcmp_parts_f+0xac>
    2b8c:	84 30       	cpi	r24, 0x04	; 4
    2b8e:	21 f0       	breq	.+8      	; 0x2b98 <__fpcmp_parts_f+0x3a>
    2b90:	92 30       	cpi	r25, 0x02	; 2
    2b92:	31 f4       	brne	.+12     	; 0x2ba0 <__fpcmp_parts_f+0x42>
    2b94:	82 30       	cpi	r24, 0x02	; 2
    2b96:	b9 f1       	breq	.+110    	; 0x2c06 <__fpcmp_parts_f+0xa8>
    2b98:	81 81       	ldd	r24, Z+1	; 0x01
    2b9a:	88 23       	and	r24, r24
    2b9c:	89 f1       	breq	.+98     	; 0x2c00 <__fpcmp_parts_f+0xa2>
    2b9e:	2d c0       	rjmp	.+90     	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2ba0:	11 96       	adiw	r26, 0x01	; 1
    2ba2:	1c 91       	ld	r17, X
    2ba4:	11 97       	sbiw	r26, 0x01	; 1
    2ba6:	82 30       	cpi	r24, 0x02	; 2
    2ba8:	f1 f0       	breq	.+60     	; 0x2be6 <__fpcmp_parts_f+0x88>
    2baa:	81 81       	ldd	r24, Z+1	; 0x01
    2bac:	18 17       	cp	r17, r24
    2bae:	d9 f4       	brne	.+54     	; 0x2be6 <__fpcmp_parts_f+0x88>
    2bb0:	12 96       	adiw	r26, 0x02	; 2
    2bb2:	2d 91       	ld	r18, X+
    2bb4:	3c 91       	ld	r19, X
    2bb6:	13 97       	sbiw	r26, 0x03	; 3
    2bb8:	82 81       	ldd	r24, Z+2	; 0x02
    2bba:	93 81       	ldd	r25, Z+3	; 0x03
    2bbc:	82 17       	cp	r24, r18
    2bbe:	93 07       	cpc	r25, r19
    2bc0:	94 f0       	brlt	.+36     	; 0x2be6 <__fpcmp_parts_f+0x88>
    2bc2:	28 17       	cp	r18, r24
    2bc4:	39 07       	cpc	r19, r25
    2bc6:	bc f0       	brlt	.+46     	; 0x2bf6 <__fpcmp_parts_f+0x98>
    2bc8:	14 96       	adiw	r26, 0x04	; 4
    2bca:	8d 91       	ld	r24, X+
    2bcc:	9d 91       	ld	r25, X+
    2bce:	0d 90       	ld	r0, X+
    2bd0:	bc 91       	ld	r27, X
    2bd2:	a0 2d       	mov	r26, r0
    2bd4:	24 81       	ldd	r18, Z+4	; 0x04
    2bd6:	35 81       	ldd	r19, Z+5	; 0x05
    2bd8:	46 81       	ldd	r20, Z+6	; 0x06
    2bda:	57 81       	ldd	r21, Z+7	; 0x07
    2bdc:	28 17       	cp	r18, r24
    2bde:	39 07       	cpc	r19, r25
    2be0:	4a 07       	cpc	r20, r26
    2be2:	5b 07       	cpc	r21, r27
    2be4:	18 f4       	brcc	.+6      	; 0x2bec <__fpcmp_parts_f+0x8e>
    2be6:	11 23       	and	r17, r17
    2be8:	41 f0       	breq	.+16     	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2bea:	0a c0       	rjmp	.+20     	; 0x2c00 <__fpcmp_parts_f+0xa2>
    2bec:	82 17       	cp	r24, r18
    2bee:	93 07       	cpc	r25, r19
    2bf0:	a4 07       	cpc	r26, r20
    2bf2:	b5 07       	cpc	r27, r21
    2bf4:	40 f4       	brcc	.+16     	; 0x2c06 <__fpcmp_parts_f+0xa8>
    2bf6:	11 23       	and	r17, r17
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <__fpcmp_parts_f+0xa2>
    2bfa:	61 e0       	ldi	r22, 0x01	; 1
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	05 c0       	rjmp	.+10     	; 0x2c0a <__fpcmp_parts_f+0xac>
    2c00:	6f ef       	ldi	r22, 0xFF	; 255
    2c02:	7f ef       	ldi	r23, 0xFF	; 255
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <__fpcmp_parts_f+0xac>
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	1f 91       	pop	r17
    2c0e:	08 95       	ret

00002c10 <KeyPad_getPressedKey>:



#include "keypad.h"
uint8 KeyPad_getPressedKey(void){
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <KeyPad_getPressedKey+0x6>
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2c1a:	1a 82       	std	Y+2, r1	; 0x02
    2c1c:	4c c0       	rjmp	.+152    	; 0x2cb6 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    2c1e:	ea e3       	ldi	r30, 0x3A	; 58
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	8a 81       	ldd	r24, Y+2	; 0x02
    2c24:	28 2f       	mov	r18, r24
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	80 e1       	ldi	r24, 0x10	; 16
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <KeyPad_getPressedKey+0x22>
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	2a 95       	dec	r18
    2c34:	e2 f7       	brpl	.-8      	; 0x2c2e <KeyPad_getPressedKey+0x1e>
    2c36:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    2c38:	eb e3       	ldi	r30, 0x3B	; 59
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	28 2f       	mov	r18, r24
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	80 e1       	ldi	r24, 0x10	; 16
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	02 2e       	mov	r0, r18
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <KeyPad_getPressedKey+0x3e>
    2c4a:	88 0f       	add	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	0a 94       	dec	r0
    2c50:	e2 f7       	brpl	.-8      	; 0x2c4a <KeyPad_getPressedKey+0x3a>
    2c52:	80 95       	com	r24
    2c54:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    2c56:	19 82       	std	Y+1, r1	; 0x01
    2c58:	28 c0       	rjmp	.+80     	; 0x2caa <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    2c5a:	e9 e3       	ldi	r30, 0x39	; 57
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	88 2f       	mov	r24, r24
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a9 01       	movw	r20, r18
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <KeyPad_getPressedKey+0x62>
    2c6e:	55 95       	asr	r21
    2c70:	47 95       	ror	r20
    2c72:	8a 95       	dec	r24
    2c74:	e2 f7       	brpl	.-8      	; 0x2c6e <KeyPad_getPressedKey+0x5e>
    2c76:	ca 01       	movw	r24, r20
    2c78:	81 70       	andi	r24, 0x01	; 1
    2c7a:	90 70       	andi	r25, 0x00	; 0
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	91 f4       	brne	.+36     	; 0x2ca4 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	88 2f       	mov	r24, r24
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	88 0f       	add	r24, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	88 0f       	add	r24, r24
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	98 2f       	mov	r25, r24
    2c90:	8a 81       	ldd	r24, Y+2	; 0x02
    2c92:	89 0f       	add	r24, r25
    2c94:	8f 5f       	subi	r24, 0xFF	; 255
    2c96:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	cf 91       	pop	r28
    2ca0:	df 91       	pop	r29
    2ca2:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	8f 5f       	subi	r24, 0xFF	; 255
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	84 30       	cpi	r24, 0x04	; 4
    2cae:	a8 f2       	brcs	.-86     	; 0x2c5a <KeyPad_getPressedKey+0x4a>
#include "keypad.h"
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	8a 83       	std	Y+2, r24	; 0x02
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	84 30       	cpi	r24, 0x04	; 4
    2cba:	08 f4       	brcc	.+2      	; 0x2cbe <KeyPad_getPressedKey+0xae>
    2cbc:	b0 cf       	rjmp	.-160    	; 0x2c1e <KeyPad_getPressedKey+0xe>
    2cbe:	ad cf       	rjmp	.-166    	; 0x2c1a <KeyPad_getPressedKey+0xa>

00002cc0 <KeyPad_4x4_adjustKeyNumber>:


#elif (N_col == 4)
 
uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <KeyPad_4x4_adjustKeyNumber+0x6>
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <KeyPad_4x4_adjustKeyNumber+0x8>
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	3c 83       	std	Y+4, r19	; 0x04
    2cd6:	2b 83       	std	Y+3, r18	; 0x03
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	9c 81       	ldd	r25, Y+4	; 0x04
    2cdc:	88 30       	cpi	r24, 0x08	; 8
    2cde:	91 05       	cpc	r25, r1
    2ce0:	09 f4       	brne	.+2      	; 0x2ce4 <KeyPad_4x4_adjustKeyNumber+0x24>
    2ce2:	70 c0       	rjmp	.+224    	; 0x2dc4 <KeyPad_4x4_adjustKeyNumber+0x104>
    2ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ce8:	29 30       	cpi	r18, 0x09	; 9
    2cea:	31 05       	cpc	r19, r1
    2cec:	5c f5       	brge	.+86     	; 0x2d44 <KeyPad_4x4_adjustKeyNumber+0x84>
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	84 30       	cpi	r24, 0x04	; 4
    2cf4:	91 05       	cpc	r25, r1
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <KeyPad_4x4_adjustKeyNumber+0x3a>
    2cf8:	59 c0       	rjmp	.+178    	; 0x2dac <KeyPad_4x4_adjustKeyNumber+0xec>
    2cfa:	2b 81       	ldd	r18, Y+3	; 0x03
    2cfc:	3c 81       	ldd	r19, Y+4	; 0x04
    2cfe:	25 30       	cpi	r18, 0x05	; 5
    2d00:	31 05       	cpc	r19, r1
    2d02:	9c f4       	brge	.+38     	; 0x2d2a <KeyPad_4x4_adjustKeyNumber+0x6a>
    2d04:	8b 81       	ldd	r24, Y+3	; 0x03
    2d06:	9c 81       	ldd	r25, Y+4	; 0x04
    2d08:	82 30       	cpi	r24, 0x02	; 2
    2d0a:	91 05       	cpc	r25, r1
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <KeyPad_4x4_adjustKeyNumber+0x50>
    2d0e:	48 c0       	rjmp	.+144    	; 0x2da0 <KeyPad_4x4_adjustKeyNumber+0xe0>
    2d10:	2b 81       	ldd	r18, Y+3	; 0x03
    2d12:	3c 81       	ldd	r19, Y+4	; 0x04
    2d14:	23 30       	cpi	r18, 0x03	; 3
    2d16:	31 05       	cpc	r19, r1
    2d18:	0c f0       	brlt	.+2      	; 0x2d1c <KeyPad_4x4_adjustKeyNumber+0x5c>
    2d1a:	45 c0       	rjmp	.+138    	; 0x2da6 <KeyPad_4x4_adjustKeyNumber+0xe6>
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	91 05       	cpc	r25, r1
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <KeyPad_4x4_adjustKeyNumber+0x68>
    2d26:	39 c0       	rjmp	.+114    	; 0x2d9a <KeyPad_4x4_adjustKeyNumber+0xda>
    2d28:	67 c0       	rjmp	.+206    	; 0x2df8 <KeyPad_4x4_adjustKeyNumber+0x138>
    2d2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d2e:	26 30       	cpi	r18, 0x06	; 6
    2d30:	31 05       	cpc	r19, r1
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <KeyPad_4x4_adjustKeyNumber+0x76>
    2d34:	41 c0       	rjmp	.+130    	; 0x2db8 <KeyPad_4x4_adjustKeyNumber+0xf8>
    2d36:	8b 81       	ldd	r24, Y+3	; 0x03
    2d38:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3a:	87 30       	cpi	r24, 0x07	; 7
    2d3c:	91 05       	cpc	r25, r1
    2d3e:	0c f0       	brlt	.+2      	; 0x2d42 <KeyPad_4x4_adjustKeyNumber+0x82>
    2d40:	3e c0       	rjmp	.+124    	; 0x2dbe <KeyPad_4x4_adjustKeyNumber+0xfe>
    2d42:	37 c0       	rjmp	.+110    	; 0x2db2 <KeyPad_4x4_adjustKeyNumber+0xf2>
    2d44:	2b 81       	ldd	r18, Y+3	; 0x03
    2d46:	3c 81       	ldd	r19, Y+4	; 0x04
    2d48:	2c 30       	cpi	r18, 0x0C	; 12
    2d4a:	31 05       	cpc	r19, r1
    2d4c:	09 f4       	brne	.+2      	; 0x2d50 <KeyPad_4x4_adjustKeyNumber+0x90>
    2d4e:	46 c0       	rjmp	.+140    	; 0x2ddc <KeyPad_4x4_adjustKeyNumber+0x11c>
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	8d 30       	cpi	r24, 0x0D	; 13
    2d56:	91 05       	cpc	r25, r1
    2d58:	5c f4       	brge	.+22     	; 0x2d70 <KeyPad_4x4_adjustKeyNumber+0xb0>
    2d5a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d5c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d5e:	2a 30       	cpi	r18, 0x0A	; 10
    2d60:	31 05       	cpc	r19, r1
    2d62:	b1 f1       	breq	.+108    	; 0x2dd0 <KeyPad_4x4_adjustKeyNumber+0x110>
    2d64:	8b 81       	ldd	r24, Y+3	; 0x03
    2d66:	9c 81       	ldd	r25, Y+4	; 0x04
    2d68:	8b 30       	cpi	r24, 0x0B	; 11
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	a4 f5       	brge	.+104    	; 0x2dd6 <KeyPad_4x4_adjustKeyNumber+0x116>
    2d6e:	2d c0       	rjmp	.+90     	; 0x2dca <KeyPad_4x4_adjustKeyNumber+0x10a>
    2d70:	2b 81       	ldd	r18, Y+3	; 0x03
    2d72:	3c 81       	ldd	r19, Y+4	; 0x04
    2d74:	2e 30       	cpi	r18, 0x0E	; 14
    2d76:	31 05       	cpc	r19, r1
    2d78:	b9 f1       	breq	.+110    	; 0x2de8 <KeyPad_4x4_adjustKeyNumber+0x128>
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7e:	8e 30       	cpi	r24, 0x0E	; 14
    2d80:	91 05       	cpc	r25, r1
    2d82:	7c f1       	brlt	.+94     	; 0x2de2 <KeyPad_4x4_adjustKeyNumber+0x122>
    2d84:	2b 81       	ldd	r18, Y+3	; 0x03
    2d86:	3c 81       	ldd	r19, Y+4	; 0x04
    2d88:	2f 30       	cpi	r18, 0x0F	; 15
    2d8a:	31 05       	cpc	r19, r1
    2d8c:	79 f1       	breq	.+94     	; 0x2dec <KeyPad_4x4_adjustKeyNumber+0x12c>
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	9c 81       	ldd	r25, Y+4	; 0x04
    2d92:	80 31       	cpi	r24, 0x10	; 16
    2d94:	91 05       	cpc	r25, r1
    2d96:	69 f1       	breq	.+90     	; 0x2df2 <KeyPad_4x4_adjustKeyNumber+0x132>
    2d98:	2f c0       	rjmp	.+94     	; 0x2df8 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    2d9a:	97 e0       	ldi	r25, 0x07	; 7
    2d9c:	9a 83       	std	Y+2, r25	; 0x02
    2d9e:	2e c0       	rjmp	.+92     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    2da0:	28 e0       	ldi	r18, 0x08	; 8
    2da2:	2a 83       	std	Y+2, r18	; 0x02
    2da4:	2b c0       	rjmp	.+86     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    2da6:	39 e0       	ldi	r19, 0x09	; 9
    2da8:	3a 83       	std	Y+2, r19	; 0x02
    2daa:	28 c0       	rjmp	.+80     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    2dac:	85 e2       	ldi	r24, 0x25	; 37
    2dae:	8a 83       	std	Y+2, r24	; 0x02
    2db0:	25 c0       	rjmp	.+74     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    2db2:	94 e0       	ldi	r25, 0x04	; 4
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	22 c0       	rjmp	.+68     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    2db8:	25 e0       	ldi	r18, 0x05	; 5
    2dba:	2a 83       	std	Y+2, r18	; 0x02
    2dbc:	1f c0       	rjmp	.+62     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    2dbe:	36 e0       	ldi	r19, 0x06	; 6
    2dc0:	3a 83       	std	Y+2, r19	; 0x02
    2dc2:	1c c0       	rjmp	.+56     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    2dc4:	8a e2       	ldi	r24, 0x2A	; 42
    2dc6:	8a 83       	std	Y+2, r24	; 0x02
    2dc8:	19 c0       	rjmp	.+50     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    2dca:	91 e0       	ldi	r25, 0x01	; 1
    2dcc:	9a 83       	std	Y+2, r25	; 0x02
    2dce:	16 c0       	rjmp	.+44     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    2dd0:	22 e0       	ldi	r18, 0x02	; 2
    2dd2:	2a 83       	std	Y+2, r18	; 0x02
    2dd4:	13 c0       	rjmp	.+38     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    2dd6:	33 e0       	ldi	r19, 0x03	; 3
    2dd8:	3a 83       	std	Y+2, r19	; 0x02
    2dda:	10 c0       	rjmp	.+32     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    2ddc:	8d e2       	ldi	r24, 0x2D	; 45
    2dde:	8a 83       	std	Y+2, r24	; 0x02
    2de0:	0d c0       	rjmp	.+26     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    2de2:	9d e0       	ldi	r25, 0x0D	; 13
    2de4:	9a 83       	std	Y+2, r25	; 0x02
    2de6:	0a c0       	rjmp	.+20     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    2de8:	1a 82       	std	Y+2, r1	; 0x02
    2dea:	08 c0       	rjmp	.+16     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    2dec:	2d e3       	ldi	r18, 0x3D	; 61
    2dee:	2a 83       	std	Y+2, r18	; 0x02
    2df0:	05 c0       	rjmp	.+10     	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    2df2:	3b e2       	ldi	r19, 0x2B	; 43
    2df4:	3a 83       	std	Y+2, r19	; 0x02
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
    2dfa:	8a 83       	std	Y+2, r24	; 0x02
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	cf 91       	pop	r28
    2e08:	df 91       	pop	r29
    2e0a:	08 95       	ret

00002e0c <powerOf>:

uint32 powerOf(uint8 x,uint8 y)
{
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	2a 97       	sbiw	r28, 0x0a	; 10
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	89 87       	std	Y+9, r24	; 0x09
    2e22:	6a 87       	std	Y+10, r22	; 0x0a
	uint32 val=1,index=0;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	a0 e0       	ldi	r26, 0x00	; 0
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	8d 83       	std	Y+5, r24	; 0x05
    2e2e:	9e 83       	std	Y+6, r25	; 0x06
    2e30:	af 83       	std	Y+7, r26	; 0x07
    2e32:	b8 87       	std	Y+8, r27	; 0x08
    2e34:	19 82       	std	Y+1, r1	; 0x01
    2e36:	1a 82       	std	Y+2, r1	; 0x02
    2e38:	1b 82       	std	Y+3, r1	; 0x03
    2e3a:	1c 82       	std	Y+4, r1	; 0x04
	for(index=1;index<=y;index++)
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	a0 e0       	ldi	r26, 0x00	; 0
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	9a 83       	std	Y+2, r25	; 0x02
    2e48:	ab 83       	std	Y+3, r26	; 0x03
    2e4a:	bc 83       	std	Y+4, r27	; 0x04
    2e4c:	1e c0       	rjmp	.+60     	; 0x2e8a <powerOf+0x7e>
	val*=x;
    2e4e:	89 85       	ldd	r24, Y+9	; 0x09
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e0       	ldi	r20, 0x00	; 0
    2e56:	50 e0       	ldi	r21, 0x00	; 0
    2e58:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5c:	af 81       	ldd	r26, Y+7	; 0x07
    2e5e:	b8 85       	ldd	r27, Y+8	; 0x08
    2e60:	bc 01       	movw	r22, r24
    2e62:	cd 01       	movw	r24, r26
    2e64:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	8d 83       	std	Y+5, r24	; 0x05
    2e6e:	9e 83       	std	Y+6, r25	; 0x06
    2e70:	af 83       	std	Y+7, r26	; 0x07
    2e72:	b8 87       	std	Y+8, r27	; 0x08
} 

uint32 powerOf(uint8 x,uint8 y)
{
	uint32 val=1,index=0;
	for(index=1;index<=y;index++)
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	9a 81       	ldd	r25, Y+2	; 0x02
    2e78:	ab 81       	ldd	r26, Y+3	; 0x03
    2e7a:	bc 81       	ldd	r27, Y+4	; 0x04
    2e7c:	01 96       	adiw	r24, 0x01	; 1
    2e7e:	a1 1d       	adc	r26, r1
    2e80:	b1 1d       	adc	r27, r1
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	9a 83       	std	Y+2, r25	; 0x02
    2e86:	ab 83       	std	Y+3, r26	; 0x03
    2e88:	bc 83       	std	Y+4, r27	; 0x04
    2e8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e8c:	28 2f       	mov	r18, r24
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	40 e0       	ldi	r20, 0x00	; 0
    2e92:	50 e0       	ldi	r21, 0x00	; 0
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	9a 81       	ldd	r25, Y+2	; 0x02
    2e98:	ab 81       	ldd	r26, Y+3	; 0x03
    2e9a:	bc 81       	ldd	r27, Y+4	; 0x04
    2e9c:	28 17       	cp	r18, r24
    2e9e:	39 07       	cpc	r19, r25
    2ea0:	4a 07       	cpc	r20, r26
    2ea2:	5b 07       	cpc	r21, r27
    2ea4:	a0 f6       	brcc	.-88     	; 0x2e4e <powerOf+0x42>
	val*=x;
	return val;
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eaa:	af 81       	ldd	r26, Y+7	; 0x07
    2eac:	b8 85       	ldd	r27, Y+8	; 0x08
}
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	2a 96       	adiw	r28, 0x0a	; 10
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	f8 94       	cli
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	cd bf       	out	0x3d, r28	; 61
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <KeyPad_getSeriesOfPressedNumbers>:

uint32 KeyPad_getSeriesOfPressedNumbers(uint8 len)
{
    2ec4:	ef 92       	push	r14
    2ec6:	ff 92       	push	r15
    2ec8:	0f 93       	push	r16
    2eca:	1f 93       	push	r17
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	6c 97       	sbiw	r28, 0x1c	; 28
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	de bf       	out	0x3e, r29	; 62
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	cd bf       	out	0x3d, r28	; 61
    2ee0:	8e 8b       	std	Y+22, r24	; 0x16
	}
	
	if(!(value >= 0)) return -1;
	
	return value;
}
    2ee2:	2d b7       	in	r18, 0x3d	; 61
    2ee4:	3e b7       	in	r19, 0x3e	; 62
    2ee6:	3c 8f       	std	Y+28, r19	; 0x1c
    2ee8:	2b 8f       	std	Y+27, r18	; 0x1b
	val*=x;
	return val;
}

uint32 KeyPad_getSeriesOfPressedNumbers(uint8 len)
{
    2eea:	8d b7       	in	r24, 0x3d	; 61
    2eec:	9e b7       	in	r25, 0x3e	; 62
    2eee:	98 8f       	std	Y+24, r25	; 0x18
    2ef0:	8f 8b       	std	Y+23, r24	; 0x17
	uint8 SeriesOfpressedKeys[len];/*Only C99,VLA feature*/
    2ef2:	8e 89       	ldd	r24, Y+22	; 0x16
    2ef4:	88 2f       	mov	r24, r24
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	4d b7       	in	r20, 0x3d	; 61
    2efa:	5e b7       	in	r21, 0x3e	; 62
    2efc:	48 1b       	sub	r20, r24
    2efe:	59 0b       	sbc	r21, r25
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	f8 94       	cli
    2f04:	5e bf       	out	0x3e, r21	; 62
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	4d bf       	out	0x3d, r20	; 61
    2f0a:	8d b7       	in	r24, 0x3d	; 61
    2f0c:	9e b7       	in	r25, 0x3e	; 62
    2f0e:	01 96       	adiw	r24, 0x01	; 1
    2f10:	9a 8f       	std	Y+26, r25	; 0x1a
    2f12:	89 8f       	std	Y+25, r24	; 0x19
    2f14:	89 8d       	ldd	r24, Y+25	; 0x19
    2f16:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f18:	00 96       	adiw	r24, 0x00	; 0
    2f1a:	9a 8f       	std	Y+26, r25	; 0x1a
    2f1c:	89 8f       	std	Y+25, r24	; 0x19
    2f1e:	29 8d       	ldd	r18, Y+25	; 0x19
    2f20:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2f22:	3d 8b       	std	Y+21, r19	; 0x15
    2f24:	2c 8b       	std	Y+20, r18	; 0x14
	uint8 index; /*Used For Looping*/
	uint32 value=0; /*The return Number,Only unsigned !*/
    2f26:	1f 86       	std	Y+15, r1	; 0x0f
    2f28:	18 8a       	std	Y+16, r1	; 0x10
    2f2a:	19 8a       	std	Y+17, r1	; 0x11
    2f2c:	1a 8a       	std	Y+18, r1	; 0x12

	for(index=0;index<len;index++)
    2f2e:	1b 8a       	std	Y+19, r1	; 0x13
    2f30:	81 c0       	rjmp	.+258    	; 0x3034 <KeyPad_getSeriesOfPressedNumbers+0x170>
	{
		SeriesOfpressedKeys[index]=KeyPad_getPressedKey();
    2f32:	8b 89       	ldd	r24, Y+19	; 0x13
    2f34:	08 2f       	mov	r16, r24
    2f36:	10 e0       	ldi	r17, 0x00	; 0
    2f38:	0e 94 08 16 	call	0x2c10	; 0x2c10 <KeyPad_getPressedKey>
    2f3c:	28 2f       	mov	r18, r24
    2f3e:	8c 89       	ldd	r24, Y+20	; 0x14
    2f40:	9d 89       	ldd	r25, Y+21	; 0x15
    2f42:	fc 01       	movw	r30, r24
    2f44:	e0 0f       	add	r30, r16
    2f46:	f1 1f       	adc	r31, r17
    2f48:	20 83       	st	Z, r18
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	a6 e9       	ldi	r26, 0x96	; 150
    2f50:	b3 e4       	ldi	r27, 0x43	; 67
    2f52:	8b 87       	std	Y+11, r24	; 0x0b
    2f54:	9c 87       	std	Y+12, r25	; 0x0c
    2f56:	ad 87       	std	Y+13, r26	; 0x0d
    2f58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e8       	ldi	r19, 0x80	; 128
    2f66:	4b e3       	ldi	r20, 0x3B	; 59
    2f68:	55 e4       	ldi	r21, 0x45	; 69
    2f6a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	8f 83       	std	Y+7, r24	; 0x07
    2f74:	98 87       	std	Y+8, r25	; 0x08
    2f76:	a9 87       	std	Y+9, r26	; 0x09
    2f78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7c:	78 85       	ldd	r23, Y+8	; 0x08
    2f7e:	89 85       	ldd	r24, Y+9	; 0x09
    2f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e8       	ldi	r20, 0x80	; 128
    2f88:	5f e3       	ldi	r21, 0x3F	; 63
    2f8a:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    2f8e:	88 23       	and	r24, r24
    2f90:	2c f4       	brge	.+10     	; 0x2f9c <KeyPad_getSeriesOfPressedNumbers+0xd8>
		__ticks = 1;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	9e 83       	std	Y+6, r25	; 0x06
    2f98:	8d 83       	std	Y+5, r24	; 0x05
    2f9a:	3f c0       	rjmp	.+126    	; 0x301a <KeyPad_getSeriesOfPressedNumbers+0x156>
	else if (__tmp > 65535)
    2f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9e:	78 85       	ldd	r23, Y+8	; 0x08
    2fa0:	89 85       	ldd	r24, Y+9	; 0x09
    2fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	3f ef       	ldi	r19, 0xFF	; 255
    2fa8:	4f e7       	ldi	r20, 0x7F	; 127
    2faa:	57 e4       	ldi	r21, 0x47	; 71
    2fac:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    2fb0:	18 16       	cp	r1, r24
    2fb2:	4c f5       	brge	.+82     	; 0x3006 <KeyPad_getSeriesOfPressedNumbers+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e2       	ldi	r20, 0x20	; 32
    2fc2:	51 e4       	ldi	r21, 0x41	; 65
    2fc4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	bc 01       	movw	r22, r24
    2fce:	cd 01       	movw	r24, r26
    2fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	9e 83       	std	Y+6, r25	; 0x06
    2fda:	8d 83       	std	Y+5, r24	; 0x05
    2fdc:	0f c0       	rjmp	.+30     	; 0x2ffc <KeyPad_getSeriesOfPressedNumbers+0x138>
    2fde:	8c e2       	ldi	r24, 0x2C	; 44
    2fe0:	91 e0       	ldi	r25, 0x01	; 1
    2fe2:	9c 83       	std	Y+4, r25	; 0x04
    2fe4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <KeyPad_getSeriesOfPressedNumbers+0x126>
    2fee:	9c 83       	std	Y+4, r25	; 0x04
    2ff0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	9e 83       	std	Y+6, r25	; 0x06
    2ffa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	69 f7       	brne	.-38     	; 0x2fde <KeyPad_getSeriesOfPressedNumbers+0x11a>
    3004:	14 c0       	rjmp	.+40     	; 0x302e <KeyPad_getSeriesOfPressedNumbers+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3006:	6f 81       	ldd	r22, Y+7	; 0x07
    3008:	78 85       	ldd	r23, Y+8	; 0x08
    300a:	89 85       	ldd	r24, Y+9	; 0x09
    300c:	9a 85       	ldd	r25, Y+10	; 0x0a
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9e 83       	std	Y+6, r25	; 0x06
    3018:	8d 83       	std	Y+5, r24	; 0x05
    301a:	8d 81       	ldd	r24, Y+5	; 0x05
    301c:	9e 81       	ldd	r25, Y+6	; 0x06
    301e:	9a 83       	std	Y+2, r25	; 0x02
    3020:	89 83       	std	Y+1, r24	; 0x01
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	9a 81       	ldd	r25, Y+2	; 0x02
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	f1 f7       	brne	.-4      	; 0x3026 <KeyPad_getSeriesOfPressedNumbers+0x162>
    302a:	9a 83       	std	Y+2, r25	; 0x02
    302c:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 SeriesOfpressedKeys[len];/*Only C99,VLA feature*/
	uint8 index; /*Used For Looping*/
	uint32 value=0; /*The return Number,Only unsigned !*/

	for(index=0;index<len;index++)
    302e:	8b 89       	ldd	r24, Y+19	; 0x13
    3030:	8f 5f       	subi	r24, 0xFF	; 255
    3032:	8b 8b       	std	Y+19, r24	; 0x13
    3034:	9b 89       	ldd	r25, Y+19	; 0x13
    3036:	8e 89       	ldd	r24, Y+22	; 0x16
    3038:	98 17       	cp	r25, r24
    303a:	08 f4       	brcc	.+2      	; 0x303e <KeyPad_getSeriesOfPressedNumbers+0x17a>
    303c:	7a cf       	rjmp	.-268    	; 0x2f32 <KeyPad_getSeriesOfPressedNumbers+0x6e>
	{
		SeriesOfpressedKeys[index]=KeyPad_getPressedKey();
		_delay_ms(300);
	}

	for(index=0;index<len;index++)
    303e:	1b 8a       	std	Y+19, r1	; 0x13
    3040:	32 c0       	rjmp	.+100    	; 0x30a6 <KeyPad_getSeriesOfPressedNumbers+0x1e2>
	{
		value+=SeriesOfpressedKeys[len-index-1]*powerOf(10,index);
    3042:	8e 89       	ldd	r24, Y+22	; 0x16
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	8b 89       	ldd	r24, Y+19	; 0x13
    304a:	88 2f       	mov	r24, r24
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	a9 01       	movw	r20, r18
    3050:	48 1b       	sub	r20, r24
    3052:	59 0b       	sbc	r21, r25
    3054:	ca 01       	movw	r24, r20
    3056:	9c 01       	movw	r18, r24
    3058:	21 50       	subi	r18, 0x01	; 1
    305a:	30 40       	sbci	r19, 0x00	; 0
    305c:	8c 89       	ldd	r24, Y+20	; 0x14
    305e:	9d 89       	ldd	r25, Y+21	; 0x15
    3060:	fc 01       	movw	r30, r24
    3062:	e2 0f       	add	r30, r18
    3064:	f3 1f       	adc	r31, r19
    3066:	80 81       	ld	r24, Z
    3068:	e8 2e       	mov	r14, r24
    306a:	ff 24       	eor	r15, r15
    306c:	00 e0       	ldi	r16, 0x00	; 0
    306e:	10 e0       	ldi	r17, 0x00	; 0
    3070:	8a e0       	ldi	r24, 0x0A	; 10
    3072:	6b 89       	ldd	r22, Y+19	; 0x13
    3074:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <powerOf>
    3078:	9b 01       	movw	r18, r22
    307a:	ac 01       	movw	r20, r24
    307c:	c8 01       	movw	r24, r16
    307e:	b7 01       	movw	r22, r14
    3080:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    3084:	9b 01       	movw	r18, r22
    3086:	ac 01       	movw	r20, r24
    3088:	8f 85       	ldd	r24, Y+15	; 0x0f
    308a:	98 89       	ldd	r25, Y+16	; 0x10
    308c:	a9 89       	ldd	r26, Y+17	; 0x11
    308e:	ba 89       	ldd	r27, Y+18	; 0x12
    3090:	82 0f       	add	r24, r18
    3092:	93 1f       	adc	r25, r19
    3094:	a4 1f       	adc	r26, r20
    3096:	b5 1f       	adc	r27, r21
    3098:	8f 87       	std	Y+15, r24	; 0x0f
    309a:	98 8b       	std	Y+16, r25	; 0x10
    309c:	a9 8b       	std	Y+17, r26	; 0x11
    309e:	ba 8b       	std	Y+18, r27	; 0x12
	{
		SeriesOfpressedKeys[index]=KeyPad_getPressedKey();
		_delay_ms(300);
	}

	for(index=0;index<len;index++)
    30a0:	8b 89       	ldd	r24, Y+19	; 0x13
    30a2:	8f 5f       	subi	r24, 0xFF	; 255
    30a4:	8b 8b       	std	Y+19, r24	; 0x13
    30a6:	9b 89       	ldd	r25, Y+19	; 0x13
    30a8:	8e 89       	ldd	r24, Y+22	; 0x16
    30aa:	98 17       	cp	r25, r24
    30ac:	50 f2       	brcs	.-108    	; 0x3042 <KeyPad_getSeriesOfPressedNumbers+0x17e>
		value+=SeriesOfpressedKeys[len-index-1]*powerOf(10,index);
	}
	
	if(!(value >= 0)) return -1;
	
	return value;
    30ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    30b0:	98 89       	ldd	r25, Y+16	; 0x10
    30b2:	a9 89       	ldd	r26, Y+17	; 0x11
    30b4:	ba 89       	ldd	r27, Y+18	; 0x12
    30b6:	2f 89       	ldd	r18, Y+23	; 0x17
    30b8:	38 8d       	ldd	r19, Y+24	; 0x18
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	3e bf       	out	0x3e, r19	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	2d bf       	out	0x3d, r18	; 61
}
    30c4:	bc 01       	movw	r22, r24
    30c6:	cd 01       	movw	r24, r26
    30c8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    30ca:	5c 8d       	ldd	r21, Y+28	; 0x1c
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	5e bf       	out	0x3e, r21	; 62
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	4d bf       	out	0x3d, r20	; 61
    30d6:	6c 96       	adiw	r28, 0x1c	; 28
    30d8:	0f b6       	in	r0, 0x3f	; 63
    30da:	f8 94       	cli
    30dc:	de bf       	out	0x3e, r29	; 62
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	cd bf       	out	0x3d, r28	; 61
    30e2:	cf 91       	pop	r28
    30e4:	df 91       	pop	r29
    30e6:	1f 91       	pop	r17
    30e8:	0f 91       	pop	r16
    30ea:	ff 90       	pop	r15
    30ec:	ef 90       	pop	r14
    30ee:	08 95       	ret

000030f0 <LCD_init>:

#include "lcd.h"

void LCD_init(void)
{
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    30f8:	a1 e3       	ldi	r26, 0x31	; 49
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	e1 e3       	ldi	r30, 0x31	; 49
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	87 60       	ori	r24, 0x07	; 7
    3104:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode ? */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    3106:	e4 e3       	ldi	r30, 0x34	; 52
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	8f ef       	ldi	r24, 0xFF	; 255
    310c:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    310e:	88 e3       	ldi	r24, 0x38	; 56
    3110:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_STATE); /* cursor off */
    3114:	8e e0       	ldi	r24, 0x0E	; 14
    3116:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_sendCommand>
}
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	08 95       	ret

00003126 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
    312e:	e9 97       	sbiw	r28, 0x39	; 57
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	de bf       	out	0x3e, r29	; 62
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    313c:	a2 e3       	ldi	r26, 0x32	; 50
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e2 e3       	ldi	r30, 0x32	; 50
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	8e 7f       	andi	r24, 0xFE	; 254
    3148:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    314a:	a2 e3       	ldi	r26, 0x32	; 50
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	e2 e3       	ldi	r30, 0x32	; 50
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	8d 7f       	andi	r24, 0xFD	; 253
    3156:	8c 93       	st	X, r24
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	a0 e8       	ldi	r26, 0x80	; 128
    315e:	bf e3       	ldi	r27, 0x3F	; 63
    3160:	8d ab       	std	Y+53, r24	; 0x35
    3162:	9e ab       	std	Y+54, r25	; 0x36
    3164:	af ab       	std	Y+55, r26	; 0x37
    3166:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3168:	6d a9       	ldd	r22, Y+53	; 0x35
    316a:	7e a9       	ldd	r23, Y+54	; 0x36
    316c:	8f a9       	ldd	r24, Y+55	; 0x37
    316e:	98 ad       	ldd	r25, Y+56	; 0x38
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e8       	ldi	r19, 0x80	; 128
    3174:	4b e3       	ldi	r20, 0x3B	; 59
    3176:	55 e4       	ldi	r21, 0x45	; 69
    3178:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	89 ab       	std	Y+49, r24	; 0x31
    3182:	9a ab       	std	Y+50, r25	; 0x32
    3184:	ab ab       	std	Y+51, r26	; 0x33
    3186:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3188:	69 a9       	ldd	r22, Y+49	; 0x31
    318a:	7a a9       	ldd	r23, Y+50	; 0x32
    318c:	8b a9       	ldd	r24, Y+51	; 0x33
    318e:	9c a9       	ldd	r25, Y+52	; 0x34
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e8       	ldi	r20, 0x80	; 128
    3196:	5f e3       	ldi	r21, 0x3F	; 63
    3198:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    319c:	88 23       	and	r24, r24
    319e:	2c f4       	brge	.+10     	; 0x31aa <LCD_sendCommand+0x84>
		__ticks = 1;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	98 ab       	std	Y+48, r25	; 0x30
    31a6:	8f a7       	std	Y+47, r24	; 0x2f
    31a8:	3f c0       	rjmp	.+126    	; 0x3228 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    31aa:	69 a9       	ldd	r22, Y+49	; 0x31
    31ac:	7a a9       	ldd	r23, Y+50	; 0x32
    31ae:	8b a9       	ldd	r24, Y+51	; 0x33
    31b0:	9c a9       	ldd	r25, Y+52	; 0x34
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	3f ef       	ldi	r19, 0xFF	; 255
    31b6:	4f e7       	ldi	r20, 0x7F	; 127
    31b8:	57 e4       	ldi	r21, 0x47	; 71
    31ba:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    31be:	18 16       	cp	r1, r24
    31c0:	4c f5       	brge	.+82     	; 0x3214 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c2:	6d a9       	ldd	r22, Y+53	; 0x35
    31c4:	7e a9       	ldd	r23, Y+54	; 0x36
    31c6:	8f a9       	ldd	r24, Y+55	; 0x37
    31c8:	98 ad       	ldd	r25, Y+56	; 0x38
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e2       	ldi	r20, 0x20	; 32
    31d0:	51 e4       	ldi	r21, 0x41	; 65
    31d2:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	98 ab       	std	Y+48, r25	; 0x30
    31e8:	8f a7       	std	Y+47, r24	; 0x2f
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <LCD_sendCommand+0xe4>
    31ec:	8c e2       	ldi	r24, 0x2C	; 44
    31ee:	91 e0       	ldi	r25, 0x01	; 1
    31f0:	9e a7       	std	Y+46, r25	; 0x2e
    31f2:	8d a7       	std	Y+45, r24	; 0x2d
    31f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    31f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <LCD_sendCommand+0xd2>
    31fc:	9e a7       	std	Y+46, r25	; 0x2e
    31fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3200:	8f a5       	ldd	r24, Y+47	; 0x2f
    3202:	98 a9       	ldd	r25, Y+48	; 0x30
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	98 ab       	std	Y+48, r25	; 0x30
    3208:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320a:	8f a5       	ldd	r24, Y+47	; 0x2f
    320c:	98 a9       	ldd	r25, Y+48	; 0x30
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	69 f7       	brne	.-38     	; 0x31ec <LCD_sendCommand+0xc6>
    3212:	14 c0       	rjmp	.+40     	; 0x323c <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3214:	69 a9       	ldd	r22, Y+49	; 0x31
    3216:	7a a9       	ldd	r23, Y+50	; 0x32
    3218:	8b a9       	ldd	r24, Y+51	; 0x33
    321a:	9c a9       	ldd	r25, Y+52	; 0x34
    321c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	98 ab       	std	Y+48, r25	; 0x30
    3226:	8f a7       	std	Y+47, r24	; 0x2f
    3228:	8f a5       	ldd	r24, Y+47	; 0x2f
    322a:	98 a9       	ldd	r25, Y+48	; 0x30
    322c:	9c a7       	std	Y+44, r25	; 0x2c
    322e:	8b a7       	std	Y+43, r24	; 0x2b
    3230:	8b a5       	ldd	r24, Y+43	; 0x2b
    3232:	9c a5       	ldd	r25, Y+44	; 0x2c
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <LCD_sendCommand+0x10e>
    3238:	9c a7       	std	Y+44, r25	; 0x2c
    323a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    323c:	a2 e3       	ldi	r26, 0x32	; 50
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	e2 e3       	ldi	r30, 0x32	; 50
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	84 60       	ori	r24, 0x04	; 4
    3248:	8c 93       	st	X, r24
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	a0 e8       	ldi	r26, 0x80	; 128
    3250:	bf e3       	ldi	r27, 0x3F	; 63
    3252:	8f a3       	std	Y+39, r24	; 0x27
    3254:	98 a7       	std	Y+40, r25	; 0x28
    3256:	a9 a7       	std	Y+41, r26	; 0x29
    3258:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    325a:	6f a1       	ldd	r22, Y+39	; 0x27
    325c:	78 a5       	ldd	r23, Y+40	; 0x28
    325e:	89 a5       	ldd	r24, Y+41	; 0x29
    3260:	9a a5       	ldd	r25, Y+42	; 0x2a
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e8       	ldi	r19, 0x80	; 128
    3266:	4b e3       	ldi	r20, 0x3B	; 59
    3268:	55 e4       	ldi	r21, 0x45	; 69
    326a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	8b a3       	std	Y+35, r24	; 0x23
    3274:	9c a3       	std	Y+36, r25	; 0x24
    3276:	ad a3       	std	Y+37, r26	; 0x25
    3278:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    327a:	6b a1       	ldd	r22, Y+35	; 0x23
    327c:	7c a1       	ldd	r23, Y+36	; 0x24
    327e:	8d a1       	ldd	r24, Y+37	; 0x25
    3280:	9e a1       	ldd	r25, Y+38	; 0x26
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	40 e8       	ldi	r20, 0x80	; 128
    3288:	5f e3       	ldi	r21, 0x3F	; 63
    328a:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    328e:	88 23       	and	r24, r24
    3290:	2c f4       	brge	.+10     	; 0x329c <LCD_sendCommand+0x176>
		__ticks = 1;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	9a a3       	std	Y+34, r25	; 0x22
    3298:	89 a3       	std	Y+33, r24	; 0x21
    329a:	3f c0       	rjmp	.+126    	; 0x331a <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    329c:	6b a1       	ldd	r22, Y+35	; 0x23
    329e:	7c a1       	ldd	r23, Y+36	; 0x24
    32a0:	8d a1       	ldd	r24, Y+37	; 0x25
    32a2:	9e a1       	ldd	r25, Y+38	; 0x26
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	3f ef       	ldi	r19, 0xFF	; 255
    32a8:	4f e7       	ldi	r20, 0x7F	; 127
    32aa:	57 e4       	ldi	r21, 0x47	; 71
    32ac:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    32b0:	18 16       	cp	r1, r24
    32b2:	4c f5       	brge	.+82     	; 0x3306 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b4:	6f a1       	ldd	r22, Y+39	; 0x27
    32b6:	78 a5       	ldd	r23, Y+40	; 0x28
    32b8:	89 a5       	ldd	r24, Y+41	; 0x29
    32ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e2       	ldi	r20, 0x20	; 32
    32c2:	51 e4       	ldi	r21, 0x41	; 65
    32c4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	bc 01       	movw	r22, r24
    32ce:	cd 01       	movw	r24, r26
    32d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	9a a3       	std	Y+34, r25	; 0x22
    32da:	89 a3       	std	Y+33, r24	; 0x21
    32dc:	0f c0       	rjmp	.+30     	; 0x32fc <LCD_sendCommand+0x1d6>
    32de:	8c e2       	ldi	r24, 0x2C	; 44
    32e0:	91 e0       	ldi	r25, 0x01	; 1
    32e2:	98 a3       	std	Y+32, r25	; 0x20
    32e4:	8f 8f       	std	Y+31, r24	; 0x1f
    32e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32e8:	98 a1       	ldd	r25, Y+32	; 0x20
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <LCD_sendCommand+0x1c4>
    32ee:	98 a3       	std	Y+32, r25	; 0x20
    32f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f2:	89 a1       	ldd	r24, Y+33	; 0x21
    32f4:	9a a1       	ldd	r25, Y+34	; 0x22
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	9a a3       	std	Y+34, r25	; 0x22
    32fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fc:	89 a1       	ldd	r24, Y+33	; 0x21
    32fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	69 f7       	brne	.-38     	; 0x32de <LCD_sendCommand+0x1b8>
    3304:	14 c0       	rjmp	.+40     	; 0x332e <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3306:	6b a1       	ldd	r22, Y+35	; 0x23
    3308:	7c a1       	ldd	r23, Y+36	; 0x24
    330a:	8d a1       	ldd	r24, Y+37	; 0x25
    330c:	9e a1       	ldd	r25, Y+38	; 0x26
    330e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	9a a3       	std	Y+34, r25	; 0x22
    3318:	89 a3       	std	Y+33, r24	; 0x21
    331a:	89 a1       	ldd	r24, Y+33	; 0x21
    331c:	9a a1       	ldd	r25, Y+34	; 0x22
    331e:	9e 8f       	std	Y+30, r25	; 0x1e
    3320:	8d 8f       	std	Y+29, r24	; 0x1d
    3322:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3324:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	f1 f7       	brne	.-4      	; 0x3326 <LCD_sendCommand+0x200>
    332a:	9e 8f       	std	Y+30, r25	; 0x1e
    332c:	8d 8f       	std	Y+29, r24	; 0x1d
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */ 
    332e:	e5 e3       	ldi	r30, 0x35	; 53
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	89 ad       	ldd	r24, Y+57	; 0x39
    3334:	80 83       	st	Z, r24
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	a0 e8       	ldi	r26, 0x80	; 128
    333c:	bf e3       	ldi	r27, 0x3F	; 63
    333e:	89 8f       	std	Y+25, r24	; 0x19
    3340:	9a 8f       	std	Y+26, r25	; 0x1a
    3342:	ab 8f       	std	Y+27, r26	; 0x1b
    3344:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3346:	69 8d       	ldd	r22, Y+25	; 0x19
    3348:	7a 8d       	ldd	r23, Y+26	; 0x1a
    334a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    334c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e8       	ldi	r19, 0x80	; 128
    3352:	4b e3       	ldi	r20, 0x3B	; 59
    3354:	55 e4       	ldi	r21, 0x45	; 69
    3356:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	8d 8b       	std	Y+21, r24	; 0x15
    3360:	9e 8b       	std	Y+22, r25	; 0x16
    3362:	af 8b       	std	Y+23, r26	; 0x17
    3364:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3366:	6d 89       	ldd	r22, Y+21	; 0x15
    3368:	7e 89       	ldd	r23, Y+22	; 0x16
    336a:	8f 89       	ldd	r24, Y+23	; 0x17
    336c:	98 8d       	ldd	r25, Y+24	; 0x18
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	40 e8       	ldi	r20, 0x80	; 128
    3374:	5f e3       	ldi	r21, 0x3F	; 63
    3376:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    337a:	88 23       	and	r24, r24
    337c:	2c f4       	brge	.+10     	; 0x3388 <LCD_sendCommand+0x262>
		__ticks = 1;
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9c 8b       	std	Y+20, r25	; 0x14
    3384:	8b 8b       	std	Y+19, r24	; 0x13
    3386:	3f c0       	rjmp	.+126    	; 0x3406 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    3388:	6d 89       	ldd	r22, Y+21	; 0x15
    338a:	7e 89       	ldd	r23, Y+22	; 0x16
    338c:	8f 89       	ldd	r24, Y+23	; 0x17
    338e:	98 8d       	ldd	r25, Y+24	; 0x18
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	3f ef       	ldi	r19, 0xFF	; 255
    3394:	4f e7       	ldi	r20, 0x7F	; 127
    3396:	57 e4       	ldi	r21, 0x47	; 71
    3398:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    339c:	18 16       	cp	r1, r24
    339e:	4c f5       	brge	.+82     	; 0x33f2 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a0:	69 8d       	ldd	r22, Y+25	; 0x19
    33a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e2       	ldi	r20, 0x20	; 32
    33ae:	51 e4       	ldi	r21, 0x41	; 65
    33b0:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	bc 01       	movw	r22, r24
    33ba:	cd 01       	movw	r24, r26
    33bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	9c 8b       	std	Y+20, r25	; 0x14
    33c6:	8b 8b       	std	Y+19, r24	; 0x13
    33c8:	0f c0       	rjmp	.+30     	; 0x33e8 <LCD_sendCommand+0x2c2>
    33ca:	8c e2       	ldi	r24, 0x2C	; 44
    33cc:	91 e0       	ldi	r25, 0x01	; 1
    33ce:	9a 8b       	std	Y+18, r25	; 0x12
    33d0:	89 8b       	std	Y+17, r24	; 0x11
    33d2:	89 89       	ldd	r24, Y+17	; 0x11
    33d4:	9a 89       	ldd	r25, Y+18	; 0x12
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <LCD_sendCommand+0x2b0>
    33da:	9a 8b       	std	Y+18, r25	; 0x12
    33dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33de:	8b 89       	ldd	r24, Y+19	; 0x13
    33e0:	9c 89       	ldd	r25, Y+20	; 0x14
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	9c 8b       	std	Y+20, r25	; 0x14
    33e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e8:	8b 89       	ldd	r24, Y+19	; 0x13
    33ea:	9c 89       	ldd	r25, Y+20	; 0x14
    33ec:	00 97       	sbiw	r24, 0x00	; 0
    33ee:	69 f7       	brne	.-38     	; 0x33ca <LCD_sendCommand+0x2a4>
    33f0:	14 c0       	rjmp	.+40     	; 0x341a <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f2:	6d 89       	ldd	r22, Y+21	; 0x15
    33f4:	7e 89       	ldd	r23, Y+22	; 0x16
    33f6:	8f 89       	ldd	r24, Y+23	; 0x17
    33f8:	98 8d       	ldd	r25, Y+24	; 0x18
    33fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	9c 8b       	std	Y+20, r25	; 0x14
    3404:	8b 8b       	std	Y+19, r24	; 0x13
    3406:	8b 89       	ldd	r24, Y+19	; 0x13
    3408:	9c 89       	ldd	r25, Y+20	; 0x14
    340a:	98 8b       	std	Y+16, r25	; 0x10
    340c:	8f 87       	std	Y+15, r24	; 0x0f
    340e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3410:	98 89       	ldd	r25, Y+16	; 0x10
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <LCD_sendCommand+0x2ec>
    3416:	98 8b       	std	Y+16, r25	; 0x10
    3418:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    341a:	a2 e3       	ldi	r26, 0x32	; 50
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	e2 e3       	ldi	r30, 0x32	; 50
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	8b 7f       	andi	r24, 0xFB	; 251
    3426:	8c 93       	st	X, r24
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	a0 e8       	ldi	r26, 0x80	; 128
    342e:	bf e3       	ldi	r27, 0x3F	; 63
    3430:	8b 87       	std	Y+11, r24	; 0x0b
    3432:	9c 87       	std	Y+12, r25	; 0x0c
    3434:	ad 87       	std	Y+13, r26	; 0x0d
    3436:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3438:	6b 85       	ldd	r22, Y+11	; 0x0b
    343a:	7c 85       	ldd	r23, Y+12	; 0x0c
    343c:	8d 85       	ldd	r24, Y+13	; 0x0d
    343e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e8       	ldi	r19, 0x80	; 128
    3444:	4b e3       	ldi	r20, 0x3B	; 59
    3446:	55 e4       	ldi	r21, 0x45	; 69
    3448:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	8f 83       	std	Y+7, r24	; 0x07
    3452:	98 87       	std	Y+8, r25	; 0x08
    3454:	a9 87       	std	Y+9, r26	; 0x09
    3456:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3458:	6f 81       	ldd	r22, Y+7	; 0x07
    345a:	78 85       	ldd	r23, Y+8	; 0x08
    345c:	89 85       	ldd	r24, Y+9	; 0x09
    345e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	40 e8       	ldi	r20, 0x80	; 128
    3466:	5f e3       	ldi	r21, 0x3F	; 63
    3468:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    346c:	88 23       	and	r24, r24
    346e:	2c f4       	brge	.+10     	; 0x347a <LCD_sendCommand+0x354>
		__ticks = 1;
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	9e 83       	std	Y+6, r25	; 0x06
    3476:	8d 83       	std	Y+5, r24	; 0x05
    3478:	3f c0       	rjmp	.+126    	; 0x34f8 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    347a:	6f 81       	ldd	r22, Y+7	; 0x07
    347c:	78 85       	ldd	r23, Y+8	; 0x08
    347e:	89 85       	ldd	r24, Y+9	; 0x09
    3480:	9a 85       	ldd	r25, Y+10	; 0x0a
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	3f ef       	ldi	r19, 0xFF	; 255
    3486:	4f e7       	ldi	r20, 0x7F	; 127
    3488:	57 e4       	ldi	r21, 0x47	; 71
    348a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    348e:	18 16       	cp	r1, r24
    3490:	4c f5       	brge	.+82     	; 0x34e4 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3492:	6b 85       	ldd	r22, Y+11	; 0x0b
    3494:	7c 85       	ldd	r23, Y+12	; 0x0c
    3496:	8d 85       	ldd	r24, Y+13	; 0x0d
    3498:	9e 85       	ldd	r25, Y+14	; 0x0e
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	40 e2       	ldi	r20, 0x20	; 32
    34a0:	51 e4       	ldi	r21, 0x41	; 65
    34a2:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	bc 01       	movw	r22, r24
    34ac:	cd 01       	movw	r24, r26
    34ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	9e 83       	std	Y+6, r25	; 0x06
    34b8:	8d 83       	std	Y+5, r24	; 0x05
    34ba:	0f c0       	rjmp	.+30     	; 0x34da <LCD_sendCommand+0x3b4>
    34bc:	8c e2       	ldi	r24, 0x2C	; 44
    34be:	91 e0       	ldi	r25, 0x01	; 1
    34c0:	9c 83       	std	Y+4, r25	; 0x04
    34c2:	8b 83       	std	Y+3, r24	; 0x03
    34c4:	8b 81       	ldd	r24, Y+3	; 0x03
    34c6:	9c 81       	ldd	r25, Y+4	; 0x04
    34c8:	01 97       	sbiw	r24, 0x01	; 1
    34ca:	f1 f7       	brne	.-4      	; 0x34c8 <LCD_sendCommand+0x3a2>
    34cc:	9c 83       	std	Y+4, r25	; 0x04
    34ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d0:	8d 81       	ldd	r24, Y+5	; 0x05
    34d2:	9e 81       	ldd	r25, Y+6	; 0x06
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	9e 83       	std	Y+6, r25	; 0x06
    34d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34da:	8d 81       	ldd	r24, Y+5	; 0x05
    34dc:	9e 81       	ldd	r25, Y+6	; 0x06
    34de:	00 97       	sbiw	r24, 0x00	; 0
    34e0:	69 f7       	brne	.-38     	; 0x34bc <LCD_sendCommand+0x396>
    34e2:	14 c0       	rjmp	.+40     	; 0x350c <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e4:	6f 81       	ldd	r22, Y+7	; 0x07
    34e6:	78 85       	ldd	r23, Y+8	; 0x08
    34e8:	89 85       	ldd	r24, Y+9	; 0x09
    34ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	9e 83       	std	Y+6, r25	; 0x06
    34f6:	8d 83       	std	Y+5, r24	; 0x05
    34f8:	8d 81       	ldd	r24, Y+5	; 0x05
    34fa:	9e 81       	ldd	r25, Y+6	; 0x06
    34fc:	9a 83       	std	Y+2, r25	; 0x02
    34fe:	89 83       	std	Y+1, r24	; 0x01
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	9a 81       	ldd	r25, Y+2	; 0x02
    3504:	01 97       	sbiw	r24, 0x01	; 1
    3506:	f1 f7       	brne	.-4      	; 0x3504 <LCD_sendCommand+0x3de>
    3508:	9a 83       	std	Y+2, r25	; 0x02
    350a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    350c:	e9 96       	adiw	r28, 0x39	; 57
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	cf 91       	pop	r28
    351a:	df 91       	pop	r29
    351c:	08 95       	ret

0000351e <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    351e:	df 93       	push	r29
    3520:	cf 93       	push	r28
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	e9 97       	sbiw	r28, 0x39	; 57
    3528:	0f b6       	in	r0, 0x3f	; 63
    352a:	f8 94       	cli
    352c:	de bf       	out	0x3e, r29	; 62
    352e:	0f be       	out	0x3f, r0	; 63
    3530:	cd bf       	out	0x3d, r28	; 61
    3532:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    3534:	a2 e3       	ldi	r26, 0x32	; 50
    3536:	b0 e0       	ldi	r27, 0x00	; 0
    3538:	e2 e3       	ldi	r30, 0x32	; 50
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	80 81       	ld	r24, Z
    353e:	81 60       	ori	r24, 0x01	; 1
    3540:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    3542:	a2 e3       	ldi	r26, 0x32	; 50
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	e2 e3       	ldi	r30, 0x32	; 50
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	80 81       	ld	r24, Z
    354c:	8d 7f       	andi	r24, 0xFD	; 253
    354e:	8c 93       	st	X, r24
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	a0 e8       	ldi	r26, 0x80	; 128
    3556:	bf e3       	ldi	r27, 0x3F	; 63
    3558:	8d ab       	std	Y+53, r24	; 0x35
    355a:	9e ab       	std	Y+54, r25	; 0x36
    355c:	af ab       	std	Y+55, r26	; 0x37
    355e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3560:	6d a9       	ldd	r22, Y+53	; 0x35
    3562:	7e a9       	ldd	r23, Y+54	; 0x36
    3564:	8f a9       	ldd	r24, Y+55	; 0x37
    3566:	98 ad       	ldd	r25, Y+56	; 0x38
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e8       	ldi	r19, 0x80	; 128
    356c:	4b e3       	ldi	r20, 0x3B	; 59
    356e:	55 e4       	ldi	r21, 0x45	; 69
    3570:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	89 ab       	std	Y+49, r24	; 0x31
    357a:	9a ab       	std	Y+50, r25	; 0x32
    357c:	ab ab       	std	Y+51, r26	; 0x33
    357e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3580:	69 a9       	ldd	r22, Y+49	; 0x31
    3582:	7a a9       	ldd	r23, Y+50	; 0x32
    3584:	8b a9       	ldd	r24, Y+51	; 0x33
    3586:	9c a9       	ldd	r25, Y+52	; 0x34
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e8       	ldi	r20, 0x80	; 128
    358e:	5f e3       	ldi	r21, 0x3F	; 63
    3590:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3594:	88 23       	and	r24, r24
    3596:	2c f4       	brge	.+10     	; 0x35a2 <LCD_displayCharacter+0x84>
		__ticks = 1;
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	98 ab       	std	Y+48, r25	; 0x30
    359e:	8f a7       	std	Y+47, r24	; 0x2f
    35a0:	3f c0       	rjmp	.+126    	; 0x3620 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    35a2:	69 a9       	ldd	r22, Y+49	; 0x31
    35a4:	7a a9       	ldd	r23, Y+50	; 0x32
    35a6:	8b a9       	ldd	r24, Y+51	; 0x33
    35a8:	9c a9       	ldd	r25, Y+52	; 0x34
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	3f ef       	ldi	r19, 0xFF	; 255
    35ae:	4f e7       	ldi	r20, 0x7F	; 127
    35b0:	57 e4       	ldi	r21, 0x47	; 71
    35b2:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    35b6:	18 16       	cp	r1, r24
    35b8:	4c f5       	brge	.+82     	; 0x360c <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ba:	6d a9       	ldd	r22, Y+53	; 0x35
    35bc:	7e a9       	ldd	r23, Y+54	; 0x36
    35be:	8f a9       	ldd	r24, Y+55	; 0x37
    35c0:	98 ad       	ldd	r25, Y+56	; 0x38
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e2       	ldi	r20, 0x20	; 32
    35c8:	51 e4       	ldi	r21, 0x41	; 65
    35ca:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	bc 01       	movw	r22, r24
    35d4:	cd 01       	movw	r24, r26
    35d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	98 ab       	std	Y+48, r25	; 0x30
    35e0:	8f a7       	std	Y+47, r24	; 0x2f
    35e2:	0f c0       	rjmp	.+30     	; 0x3602 <LCD_displayCharacter+0xe4>
    35e4:	8c e2       	ldi	r24, 0x2C	; 44
    35e6:	91 e0       	ldi	r25, 0x01	; 1
    35e8:	9e a7       	std	Y+46, r25	; 0x2e
    35ea:	8d a7       	std	Y+45, r24	; 0x2d
    35ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    35ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	f1 f7       	brne	.-4      	; 0x35f0 <LCD_displayCharacter+0xd2>
    35f4:	9e a7       	std	Y+46, r25	; 0x2e
    35f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    35fa:	98 a9       	ldd	r25, Y+48	; 0x30
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	98 ab       	std	Y+48, r25	; 0x30
    3600:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3602:	8f a5       	ldd	r24, Y+47	; 0x2f
    3604:	98 a9       	ldd	r25, Y+48	; 0x30
    3606:	00 97       	sbiw	r24, 0x00	; 0
    3608:	69 f7       	brne	.-38     	; 0x35e4 <LCD_displayCharacter+0xc6>
    360a:	14 c0       	rjmp	.+40     	; 0x3634 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    360c:	69 a9       	ldd	r22, Y+49	; 0x31
    360e:	7a a9       	ldd	r23, Y+50	; 0x32
    3610:	8b a9       	ldd	r24, Y+51	; 0x33
    3612:	9c a9       	ldd	r25, Y+52	; 0x34
    3614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	98 ab       	std	Y+48, r25	; 0x30
    361e:	8f a7       	std	Y+47, r24	; 0x2f
    3620:	8f a5       	ldd	r24, Y+47	; 0x2f
    3622:	98 a9       	ldd	r25, Y+48	; 0x30
    3624:	9c a7       	std	Y+44, r25	; 0x2c
    3626:	8b a7       	std	Y+43, r24	; 0x2b
    3628:	8b a5       	ldd	r24, Y+43	; 0x2b
    362a:	9c a5       	ldd	r25, Y+44	; 0x2c
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	f1 f7       	brne	.-4      	; 0x362c <LCD_displayCharacter+0x10e>
    3630:	9c a7       	std	Y+44, r25	; 0x2c
    3632:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    3634:	a2 e3       	ldi	r26, 0x32	; 50
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	e2 e3       	ldi	r30, 0x32	; 50
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	80 81       	ld	r24, Z
    363e:	84 60       	ori	r24, 0x04	; 4
    3640:	8c 93       	st	X, r24
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	a0 e8       	ldi	r26, 0x80	; 128
    3648:	bf e3       	ldi	r27, 0x3F	; 63
    364a:	8f a3       	std	Y+39, r24	; 0x27
    364c:	98 a7       	std	Y+40, r25	; 0x28
    364e:	a9 a7       	std	Y+41, r26	; 0x29
    3650:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3652:	6f a1       	ldd	r22, Y+39	; 0x27
    3654:	78 a5       	ldd	r23, Y+40	; 0x28
    3656:	89 a5       	ldd	r24, Y+41	; 0x29
    3658:	9a a5       	ldd	r25, Y+42	; 0x2a
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e8       	ldi	r19, 0x80	; 128
    365e:	4b e3       	ldi	r20, 0x3B	; 59
    3660:	55 e4       	ldi	r21, 0x45	; 69
    3662:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	8b a3       	std	Y+35, r24	; 0x23
    366c:	9c a3       	std	Y+36, r25	; 0x24
    366e:	ad a3       	std	Y+37, r26	; 0x25
    3670:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3672:	6b a1       	ldd	r22, Y+35	; 0x23
    3674:	7c a1       	ldd	r23, Y+36	; 0x24
    3676:	8d a1       	ldd	r24, Y+37	; 0x25
    3678:	9e a1       	ldd	r25, Y+38	; 0x26
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e8       	ldi	r20, 0x80	; 128
    3680:	5f e3       	ldi	r21, 0x3F	; 63
    3682:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3686:	88 23       	and	r24, r24
    3688:	2c f4       	brge	.+10     	; 0x3694 <LCD_displayCharacter+0x176>
		__ticks = 1;
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	9a a3       	std	Y+34, r25	; 0x22
    3690:	89 a3       	std	Y+33, r24	; 0x21
    3692:	3f c0       	rjmp	.+126    	; 0x3712 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    3694:	6b a1       	ldd	r22, Y+35	; 0x23
    3696:	7c a1       	ldd	r23, Y+36	; 0x24
    3698:	8d a1       	ldd	r24, Y+37	; 0x25
    369a:	9e a1       	ldd	r25, Y+38	; 0x26
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	3f ef       	ldi	r19, 0xFF	; 255
    36a0:	4f e7       	ldi	r20, 0x7F	; 127
    36a2:	57 e4       	ldi	r21, 0x47	; 71
    36a4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    36a8:	18 16       	cp	r1, r24
    36aa:	4c f5       	brge	.+82     	; 0x36fe <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ac:	6f a1       	ldd	r22, Y+39	; 0x27
    36ae:	78 a5       	ldd	r23, Y+40	; 0x28
    36b0:	89 a5       	ldd	r24, Y+41	; 0x29
    36b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	40 e2       	ldi	r20, 0x20	; 32
    36ba:	51 e4       	ldi	r21, 0x41	; 65
    36bc:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	bc 01       	movw	r22, r24
    36c6:	cd 01       	movw	r24, r26
    36c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	9a a3       	std	Y+34, r25	; 0x22
    36d2:	89 a3       	std	Y+33, r24	; 0x21
    36d4:	0f c0       	rjmp	.+30     	; 0x36f4 <LCD_displayCharacter+0x1d6>
    36d6:	8c e2       	ldi	r24, 0x2C	; 44
    36d8:	91 e0       	ldi	r25, 0x01	; 1
    36da:	98 a3       	std	Y+32, r25	; 0x20
    36dc:	8f 8f       	std	Y+31, r24	; 0x1f
    36de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36e0:	98 a1       	ldd	r25, Y+32	; 0x20
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	f1 f7       	brne	.-4      	; 0x36e2 <LCD_displayCharacter+0x1c4>
    36e6:	98 a3       	std	Y+32, r25	; 0x20
    36e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ea:	89 a1       	ldd	r24, Y+33	; 0x21
    36ec:	9a a1       	ldd	r25, Y+34	; 0x22
    36ee:	01 97       	sbiw	r24, 0x01	; 1
    36f0:	9a a3       	std	Y+34, r25	; 0x22
    36f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36f4:	89 a1       	ldd	r24, Y+33	; 0x21
    36f6:	9a a1       	ldd	r25, Y+34	; 0x22
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	69 f7       	brne	.-38     	; 0x36d6 <LCD_displayCharacter+0x1b8>
    36fc:	14 c0       	rjmp	.+40     	; 0x3726 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3700:	7c a1       	ldd	r23, Y+36	; 0x24
    3702:	8d a1       	ldd	r24, Y+37	; 0x25
    3704:	9e a1       	ldd	r25, Y+38	; 0x26
    3706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	9a a3       	std	Y+34, r25	; 0x22
    3710:	89 a3       	std	Y+33, r24	; 0x21
    3712:	89 a1       	ldd	r24, Y+33	; 0x21
    3714:	9a a1       	ldd	r25, Y+34	; 0x22
    3716:	9e 8f       	std	Y+30, r25	; 0x1e
    3718:	8d 8f       	std	Y+29, r24	; 0x1d
    371a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    371c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	f1 f7       	brne	.-4      	; 0x371e <LCD_displayCharacter+0x200>
    3722:	9e 8f       	std	Y+30, r25	; 0x1e
    3724:	8d 8f       	std	Y+29, r24	; 0x1d
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT = data; /* out the required data to the data bus D0 --> D7 */
    3726:	e5 e3       	ldi	r30, 0x35	; 53
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	89 ad       	ldd	r24, Y+57	; 0x39
    372c:	80 83       	st	Z, r24
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	a0 e8       	ldi	r26, 0x80	; 128
    3734:	bf e3       	ldi	r27, 0x3F	; 63
    3736:	89 8f       	std	Y+25, r24	; 0x19
    3738:	9a 8f       	std	Y+26, r25	; 0x1a
    373a:	ab 8f       	std	Y+27, r26	; 0x1b
    373c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373e:	69 8d       	ldd	r22, Y+25	; 0x19
    3740:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3742:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3744:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e8       	ldi	r19, 0x80	; 128
    374a:	4b e3       	ldi	r20, 0x3B	; 59
    374c:	55 e4       	ldi	r21, 0x45	; 69
    374e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	8d 8b       	std	Y+21, r24	; 0x15
    3758:	9e 8b       	std	Y+22, r25	; 0x16
    375a:	af 8b       	std	Y+23, r26	; 0x17
    375c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    375e:	6d 89       	ldd	r22, Y+21	; 0x15
    3760:	7e 89       	ldd	r23, Y+22	; 0x16
    3762:	8f 89       	ldd	r24, Y+23	; 0x17
    3764:	98 8d       	ldd	r25, Y+24	; 0x18
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	40 e8       	ldi	r20, 0x80	; 128
    376c:	5f e3       	ldi	r21, 0x3F	; 63
    376e:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3772:	88 23       	and	r24, r24
    3774:	2c f4       	brge	.+10     	; 0x3780 <LCD_displayCharacter+0x262>
		__ticks = 1;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	9c 8b       	std	Y+20, r25	; 0x14
    377c:	8b 8b       	std	Y+19, r24	; 0x13
    377e:	3f c0       	rjmp	.+126    	; 0x37fe <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    3780:	6d 89       	ldd	r22, Y+21	; 0x15
    3782:	7e 89       	ldd	r23, Y+22	; 0x16
    3784:	8f 89       	ldd	r24, Y+23	; 0x17
    3786:	98 8d       	ldd	r25, Y+24	; 0x18
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	3f ef       	ldi	r19, 0xFF	; 255
    378c:	4f e7       	ldi	r20, 0x7F	; 127
    378e:	57 e4       	ldi	r21, 0x47	; 71
    3790:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3794:	18 16       	cp	r1, r24
    3796:	4c f5       	brge	.+82     	; 0x37ea <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3798:	69 8d       	ldd	r22, Y+25	; 0x19
    379a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    379c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    379e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e2       	ldi	r20, 0x20	; 32
    37a6:	51 e4       	ldi	r21, 0x41	; 65
    37a8:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	bc 01       	movw	r22, r24
    37b2:	cd 01       	movw	r24, r26
    37b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	9c 8b       	std	Y+20, r25	; 0x14
    37be:	8b 8b       	std	Y+19, r24	; 0x13
    37c0:	0f c0       	rjmp	.+30     	; 0x37e0 <LCD_displayCharacter+0x2c2>
    37c2:	8c e2       	ldi	r24, 0x2C	; 44
    37c4:	91 e0       	ldi	r25, 0x01	; 1
    37c6:	9a 8b       	std	Y+18, r25	; 0x12
    37c8:	89 8b       	std	Y+17, r24	; 0x11
    37ca:	89 89       	ldd	r24, Y+17	; 0x11
    37cc:	9a 89       	ldd	r25, Y+18	; 0x12
    37ce:	01 97       	sbiw	r24, 0x01	; 1
    37d0:	f1 f7       	brne	.-4      	; 0x37ce <LCD_displayCharacter+0x2b0>
    37d2:	9a 8b       	std	Y+18, r25	; 0x12
    37d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d6:	8b 89       	ldd	r24, Y+19	; 0x13
    37d8:	9c 89       	ldd	r25, Y+20	; 0x14
    37da:	01 97       	sbiw	r24, 0x01	; 1
    37dc:	9c 8b       	std	Y+20, r25	; 0x14
    37de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e0:	8b 89       	ldd	r24, Y+19	; 0x13
    37e2:	9c 89       	ldd	r25, Y+20	; 0x14
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	69 f7       	brne	.-38     	; 0x37c2 <LCD_displayCharacter+0x2a4>
    37e8:	14 c0       	rjmp	.+40     	; 0x3812 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ea:	6d 89       	ldd	r22, Y+21	; 0x15
    37ec:	7e 89       	ldd	r23, Y+22	; 0x16
    37ee:	8f 89       	ldd	r24, Y+23	; 0x17
    37f0:	98 8d       	ldd	r25, Y+24	; 0x18
    37f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	9c 8b       	std	Y+20, r25	; 0x14
    37fc:	8b 8b       	std	Y+19, r24	; 0x13
    37fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3800:	9c 89       	ldd	r25, Y+20	; 0x14
    3802:	98 8b       	std	Y+16, r25	; 0x10
    3804:	8f 87       	std	Y+15, r24	; 0x0f
    3806:	8f 85       	ldd	r24, Y+15	; 0x0f
    3808:	98 89       	ldd	r25, Y+16	; 0x10
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <LCD_displayCharacter+0x2ec>
    380e:	98 8b       	std	Y+16, r25	; 0x10
    3810:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    3812:	a2 e3       	ldi	r26, 0x32	; 50
    3814:	b0 e0       	ldi	r27, 0x00	; 0
    3816:	e2 e3       	ldi	r30, 0x32	; 50
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	80 81       	ld	r24, Z
    381c:	8b 7f       	andi	r24, 0xFB	; 251
    381e:	8c 93       	st	X, r24
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	a0 e8       	ldi	r26, 0x80	; 128
    3826:	bf e3       	ldi	r27, 0x3F	; 63
    3828:	8b 87       	std	Y+11, r24	; 0x0b
    382a:	9c 87       	std	Y+12, r25	; 0x0c
    382c:	ad 87       	std	Y+13, r26	; 0x0d
    382e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3830:	6b 85       	ldd	r22, Y+11	; 0x0b
    3832:	7c 85       	ldd	r23, Y+12	; 0x0c
    3834:	8d 85       	ldd	r24, Y+13	; 0x0d
    3836:	9e 85       	ldd	r25, Y+14	; 0x0e
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e8       	ldi	r19, 0x80	; 128
    383c:	4b e3       	ldi	r20, 0x3B	; 59
    383e:	55 e4       	ldi	r21, 0x45	; 69
    3840:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	8f 83       	std	Y+7, r24	; 0x07
    384a:	98 87       	std	Y+8, r25	; 0x08
    384c:	a9 87       	std	Y+9, r26	; 0x09
    384e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3850:	6f 81       	ldd	r22, Y+7	; 0x07
    3852:	78 85       	ldd	r23, Y+8	; 0x08
    3854:	89 85       	ldd	r24, Y+9	; 0x09
    3856:	9a 85       	ldd	r25, Y+10	; 0x0a
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e8       	ldi	r20, 0x80	; 128
    385e:	5f e3       	ldi	r21, 0x3F	; 63
    3860:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3864:	88 23       	and	r24, r24
    3866:	2c f4       	brge	.+10     	; 0x3872 <LCD_displayCharacter+0x354>
		__ticks = 1;
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	9e 83       	std	Y+6, r25	; 0x06
    386e:	8d 83       	std	Y+5, r24	; 0x05
    3870:	3f c0       	rjmp	.+126    	; 0x38f0 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    3872:	6f 81       	ldd	r22, Y+7	; 0x07
    3874:	78 85       	ldd	r23, Y+8	; 0x08
    3876:	89 85       	ldd	r24, Y+9	; 0x09
    3878:	9a 85       	ldd	r25, Y+10	; 0x0a
    387a:	20 e0       	ldi	r18, 0x00	; 0
    387c:	3f ef       	ldi	r19, 0xFF	; 255
    387e:	4f e7       	ldi	r20, 0x7F	; 127
    3880:	57 e4       	ldi	r21, 0x47	; 71
    3882:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3886:	18 16       	cp	r1, r24
    3888:	4c f5       	brge	.+82     	; 0x38dc <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    388a:	6b 85       	ldd	r22, Y+11	; 0x0b
    388c:	7c 85       	ldd	r23, Y+12	; 0x0c
    388e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3890:	9e 85       	ldd	r25, Y+14	; 0x0e
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e2       	ldi	r20, 0x20	; 32
    3898:	51 e4       	ldi	r21, 0x41	; 65
    389a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	bc 01       	movw	r22, r24
    38a4:	cd 01       	movw	r24, r26
    38a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	9e 83       	std	Y+6, r25	; 0x06
    38b0:	8d 83       	std	Y+5, r24	; 0x05
    38b2:	0f c0       	rjmp	.+30     	; 0x38d2 <LCD_displayCharacter+0x3b4>
    38b4:	8c e2       	ldi	r24, 0x2C	; 44
    38b6:	91 e0       	ldi	r25, 0x01	; 1
    38b8:	9c 83       	std	Y+4, r25	; 0x04
    38ba:	8b 83       	std	Y+3, r24	; 0x03
    38bc:	8b 81       	ldd	r24, Y+3	; 0x03
    38be:	9c 81       	ldd	r25, Y+4	; 0x04
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <LCD_displayCharacter+0x3a2>
    38c4:	9c 83       	std	Y+4, r25	; 0x04
    38c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ca:	9e 81       	ldd	r25, Y+6	; 0x06
    38cc:	01 97       	sbiw	r24, 0x01	; 1
    38ce:	9e 83       	std	Y+6, r25	; 0x06
    38d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d2:	8d 81       	ldd	r24, Y+5	; 0x05
    38d4:	9e 81       	ldd	r25, Y+6	; 0x06
    38d6:	00 97       	sbiw	r24, 0x00	; 0
    38d8:	69 f7       	brne	.-38     	; 0x38b4 <LCD_displayCharacter+0x396>
    38da:	14 c0       	rjmp	.+40     	; 0x3904 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38dc:	6f 81       	ldd	r22, Y+7	; 0x07
    38de:	78 85       	ldd	r23, Y+8	; 0x08
    38e0:	89 85       	ldd	r24, Y+9	; 0x09
    38e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	9e 83       	std	Y+6, r25	; 0x06
    38ee:	8d 83       	std	Y+5, r24	; 0x05
    38f0:	8d 81       	ldd	r24, Y+5	; 0x05
    38f2:	9e 81       	ldd	r25, Y+6	; 0x06
    38f4:	9a 83       	std	Y+2, r25	; 0x02
    38f6:	89 83       	std	Y+1, r24	; 0x01
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	9a 81       	ldd	r25, Y+2	; 0x02
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <LCD_displayCharacter+0x3de>
    3900:	9a 83       	std	Y+2, r25	; 0x02
    3902:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    3904:	e9 96       	adiw	r28, 0x39	; 57
    3906:	0f b6       	in	r0, 0x3f	; 63
    3908:	f8 94       	cli
    390a:	de bf       	out	0x3e, r29	; 62
    390c:	0f be       	out	0x3f, r0	; 63
    390e:	cd bf       	out	0x3d, r28	; 61
    3910:	cf 91       	pop	r28
    3912:	df 91       	pop	r29
    3914:	08 95       	ret

00003916 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    3916:	df 93       	push	r29
    3918:	cf 93       	push	r28
    391a:	00 d0       	rcall	.+0      	; 0x391c <LCD_displayString+0x6>
    391c:	0f 92       	push	r0
    391e:	cd b7       	in	r28, 0x3d	; 61
    3920:	de b7       	in	r29, 0x3e	; 62
    3922:	9b 83       	std	Y+3, r25	; 0x03
    3924:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3926:	19 82       	std	Y+1, r1	; 0x01
    3928:	0e c0       	rjmp	.+28     	; 0x3946 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    392a:	89 81       	ldd	r24, Y+1	; 0x01
    392c:	28 2f       	mov	r18, r24
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	8a 81       	ldd	r24, Y+2	; 0x02
    3932:	9b 81       	ldd	r25, Y+3	; 0x03
    3934:	fc 01       	movw	r30, r24
    3936:	e2 0f       	add	r30, r18
    3938:	f3 1f       	adc	r31, r19
    393a:	80 81       	ld	r24, Z
    393c:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_displayCharacter>
		i++;
    3940:	89 81       	ldd	r24, Y+1	; 0x01
    3942:	8f 5f       	subi	r24, 0xFF	; 255
    3944:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3946:	89 81       	ldd	r24, Y+1	; 0x01
    3948:	28 2f       	mov	r18, r24
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	8a 81       	ldd	r24, Y+2	; 0x02
    394e:	9b 81       	ldd	r25, Y+3	; 0x03
    3950:	fc 01       	movw	r30, r24
    3952:	e2 0f       	add	r30, r18
    3954:	f3 1f       	adc	r31, r19
    3956:	80 81       	ld	r24, Z
    3958:	88 23       	and	r24, r24
    395a:	39 f7       	brne	.-50     	; 0x392a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    395c:	0f 90       	pop	r0
    395e:	0f 90       	pop	r0
    3960:	0f 90       	pop	r0
    3962:	cf 91       	pop	r28
    3964:	df 91       	pop	r29
    3966:	08 95       	ret

00003968 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    3968:	df 93       	push	r29
    396a:	cf 93       	push	r28
    396c:	00 d0       	rcall	.+0      	; 0x396e <LCD_goToRowColumn+0x6>
    396e:	00 d0       	rcall	.+0      	; 0x3970 <LCD_goToRowColumn+0x8>
    3970:	0f 92       	push	r0
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
    3976:	8a 83       	std	Y+2, r24	; 0x02
    3978:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    397a:	8a 81       	ldd	r24, Y+2	; 0x02
    397c:	28 2f       	mov	r18, r24
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	3d 83       	std	Y+5, r19	; 0x05
    3982:	2c 83       	std	Y+4, r18	; 0x04
    3984:	8c 81       	ldd	r24, Y+4	; 0x04
    3986:	9d 81       	ldd	r25, Y+5	; 0x05
    3988:	81 30       	cpi	r24, 0x01	; 1
    398a:	91 05       	cpc	r25, r1
    398c:	c1 f0       	breq	.+48     	; 0x39be <LCD_goToRowColumn+0x56>
    398e:	2c 81       	ldd	r18, Y+4	; 0x04
    3990:	3d 81       	ldd	r19, Y+5	; 0x05
    3992:	22 30       	cpi	r18, 0x02	; 2
    3994:	31 05       	cpc	r19, r1
    3996:	2c f4       	brge	.+10     	; 0x39a2 <LCD_goToRowColumn+0x3a>
    3998:	8c 81       	ldd	r24, Y+4	; 0x04
    399a:	9d 81       	ldd	r25, Y+5	; 0x05
    399c:	00 97       	sbiw	r24, 0x00	; 0
    399e:	61 f0       	breq	.+24     	; 0x39b8 <LCD_goToRowColumn+0x50>
    39a0:	19 c0       	rjmp	.+50     	; 0x39d4 <LCD_goToRowColumn+0x6c>
    39a2:	2c 81       	ldd	r18, Y+4	; 0x04
    39a4:	3d 81       	ldd	r19, Y+5	; 0x05
    39a6:	22 30       	cpi	r18, 0x02	; 2
    39a8:	31 05       	cpc	r19, r1
    39aa:	69 f0       	breq	.+26     	; 0x39c6 <LCD_goToRowColumn+0x5e>
    39ac:	8c 81       	ldd	r24, Y+4	; 0x04
    39ae:	9d 81       	ldd	r25, Y+5	; 0x05
    39b0:	83 30       	cpi	r24, 0x03	; 3
    39b2:	91 05       	cpc	r25, r1
    39b4:	61 f0       	breq	.+24     	; 0x39ce <LCD_goToRowColumn+0x66>
    39b6:	0e c0       	rjmp	.+28     	; 0x39d4 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    39b8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ba:	89 83       	std	Y+1, r24	; 0x01
    39bc:	0b c0       	rjmp	.+22     	; 0x39d4 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    39be:	8b 81       	ldd	r24, Y+3	; 0x03
    39c0:	80 5c       	subi	r24, 0xC0	; 192
    39c2:	89 83       	std	Y+1, r24	; 0x01
    39c4:	07 c0       	rjmp	.+14     	; 0x39d4 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    39c6:	8b 81       	ldd	r24, Y+3	; 0x03
    39c8:	80 5f       	subi	r24, 0xF0	; 240
    39ca:	89 83       	std	Y+1, r24	; 0x01
    39cc:	03 c0       	rjmp	.+6      	; 0x39d4 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    39ce:	8b 81       	ldd	r24, Y+3	; 0x03
    39d0:	80 5b       	subi	r24, 0xB0	; 176
    39d2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); /*0x80+Address*/
    39d4:	89 81       	ldd	r24, Y+1	; 0x01
    39d6:	80 68       	ori	r24, 0x80	; 128
    39d8:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_sendCommand>
}
    39dc:	0f 90       	pop	r0
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	cf 91       	pop	r28
    39e8:	df 91       	pop	r29
    39ea:	08 95       	ret

000039ec <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    39ec:	df 93       	push	r29
    39ee:	cf 93       	push	r28
    39f0:	00 d0       	rcall	.+0      	; 0x39f2 <LCD_displayStringRowColumn+0x6>
    39f2:	00 d0       	rcall	.+0      	; 0x39f4 <LCD_displayStringRowColumn+0x8>
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
    39f8:	89 83       	std	Y+1, r24	; 0x01
    39fa:	6a 83       	std	Y+2, r22	; 0x02
    39fc:	5c 83       	std	Y+4, r21	; 0x04
    39fe:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	6a 81       	ldd	r22, Y+2	; 0x02
    3a04:	0e 94 b4 1c 	call	0x3968	; 0x3968 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    3a08:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a0c:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_displayString>
}
    3a10:	0f 90       	pop	r0
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	cf 91       	pop	r28
    3a1a:	df 91       	pop	r29
    3a1c:	08 95       	ret

00003a1e <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    3a1e:	df 93       	push	r29
    3a20:	cf 93       	push	r28
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_sendCommand>
}
    3a2c:	cf 91       	pop	r28
    3a2e:	df 91       	pop	r29
    3a30:	08 95       	ret

00003a32 <Signed_Int64_ToASCI>:
/************************************************************************/
/*               LCD_Signed_Int64_ToString                                     */
/************************************************************************/

static uint8 Signed_Int64_ToASCI(sint64 num, uint8* str, uint8 len, uint8 base)
{
    3a32:	2f 92       	push	r2
    3a34:	3f 92       	push	r3
    3a36:	4f 92       	push	r4
    3a38:	5f 92       	push	r5
    3a3a:	6f 92       	push	r6
    3a3c:	7f 92       	push	r7
    3a3e:	8f 92       	push	r8
    3a40:	9f 92       	push	r9
    3a42:	af 92       	push	r10
    3a44:	bf 92       	push	r11
    3a46:	cf 92       	push	r12
    3a48:	df 92       	push	r13
    3a4a:	ef 92       	push	r14
    3a4c:	ff 92       	push	r15
    3a4e:	0f 93       	push	r16
    3a50:	1f 93       	push	r17
    3a52:	df 93       	push	r29
    3a54:	cf 93       	push	r28
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
    3a5a:	c3 54       	subi	r28, 0x43	; 67
    3a5c:	d0 40       	sbci	r29, 0x00	; 0
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	f8 94       	cli
    3a62:	de bf       	out	0x3e, r29	; 62
    3a64:	0f be       	out	0x3f, r0	; 63
    3a66:	cd bf       	out	0x3d, r28	; 61
    3a68:	2c 87       	std	Y+12, r18	; 0x0c
    3a6a:	3d 87       	std	Y+13, r19	; 0x0d
    3a6c:	4e 87       	std	Y+14, r20	; 0x0e
    3a6e:	5f 87       	std	Y+15, r21	; 0x0f
    3a70:	68 8b       	std	Y+16, r22	; 0x10
    3a72:	79 8b       	std	Y+17, r23	; 0x11
    3a74:	8a 8b       	std	Y+18, r24	; 0x12
    3a76:	9b 8b       	std	Y+19, r25	; 0x13
    3a78:	1d 8b       	std	Y+21, r17	; 0x15
    3a7a:	0c 8b       	std	Y+20, r16	; 0x14
    3a7c:	ee 8a       	std	Y+22, r14	; 0x16
    3a7e:	cf 8a       	std	Y+23, r12	; 0x17
	sint64 sum = num;
    3a80:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a82:	8c 83       	std	Y+4, r24	; 0x04
    3a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a86:	8d 83       	std	Y+5, r24	; 0x05
    3a88:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a8a:	8e 83       	std	Y+6, r24	; 0x06
    3a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a8e:	8f 83       	std	Y+7, r24	; 0x07
    3a90:	88 89       	ldd	r24, Y+16	; 0x10
    3a92:	88 87       	std	Y+8, r24	; 0x08
    3a94:	89 89       	ldd	r24, Y+17	; 0x11
    3a96:	89 87       	std	Y+9, r24	; 0x09
    3a98:	8a 89       	ldd	r24, Y+18	; 0x12
    3a9a:	8a 87       	std	Y+10, r24	; 0x0a
    3a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a9e:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 i = 0;
    3aa0:	1b 82       	std	Y+3, r1	; 0x03
	uint8 digit;
	uint8 Negative=0;
    3aa2:	19 82       	std	Y+1, r1	; 0x01
	
	if(sum < 0){
    3aa4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3aa6:	88 23       	and	r24, r24
    3aa8:	d4 f0       	brlt	.+52     	; 0x3ade <Signed_Int64_ToASCI+0xac>
    3aaa:	8b 85       	ldd	r24, Y+11	; 0x0b
    3aac:	88 23       	and	r24, r24
    3aae:	09 f0       	breq	.+2      	; 0x3ab2 <Signed_Int64_ToASCI+0x80>
    3ab0:	17 c1       	rjmp	.+558    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3ab2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ab4:	88 23       	and	r24, r24
    3ab6:	09 f0       	breq	.+2      	; 0x3aba <Signed_Int64_ToASCI+0x88>
    3ab8:	13 c1       	rjmp	.+550    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3aba:	89 85       	ldd	r24, Y+9	; 0x09
    3abc:	88 23       	and	r24, r24
    3abe:	09 f0       	breq	.+2      	; 0x3ac2 <Signed_Int64_ToASCI+0x90>
    3ac0:	0f c1       	rjmp	.+542    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3ac2:	88 85       	ldd	r24, Y+8	; 0x08
    3ac4:	88 23       	and	r24, r24
    3ac6:	09 f0       	breq	.+2      	; 0x3aca <Signed_Int64_ToASCI+0x98>
    3ac8:	0b c1       	rjmp	.+534    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3aca:	8f 81       	ldd	r24, Y+7	; 0x07
    3acc:	88 23       	and	r24, r24
    3ace:	09 f0       	breq	.+2      	; 0x3ad2 <Signed_Int64_ToASCI+0xa0>
    3ad0:	07 c1       	rjmp	.+526    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ad4:	88 23       	and	r24, r24
    3ad6:	09 f0       	breq	.+2      	; 0x3ada <Signed_Int64_ToASCI+0xa8>
    3ad8:	03 c1       	rjmp	.+518    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3ada:	8d 81       	ldd	r24, Y+5	; 0x05
    3adc:	01 c1       	rjmp	.+514    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
		sum=-sum;
    3ade:	19 8e       	std	Y+25, r1	; 0x19
    3ae0:	1a 8e       	std	Y+26, r1	; 0x1a
    3ae2:	1b 8e       	std	Y+27, r1	; 0x1b
    3ae4:	1c 8e       	std	Y+28, r1	; 0x1c
    3ae6:	1d 8e       	std	Y+29, r1	; 0x1d
    3ae8:	1e 8e       	std	Y+30, r1	; 0x1e
    3aea:	1f 8e       	std	Y+31, r1	; 0x1f
    3aec:	18 a2       	std	Y+32, r1	; 0x20
    3aee:	9c 81       	ldd	r25, Y+4	; 0x04
    3af0:	99 a3       	std	Y+33, r25	; 0x21
    3af2:	8d 81       	ldd	r24, Y+5	; 0x05
    3af4:	8a a3       	std	Y+34, r24	; 0x22
    3af6:	9e 81       	ldd	r25, Y+6	; 0x06
    3af8:	9b a3       	std	Y+35, r25	; 0x23
    3afa:	8f 81       	ldd	r24, Y+7	; 0x07
    3afc:	8c a3       	std	Y+36, r24	; 0x24
    3afe:	98 85       	ldd	r25, Y+8	; 0x08
    3b00:	9d a3       	std	Y+37, r25	; 0x25
    3b02:	89 85       	ldd	r24, Y+9	; 0x09
    3b04:	8e a3       	std	Y+38, r24	; 0x26
    3b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b08:	9f a3       	std	Y+39, r25	; 0x27
    3b0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b0c:	88 a7       	std	Y+40, r24	; 0x28
    3b0e:	99 8d       	ldd	r25, Y+25	; 0x19
    3b10:	89 a1       	ldd	r24, Y+33	; 0x21
    3b12:	98 1b       	sub	r25, r24
    3b14:	99 a7       	std	Y+41, r25	; 0x29
    3b16:	91 e0       	ldi	r25, 0x01	; 1
    3b18:	99 ab       	std	Y+49, r25	; 0x31
    3b1a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b1c:	99 8d       	ldd	r25, Y+25	; 0x19
    3b1e:	98 17       	cp	r25, r24
    3b20:	08 f0       	brcs	.+2      	; 0x3b24 <Signed_Int64_ToASCI+0xf2>
    3b22:	19 aa       	std	Y+49, r1	; 0x31
    3b24:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b26:	9a a1       	ldd	r25, Y+34	; 0x22
    3b28:	89 1b       	sub	r24, r25
    3b2a:	8a a7       	std	Y+42, r24	; 0x2a
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	8a ab       	std	Y+50, r24	; 0x32
    3b30:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b32:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b34:	89 17       	cp	r24, r25
    3b36:	08 f0       	brcs	.+2      	; 0x3b3a <Signed_Int64_ToASCI+0x108>
    3b38:	1a aa       	std	Y+50, r1	; 0x32
    3b3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b3c:	89 a9       	ldd	r24, Y+49	; 0x31
    3b3e:	98 1b       	sub	r25, r24
    3b40:	9b ab       	std	Y+51, r25	; 0x33
    3b42:	91 e0       	ldi	r25, 0x01	; 1
    3b44:	9c ab       	std	Y+52, r25	; 0x34
    3b46:	8b a9       	ldd	r24, Y+51	; 0x33
    3b48:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b4a:	98 17       	cp	r25, r24
    3b4c:	08 f0       	brcs	.+2      	; 0x3b50 <Signed_Int64_ToASCI+0x11e>
    3b4e:	1c aa       	std	Y+52, r1	; 0x34
    3b50:	8a a9       	ldd	r24, Y+50	; 0x32
    3b52:	9c a9       	ldd	r25, Y+52	; 0x34
    3b54:	89 2b       	or	r24, r25
    3b56:	8a ab       	std	Y+50, r24	; 0x32
    3b58:	8b a9       	ldd	r24, Y+51	; 0x33
    3b5a:	8a a7       	std	Y+42, r24	; 0x2a
    3b5c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b5e:	8b a1       	ldd	r24, Y+35	; 0x23
    3b60:	98 1b       	sub	r25, r24
    3b62:	9b a7       	std	Y+43, r25	; 0x2b
    3b64:	91 e0       	ldi	r25, 0x01	; 1
    3b66:	9d ab       	std	Y+53, r25	; 0x35
    3b68:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b6a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b6c:	98 17       	cp	r25, r24
    3b6e:	08 f0       	brcs	.+2      	; 0x3b72 <Signed_Int64_ToASCI+0x140>
    3b70:	1d aa       	std	Y+53, r1	; 0x35
    3b72:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b74:	9a a9       	ldd	r25, Y+50	; 0x32
    3b76:	89 1b       	sub	r24, r25
    3b78:	8e ab       	std	Y+54, r24	; 0x36
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	8f ab       	std	Y+55, r24	; 0x37
    3b7e:	9e a9       	ldd	r25, Y+54	; 0x36
    3b80:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b82:	89 17       	cp	r24, r25
    3b84:	08 f0       	brcs	.+2      	; 0x3b88 <Signed_Int64_ToASCI+0x156>
    3b86:	1f aa       	std	Y+55, r1	; 0x37
    3b88:	9d a9       	ldd	r25, Y+53	; 0x35
    3b8a:	8f a9       	ldd	r24, Y+55	; 0x37
    3b8c:	98 2b       	or	r25, r24
    3b8e:	9d ab       	std	Y+53, r25	; 0x35
    3b90:	9e a9       	ldd	r25, Y+54	; 0x36
    3b92:	9b a7       	std	Y+43, r25	; 0x2b
    3b94:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b96:	9c a1       	ldd	r25, Y+36	; 0x24
    3b98:	89 1b       	sub	r24, r25
    3b9a:	8c a7       	std	Y+44, r24	; 0x2c
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	88 af       	std	Y+56, r24	; 0x38
    3ba0:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ba2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ba4:	89 17       	cp	r24, r25
    3ba6:	08 f0       	brcs	.+2      	; 0x3baa <Signed_Int64_ToASCI+0x178>
    3ba8:	18 ae       	std	Y+56, r1	; 0x38
    3baa:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bac:	8d a9       	ldd	r24, Y+53	; 0x35
    3bae:	98 1b       	sub	r25, r24
    3bb0:	99 af       	std	Y+57, r25	; 0x39
    3bb2:	91 e0       	ldi	r25, 0x01	; 1
    3bb4:	9a af       	std	Y+58, r25	; 0x3a
    3bb6:	89 ad       	ldd	r24, Y+57	; 0x39
    3bb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bba:	98 17       	cp	r25, r24
    3bbc:	08 f0       	brcs	.+2      	; 0x3bc0 <Signed_Int64_ToASCI+0x18e>
    3bbe:	1a ae       	std	Y+58, r1	; 0x3a
    3bc0:	88 ad       	ldd	r24, Y+56	; 0x38
    3bc2:	9a ad       	ldd	r25, Y+58	; 0x3a
    3bc4:	89 2b       	or	r24, r25
    3bc6:	88 af       	std	Y+56, r24	; 0x38
    3bc8:	89 ad       	ldd	r24, Y+57	; 0x39
    3bca:	8c a7       	std	Y+44, r24	; 0x2c
    3bcc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3bce:	8d a1       	ldd	r24, Y+37	; 0x25
    3bd0:	98 1b       	sub	r25, r24
    3bd2:	9d a7       	std	Y+45, r25	; 0x2d
    3bd4:	91 e0       	ldi	r25, 0x01	; 1
    3bd6:	9b af       	std	Y+59, r25	; 0x3b
    3bd8:	8d a5       	ldd	r24, Y+45	; 0x2d
    3bda:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3bdc:	98 17       	cp	r25, r24
    3bde:	08 f0       	brcs	.+2      	; 0x3be2 <Signed_Int64_ToASCI+0x1b0>
    3be0:	1b ae       	std	Y+59, r1	; 0x3b
    3be2:	8d a5       	ldd	r24, Y+45	; 0x2d
    3be4:	98 ad       	ldd	r25, Y+56	; 0x38
    3be6:	89 1b       	sub	r24, r25
    3be8:	8c af       	std	Y+60, r24	; 0x3c
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	8d af       	std	Y+61, r24	; 0x3d
    3bee:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bf0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3bf2:	89 17       	cp	r24, r25
    3bf4:	08 f0       	brcs	.+2      	; 0x3bf8 <Signed_Int64_ToASCI+0x1c6>
    3bf6:	1d ae       	std	Y+61, r1	; 0x3d
    3bf8:	9b ad       	ldd	r25, Y+59	; 0x3b
    3bfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bfc:	98 2b       	or	r25, r24
    3bfe:	9b af       	std	Y+59, r25	; 0x3b
    3c00:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c02:	9d a7       	std	Y+45, r25	; 0x2d
    3c04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c06:	9e a1       	ldd	r25, Y+38	; 0x26
    3c08:	89 1b       	sub	r24, r25
    3c0a:	8e a7       	std	Y+46, r24	; 0x2e
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	8e af       	std	Y+62, r24	; 0x3e
    3c10:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c14:	89 17       	cp	r24, r25
    3c16:	08 f0       	brcs	.+2      	; 0x3c1a <Signed_Int64_ToASCI+0x1e8>
    3c18:	1e ae       	std	Y+62, r1	; 0x3e
    3c1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c1c:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c1e:	98 1b       	sub	r25, r24
    3c20:	9f af       	std	Y+63, r25	; 0x3f
    3c22:	91 e0       	ldi	r25, 0x01	; 1
    3c24:	21 96       	adiw	r28, 0x01	; 1
    3c26:	9f af       	std	Y+63, r25	; 0x3f
    3c28:	21 97       	sbiw	r28, 0x01	; 1
    3c2a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c2e:	98 17       	cp	r25, r24
    3c30:	18 f0       	brcs	.+6      	; 0x3c38 <Signed_Int64_ToASCI+0x206>
    3c32:	21 96       	adiw	r28, 0x01	; 1
    3c34:	1f ae       	std	Y+63, r1	; 0x3f
    3c36:	21 97       	sbiw	r28, 0x01	; 1
    3c38:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c3a:	21 96       	adiw	r28, 0x01	; 1
    3c3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c3e:	21 97       	sbiw	r28, 0x01	; 1
    3c40:	89 2b       	or	r24, r25
    3c42:	8e af       	std	Y+62, r24	; 0x3e
    3c44:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c46:	8e a7       	std	Y+46, r24	; 0x2e
    3c48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c4a:	8f a1       	ldd	r24, Y+39	; 0x27
    3c4c:	98 1b       	sub	r25, r24
    3c4e:	9f a7       	std	Y+47, r25	; 0x2f
    3c50:	91 e0       	ldi	r25, 0x01	; 1
    3c52:	22 96       	adiw	r28, 0x02	; 2
    3c54:	9f af       	std	Y+63, r25	; 0x3f
    3c56:	22 97       	sbiw	r28, 0x02	; 2
    3c58:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c5c:	98 17       	cp	r25, r24
    3c5e:	18 f0       	brcs	.+6      	; 0x3c66 <Signed_Int64_ToASCI+0x234>
    3c60:	22 96       	adiw	r28, 0x02	; 2
    3c62:	1f ae       	std	Y+63, r1	; 0x3f
    3c64:	22 97       	sbiw	r28, 0x02	; 2
    3c66:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c68:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c6a:	89 1b       	sub	r24, r25
    3c6c:	23 96       	adiw	r28, 0x03	; 3
    3c6e:	8f af       	std	Y+63, r24	; 0x3f
    3c70:	23 97       	sbiw	r28, 0x03	; 3
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    3c74:	24 96       	adiw	r28, 0x04	; 4
    3c76:	8f af       	std	Y+63, r24	; 0x3f
    3c78:	24 97       	sbiw	r28, 0x04	; 4
    3c7a:	23 96       	adiw	r28, 0x03	; 3
    3c7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c7e:	23 97       	sbiw	r28, 0x03	; 3
    3c80:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c82:	89 17       	cp	r24, r25
    3c84:	18 f0       	brcs	.+6      	; 0x3c8c <Signed_Int64_ToASCI+0x25a>
    3c86:	24 96       	adiw	r28, 0x04	; 4
    3c88:	1f ae       	std	Y+63, r1	; 0x3f
    3c8a:	24 97       	sbiw	r28, 0x04	; 4
    3c8c:	22 96       	adiw	r28, 0x02	; 2
    3c8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c90:	22 97       	sbiw	r28, 0x02	; 2
    3c92:	24 96       	adiw	r28, 0x04	; 4
    3c94:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c96:	24 97       	sbiw	r28, 0x04	; 4
    3c98:	98 2b       	or	r25, r24
    3c9a:	22 96       	adiw	r28, 0x02	; 2
    3c9c:	9f af       	std	Y+63, r25	; 0x3f
    3c9e:	22 97       	sbiw	r28, 0x02	; 2
    3ca0:	23 96       	adiw	r28, 0x03	; 3
    3ca2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ca4:	23 97       	sbiw	r28, 0x03	; 3
    3ca6:	9f a7       	std	Y+47, r25	; 0x2f
    3ca8:	88 a1       	ldd	r24, Y+32	; 0x20
    3caa:	98 a5       	ldd	r25, Y+40	; 0x28
    3cac:	89 1b       	sub	r24, r25
    3cae:	88 ab       	std	Y+48, r24	; 0x30
    3cb0:	88 a9       	ldd	r24, Y+48	; 0x30
    3cb2:	22 96       	adiw	r28, 0x02	; 2
    3cb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cb6:	22 97       	sbiw	r28, 0x02	; 2
    3cb8:	89 1b       	sub	r24, r25
    3cba:	88 ab       	std	Y+48, r24	; 0x30
    3cbc:	89 a5       	ldd	r24, Y+41	; 0x29
    3cbe:	8c 83       	std	Y+4, r24	; 0x04
    3cc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cc2:	9d 83       	std	Y+5, r25	; 0x05
    3cc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cc6:	8e 83       	std	Y+6, r24	; 0x06
    3cc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cca:	9f 83       	std	Y+7, r25	; 0x07
    3ccc:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cce:	88 87       	std	Y+8, r24	; 0x08
    3cd0:	9e a5       	ldd	r25, Y+46	; 0x2e
    3cd2:	99 87       	std	Y+9, r25	; 0x09
    3cd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cd6:	8a 87       	std	Y+10, r24	; 0x0a
    3cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    3cda:	9b 87       	std	Y+11, r25	; 0x0b
		Negative=1;
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	89 83       	std	Y+1, r24	; 0x01
	}
	
	do
	{
		digit = sum % base;
    3ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ce2:	28 2e       	mov	r2, r24
    3ce4:	33 24       	eor	r3, r3
    3ce6:	44 24       	eor	r4, r4
    3ce8:	55 24       	eor	r5, r5
    3cea:	66 24       	eor	r6, r6
    3cec:	77 24       	eor	r7, r7
    3cee:	43 01       	movw	r8, r6
    3cf0:	ac 80       	ldd	r10, Y+4	; 0x04
    3cf2:	bd 80       	ldd	r11, Y+5	; 0x05
    3cf4:	ce 80       	ldd	r12, Y+6	; 0x06
    3cf6:	df 80       	ldd	r13, Y+7	; 0x07
    3cf8:	e8 84       	ldd	r14, Y+8	; 0x08
    3cfa:	f9 84       	ldd	r15, Y+9	; 0x09
    3cfc:	0a 85       	ldd	r16, Y+10	; 0x0a
    3cfe:	1b 85       	ldd	r17, Y+11	; 0x0b
    3d00:	2a 2d       	mov	r18, r10
    3d02:	3b 2d       	mov	r19, r11
    3d04:	4c 2d       	mov	r20, r12
    3d06:	5d 2d       	mov	r21, r13
    3d08:	6e 2d       	mov	r22, r14
    3d0a:	7f 2d       	mov	r23, r15
    3d0c:	80 2f       	mov	r24, r16
    3d0e:	91 2f       	mov	r25, r17
    3d10:	a2 2c       	mov	r10, r2
    3d12:	b3 2c       	mov	r11, r3
    3d14:	c4 2c       	mov	r12, r4
    3d16:	d5 2c       	mov	r13, r5
    3d18:	e6 2c       	mov	r14, r6
    3d1a:	f7 2c       	mov	r15, r7
    3d1c:	08 2d       	mov	r16, r8
    3d1e:	19 2d       	mov	r17, r9
    3d20:	0e 94 9d 08 	call	0x113a	; 0x113a <__moddi3>
    3d24:	a2 2e       	mov	r10, r18
    3d26:	b3 2e       	mov	r11, r19
    3d28:	c4 2e       	mov	r12, r20
    3d2a:	d5 2e       	mov	r13, r21
    3d2c:	e6 2e       	mov	r14, r22
    3d2e:	f7 2e       	mov	r15, r23
    3d30:	08 2f       	mov	r16, r24
    3d32:	19 2f       	mov	r17, r25
    3d34:	2a 2d       	mov	r18, r10
    3d36:	3b 2d       	mov	r19, r11
    3d38:	4c 2d       	mov	r20, r12
    3d3a:	5d 2d       	mov	r21, r13
    3d3c:	6e 2d       	mov	r22, r14
    3d3e:	7f 2d       	mov	r23, r15
    3d40:	80 2f       	mov	r24, r16
    3d42:	91 2f       	mov	r25, r17
    3d44:	2a 83       	std	Y+2, r18	; 0x02
		if (digit < 0xA)
    3d46:	8a 81       	ldd	r24, Y+2	; 0x02
    3d48:	8a 30       	cpi	r24, 0x0A	; 10
    3d4a:	78 f4       	brcc	.+30     	; 0x3d6a <Signed_Int64_ToASCI+0x338>
			str[i++] = '0' + digit;
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	28 2f       	mov	r18, r24
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	8c 89       	ldd	r24, Y+20	; 0x14
    3d54:	9d 89       	ldd	r25, Y+21	; 0x15
    3d56:	fc 01       	movw	r30, r24
    3d58:	e2 0f       	add	r30, r18
    3d5a:	f3 1f       	adc	r31, r19
    3d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5e:	80 5d       	subi	r24, 0xD0	; 208
    3d60:	80 83       	st	Z, r24
    3d62:	8b 81       	ldd	r24, Y+3	; 0x03
    3d64:	8f 5f       	subi	r24, 0xFF	; 255
    3d66:	8b 83       	std	Y+3, r24	; 0x03
    3d68:	0e c0       	rjmp	.+28     	; 0x3d86 <Signed_Int64_ToASCI+0x354>
		else
			str[i++] = 'A' + digit - 0xA;
    3d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6c:	28 2f       	mov	r18, r24
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	8c 89       	ldd	r24, Y+20	; 0x14
    3d72:	9d 89       	ldd	r25, Y+21	; 0x15
    3d74:	fc 01       	movw	r30, r24
    3d76:	e2 0f       	add	r30, r18
    3d78:	f3 1f       	adc	r31, r19
    3d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7c:	89 5c       	subi	r24, 0xC9	; 201
    3d7e:	80 83       	st	Z, r24
    3d80:	8b 81       	ldd	r24, Y+3	; 0x03
    3d82:	8f 5f       	subi	r24, 0xFF	; 255
    3d84:	8b 83       	std	Y+3, r24	; 0x03
		sum /= base;
    3d86:	8f 89       	ldd	r24, Y+23	; 0x17
    3d88:	28 2e       	mov	r2, r24
    3d8a:	33 24       	eor	r3, r3
    3d8c:	44 24       	eor	r4, r4
    3d8e:	55 24       	eor	r5, r5
    3d90:	66 24       	eor	r6, r6
    3d92:	77 24       	eor	r7, r7
    3d94:	43 01       	movw	r8, r6
    3d96:	2c 81       	ldd	r18, Y+4	; 0x04
    3d98:	3d 81       	ldd	r19, Y+5	; 0x05
    3d9a:	4e 81       	ldd	r20, Y+6	; 0x06
    3d9c:	5f 81       	ldd	r21, Y+7	; 0x07
    3d9e:	68 85       	ldd	r22, Y+8	; 0x08
    3da0:	79 85       	ldd	r23, Y+9	; 0x09
    3da2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3da4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3da6:	a2 2c       	mov	r10, r2
    3da8:	b3 2c       	mov	r11, r3
    3daa:	c4 2c       	mov	r12, r4
    3dac:	d5 2c       	mov	r13, r5
    3dae:	e6 2c       	mov	r14, r6
    3db0:	f7 2c       	mov	r15, r7
    3db2:	08 2d       	mov	r16, r8
    3db4:	19 2d       	mov	r17, r9
    3db6:	0e 94 75 00 	call	0xea	; 0xea <__divdi3>
    3dba:	a2 2e       	mov	r10, r18
    3dbc:	b3 2e       	mov	r11, r19
    3dbe:	c4 2e       	mov	r12, r20
    3dc0:	d5 2e       	mov	r13, r21
    3dc2:	e6 2e       	mov	r14, r22
    3dc4:	f7 2e       	mov	r15, r23
    3dc6:	08 2f       	mov	r16, r24
    3dc8:	19 2f       	mov	r17, r25
    3dca:	ac 82       	std	Y+4, r10	; 0x04
    3dcc:	bd 82       	std	Y+5, r11	; 0x05
    3dce:	ce 82       	std	Y+6, r12	; 0x06
    3dd0:	df 82       	std	Y+7, r13	; 0x07
    3dd2:	e8 86       	std	Y+8, r14	; 0x08
    3dd4:	f9 86       	std	Y+9, r15	; 0x09
    3dd6:	0a 87       	std	Y+10, r16	; 0x0a
    3dd8:	1b 87       	std	Y+11, r17	; 0x0b
	}while (sum > 0);
    3dda:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ddc:	18 16       	cp	r1, r24
    3dde:	0c f4       	brge	.+2      	; 0x3de2 <Signed_Int64_ToASCI+0x3b0>
    3de0:	7f cf       	rjmp	.-258    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3de2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3de4:	88 23       	and	r24, r24
    3de6:	71 f5       	brne	.+92     	; 0x3e44 <Signed_Int64_ToASCI+0x412>
    3de8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dea:	88 23       	and	r24, r24
    3dec:	09 f0       	breq	.+2      	; 0x3df0 <Signed_Int64_ToASCI+0x3be>
    3dee:	78 cf       	rjmp	.-272    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3df0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3df2:	88 23       	and	r24, r24
    3df4:	39 f5       	brne	.+78     	; 0x3e44 <Signed_Int64_ToASCI+0x412>
    3df6:	89 85       	ldd	r24, Y+9	; 0x09
    3df8:	88 23       	and	r24, r24
    3dfa:	09 f0       	breq	.+2      	; 0x3dfe <Signed_Int64_ToASCI+0x3cc>
    3dfc:	71 cf       	rjmp	.-286    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3dfe:	89 85       	ldd	r24, Y+9	; 0x09
    3e00:	88 23       	and	r24, r24
    3e02:	01 f5       	brne	.+64     	; 0x3e44 <Signed_Int64_ToASCI+0x412>
    3e04:	88 85       	ldd	r24, Y+8	; 0x08
    3e06:	88 23       	and	r24, r24
    3e08:	09 f0       	breq	.+2      	; 0x3e0c <Signed_Int64_ToASCI+0x3da>
    3e0a:	6a cf       	rjmp	.-300    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3e0c:	88 85       	ldd	r24, Y+8	; 0x08
    3e0e:	88 23       	and	r24, r24
    3e10:	c9 f4       	brne	.+50     	; 0x3e44 <Signed_Int64_ToASCI+0x412>
    3e12:	8f 81       	ldd	r24, Y+7	; 0x07
    3e14:	88 23       	and	r24, r24
    3e16:	09 f0       	breq	.+2      	; 0x3e1a <Signed_Int64_ToASCI+0x3e8>
    3e18:	63 cf       	rjmp	.-314    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3e1a:	8f 81       	ldd	r24, Y+7	; 0x07
    3e1c:	88 23       	and	r24, r24
    3e1e:	91 f4       	brne	.+36     	; 0x3e44 <Signed_Int64_ToASCI+0x412>
    3e20:	8e 81       	ldd	r24, Y+6	; 0x06
    3e22:	88 23       	and	r24, r24
    3e24:	09 f0       	breq	.+2      	; 0x3e28 <Signed_Int64_ToASCI+0x3f6>
    3e26:	5c cf       	rjmp	.-328    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3e28:	8e 81       	ldd	r24, Y+6	; 0x06
    3e2a:	88 23       	and	r24, r24
    3e2c:	59 f4       	brne	.+22     	; 0x3e44 <Signed_Int64_ToASCI+0x412>
    3e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e30:	88 23       	and	r24, r24
    3e32:	09 f0       	breq	.+2      	; 0x3e36 <Signed_Int64_ToASCI+0x404>
    3e34:	55 cf       	rjmp	.-342    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>
    3e36:	8d 81       	ldd	r24, Y+5	; 0x05
    3e38:	88 23       	and	r24, r24
    3e3a:	21 f4       	brne	.+8      	; 0x3e44 <Signed_Int64_ToASCI+0x412>
    3e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e3e:	88 23       	and	r24, r24
    3e40:	09 f0       	breq	.+2      	; 0x3e44 <Signed_Int64_ToASCI+0x412>
    3e42:	4e cf       	rjmp	.-356    	; 0x3ce0 <Signed_Int64_ToASCI+0x2ae>

	if(Negative) str[i]='-';
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
    3e46:	88 23       	and	r24, r24
    3e48:	51 f0       	breq	.+20     	; 0x3e5e <Signed_Int64_ToASCI+0x42c>
    3e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4c:	28 2f       	mov	r18, r24
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	8c 89       	ldd	r24, Y+20	; 0x14
    3e52:	9d 89       	ldd	r25, Y+21	; 0x15
    3e54:	fc 01       	movw	r30, r24
    3e56:	e2 0f       	add	r30, r18
    3e58:	f3 1f       	adc	r31, r19
    3e5a:	8d e2       	ldi	r24, 0x2D	; 45
    3e5c:	80 83       	st	Z, r24
	++i;
    3e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e60:	8f 5f       	subi	r24, 0xFF	; 255
    3e62:	8b 83       	std	Y+3, r24	; 0x03
	str[i] = '\0';
    3e64:	8b 81       	ldd	r24, Y+3	; 0x03
    3e66:	28 2f       	mov	r18, r24
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	8c 89       	ldd	r24, Y+20	; 0x14
    3e6c:	9d 89       	ldd	r25, Y+21	; 0x15
    3e6e:	fc 01       	movw	r30, r24
    3e70:	e2 0f       	add	r30, r18
    3e72:	f3 1f       	adc	r31, r19
    3e74:	10 82       	st	Z, r1
	strrev(str);
    3e76:	8c 89       	ldd	r24, Y+20	; 0x14
    3e78:	9d 89       	ldd	r25, Y+21	; 0x15
    3e7a:	0e 94 9d 28 	call	0x513a	; 0x513a <strrev>
	return 0;
    3e7e:	80 e0       	ldi	r24, 0x00	; 0
}
    3e80:	cd 5b       	subi	r28, 0xBD	; 189
    3e82:	df 4f       	sbci	r29, 0xFF	; 255
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	de bf       	out	0x3e, r29	; 62
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	cd bf       	out	0x3d, r28	; 61
    3e8e:	cf 91       	pop	r28
    3e90:	df 91       	pop	r29
    3e92:	1f 91       	pop	r17
    3e94:	0f 91       	pop	r16
    3e96:	ff 90       	pop	r15
    3e98:	ef 90       	pop	r14
    3e9a:	df 90       	pop	r13
    3e9c:	cf 90       	pop	r12
    3e9e:	bf 90       	pop	r11
    3ea0:	af 90       	pop	r10
    3ea2:	9f 90       	pop	r9
    3ea4:	8f 90       	pop	r8
    3ea6:	7f 90       	pop	r7
    3ea8:	6f 90       	pop	r6
    3eaa:	5f 90       	pop	r5
    3eac:	4f 90       	pop	r4
    3eae:	3f 90       	pop	r3
    3eb0:	2f 90       	pop	r2
    3eb2:	08 95       	ret

00003eb4 <LCD_Signed_Int64_ToString>:


void LCD_Signed_Int64_ToString(sint64 data)
{
    3eb4:	af 92       	push	r10
    3eb6:	bf 92       	push	r11
    3eb8:	cf 92       	push	r12
    3eba:	df 92       	push	r13
    3ebc:	ef 92       	push	r14
    3ebe:	ff 92       	push	r15
    3ec0:	0f 93       	push	r16
    3ec2:	1f 93       	push	r17
    3ec4:	df 93       	push	r29
    3ec6:	cf 93       	push	r28
    3ec8:	cd b7       	in	r28, 0x3d	; 61
    3eca:	de b7       	in	r29, 0x3e	; 62
    3ecc:	68 97       	sbiw	r28, 0x18	; 24
    3ece:	0f b6       	in	r0, 0x3f	; 63
    3ed0:	f8 94       	cli
    3ed2:	de bf       	out	0x3e, r29	; 62
    3ed4:	0f be       	out	0x3f, r0	; 63
    3ed6:	cd bf       	out	0x3d, r28	; 61
    3ed8:	29 8b       	std	Y+17, r18	; 0x11
    3eda:	3a 8b       	std	Y+18, r19	; 0x12
    3edc:	4b 8b       	std	Y+19, r20	; 0x13
    3ede:	5c 8b       	std	Y+20, r21	; 0x14
    3ee0:	6d 8b       	std	Y+21, r22	; 0x15
    3ee2:	7e 8b       	std	Y+22, r23	; 0x16
    3ee4:	8f 8b       	std	Y+23, r24	; 0x17
    3ee6:	98 8f       	std	Y+24, r25	; 0x18
	char buf[16]={0};
    3ee8:	80 e1       	ldi	r24, 0x10	; 16
    3eea:	fe 01       	movw	r30, r28
    3eec:	31 96       	adiw	r30, 0x01	; 1
    3eee:	df 01       	movw	r26, r30
    3ef0:	98 2f       	mov	r25, r24
    3ef2:	1d 92       	st	X+, r1
    3ef4:	9a 95       	dec	r25
    3ef6:	e9 f7       	brne	.-6      	; 0x3ef2 <LCD_Signed_Int64_ToString+0x3e>
	Signed_Int64_ToASCI(data,buf,16,10);
    3ef8:	a9 88       	ldd	r10, Y+17	; 0x11
    3efa:	ba 88       	ldd	r11, Y+18	; 0x12
    3efc:	cb 88       	ldd	r12, Y+19	; 0x13
    3efe:	dc 88       	ldd	r13, Y+20	; 0x14
    3f00:	ed 88       	ldd	r14, Y+21	; 0x15
    3f02:	fe 88       	ldd	r15, Y+22	; 0x16
    3f04:	0f 89       	ldd	r16, Y+23	; 0x17
    3f06:	18 8d       	ldd	r17, Y+24	; 0x18
    3f08:	2a 2d       	mov	r18, r10
    3f0a:	3b 2d       	mov	r19, r11
    3f0c:	4c 2d       	mov	r20, r12
    3f0e:	5d 2d       	mov	r21, r13
    3f10:	6e 2d       	mov	r22, r14
    3f12:	7f 2d       	mov	r23, r15
    3f14:	80 2f       	mov	r24, r16
    3f16:	91 2f       	mov	r25, r17
    3f18:	fe 01       	movw	r30, r28
    3f1a:	31 96       	adiw	r30, 0x01	; 1
    3f1c:	8f 01       	movw	r16, r30
    3f1e:	ee 24       	eor	r14, r14
    3f20:	68 94       	set
    3f22:	e4 f8       	bld	r14, 4
    3f24:	0f 2e       	mov	r0, r31
    3f26:	fa e0       	ldi	r31, 0x0A	; 10
    3f28:	cf 2e       	mov	r12, r31
    3f2a:	f0 2d       	mov	r31, r0
    3f2c:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <Signed_Int64_ToASCI>
	LCD_displayString(buf);
    3f30:	ce 01       	movw	r24, r28
    3f32:	01 96       	adiw	r24, 0x01	; 1
    3f34:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_displayString>
}
    3f38:	68 96       	adiw	r28, 0x18	; 24
    3f3a:	0f b6       	in	r0, 0x3f	; 63
    3f3c:	f8 94       	cli
    3f3e:	de bf       	out	0x3e, r29	; 62
    3f40:	0f be       	out	0x3f, r0	; 63
    3f42:	cd bf       	out	0x3d, r28	; 61
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	1f 91       	pop	r17
    3f4a:	0f 91       	pop	r16
    3f4c:	ff 90       	pop	r15
    3f4e:	ef 90       	pop	r14
    3f50:	df 90       	pop	r13
    3f52:	cf 90       	pop	r12
    3f54:	bf 90       	pop	r11
    3f56:	af 90       	pop	r10
    3f58:	08 95       	ret

00003f5a <InitPeripherals>:
#include "lcd.h"
#include "keypad.h"

/*This is used to Set your peripherals initializations functions */
inline extern void InitPeripherals(void) 
{
    3f5a:	df 93       	push	r29
    3f5c:	cf 93       	push	r28
    3f5e:	cd b7       	in	r28, 0x3d	; 61
    3f60:	de b7       	in	r29, 0x3e	; 62
	/*Don't Forget to include the Peripherals header files above*/
	/*Unless it's defined in the main and this is the last one to include !*/
	LCD_init();
    3f62:	0e 94 78 18 	call	0x30f0	; 0x30f0 <LCD_init>
	LCD_clearScreen();
    3f66:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <LCD_clearScreen>
	
}
    3f6a:	cf 91       	pop	r28
    3f6c:	df 91       	pop	r29
    3f6e:	08 95       	ret

00003f70 <InitPorts>:

/*This is used to Set Ports initializations*/
inline extern void InitPorts(void)
{
    3f70:	df 93       	push	r29
    3f72:	cf 93       	push	r28
    3f74:	cd b7       	in	r28, 0x3d	; 61
    3f76:	de b7       	in	r29, 0x3e	; 62
	
}
    3f78:	cf 91       	pop	r28
    3f7a:	df 91       	pop	r29
    3f7c:	08 95       	ret

00003f7e <main>:


	uint8 Flag=StartPoint;/*Contains the state of the program flow*/

int main(void)
{
    3f7e:	df 93       	push	r29
    3f80:	cf 93       	push	r28
    3f82:	cd b7       	in	r28, 0x3d	; 61
    3f84:	de b7       	in	r29, 0x3e	; 62

	InitPeripherals(); /*Initiate the LCD driver*/
    3f86:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <InitPeripherals>

    while(1)
    {
		ResetData();
    3f8a:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <ResetData>
		LCD_clearScreen();
    3f8e:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <LCD_clearScreen>
		Flag=StartPoint;
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	80 93 a4 01 	sts	0x01A4, r24
    3f98:	02 c0       	rjmp	.+4      	; 0x3f9e <main+0x20>
		 while(Flag==StartPoint) GetData(); /*Don't get out until pressing equal sign*/
    3f9a:	0e 94 68 20 	call	0x40d0	; 0x40d0 <GetData>
    3f9e:	80 91 a4 01 	lds	r24, 0x01A4
    3fa2:	81 30       	cpi	r24, 0x01	; 1
    3fa4:	d1 f3       	breq	.-12     	; 0x3f9a <main+0x1c>
    3fa6:	02 c0       	rjmp	.+4      	; 0x3fac <main+0x2e>
		 while(Flag==AnalyzePoint) Analyze(); /*Don't get out until separating every thing correctly*/
    3fa8:	0e 94 11 22 	call	0x4422	; 0x4422 <Analyze>
    3fac:	80 91 a4 01 	lds	r24, 0x01A4
    3fb0:	82 30       	cpi	r24, 0x02	; 2
    3fb2:	d1 f3       	breq	.-12     	; 0x3fa8 <main+0x2a>
    3fb4:	02 c0       	rjmp	.+4      	; 0x3fba <main+0x3c>
		 while(Flag==CalculatePoint) Calculate(); /*Don't get out until calculate the value*/
    3fb6:	0e 94 7e 23 	call	0x46fc	; 0x46fc <Calculate>
    3fba:	80 91 a4 01 	lds	r24, 0x01A4
    3fbe:	83 30       	cpi	r24, 0x03	; 3
    3fc0:	d1 f3       	breq	.-12     	; 0x3fb6 <main+0x38>
    3fc2:	02 c0       	rjmp	.+4      	; 0x3fc8 <main+0x4a>
		 while(Flag==DisplayPoint) DisplayResult(); /*Display the result*/
    3fc4:	0e 94 b6 21 	call	0x436c	; 0x436c <DisplayResult>
    3fc8:	80 91 a4 01 	lds	r24, 0x01A4
    3fcc:	84 30       	cpi	r24, 0x04	; 4
    3fce:	d1 f3       	breq	.-12     	; 0x3fc4 <main+0x46>
    3fd0:	dc cf       	rjmp	.-72     	; 0x3f8a <main+0xc>

00003fd2 <ResetData>:
bool SignNumberFlagToConvertInt64=false; /*Communication flag between the ConvertInt64 and Analyze and
										To make a note that the number which ConvertInt64 will convert is negative*/
bool OtherNumberSign=false;/*if any operand is negative and not operand[0],the variable is set to true */

void ResetData()
{
    3fd2:	df 93       	push	r29
    3fd4:	cf 93       	push	r28
    3fd6:	0f 92       	push	r0
    3fd8:	cd b7       	in	r28, 0x3d	; 61
    3fda:	de b7       	in	r29, 0x3e	; 62
	uint8 index=0;
    3fdc:	19 82       	std	Y+1, r1	; 0x01
	for(index=0;index<MaxNumberOfDigits;index++)
    3fde:	19 82       	std	Y+1, r1	; 0x01
    3fe0:	0a c0       	rjmp	.+20     	; 0x3ff6 <ResetData+0x24>
			Digits[index]=0;
    3fe2:	89 81       	ldd	r24, Y+1	; 0x01
    3fe4:	88 2f       	mov	r24, r24
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	fc 01       	movw	r30, r24
    3fea:	e0 52       	subi	r30, 0x20	; 32
    3fec:	fe 4f       	sbci	r31, 0xFE	; 254
    3fee:	10 82       	st	Z, r1
bool OtherNumberSign=false;/*if any operand is negative and not operand[0],the variable is set to true */

void ResetData()
{
	uint8 index=0;
	for(index=0;index<MaxNumberOfDigits;index++)
    3ff0:	89 81       	ldd	r24, Y+1	; 0x01
    3ff2:	8f 5f       	subi	r24, 0xFF	; 255
    3ff4:	89 83       	std	Y+1, r24	; 0x01
    3ff6:	89 81       	ldd	r24, Y+1	; 0x01
    3ff8:	80 31       	cpi	r24, 0x10	; 16
    3ffa:	98 f3       	brcs	.-26     	; 0x3fe2 <ResetData+0x10>
			Digits[index]=0;
	for(index=0;index<MaxNumberOfOperands;index++)
    3ffc:	19 82       	std	Y+1, r1	; 0x01
    3ffe:	11 c0       	rjmp	.+34     	; 0x4022 <ResetData+0x50>
			Operands[index]=0;
    4000:	89 81       	ldd	r24, Y+1	; 0x01
    4002:	88 2f       	mov	r24, r24
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	88 0f       	add	r24, r24
    4008:	99 1f       	adc	r25, r25
    400a:	88 0f       	add	r24, r24
    400c:	99 1f       	adc	r25, r25
    400e:	fc 01       	movw	r30, r24
    4010:	e0 55       	subi	r30, 0x50	; 80
    4012:	fe 4f       	sbci	r31, 0xFE	; 254
    4014:	10 82       	st	Z, r1
    4016:	11 82       	std	Z+1, r1	; 0x01
    4018:	12 82       	std	Z+2, r1	; 0x02
    401a:	13 82       	std	Z+3, r1	; 0x03
void ResetData()
{
	uint8 index=0;
	for(index=0;index<MaxNumberOfDigits;index++)
			Digits[index]=0;
	for(index=0;index<MaxNumberOfOperands;index++)
    401c:	89 81       	ldd	r24, Y+1	; 0x01
    401e:	8f 5f       	subi	r24, 0xFF	; 255
    4020:	89 83       	std	Y+1, r24	; 0x01
    4022:	89 81       	ldd	r24, Y+1	; 0x01
    4024:	8c 30       	cpi	r24, 0x0C	; 12
    4026:	60 f3       	brcs	.-40     	; 0x4000 <ResetData+0x2e>
			Operands[index]=0;
	for(index=0;index<MaxNumberOfOperations;index++)
    4028:	19 82       	std	Y+1, r1	; 0x01
    402a:	0a c0       	rjmp	.+20     	; 0x4040 <ResetData+0x6e>
			Operations[index]=0;
    402c:	89 81       	ldd	r24, Y+1	; 0x01
    402e:	88 2f       	mov	r24, r24
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	fc 01       	movw	r30, r24
    4034:	e0 51       	subi	r30, 0x10	; 16
    4036:	fe 4f       	sbci	r31, 0xFE	; 254
    4038:	10 82       	st	Z, r1
	uint8 index=0;
	for(index=0;index<MaxNumberOfDigits;index++)
			Digits[index]=0;
	for(index=0;index<MaxNumberOfOperands;index++)
			Operands[index]=0;
	for(index=0;index<MaxNumberOfOperations;index++)
    403a:	89 81       	ldd	r24, Y+1	; 0x01
    403c:	8f 5f       	subi	r24, 0xFF	; 255
    403e:	89 83       	std	Y+1, r24	; 0x01
    4040:	89 81       	ldd	r24, Y+1	; 0x01
    4042:	8b 30       	cpi	r24, 0x0B	; 11
    4044:	98 f3       	brcs	.-26     	; 0x402c <ResetData+0x5a>
			Operations[index]=0;
	OperandsCounter=0;
    4046:	10 92 aa 01 	sts	0x01AA, r1
	OperationsCounter=0;
    404a:	10 92 ab 01 	sts	0x01AB, r1
	DigitsCounter=0;
    404e:	10 92 ac 01 	sts	0x01AC, r1
	Result=0;
    4052:	10 92 a6 01 	sts	0x01A6, r1
    4056:	10 92 a7 01 	sts	0x01A7, r1
    405a:	10 92 a8 01 	sts	0x01A8, r1
    405e:	10 92 a9 01 	sts	0x01A9, r1
}		
    4062:	0f 90       	pop	r0
    4064:	cf 91       	pop	r28
    4066:	df 91       	pop	r29
    4068:	08 95       	ret

0000406a <SynchronousDisplay>:

void SynchronousDisplay(uint8 data)
{
    406a:	af 92       	push	r10
    406c:	bf 92       	push	r11
    406e:	cf 92       	push	r12
    4070:	df 92       	push	r13
    4072:	ef 92       	push	r14
    4074:	ff 92       	push	r15
    4076:	0f 93       	push	r16
    4078:	1f 93       	push	r17
    407a:	df 93       	push	r29
    407c:	cf 93       	push	r28
    407e:	0f 92       	push	r0
    4080:	cd b7       	in	r28, 0x3d	; 61
    4082:	de b7       	in	r29, 0x3e	; 62
    4084:	89 83       	std	Y+1, r24	; 0x01
	if(data >=0 && data<=9) LCD_Signed_Int64_ToString(data);
    4086:	89 81       	ldd	r24, Y+1	; 0x01
    4088:	8a 30       	cpi	r24, 0x0A	; 10
    408a:	98 f4       	brcc	.+38     	; 0x40b2 <SynchronousDisplay+0x48>
    408c:	89 81       	ldd	r24, Y+1	; 0x01
    408e:	a8 2e       	mov	r10, r24
    4090:	bb 24       	eor	r11, r11
    4092:	cc 24       	eor	r12, r12
    4094:	dd 24       	eor	r13, r13
    4096:	ee 24       	eor	r14, r14
    4098:	ff 24       	eor	r15, r15
    409a:	87 01       	movw	r16, r14
    409c:	2a 2d       	mov	r18, r10
    409e:	3b 2d       	mov	r19, r11
    40a0:	4c 2d       	mov	r20, r12
    40a2:	5d 2d       	mov	r21, r13
    40a4:	6e 2d       	mov	r22, r14
    40a6:	7f 2d       	mov	r23, r15
    40a8:	80 2f       	mov	r24, r16
    40aa:	91 2f       	mov	r25, r17
    40ac:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <LCD_Signed_Int64_ToString>
    40b0:	03 c0       	rjmp	.+6      	; 0x40b8 <SynchronousDisplay+0x4e>
	else LCD_displayCharacter(data);
    40b2:	89 81       	ldd	r24, Y+1	; 0x01
    40b4:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_displayCharacter>
}
    40b8:	0f 90       	pop	r0
    40ba:	cf 91       	pop	r28
    40bc:	df 91       	pop	r29
    40be:	1f 91       	pop	r17
    40c0:	0f 91       	pop	r16
    40c2:	ff 90       	pop	r15
    40c4:	ef 90       	pop	r14
    40c6:	df 90       	pop	r13
    40c8:	cf 90       	pop	r12
    40ca:	bf 90       	pop	r11
    40cc:	af 90       	pop	r10
    40ce:	08 95       	ret

000040d0 <GetData>:

void GetData()
{
    40d0:	df 93       	push	r29
    40d2:	cf 93       	push	r28
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
    40d8:	2f 97       	sbiw	r28, 0x0f	; 15
    40da:	0f b6       	in	r0, 0x3f	; 63
    40dc:	f8 94       	cli
    40de:	de bf       	out	0x3e, r29	; 62
    40e0:	0f be       	out	0x3f, r0	; 63
    40e2:	cd bf       	out	0x3d, r28	; 61
	uint8 temp=0;/*To get into the loop for the first time and hold the value of the key pressed*/
    40e4:	1f 86       	std	Y+15, r1	; 0x0f
    40e6:	93 c0       	rjmp	.+294    	; 0x420e <GetData+0x13e>

	while(temp != EqualKey)
	{
		temp=KeyPad_getPressedKey();
    40e8:	0e 94 08 16 	call	0x2c10	; 0x2c10 <KeyPad_getPressedKey>
    40ec:	8f 87       	std	Y+15, r24	; 0x0f
		if(temp==EnterKey) 
    40ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    40f0:	8d 30       	cpi	r24, 0x0D	; 13
    40f2:	19 f4       	brne	.+6      	; 0x40fa <GetData+0x2a>
		{
			Flag=Reset; /*to clean what's entered before this condition,when returning into the main
    40f4:	10 92 a4 01 	sts	0x01A4, r1
    40f8:	91 c0       	rjmp	.+290    	; 0x421c <GetData+0x14c>
			it will cleared as non of the loops in main satisfy the flag*/
			return;
		}
		Digits[DigitsCounter]=temp; /*storing any thing the user input*/
    40fa:	80 91 ac 01 	lds	r24, 0x01AC
    40fe:	88 2f       	mov	r24, r24
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	2f 85       	ldd	r18, Y+15	; 0x0f
    4104:	fc 01       	movw	r30, r24
    4106:	e0 52       	subi	r30, 0x20	; 32
    4108:	fe 4f       	sbci	r31, 0xFE	; 254
    410a:	20 83       	st	Z, r18
		SynchronousDisplay(Digits[DigitsCounter]);
    410c:	80 91 ac 01 	lds	r24, 0x01AC
    4110:	88 2f       	mov	r24, r24
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	fc 01       	movw	r30, r24
    4116:	e0 52       	subi	r30, 0x20	; 32
    4118:	fe 4f       	sbci	r31, 0xFE	; 254
    411a:	80 81       	ld	r24, Z
    411c:	0e 94 35 20 	call	0x406a	; 0x406a <SynchronousDisplay>
		DigitsCounter++;
    4120:	80 91 ac 01 	lds	r24, 0x01AC
    4124:	8f 5f       	subi	r24, 0xFF	; 255
    4126:	80 93 ac 01 	sts	0x01AC, r24
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	a6 e9       	ldi	r26, 0x96	; 150
    4130:	b3 e4       	ldi	r27, 0x43	; 67
    4132:	8b 87       	std	Y+11, r24	; 0x0b
    4134:	9c 87       	std	Y+12, r25	; 0x0c
    4136:	ad 87       	std	Y+13, r26	; 0x0d
    4138:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    413a:	6b 85       	ldd	r22, Y+11	; 0x0b
    413c:	7c 85       	ldd	r23, Y+12	; 0x0c
    413e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4140:	9e 85       	ldd	r25, Y+14	; 0x0e
    4142:	20 e0       	ldi	r18, 0x00	; 0
    4144:	30 e8       	ldi	r19, 0x80	; 128
    4146:	4b e3       	ldi	r20, 0x3B	; 59
    4148:	55 e4       	ldi	r21, 0x45	; 69
    414a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    414e:	dc 01       	movw	r26, r24
    4150:	cb 01       	movw	r24, r22
    4152:	8f 83       	std	Y+7, r24	; 0x07
    4154:	98 87       	std	Y+8, r25	; 0x08
    4156:	a9 87       	std	Y+9, r26	; 0x09
    4158:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    415a:	6f 81       	ldd	r22, Y+7	; 0x07
    415c:	78 85       	ldd	r23, Y+8	; 0x08
    415e:	89 85       	ldd	r24, Y+9	; 0x09
    4160:	9a 85       	ldd	r25, Y+10	; 0x0a
    4162:	20 e0       	ldi	r18, 0x00	; 0
    4164:	30 e0       	ldi	r19, 0x00	; 0
    4166:	40 e8       	ldi	r20, 0x80	; 128
    4168:	5f e3       	ldi	r21, 0x3F	; 63
    416a:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    416e:	88 23       	and	r24, r24
    4170:	2c f4       	brge	.+10     	; 0x417c <GetData+0xac>
		__ticks = 1;
    4172:	81 e0       	ldi	r24, 0x01	; 1
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	9e 83       	std	Y+6, r25	; 0x06
    4178:	8d 83       	std	Y+5, r24	; 0x05
    417a:	3f c0       	rjmp	.+126    	; 0x41fa <GetData+0x12a>
	else if (__tmp > 65535)
    417c:	6f 81       	ldd	r22, Y+7	; 0x07
    417e:	78 85       	ldd	r23, Y+8	; 0x08
    4180:	89 85       	ldd	r24, Y+9	; 0x09
    4182:	9a 85       	ldd	r25, Y+10	; 0x0a
    4184:	20 e0       	ldi	r18, 0x00	; 0
    4186:	3f ef       	ldi	r19, 0xFF	; 255
    4188:	4f e7       	ldi	r20, 0x7F	; 127
    418a:	57 e4       	ldi	r21, 0x47	; 71
    418c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4190:	18 16       	cp	r1, r24
    4192:	4c f5       	brge	.+82     	; 0x41e6 <GetData+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4194:	6b 85       	ldd	r22, Y+11	; 0x0b
    4196:	7c 85       	ldd	r23, Y+12	; 0x0c
    4198:	8d 85       	ldd	r24, Y+13	; 0x0d
    419a:	9e 85       	ldd	r25, Y+14	; 0x0e
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	40 e2       	ldi	r20, 0x20	; 32
    41a2:	51 e4       	ldi	r21, 0x41	; 65
    41a4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    41a8:	dc 01       	movw	r26, r24
    41aa:	cb 01       	movw	r24, r22
    41ac:	bc 01       	movw	r22, r24
    41ae:	cd 01       	movw	r24, r26
    41b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b4:	dc 01       	movw	r26, r24
    41b6:	cb 01       	movw	r24, r22
    41b8:	9e 83       	std	Y+6, r25	; 0x06
    41ba:	8d 83       	std	Y+5, r24	; 0x05
    41bc:	0f c0       	rjmp	.+30     	; 0x41dc <GetData+0x10c>
    41be:	8c e2       	ldi	r24, 0x2C	; 44
    41c0:	91 e0       	ldi	r25, 0x01	; 1
    41c2:	9c 83       	std	Y+4, r25	; 0x04
    41c4:	8b 83       	std	Y+3, r24	; 0x03
    41c6:	8b 81       	ldd	r24, Y+3	; 0x03
    41c8:	9c 81       	ldd	r25, Y+4	; 0x04
    41ca:	01 97       	sbiw	r24, 0x01	; 1
    41cc:	f1 f7       	brne	.-4      	; 0x41ca <GetData+0xfa>
    41ce:	9c 83       	std	Y+4, r25	; 0x04
    41d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41d2:	8d 81       	ldd	r24, Y+5	; 0x05
    41d4:	9e 81       	ldd	r25, Y+6	; 0x06
    41d6:	01 97       	sbiw	r24, 0x01	; 1
    41d8:	9e 83       	std	Y+6, r25	; 0x06
    41da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41dc:	8d 81       	ldd	r24, Y+5	; 0x05
    41de:	9e 81       	ldd	r25, Y+6	; 0x06
    41e0:	00 97       	sbiw	r24, 0x00	; 0
    41e2:	69 f7       	brne	.-38     	; 0x41be <GetData+0xee>
    41e4:	14 c0       	rjmp	.+40     	; 0x420e <GetData+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41e6:	6f 81       	ldd	r22, Y+7	; 0x07
    41e8:	78 85       	ldd	r23, Y+8	; 0x08
    41ea:	89 85       	ldd	r24, Y+9	; 0x09
    41ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f2:	dc 01       	movw	r26, r24
    41f4:	cb 01       	movw	r24, r22
    41f6:	9e 83       	std	Y+6, r25	; 0x06
    41f8:	8d 83       	std	Y+5, r24	; 0x05
    41fa:	8d 81       	ldd	r24, Y+5	; 0x05
    41fc:	9e 81       	ldd	r25, Y+6	; 0x06
    41fe:	9a 83       	std	Y+2, r25	; 0x02
    4200:	89 83       	std	Y+1, r24	; 0x01
    4202:	89 81       	ldd	r24, Y+1	; 0x01
    4204:	9a 81       	ldd	r25, Y+2	; 0x02
    4206:	01 97       	sbiw	r24, 0x01	; 1
    4208:	f1 f7       	brne	.-4      	; 0x4206 <GetData+0x136>
    420a:	9a 83       	std	Y+2, r25	; 0x02
    420c:	89 83       	std	Y+1, r24	; 0x01

void GetData()
{
	uint8 temp=0;/*To get into the loop for the first time and hold the value of the key pressed*/

	while(temp != EqualKey)
    420e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4210:	8d 33       	cpi	r24, 0x3D	; 61
    4212:	09 f0       	breq	.+2      	; 0x4216 <GetData+0x146>
    4214:	69 cf       	rjmp	.-302    	; 0x40e8 <GetData+0x18>
		SynchronousDisplay(Digits[DigitsCounter]);
		DigitsCounter++;
		_delay_ms(300);	/*delay time between each press */
	}
	
	Flag=AnalyzePoint; /*to next step when pressing the equal key*/
    4216:	82 e0       	ldi	r24, 0x02	; 2
    4218:	80 93 a4 01 	sts	0x01A4, r24
	
}
    421c:	2f 96       	adiw	r28, 0x0f	; 15
    421e:	0f b6       	in	r0, 0x3f	; 63
    4220:	f8 94       	cli
    4222:	de bf       	out	0x3e, r29	; 62
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	cf 91       	pop	r28
    422a:	df 91       	pop	r29
    422c:	08 95       	ret

0000422e <ConvertToInt64>:


sint64 ConvertToInt64(uint8 * ptr,uint8 len)
{
    422e:	af 92       	push	r10
    4230:	bf 92       	push	r11
    4232:	cf 92       	push	r12
    4234:	df 92       	push	r13
    4236:	ef 92       	push	r14
    4238:	ff 92       	push	r15
    423a:	0f 93       	push	r16
    423c:	1f 93       	push	r17
    423e:	df 93       	push	r29
    4240:	cf 93       	push	r28
    4242:	cd b7       	in	r28, 0x3d	; 61
    4244:	de b7       	in	r29, 0x3e	; 62
    4246:	29 97       	sbiw	r28, 0x09	; 9
    4248:	0f b6       	in	r0, 0x3f	; 63
    424a:	f8 94       	cli
    424c:	de bf       	out	0x3e, r29	; 62
    424e:	0f be       	out	0x3f, r0	; 63
    4250:	cd bf       	out	0x3d, r28	; 61
    4252:	98 87       	std	Y+8, r25	; 0x08
    4254:	8f 83       	std	Y+7, r24	; 0x07
    4256:	69 87       	std	Y+9, r22	; 0x09
	uint8 index;
	sint32 value=0;/*the value which will be returned*/
    4258:	1a 82       	std	Y+2, r1	; 0x02
    425a:	1b 82       	std	Y+3, r1	; 0x03
    425c:	1c 82       	std	Y+4, r1	; 0x04
    425e:	1d 82       	std	Y+5, r1	; 0x05
	bool Negative =false;/*If the number is negative*/
    4260:	19 82       	std	Y+1, r1	; 0x01

	if(SignNumberFlagToConvertInt64) { /*If negative*/
    4262:	80 91 ae 01 	lds	r24, 0x01AE
    4266:	88 23       	and	r24, r24
    4268:	21 f0       	breq	.+8      	; 0x4272 <ConvertToInt64+0x44>
		Negative=true;
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	89 83       	std	Y+1, r24	; 0x01
		SignNumberFlagToConvertInt64=false;/*Remember it's a critical section,so should be disabled again*/
    426e:	10 92 ae 01 	sts	0x01AE, r1
	}		
	for(index=0;index<len;index++)
    4272:	1e 82       	std	Y+6, r1	; 0x06
    4274:	32 c0       	rjmp	.+100    	; 0x42da <ConvertToInt64+0xac>
	{
		value+=ptr[len-index-1]*powerOf(10,index);/*Math basics*/
    4276:	89 85       	ldd	r24, Y+9	; 0x09
    4278:	28 2f       	mov	r18, r24
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	8e 81       	ldd	r24, Y+6	; 0x06
    427e:	88 2f       	mov	r24, r24
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	a9 01       	movw	r20, r18
    4284:	48 1b       	sub	r20, r24
    4286:	59 0b       	sbc	r21, r25
    4288:	ca 01       	movw	r24, r20
    428a:	9c 01       	movw	r18, r24
    428c:	21 50       	subi	r18, 0x01	; 1
    428e:	30 40       	sbci	r19, 0x00	; 0
    4290:	8f 81       	ldd	r24, Y+7	; 0x07
    4292:	98 85       	ldd	r25, Y+8	; 0x08
    4294:	fc 01       	movw	r30, r24
    4296:	e2 0f       	add	r30, r18
    4298:	f3 1f       	adc	r31, r19
    429a:	80 81       	ld	r24, Z
    429c:	e8 2e       	mov	r14, r24
    429e:	ff 24       	eor	r15, r15
    42a0:	00 e0       	ldi	r16, 0x00	; 0
    42a2:	10 e0       	ldi	r17, 0x00	; 0
    42a4:	8a e0       	ldi	r24, 0x0A	; 10
    42a6:	6e 81       	ldd	r22, Y+6	; 0x06
    42a8:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <powerOf>
    42ac:	9b 01       	movw	r18, r22
    42ae:	ac 01       	movw	r20, r24
    42b0:	c8 01       	movw	r24, r16
    42b2:	b7 01       	movw	r22, r14
    42b4:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    42b8:	9b 01       	movw	r18, r22
    42ba:	ac 01       	movw	r20, r24
    42bc:	8a 81       	ldd	r24, Y+2	; 0x02
    42be:	9b 81       	ldd	r25, Y+3	; 0x03
    42c0:	ac 81       	ldd	r26, Y+4	; 0x04
    42c2:	bd 81       	ldd	r27, Y+5	; 0x05
    42c4:	82 0f       	add	r24, r18
    42c6:	93 1f       	adc	r25, r19
    42c8:	a4 1f       	adc	r26, r20
    42ca:	b5 1f       	adc	r27, r21
    42cc:	8a 83       	std	Y+2, r24	; 0x02
    42ce:	9b 83       	std	Y+3, r25	; 0x03
    42d0:	ac 83       	std	Y+4, r26	; 0x04
    42d2:	bd 83       	std	Y+5, r27	; 0x05

	if(SignNumberFlagToConvertInt64) { /*If negative*/
		Negative=true;
		SignNumberFlagToConvertInt64=false;/*Remember it's a critical section,so should be disabled again*/
	}		
	for(index=0;index<len;index++)
    42d4:	8e 81       	ldd	r24, Y+6	; 0x06
    42d6:	8f 5f       	subi	r24, 0xFF	; 255
    42d8:	8e 83       	std	Y+6, r24	; 0x06
    42da:	9e 81       	ldd	r25, Y+6	; 0x06
    42dc:	89 85       	ldd	r24, Y+9	; 0x09
    42de:	98 17       	cp	r25, r24
    42e0:	50 f2       	brcs	.-108    	; 0x4276 <ConvertToInt64+0x48>
	{
		value+=ptr[len-index-1]*powerOf(10,index);/*Math basics*/
		/*PowerOf is a function included into keypad.h*/
	}
	
	if(Negative) value= -value ; /*As it should be*/
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
    42e4:	88 23       	and	r24, r24
    42e6:	79 f0       	breq	.+30     	; 0x4306 <ConvertToInt64+0xd8>
    42e8:	8a 81       	ldd	r24, Y+2	; 0x02
    42ea:	9b 81       	ldd	r25, Y+3	; 0x03
    42ec:	ac 81       	ldd	r26, Y+4	; 0x04
    42ee:	bd 81       	ldd	r27, Y+5	; 0x05
    42f0:	b0 95       	com	r27
    42f2:	a0 95       	com	r26
    42f4:	90 95       	com	r25
    42f6:	81 95       	neg	r24
    42f8:	9f 4f       	sbci	r25, 0xFF	; 255
    42fa:	af 4f       	sbci	r26, 0xFF	; 255
    42fc:	bf 4f       	sbci	r27, 0xFF	; 255
    42fe:	8a 83       	std	Y+2, r24	; 0x02
    4300:	9b 83       	std	Y+3, r25	; 0x03
    4302:	ac 83       	std	Y+4, r26	; 0x04
    4304:	bd 83       	std	Y+5, r27	; 0x05
	return value;
    4306:	8a 81       	ldd	r24, Y+2	; 0x02
    4308:	9b 81       	ldd	r25, Y+3	; 0x03
    430a:	ac 81       	ldd	r26, Y+4	; 0x04
    430c:	bd 81       	ldd	r27, Y+5	; 0x05
    430e:	7c 01       	movw	r14, r24
    4310:	8d 01       	movw	r16, r26
    4312:	11 0f       	add	r17, r17
    4314:	ee 08       	sbc	r14, r14
    4316:	fe 2c       	mov	r15, r14
    4318:	87 01       	movw	r16, r14
    431a:	2a 81       	ldd	r18, Y+2	; 0x02
    431c:	3b 81       	ldd	r19, Y+3	; 0x03
    431e:	4c 81       	ldd	r20, Y+4	; 0x04
    4320:	5d 81       	ldd	r21, Y+5	; 0x05
    4322:	6e 2d       	mov	r22, r14
    4324:	7e 2d       	mov	r23, r14
    4326:	8e 2d       	mov	r24, r14
    4328:	9e 2d       	mov	r25, r14
    432a:	a2 2e       	mov	r10, r18
    432c:	b3 2e       	mov	r11, r19
    432e:	c4 2e       	mov	r12, r20
    4330:	d5 2e       	mov	r13, r21
    4332:	e6 2e       	mov	r14, r22
    4334:	f7 2e       	mov	r15, r23
    4336:	08 2f       	mov	r16, r24
    4338:	19 2f       	mov	r17, r25
}
    433a:	2a 2d       	mov	r18, r10
    433c:	3b 2d       	mov	r19, r11
    433e:	4c 2d       	mov	r20, r12
    4340:	5d 2d       	mov	r21, r13
    4342:	6e 2d       	mov	r22, r14
    4344:	7f 2d       	mov	r23, r15
    4346:	80 2f       	mov	r24, r16
    4348:	91 2f       	mov	r25, r17
    434a:	29 96       	adiw	r28, 0x09	; 9
    434c:	0f b6       	in	r0, 0x3f	; 63
    434e:	f8 94       	cli
    4350:	de bf       	out	0x3e, r29	; 62
    4352:	0f be       	out	0x3f, r0	; 63
    4354:	cd bf       	out	0x3d, r28	; 61
    4356:	cf 91       	pop	r28
    4358:	df 91       	pop	r29
    435a:	1f 91       	pop	r17
    435c:	0f 91       	pop	r16
    435e:	ff 90       	pop	r15
    4360:	ef 90       	pop	r14
    4362:	df 90       	pop	r13
    4364:	cf 90       	pop	r12
    4366:	bf 90       	pop	r11
    4368:	af 90       	pop	r10
    436a:	08 95       	ret

0000436c <DisplayResult>:

void DisplayResult()
{
    436c:	af 92       	push	r10
    436e:	bf 92       	push	r11
    4370:	cf 92       	push	r12
    4372:	df 92       	push	r13
    4374:	ef 92       	push	r14
    4376:	ff 92       	push	r15
    4378:	0f 93       	push	r16
    437a:	1f 93       	push	r17
    437c:	df 93       	push	r29
    437e:	cf 93       	push	r28
    4380:	cd b7       	in	r28, 0x3d	; 61
    4382:	de b7       	in	r29, 0x3e	; 62
	LCD_goToRowColumn(1,0);
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	60 e0       	ldi	r22, 0x00	; 0
    4388:	0e 94 b4 1c 	call	0x3968	; 0x3968 <LCD_goToRowColumn>
	LCD_Signed_Int64_ToString(Result);
    438c:	20 91 a6 01 	lds	r18, 0x01A6
    4390:	30 91 a7 01 	lds	r19, 0x01A7
    4394:	40 91 a8 01 	lds	r20, 0x01A8
    4398:	50 91 a9 01 	lds	r21, 0x01A9
    439c:	da 01       	movw	r26, r20
    439e:	c9 01       	movw	r24, r18
    43a0:	bb 0f       	add	r27, r27
    43a2:	88 0b       	sbc	r24, r24
    43a4:	98 2f       	mov	r25, r24
    43a6:	dc 01       	movw	r26, r24
    43a8:	59 01       	movw	r10, r18
    43aa:	6a 01       	movw	r12, r20
    43ac:	e8 2e       	mov	r14, r24
    43ae:	f8 2e       	mov	r15, r24
    43b0:	08 2f       	mov	r16, r24
    43b2:	18 2f       	mov	r17, r24
    43b4:	2a 2d       	mov	r18, r10
    43b6:	3b 2d       	mov	r19, r11
    43b8:	4c 2d       	mov	r20, r12
    43ba:	5d 2d       	mov	r21, r13
    43bc:	6e 2d       	mov	r22, r14
    43be:	7f 2d       	mov	r23, r15
    43c0:	80 2f       	mov	r24, r16
    43c2:	91 2f       	mov	r25, r17
    43c4:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <LCD_Signed_Int64_ToString>
	while(KeyPad_getPressedKey() != EnterKey){}
    43c8:	0e 94 08 16 	call	0x2c10	; 0x2c10 <KeyPad_getPressedKey>
    43cc:	8d 30       	cpi	r24, 0x0D	; 13
    43ce:	e1 f7       	brne	.-8      	; 0x43c8 <DisplayResult+0x5c>
		Flag=StartPoint;
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	80 93 a4 01 	sts	0x01A4, r24
}
    43d6:	cf 91       	pop	r28
    43d8:	df 91       	pop	r29
    43da:	1f 91       	pop	r17
    43dc:	0f 91       	pop	r16
    43de:	ff 90       	pop	r15
    43e0:	ef 90       	pop	r14
    43e2:	df 90       	pop	r13
    43e4:	cf 90       	pop	r12
    43e6:	bf 90       	pop	r11
    43e8:	af 90       	pop	r10
    43ea:	08 95       	ret

000043ec <ThrowException>:
void ThrowException(uint8 *msg)
{
    43ec:	df 93       	push	r29
    43ee:	cf 93       	push	r28
    43f0:	00 d0       	rcall	.+0      	; 0x43f2 <ThrowException+0x6>
    43f2:	cd b7       	in	r28, 0x3d	; 61
    43f4:	de b7       	in	r29, 0x3e	; 62
    43f6:	9a 83       	std	Y+2, r25	; 0x02
    43f8:	89 83       	std	Y+1, r24	; 0x01
	LCD_goToRowColumn(1,0);
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	60 e0       	ldi	r22, 0x00	; 0
    43fe:	0e 94 b4 1c 	call	0x3968	; 0x3968 <LCD_goToRowColumn>
	LCD_displayString(msg);
    4402:	89 81       	ldd	r24, Y+1	; 0x01
    4404:	9a 81       	ldd	r25, Y+2	; 0x02
    4406:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_displayString>
	while(KeyPad_getPressedKey() != EnterKey){} /*Don't get from the exception until pressing enter key*/
    440a:	0e 94 08 16 	call	0x2c10	; 0x2c10 <KeyPad_getPressedKey>
    440e:	8d 30       	cpi	r24, 0x0D	; 13
    4410:	e1 f7       	brne	.-8      	; 0x440a <ThrowException+0x1e>
		Flag=ErrorPoint;
    4412:	85 e0       	ldi	r24, 0x05	; 5
    4414:	80 93 a4 01 	sts	0x01A4, r24
}
    4418:	0f 90       	pop	r0
    441a:	0f 90       	pop	r0
    441c:	cf 91       	pop	r28
    441e:	df 91       	pop	r29
    4420:	08 95       	ret

00004422 <Analyze>:

void Analyze()
{
    4422:	8f 92       	push	r8
    4424:	9f 92       	push	r9
    4426:	af 92       	push	r10
    4428:	bf 92       	push	r11
    442a:	cf 92       	push	r12
    442c:	df 92       	push	r13
    442e:	ef 92       	push	r14
    4430:	ff 92       	push	r15
    4432:	0f 93       	push	r16
    4434:	1f 93       	push	r17
    4436:	df 93       	push	r29
    4438:	cf 93       	push	r28
    443a:	cd b7       	in	r28, 0x3d	; 61
    443c:	de b7       	in	r29, 0x3e	; 62
    443e:	62 97       	sbiw	r28, 0x12	; 18
    4440:	0f b6       	in	r0, 0x3f	; 63
    4442:	f8 94       	cli
    4444:	de bf       	out	0x3e, r29	; 62
    4446:	0f be       	out	0x3f, r0	; 63
    4448:	cd bf       	out	0x3d, r28	; 61
	sint8 TempArr[MaxNumberOfDigits]={0};
    444a:	80 e1       	ldi	r24, 0x10	; 16
    444c:	fe 01       	movw	r30, r28
    444e:	33 96       	adiw	r30, 0x03	; 3
    4450:	df 01       	movw	r26, r30
    4452:	98 2f       	mov	r25, r24
    4454:	1d 92       	st	X+, r1
    4456:	9a 95       	dec	r25
    4458:	e9 f7       	brne	.-6      	; 0x4454 <Analyze+0x32>
	uint8 TempIndex=0;
    445a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 index=0;
    445c:	19 82       	std	Y+1, r1	; 0x01
	
	
	if(IsOperation(Digits[0]) && Digits[0]!= '-'){ /*if the input is  *5 for example */
    445e:	80 91 e0 01 	lds	r24, 0x01E0
    4462:	8a 32       	cpi	r24, 0x2A	; 42
    4464:	61 f0       	breq	.+24     	; 0x447e <Analyze+0x5c>
    4466:	80 91 e0 01 	lds	r24, 0x01E0
    446a:	8b 32       	cpi	r24, 0x2B	; 43
    446c:	41 f0       	breq	.+16     	; 0x447e <Analyze+0x5c>
    446e:	80 91 e0 01 	lds	r24, 0x01E0
    4472:	8d 32       	cpi	r24, 0x2D	; 45
    4474:	21 f0       	breq	.+8      	; 0x447e <Analyze+0x5c>
    4476:	80 91 e0 01 	lds	r24, 0x01E0
    447a:	85 32       	cpi	r24, 0x25	; 37
    447c:	61 f4       	brne	.+24     	; 0x4496 <Analyze+0x74>
    447e:	80 91 e0 01 	lds	r24, 0x01E0
    4482:	8d 32       	cpi	r24, 0x2D	; 45
    4484:	41 f0       	breq	.+16     	; 0x4496 <Analyze+0x74>
		 ThrowException("Invalid input");
    4486:	80 e6       	ldi	r24, 0x60	; 96
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	0e 94 f6 21 	call	0x43ec	; 0x43ec <ThrowException>
		 Flag=StartPoint;
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	80 93 a4 01 	sts	0x01A4, r24
    4494:	20 c1       	rjmp	.+576    	; 0x46d6 <Analyze+0x2b4>
		 return;
			}		
			
	/*Checking on if the first number is signed*/
	if(Digits[0]== '-' && !IsOperation(Digits[1]))
    4496:	80 91 e0 01 	lds	r24, 0x01E0
    449a:	8d 32       	cpi	r24, 0x2D	; 45
    449c:	09 f0       	breq	.+2      	; 0x44a0 <Analyze+0x7e>
    449e:	13 c1       	rjmp	.+550    	; 0x46c6 <Analyze+0x2a4>
    44a0:	80 91 e1 01 	lds	r24, 0x01E1
    44a4:	8a 32       	cpi	r24, 0x2A	; 42
    44a6:	09 f4       	brne	.+2      	; 0x44aa <Analyze+0x88>
    44a8:	0e c1       	rjmp	.+540    	; 0x46c6 <Analyze+0x2a4>
    44aa:	80 91 e1 01 	lds	r24, 0x01E1
    44ae:	8b 32       	cpi	r24, 0x2B	; 43
    44b0:	09 f4       	brne	.+2      	; 0x44b4 <Analyze+0x92>
    44b2:	09 c1       	rjmp	.+530    	; 0x46c6 <Analyze+0x2a4>
    44b4:	80 91 e1 01 	lds	r24, 0x01E1
    44b8:	8d 32       	cpi	r24, 0x2D	; 45
    44ba:	09 f4       	brne	.+2      	; 0x44be <Analyze+0x9c>
    44bc:	04 c1       	rjmp	.+520    	; 0x46c6 <Analyze+0x2a4>
    44be:	80 91 e1 01 	lds	r24, 0x01E1
    44c2:	85 32       	cpi	r24, 0x25	; 37
    44c4:	09 f4       	brne	.+2      	; 0x44c8 <Analyze+0xa6>
    44c6:	ff c0       	rjmp	.+510    	; 0x46c6 <Analyze+0x2a4>
	{
			FirstNumberSign =true; /*To register the number in TempArr without conflict with the second condition*/
    44c8:	81 e0       	ldi	r24, 0x01	; 1
    44ca:	80 93 ad 01 	sts	0x01AD, r24
			SignNumberFlagToConvertInt64=true;/*To make a note that the number which ConvertInt64 will convert is negative*/
    44ce:	81 e0       	ldi	r24, 0x01	; 1
    44d0:	80 93 ae 01 	sts	0x01AE, r24
			index++; /* To assign TempArr[0]= Digits[1] for the first time only and in signed case [in the first condition below]*/
    44d4:	89 81       	ldd	r24, Y+1	; 0x01
    44d6:	8f 5f       	subi	r24, 0xFF	; 255
    44d8:	89 83       	std	Y+1, r24	; 0x01
    44da:	f5 c0       	rjmp	.+490    	; 0x46c6 <Analyze+0x2a4>
		while(DigitsCounter != 0)
		{
			/*this loop is scan the Digits array and once it found and operation symbol it will convert the number which 
			previous it then continue searching*/

			if(((Digits[index]>=0) && (Digits[index]<=9)) || FirstNumberSign||OtherNumberSign) 
    44dc:	89 81       	ldd	r24, Y+1	; 0x01
    44de:	88 2f       	mov	r24, r24
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	fc 01       	movw	r30, r24
    44e4:	e0 52       	subi	r30, 0x20	; 32
    44e6:	fe 4f       	sbci	r31, 0xFE	; 254
    44e8:	80 81       	ld	r24, Z
    44ea:	88 23       	and	r24, r24
    44ec:	4c f0       	brlt	.+18     	; 0x4500 <Analyze+0xde>
    44ee:	89 81       	ldd	r24, Y+1	; 0x01
    44f0:	88 2f       	mov	r24, r24
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	fc 01       	movw	r30, r24
    44f6:	e0 52       	subi	r30, 0x20	; 32
    44f8:	fe 4f       	sbci	r31, 0xFE	; 254
    44fa:	80 81       	ld	r24, Z
    44fc:	8a 30       	cpi	r24, 0x0A	; 10
    44fe:	44 f0       	brlt	.+16     	; 0x4510 <Analyze+0xee>
    4500:	80 91 ad 01 	lds	r24, 0x01AD
    4504:	88 23       	and	r24, r24
    4506:	21 f4       	brne	.+8      	; 0x4510 <Analyze+0xee>
    4508:	80 91 af 01 	lds	r24, 0x01AF
    450c:	88 23       	and	r24, r24
    450e:	c1 f0       	breq	.+48     	; 0x4540 <Analyze+0x11e>
			{
				TempArr[TempIndex]=Digits[index];
    4510:	8a 81       	ldd	r24, Y+2	; 0x02
    4512:	28 2f       	mov	r18, r24
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	89 81       	ldd	r24, Y+1	; 0x01
    4518:	88 2f       	mov	r24, r24
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	fc 01       	movw	r30, r24
    451e:	e0 52       	subi	r30, 0x20	; 32
    4520:	fe 4f       	sbci	r31, 0xFE	; 254
    4522:	40 81       	ld	r20, Z
    4524:	ce 01       	movw	r24, r28
    4526:	03 96       	adiw	r24, 0x03	; 3
    4528:	fc 01       	movw	r30, r24
    452a:	e2 0f       	add	r30, r18
    452c:	f3 1f       	adc	r31, r19
    452e:	40 83       	st	Z, r20
				TempIndex++;
    4530:	8a 81       	ldd	r24, Y+2	; 0x02
    4532:	8f 5f       	subi	r24, 0xFF	; 255
    4534:	8a 83       	std	Y+2, r24	; 0x02
				FirstNumberSign =false;
    4536:	10 92 ad 01 	sts	0x01AD, r1
				OtherNumberSign =false;
    453a:	10 92 af 01 	sts	0x01AF, r1
    453e:	bb c0       	rjmp	.+374    	; 0x46b6 <Analyze+0x294>
			}				
			else if(((IsOperation(Digits[index]))||(Digits[index]== EqualKey)))/* 2*8*3= */
    4540:	89 81       	ldd	r24, Y+1	; 0x01
    4542:	88 2f       	mov	r24, r24
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	fc 01       	movw	r30, r24
    4548:	e0 52       	subi	r30, 0x20	; 32
    454a:	fe 4f       	sbci	r31, 0xFE	; 254
    454c:	80 81       	ld	r24, Z
    454e:	8a 32       	cpi	r24, 0x2A	; 42
    4550:	29 f1       	breq	.+74     	; 0x459c <Analyze+0x17a>
    4552:	89 81       	ldd	r24, Y+1	; 0x01
    4554:	88 2f       	mov	r24, r24
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	fc 01       	movw	r30, r24
    455a:	e0 52       	subi	r30, 0x20	; 32
    455c:	fe 4f       	sbci	r31, 0xFE	; 254
    455e:	80 81       	ld	r24, Z
    4560:	8b 32       	cpi	r24, 0x2B	; 43
    4562:	e1 f0       	breq	.+56     	; 0x459c <Analyze+0x17a>
    4564:	89 81       	ldd	r24, Y+1	; 0x01
    4566:	88 2f       	mov	r24, r24
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	fc 01       	movw	r30, r24
    456c:	e0 52       	subi	r30, 0x20	; 32
    456e:	fe 4f       	sbci	r31, 0xFE	; 254
    4570:	80 81       	ld	r24, Z
    4572:	8d 32       	cpi	r24, 0x2D	; 45
    4574:	99 f0       	breq	.+38     	; 0x459c <Analyze+0x17a>
    4576:	89 81       	ldd	r24, Y+1	; 0x01
    4578:	88 2f       	mov	r24, r24
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	fc 01       	movw	r30, r24
    457e:	e0 52       	subi	r30, 0x20	; 32
    4580:	fe 4f       	sbci	r31, 0xFE	; 254
    4582:	80 81       	ld	r24, Z
    4584:	85 32       	cpi	r24, 0x25	; 37
    4586:	51 f0       	breq	.+20     	; 0x459c <Analyze+0x17a>
    4588:	89 81       	ldd	r24, Y+1	; 0x01
    458a:	88 2f       	mov	r24, r24
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	fc 01       	movw	r30, r24
    4590:	e0 52       	subi	r30, 0x20	; 32
    4592:	fe 4f       	sbci	r31, 0xFE	; 254
    4594:	80 81       	ld	r24, Z
    4596:	8d 33       	cpi	r24, 0x3D	; 61
    4598:	09 f0       	breq	.+2      	; 0x459c <Analyze+0x17a>
    459a:	80 c0       	rjmp	.+256    	; 0x469c <Analyze+0x27a>
			{	/*The equality sign help me to calculate the last operand value*/
				Operations[OperationsCounter]=Digits[index];
    459c:	80 91 ab 01 	lds	r24, 0x01AB
    45a0:	28 2f       	mov	r18, r24
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	89 81       	ldd	r24, Y+1	; 0x01
    45a6:	88 2f       	mov	r24, r24
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	fc 01       	movw	r30, r24
    45ac:	e0 52       	subi	r30, 0x20	; 32
    45ae:	fe 4f       	sbci	r31, 0xFE	; 254
    45b0:	80 81       	ld	r24, Z
    45b2:	f9 01       	movw	r30, r18
    45b4:	e0 51       	subi	r30, 0x10	; 16
    45b6:	fe 4f       	sbci	r31, 0xFE	; 254
    45b8:	80 83       	st	Z, r24
				OperationsCounter++;		
    45ba:	80 91 ab 01 	lds	r24, 0x01AB
    45be:	8f 5f       	subi	r24, 0xFF	; 255
    45c0:	80 93 ab 01 	sts	0x01AB, r24
				Operands[OperandsCounter]=ConvertToInt64(TempArr,TempIndex);
    45c4:	80 91 aa 01 	lds	r24, 0x01AA
    45c8:	88 2e       	mov	r8, r24
    45ca:	99 24       	eor	r9, r9
    45cc:	ce 01       	movw	r24, r28
    45ce:	03 96       	adiw	r24, 0x03	; 3
    45d0:	6a 81       	ldd	r22, Y+2	; 0x02
    45d2:	0e 94 17 21 	call	0x422e	; 0x422e <ConvertToInt64>
    45d6:	a2 2e       	mov	r10, r18
    45d8:	b3 2e       	mov	r11, r19
    45da:	c4 2e       	mov	r12, r20
    45dc:	d5 2e       	mov	r13, r21
    45de:	e6 2e       	mov	r14, r22
    45e0:	f7 2e       	mov	r15, r23
    45e2:	08 2f       	mov	r16, r24
    45e4:	19 2f       	mov	r17, r25
    45e6:	a6 01       	movw	r20, r12
    45e8:	95 01       	movw	r18, r10
    45ea:	c4 01       	movw	r24, r8
    45ec:	88 0f       	add	r24, r24
    45ee:	99 1f       	adc	r25, r25
    45f0:	88 0f       	add	r24, r24
    45f2:	99 1f       	adc	r25, r25
    45f4:	fc 01       	movw	r30, r24
    45f6:	e0 55       	subi	r30, 0x50	; 80
    45f8:	fe 4f       	sbci	r31, 0xFE	; 254
    45fa:	20 83       	st	Z, r18
    45fc:	31 83       	std	Z+1, r19	; 0x01
    45fe:	42 83       	std	Z+2, r20	; 0x02
    4600:	53 83       	std	Z+3, r21	; 0x03
				OperandsCounter++;
    4602:	80 91 aa 01 	lds	r24, 0x01AA
    4606:	8f 5f       	subi	r24, 0xFF	; 255
    4608:	80 93 aa 01 	sts	0x01AA, r24
				TempIndex=0;
    460c:	1a 82       	std	Y+2, r1	; 0x02
					if(Digits[index+1] == '-' && index >0) /*If the other operand is signed (2nd operand ...)*/
    460e:	89 81       	ldd	r24, Y+1	; 0x01
    4610:	88 2f       	mov	r24, r24
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	01 96       	adiw	r24, 0x01	; 1
    4616:	fc 01       	movw	r30, r24
    4618:	e0 52       	subi	r30, 0x20	; 32
    461a:	fe 4f       	sbci	r31, 0xFE	; 254
    461c:	80 81       	ld	r24, Z
    461e:	8d 32       	cpi	r24, 0x2D	; 45
    4620:	69 f4       	brne	.+26     	; 0x463c <Analyze+0x21a>
    4622:	89 81       	ldd	r24, Y+1	; 0x01
    4624:	88 23       	and	r24, r24
    4626:	51 f0       	breq	.+20     	; 0x463c <Analyze+0x21a>
					{
							OtherNumberSign=true;
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	80 93 af 01 	sts	0x01AF, r24
							SignNumberFlagToConvertInt64=true;
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	80 93 ae 01 	sts	0x01AE, r24
							index++;/*To Not include the sign in the TempArr*/
    4634:	89 81       	ldd	r24, Y+1	; 0x01
    4636:	8f 5f       	subi	r24, 0xFF	; 255
    4638:	89 83       	std	Y+1, r24	; 0x01
    463a:	3d c0       	rjmp	.+122    	; 0x46b6 <Analyze+0x294>
							
					}else if(IsOperation(Digits[index+1])) /*if two symbols after each other ++ or *% */
    463c:	89 81       	ldd	r24, Y+1	; 0x01
    463e:	88 2f       	mov	r24, r24
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	01 96       	adiw	r24, 0x01	; 1
    4644:	fc 01       	movw	r30, r24
    4646:	e0 52       	subi	r30, 0x20	; 32
    4648:	fe 4f       	sbci	r31, 0xFE	; 254
    464a:	80 81       	ld	r24, Z
    464c:	8a 32       	cpi	r24, 0x2A	; 42
    464e:	f1 f0       	breq	.+60     	; 0x468c <Analyze+0x26a>
    4650:	89 81       	ldd	r24, Y+1	; 0x01
    4652:	88 2f       	mov	r24, r24
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	01 96       	adiw	r24, 0x01	; 1
    4658:	fc 01       	movw	r30, r24
    465a:	e0 52       	subi	r30, 0x20	; 32
    465c:	fe 4f       	sbci	r31, 0xFE	; 254
    465e:	80 81       	ld	r24, Z
    4660:	8b 32       	cpi	r24, 0x2B	; 43
    4662:	a1 f0       	breq	.+40     	; 0x468c <Analyze+0x26a>
    4664:	89 81       	ldd	r24, Y+1	; 0x01
    4666:	88 2f       	mov	r24, r24
    4668:	90 e0       	ldi	r25, 0x00	; 0
    466a:	01 96       	adiw	r24, 0x01	; 1
    466c:	fc 01       	movw	r30, r24
    466e:	e0 52       	subi	r30, 0x20	; 32
    4670:	fe 4f       	sbci	r31, 0xFE	; 254
    4672:	80 81       	ld	r24, Z
    4674:	8d 32       	cpi	r24, 0x2D	; 45
    4676:	51 f0       	breq	.+20     	; 0x468c <Analyze+0x26a>
    4678:	89 81       	ldd	r24, Y+1	; 0x01
    467a:	88 2f       	mov	r24, r24
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	01 96       	adiw	r24, 0x01	; 1
    4680:	fc 01       	movw	r30, r24
    4682:	e0 52       	subi	r30, 0x20	; 32
    4684:	fe 4f       	sbci	r31, 0xFE	; 254
    4686:	80 81       	ld	r24, Z
    4688:	85 32       	cpi	r24, 0x25	; 37
    468a:	a9 f4       	brne	.+42     	; 0x46b6 <Analyze+0x294>
					{
						ThrowException("Invalid Syntax");
    468c:	8e e6       	ldi	r24, 0x6E	; 110
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	0e 94 f6 21 	call	0x43ec	; 0x43ec <ThrowException>
						Flag =ErrorPoint;
    4694:	85 e0       	ldi	r24, 0x05	; 5
    4696:	80 93 a4 01 	sts	0x01A4, r24
    469a:	1d c0       	rjmp	.+58     	; 0x46d6 <Analyze+0x2b4>
						return;
					}
						
			}
			else if(Digits[index]==EnterKey){
    469c:	89 81       	ldd	r24, Y+1	; 0x01
    469e:	88 2f       	mov	r24, r24
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	fc 01       	movw	r30, r24
    46a4:	e0 52       	subi	r30, 0x20	; 32
    46a6:	fe 4f       	sbci	r31, 0xFE	; 254
    46a8:	80 81       	ld	r24, Z
    46aa:	8d 30       	cpi	r24, 0x0D	; 13
    46ac:	21 f4       	brne	.+8      	; 0x46b6 <Analyze+0x294>
				/*Should be an unreachable code ,but in case of any thing*/
				Flag=StartPoint;
    46ae:	81 e0       	ldi	r24, 0x01	; 1
    46b0:	80 93 a4 01 	sts	0x01A4, r24
    46b4:	10 c0       	rjmp	.+32     	; 0x46d6 <Analyze+0x2b4>
				return;
			}
			
			index++;
    46b6:	89 81       	ldd	r24, Y+1	; 0x01
    46b8:	8f 5f       	subi	r24, 0xFF	; 255
    46ba:	89 83       	std	Y+1, r24	; 0x01
			DigitsCounter--;
    46bc:	80 91 ac 01 	lds	r24, 0x01AC
    46c0:	81 50       	subi	r24, 0x01	; 1
    46c2:	80 93 ac 01 	sts	0x01AC, r24
			FirstNumberSign =true; /*To register the number in TempArr without conflict with the second condition*/
			SignNumberFlagToConvertInt64=true;/*To make a note that the number which ConvertInt64 will convert is negative*/
			index++; /* To assign TempArr[0]= Digits[1] for the first time only and in signed case [in the first condition below]*/
	}		
	
		while(DigitsCounter != 0)
    46c6:	80 91 ac 01 	lds	r24, 0x01AC
    46ca:	88 23       	and	r24, r24
    46cc:	09 f0       	breq	.+2      	; 0x46d0 <Analyze+0x2ae>
    46ce:	06 cf       	rjmp	.-500    	; 0x44dc <Analyze+0xba>
			index++;
			DigitsCounter--;

		}

		Flag=CalculatePoint;/*go to the next stage*/
    46d0:	83 e0       	ldi	r24, 0x03	; 3
    46d2:	80 93 a4 01 	sts	0x01A4, r24
}
    46d6:	62 96       	adiw	r28, 0x12	; 18
    46d8:	0f b6       	in	r0, 0x3f	; 63
    46da:	f8 94       	cli
    46dc:	de bf       	out	0x3e, r29	; 62
    46de:	0f be       	out	0x3f, r0	; 63
    46e0:	cd bf       	out	0x3d, r28	; 61
    46e2:	cf 91       	pop	r28
    46e4:	df 91       	pop	r29
    46e6:	1f 91       	pop	r17
    46e8:	0f 91       	pop	r16
    46ea:	ff 90       	pop	r15
    46ec:	ef 90       	pop	r14
    46ee:	df 90       	pop	r13
    46f0:	cf 90       	pop	r12
    46f2:	bf 90       	pop	r11
    46f4:	af 90       	pop	r10
    46f6:	9f 90       	pop	r9
    46f8:	8f 90       	pop	r8
    46fa:	08 95       	ret

000046fc <Calculate>:



void Calculate()
{
    46fc:	af 92       	push	r10
    46fe:	bf 92       	push	r11
    4700:	cf 92       	push	r12
    4702:	df 92       	push	r13
    4704:	ef 92       	push	r14
    4706:	ff 92       	push	r15
    4708:	0f 93       	push	r16
    470a:	1f 93       	push	r17
    470c:	df 93       	push	r29
    470e:	cf 93       	push	r28
    4710:	cd b7       	in	r28, 0x3d	; 61
    4712:	de b7       	in	r29, 0x3e	; 62
    4714:	27 97       	sbiw	r28, 0x07	; 7
    4716:	0f b6       	in	r0, 0x3f	; 63
    4718:	f8 94       	cli
    471a:	de bf       	out	0x3e, r29	; 62
    471c:	0f be       	out	0x3f, r0	; 63
    471e:	cd bf       	out	0x3d, r28	; 61
	uint8 piority=false;
    4720:	1b 82       	std	Y+3, r1	; 0x03
	
	if(OperationsCounter>2){/* > 2 As equal sign included in it*/
    4722:	80 91 ab 01 	lds	r24, 0x01AB
    4726:	83 30       	cpi	r24, 0x03	; 3
    4728:	40 f0       	brcs	.+16     	; 0x473a <Calculate+0x3e>
		if(Operations[1] != Operations[0]) piority=true;		
    472a:	90 91 f1 01 	lds	r25, 0x01F1
    472e:	80 91 f0 01 	lds	r24, 0x01F0
    4732:	98 17       	cp	r25, r24
    4734:	11 f0       	breq	.+4      	; 0x473a <Calculate+0x3e>
    4736:	81 e0       	ldi	r24, 0x01	; 1
    4738:	8b 83       	std	Y+3, r24	; 0x03
	}		
	
	
	if(OperandsCounter == 1)
    473a:	80 91 aa 01 	lds	r24, 0x01AA
    473e:	81 30       	cpi	r24, 0x01	; 1
    4740:	a1 f4       	brne	.+40     	; 0x476a <Calculate+0x6e>
	{
		
		Result=Operands[0];
    4742:	80 91 b0 01 	lds	r24, 0x01B0
    4746:	90 91 b1 01 	lds	r25, 0x01B1
    474a:	a0 91 b2 01 	lds	r26, 0x01B2
    474e:	b0 91 b3 01 	lds	r27, 0x01B3
    4752:	80 93 a6 01 	sts	0x01A6, r24
    4756:	90 93 a7 01 	sts	0x01A7, r25
    475a:	a0 93 a8 01 	sts	0x01A8, r26
    475e:	b0 93 a9 01 	sts	0x01A9, r27
		Flag=DisplayPoint;
    4762:	84 e0       	ldi	r24, 0x04	; 4
    4764:	80 93 a4 01 	sts	0x01A4, r24
    4768:	44 c4       	rjmp	.+2184   	; 0x4ff2 <Calculate+0x8f6>
		return;
	}

if(piority==false){	
    476a:	8b 81       	ldd	r24, Y+3	; 0x03
    476c:	88 23       	and	r24, r24
    476e:	09 f0       	breq	.+2      	; 0x4772 <Calculate+0x76>
    4770:	27 c1       	rjmp	.+590    	; 0x49c0 <Calculate+0x2c4>
	if((OperandsCounter>1))
    4772:	80 91 aa 01 	lds	r24, 0x01AA
    4776:	82 30       	cpi	r24, 0x02	; 2
    4778:	08 f4       	brcc	.+2      	; 0x477c <Calculate+0x80>
    477a:	38 c4       	rjmp	.+2160   	; 0x4fec <Calculate+0x8f0>
	{
		uint8 index=0;
    477c:	1a 82       	std	Y+2, r1	; 0x02
		switch(Operations[0])
    477e:	80 91 f0 01 	lds	r24, 0x01F0
    4782:	a8 2e       	mov	r10, r24
    4784:	bb 24       	eor	r11, r11
    4786:	bf 82       	std	Y+7, r11	; 0x07
    4788:	ae 82       	std	Y+6, r10	; 0x06
    478a:	0e 81       	ldd	r16, Y+6	; 0x06
    478c:	1f 81       	ldd	r17, Y+7	; 0x07
    478e:	0a 32       	cpi	r16, 0x2A	; 42
    4790:	11 05       	cpc	r17, r1
    4792:	09 f4       	brne	.+2      	; 0x4796 <Calculate+0x9a>
    4794:	4d c0       	rjmp	.+154    	; 0x4830 <Calculate+0x134>
    4796:	2e 81       	ldd	r18, Y+6	; 0x06
    4798:	3f 81       	ldd	r19, Y+7	; 0x07
    479a:	2b 32       	cpi	r18, 0x2B	; 43
    479c:	31 05       	cpc	r19, r1
    479e:	3c f4       	brge	.+14     	; 0x47ae <Calculate+0xb2>
    47a0:	4e 81       	ldd	r20, Y+6	; 0x06
    47a2:	5f 81       	ldd	r21, Y+7	; 0x07
    47a4:	45 32       	cpi	r20, 0x25	; 37
    47a6:	51 05       	cpc	r21, r1
    47a8:	09 f4       	brne	.+2      	; 0x47ac <Calculate+0xb0>
    47aa:	bf c0       	rjmp	.+382    	; 0x492a <Calculate+0x22e>
    47ac:	fe c0       	rjmp	.+508    	; 0x49aa <Calculate+0x2ae>
    47ae:	8e 81       	ldd	r24, Y+6	; 0x06
    47b0:	9f 81       	ldd	r25, Y+7	; 0x07
    47b2:	8b 32       	cpi	r24, 0x2B	; 43
    47b4:	91 05       	cpc	r25, r1
    47b6:	39 f0       	breq	.+14     	; 0x47c6 <Calculate+0xca>
    47b8:	0e 81       	ldd	r16, Y+6	; 0x06
    47ba:	1f 81       	ldd	r17, Y+7	; 0x07
    47bc:	0d 32       	cpi	r16, 0x2D	; 45
    47be:	11 05       	cpc	r17, r1
    47c0:	09 f4       	brne	.+2      	; 0x47c4 <Calculate+0xc8>
    47c2:	71 c0       	rjmp	.+226    	; 0x48a6 <Calculate+0x1aa>
    47c4:	f2 c0       	rjmp	.+484    	; 0x49aa <Calculate+0x2ae>
		{
			case '+':{
						Result=0;
    47c6:	10 92 a6 01 	sts	0x01A6, r1
    47ca:	10 92 a7 01 	sts	0x01A7, r1
    47ce:	10 92 a8 01 	sts	0x01A8, r1
    47d2:	10 92 a9 01 	sts	0x01A9, r1
						for(index=0;index<OperandsCounter;index++)
    47d6:	1a 82       	std	Y+2, r1	; 0x02
    47d8:	25 c0       	rjmp	.+74     	; 0x4824 <Calculate+0x128>
								Result+=Operands[index];
    47da:	8a 81       	ldd	r24, Y+2	; 0x02
    47dc:	88 2f       	mov	r24, r24
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	88 0f       	add	r24, r24
    47e2:	99 1f       	adc	r25, r25
    47e4:	88 0f       	add	r24, r24
    47e6:	99 1f       	adc	r25, r25
    47e8:	fc 01       	movw	r30, r24
    47ea:	e0 55       	subi	r30, 0x50	; 80
    47ec:	fe 4f       	sbci	r31, 0xFE	; 254
    47ee:	20 81       	ld	r18, Z
    47f0:	31 81       	ldd	r19, Z+1	; 0x01
    47f2:	42 81       	ldd	r20, Z+2	; 0x02
    47f4:	53 81       	ldd	r21, Z+3	; 0x03
    47f6:	80 91 a6 01 	lds	r24, 0x01A6
    47fa:	90 91 a7 01 	lds	r25, 0x01A7
    47fe:	a0 91 a8 01 	lds	r26, 0x01A8
    4802:	b0 91 a9 01 	lds	r27, 0x01A9
    4806:	82 0f       	add	r24, r18
    4808:	93 1f       	adc	r25, r19
    480a:	a4 1f       	adc	r26, r20
    480c:	b5 1f       	adc	r27, r21
    480e:	80 93 a6 01 	sts	0x01A6, r24
    4812:	90 93 a7 01 	sts	0x01A7, r25
    4816:	a0 93 a8 01 	sts	0x01A8, r26
    481a:	b0 93 a9 01 	sts	0x01A9, r27
		uint8 index=0;
		switch(Operations[0])
		{
			case '+':{
						Result=0;
						for(index=0;index<OperandsCounter;index++)
    481e:	8a 81       	ldd	r24, Y+2	; 0x02
    4820:	8f 5f       	subi	r24, 0xFF	; 255
    4822:	8a 83       	std	Y+2, r24	; 0x02
    4824:	90 91 aa 01 	lds	r25, 0x01AA
    4828:	8a 81       	ldd	r24, Y+2	; 0x02
    482a:	89 17       	cp	r24, r25
    482c:	b0 f2       	brcs	.-84     	; 0x47da <Calculate+0xde>
    482e:	c4 c0       	rjmp	.+392    	; 0x49b8 <Calculate+0x2bc>
								Result+=Operands[index];
						break;
					}
					
			case '*':{
				Result=1;/*As it's initially to -1*/
    4830:	81 e0       	ldi	r24, 0x01	; 1
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	a0 e0       	ldi	r26, 0x00	; 0
    4836:	b0 e0       	ldi	r27, 0x00	; 0
    4838:	80 93 a6 01 	sts	0x01A6, r24
    483c:	90 93 a7 01 	sts	0x01A7, r25
    4840:	a0 93 a8 01 	sts	0x01A8, r26
    4844:	b0 93 a9 01 	sts	0x01A9, r27
				for(index=0;index<OperandsCounter;index++)
    4848:	1a 82       	std	Y+2, r1	; 0x02
    484a:	27 c0       	rjmp	.+78     	; 0x489a <Calculate+0x19e>
								Result*=Operands[index];
    484c:	8a 81       	ldd	r24, Y+2	; 0x02
    484e:	88 2f       	mov	r24, r24
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	88 0f       	add	r24, r24
    4854:	99 1f       	adc	r25, r25
    4856:	88 0f       	add	r24, r24
    4858:	99 1f       	adc	r25, r25
    485a:	fc 01       	movw	r30, r24
    485c:	e0 55       	subi	r30, 0x50	; 80
    485e:	fe 4f       	sbci	r31, 0xFE	; 254
    4860:	80 81       	ld	r24, Z
    4862:	91 81       	ldd	r25, Z+1	; 0x01
    4864:	a2 81       	ldd	r26, Z+2	; 0x02
    4866:	b3 81       	ldd	r27, Z+3	; 0x03
    4868:	20 91 a6 01 	lds	r18, 0x01A6
    486c:	30 91 a7 01 	lds	r19, 0x01A7
    4870:	40 91 a8 01 	lds	r20, 0x01A8
    4874:	50 91 a9 01 	lds	r21, 0x01A9
    4878:	bc 01       	movw	r22, r24
    487a:	cd 01       	movw	r24, r26
    487c:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    4880:	dc 01       	movw	r26, r24
    4882:	cb 01       	movw	r24, r22
    4884:	80 93 a6 01 	sts	0x01A6, r24
    4888:	90 93 a7 01 	sts	0x01A7, r25
    488c:	a0 93 a8 01 	sts	0x01A8, r26
    4890:	b0 93 a9 01 	sts	0x01A9, r27
						break;
					}
					
			case '*':{
				Result=1;/*As it's initially to -1*/
				for(index=0;index<OperandsCounter;index++)
    4894:	8a 81       	ldd	r24, Y+2	; 0x02
    4896:	8f 5f       	subi	r24, 0xFF	; 255
    4898:	8a 83       	std	Y+2, r24	; 0x02
    489a:	90 91 aa 01 	lds	r25, 0x01AA
    489e:	8a 81       	ldd	r24, Y+2	; 0x02
    48a0:	89 17       	cp	r24, r25
    48a2:	a0 f2       	brcs	.-88     	; 0x484c <Calculate+0x150>
    48a4:	89 c0       	rjmp	.+274    	; 0x49b8 <Calculate+0x2bc>
								Result*=Operands[index];
				break;
					}
			case '-':{
				Result=Operands[0];	/*As i use -= and Result is initially to -1,so it will give a wrong answer*/
    48a6:	80 91 b0 01 	lds	r24, 0x01B0
    48aa:	90 91 b1 01 	lds	r25, 0x01B1
    48ae:	a0 91 b2 01 	lds	r26, 0x01B2
    48b2:	b0 91 b3 01 	lds	r27, 0x01B3
    48b6:	80 93 a6 01 	sts	0x01A6, r24
    48ba:	90 93 a7 01 	sts	0x01A7, r25
    48be:	a0 93 a8 01 	sts	0x01A8, r26
    48c2:	b0 93 a9 01 	sts	0x01A9, r27
				for(index=1;index<OperandsCounter;index++)
    48c6:	81 e0       	ldi	r24, 0x01	; 1
    48c8:	8a 83       	std	Y+2, r24	; 0x02
    48ca:	29 c0       	rjmp	.+82     	; 0x491e <Calculate+0x222>
								Result-=Operands[index];
    48cc:	20 91 a6 01 	lds	r18, 0x01A6
    48d0:	30 91 a7 01 	lds	r19, 0x01A7
    48d4:	40 91 a8 01 	lds	r20, 0x01A8
    48d8:	50 91 a9 01 	lds	r21, 0x01A9
    48dc:	8a 81       	ldd	r24, Y+2	; 0x02
    48de:	88 2f       	mov	r24, r24
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	88 0f       	add	r24, r24
    48e4:	99 1f       	adc	r25, r25
    48e6:	88 0f       	add	r24, r24
    48e8:	99 1f       	adc	r25, r25
    48ea:	fc 01       	movw	r30, r24
    48ec:	e0 55       	subi	r30, 0x50	; 80
    48ee:	fe 4f       	sbci	r31, 0xFE	; 254
    48f0:	80 81       	ld	r24, Z
    48f2:	91 81       	ldd	r25, Z+1	; 0x01
    48f4:	a2 81       	ldd	r26, Z+2	; 0x02
    48f6:	b3 81       	ldd	r27, Z+3	; 0x03
    48f8:	59 01       	movw	r10, r18
    48fa:	6a 01       	movw	r12, r20
    48fc:	a8 1a       	sub	r10, r24
    48fe:	b9 0a       	sbc	r11, r25
    4900:	ca 0a       	sbc	r12, r26
    4902:	db 0a       	sbc	r13, r27
    4904:	d6 01       	movw	r26, r12
    4906:	c5 01       	movw	r24, r10
    4908:	80 93 a6 01 	sts	0x01A6, r24
    490c:	90 93 a7 01 	sts	0x01A7, r25
    4910:	a0 93 a8 01 	sts	0x01A8, r26
    4914:	b0 93 a9 01 	sts	0x01A9, r27
								Result*=Operands[index];
				break;
					}
			case '-':{
				Result=Operands[0];	/*As i use -= and Result is initially to -1,so it will give a wrong answer*/
				for(index=1;index<OperandsCounter;index++)
    4918:	8a 81       	ldd	r24, Y+2	; 0x02
    491a:	8f 5f       	subi	r24, 0xFF	; 255
    491c:	8a 83       	std	Y+2, r24	; 0x02
    491e:	90 91 aa 01 	lds	r25, 0x01AA
    4922:	8a 81       	ldd	r24, Y+2	; 0x02
    4924:	89 17       	cp	r24, r25
    4926:	90 f2       	brcs	.-92     	; 0x48cc <Calculate+0x1d0>
    4928:	47 c0       	rjmp	.+142    	; 0x49b8 <Calculate+0x2bc>
								Result-=Operands[index];
				break;
					}	
			case '%':{
				Result=Operands[0]; /*As above*/
    492a:	80 91 b0 01 	lds	r24, 0x01B0
    492e:	90 91 b1 01 	lds	r25, 0x01B1
    4932:	a0 91 b2 01 	lds	r26, 0x01B2
    4936:	b0 91 b3 01 	lds	r27, 0x01B3
    493a:	80 93 a6 01 	sts	0x01A6, r24
    493e:	90 93 a7 01 	sts	0x01A7, r25
    4942:	a0 93 a8 01 	sts	0x01A8, r26
    4946:	b0 93 a9 01 	sts	0x01A9, r27
				for(index=1;index<OperandsCounter;index++)
    494a:	81 e0       	ldi	r24, 0x01	; 1
    494c:	8a 83       	std	Y+2, r24	; 0x02
    494e:	27 c0       	rjmp	.+78     	; 0x499e <Calculate+0x2a2>
						Result/=Operands[index];
    4950:	e0 90 a6 01 	lds	r14, 0x01A6
    4954:	f0 90 a7 01 	lds	r15, 0x01A7
    4958:	00 91 a8 01 	lds	r16, 0x01A8
    495c:	10 91 a9 01 	lds	r17, 0x01A9
    4960:	8a 81       	ldd	r24, Y+2	; 0x02
    4962:	88 2f       	mov	r24, r24
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	88 0f       	add	r24, r24
    4968:	99 1f       	adc	r25, r25
    496a:	88 0f       	add	r24, r24
    496c:	99 1f       	adc	r25, r25
    496e:	fc 01       	movw	r30, r24
    4970:	e0 55       	subi	r30, 0x50	; 80
    4972:	fe 4f       	sbci	r31, 0xFE	; 254
    4974:	20 81       	ld	r18, Z
    4976:	31 81       	ldd	r19, Z+1	; 0x01
    4978:	42 81       	ldd	r20, Z+2	; 0x02
    497a:	53 81       	ldd	r21, Z+3	; 0x03
    497c:	c8 01       	movw	r24, r16
    497e:	b7 01       	movw	r22, r14
    4980:	0e 94 29 28 	call	0x5052	; 0x5052 <__divmodsi4>
    4984:	da 01       	movw	r26, r20
    4986:	c9 01       	movw	r24, r18
    4988:	80 93 a6 01 	sts	0x01A6, r24
    498c:	90 93 a7 01 	sts	0x01A7, r25
    4990:	a0 93 a8 01 	sts	0x01A8, r26
    4994:	b0 93 a9 01 	sts	0x01A9, r27
								Result-=Operands[index];
				break;
					}	
			case '%':{
				Result=Operands[0]; /*As above*/
				for(index=1;index<OperandsCounter;index++)
    4998:	8a 81       	ldd	r24, Y+2	; 0x02
    499a:	8f 5f       	subi	r24, 0xFF	; 255
    499c:	8a 83       	std	Y+2, r24	; 0x02
    499e:	90 91 aa 01 	lds	r25, 0x01AA
    49a2:	8a 81       	ldd	r24, Y+2	; 0x02
    49a4:	89 17       	cp	r24, r25
    49a6:	a0 f2       	brcs	.-88     	; 0x4950 <Calculate+0x254>
    49a8:	07 c0       	rjmp	.+14     	; 0x49b8 <Calculate+0x2bc>
						Result/=Operands[index];
				break;
					}
					
			default:{
				ThrowException("Calculation Error");
    49aa:	8d e7       	ldi	r24, 0x7D	; 125
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	0e 94 f6 21 	call	0x43ec	; 0x43ec <ThrowException>
				Flag=StartPoint;
    49b2:	81 e0       	ldi	r24, 0x01	; 1
    49b4:	80 93 a4 01 	sts	0x01A4, r24
				break;
				}					
		}
		
		Flag=DisplayPoint;
    49b8:	84 e0       	ldi	r24, 0x04	; 4
    49ba:	80 93 a4 01 	sts	0x01A4, r24
    49be:	19 c3       	rjmp	.+1586   	; 0x4ff2 <Calculate+0x8f6>
		return;
	}
		}	
else{	
	if((OperandsCounter>1))/*Honstly it's for 3 operands only and two different  operation*/
    49c0:	80 91 aa 01 	lds	r24, 0x01AA
    49c4:	82 30       	cpi	r24, 0x02	; 2
    49c6:	08 f4       	brcc	.+2      	; 0x49ca <Calculate+0x2ce>
    49c8:	11 c3       	rjmp	.+1570   	; 0x4fec <Calculate+0x8f0>
	{
		/*yeah this technique is very bad ,if you made a generic way or fast one that could be extended
		to more different operands,please content me*/
		uint8 code=0;
    49ca:	19 82       	std	Y+1, r1	; 0x01
		if(Operations[0]=='*' && Operations[1] == '+') code=1;
    49cc:	80 91 f0 01 	lds	r24, 0x01F0
    49d0:	8a 32       	cpi	r24, 0x2A	; 42
    49d2:	39 f4       	brne	.+14     	; 0x49e2 <Calculate+0x2e6>
    49d4:	80 91 f1 01 	lds	r24, 0x01F1
    49d8:	8b 32       	cpi	r24, 0x2B	; 43
    49da:	19 f4       	brne	.+6      	; 0x49e2 <Calculate+0x2e6>
    49dc:	81 e0       	ldi	r24, 0x01	; 1
    49de:	89 83       	std	Y+1, r24	; 0x01
    49e0:	7a c0       	rjmp	.+244    	; 0x4ad6 <Calculate+0x3da>
		else if(Operations[0]=='+' && Operations[1] == '*') code=2;
    49e2:	80 91 f0 01 	lds	r24, 0x01F0
    49e6:	8b 32       	cpi	r24, 0x2B	; 43
    49e8:	39 f4       	brne	.+14     	; 0x49f8 <Calculate+0x2fc>
    49ea:	80 91 f1 01 	lds	r24, 0x01F1
    49ee:	8a 32       	cpi	r24, 0x2A	; 42
    49f0:	19 f4       	brne	.+6      	; 0x49f8 <Calculate+0x2fc>
    49f2:	82 e0       	ldi	r24, 0x02	; 2
    49f4:	89 83       	std	Y+1, r24	; 0x01
    49f6:	6f c0       	rjmp	.+222    	; 0x4ad6 <Calculate+0x3da>
		else if(Operations[0]=='+' && Operations[1] == '-') code=3;
    49f8:	80 91 f0 01 	lds	r24, 0x01F0
    49fc:	8b 32       	cpi	r24, 0x2B	; 43
    49fe:	39 f4       	brne	.+14     	; 0x4a0e <Calculate+0x312>
    4a00:	80 91 f1 01 	lds	r24, 0x01F1
    4a04:	8d 32       	cpi	r24, 0x2D	; 45
    4a06:	19 f4       	brne	.+6      	; 0x4a0e <Calculate+0x312>
    4a08:	83 e0       	ldi	r24, 0x03	; 3
    4a0a:	89 83       	std	Y+1, r24	; 0x01
    4a0c:	64 c0       	rjmp	.+200    	; 0x4ad6 <Calculate+0x3da>
		else if(Operations[0]=='-' && Operations[1] == '+') code=4;
    4a0e:	80 91 f0 01 	lds	r24, 0x01F0
    4a12:	8d 32       	cpi	r24, 0x2D	; 45
    4a14:	39 f4       	brne	.+14     	; 0x4a24 <Calculate+0x328>
    4a16:	80 91 f1 01 	lds	r24, 0x01F1
    4a1a:	8b 32       	cpi	r24, 0x2B	; 43
    4a1c:	19 f4       	brne	.+6      	; 0x4a24 <Calculate+0x328>
    4a1e:	84 e0       	ldi	r24, 0x04	; 4
    4a20:	89 83       	std	Y+1, r24	; 0x01
    4a22:	59 c0       	rjmp	.+178    	; 0x4ad6 <Calculate+0x3da>
		else if(Operations[0]=='*' && Operations[1] == '%') code=5;
    4a24:	80 91 f0 01 	lds	r24, 0x01F0
    4a28:	8a 32       	cpi	r24, 0x2A	; 42
    4a2a:	39 f4       	brne	.+14     	; 0x4a3a <Calculate+0x33e>
    4a2c:	80 91 f1 01 	lds	r24, 0x01F1
    4a30:	85 32       	cpi	r24, 0x25	; 37
    4a32:	19 f4       	brne	.+6      	; 0x4a3a <Calculate+0x33e>
    4a34:	85 e0       	ldi	r24, 0x05	; 5
    4a36:	89 83       	std	Y+1, r24	; 0x01
    4a38:	4e c0       	rjmp	.+156    	; 0x4ad6 <Calculate+0x3da>
		else if(Operations[0]=='%' && Operations[1] == '*') code=6;
    4a3a:	80 91 f0 01 	lds	r24, 0x01F0
    4a3e:	85 32       	cpi	r24, 0x25	; 37
    4a40:	39 f4       	brne	.+14     	; 0x4a50 <Calculate+0x354>
    4a42:	80 91 f1 01 	lds	r24, 0x01F1
    4a46:	8a 32       	cpi	r24, 0x2A	; 42
    4a48:	19 f4       	brne	.+6      	; 0x4a50 <Calculate+0x354>
    4a4a:	86 e0       	ldi	r24, 0x06	; 6
    4a4c:	89 83       	std	Y+1, r24	; 0x01
    4a4e:	43 c0       	rjmp	.+134    	; 0x4ad6 <Calculate+0x3da>
		else if(Operations[0]=='%' && Operations[1] == '+') code=7;
    4a50:	80 91 f0 01 	lds	r24, 0x01F0
    4a54:	85 32       	cpi	r24, 0x25	; 37
    4a56:	39 f4       	brne	.+14     	; 0x4a66 <Calculate+0x36a>
    4a58:	80 91 f1 01 	lds	r24, 0x01F1
    4a5c:	8b 32       	cpi	r24, 0x2B	; 43
    4a5e:	19 f4       	brne	.+6      	; 0x4a66 <Calculate+0x36a>
    4a60:	87 e0       	ldi	r24, 0x07	; 7
    4a62:	89 83       	std	Y+1, r24	; 0x01
    4a64:	38 c0       	rjmp	.+112    	; 0x4ad6 <Calculate+0x3da>
		else if(Operations[0]=='+' && Operations[1] == '%') code=8;
    4a66:	80 91 f0 01 	lds	r24, 0x01F0
    4a6a:	8b 32       	cpi	r24, 0x2B	; 43
    4a6c:	39 f4       	brne	.+14     	; 0x4a7c <Calculate+0x380>
    4a6e:	80 91 f1 01 	lds	r24, 0x01F1
    4a72:	85 32       	cpi	r24, 0x25	; 37
    4a74:	19 f4       	brne	.+6      	; 0x4a7c <Calculate+0x380>
    4a76:	88 e0       	ldi	r24, 0x08	; 8
    4a78:	89 83       	std	Y+1, r24	; 0x01
    4a7a:	2d c0       	rjmp	.+90     	; 0x4ad6 <Calculate+0x3da>
		else if(Operations[0]=='*' && Operations[1] == '-') code=9;
    4a7c:	80 91 f0 01 	lds	r24, 0x01F0
    4a80:	8a 32       	cpi	r24, 0x2A	; 42
    4a82:	39 f4       	brne	.+14     	; 0x4a92 <Calculate+0x396>
    4a84:	80 91 f1 01 	lds	r24, 0x01F1
    4a88:	8d 32       	cpi	r24, 0x2D	; 45
    4a8a:	19 f4       	brne	.+6      	; 0x4a92 <Calculate+0x396>
    4a8c:	89 e0       	ldi	r24, 0x09	; 9
    4a8e:	89 83       	std	Y+1, r24	; 0x01
    4a90:	22 c0       	rjmp	.+68     	; 0x4ad6 <Calculate+0x3da>
		else if(Operations[0]=='-' && Operations[1] == '*') code=10;
    4a92:	80 91 f0 01 	lds	r24, 0x01F0
    4a96:	8d 32       	cpi	r24, 0x2D	; 45
    4a98:	39 f4       	brne	.+14     	; 0x4aa8 <Calculate+0x3ac>
    4a9a:	80 91 f1 01 	lds	r24, 0x01F1
    4a9e:	8a 32       	cpi	r24, 0x2A	; 42
    4aa0:	19 f4       	brne	.+6      	; 0x4aa8 <Calculate+0x3ac>
    4aa2:	8a e0       	ldi	r24, 0x0A	; 10
    4aa4:	89 83       	std	Y+1, r24	; 0x01
    4aa6:	17 c0       	rjmp	.+46     	; 0x4ad6 <Calculate+0x3da>
		else if(Operations[0]=='%' && Operations[1] == '-') code=11;
    4aa8:	80 91 f0 01 	lds	r24, 0x01F0
    4aac:	85 32       	cpi	r24, 0x25	; 37
    4aae:	39 f4       	brne	.+14     	; 0x4abe <Calculate+0x3c2>
    4ab0:	80 91 f1 01 	lds	r24, 0x01F1
    4ab4:	8d 32       	cpi	r24, 0x2D	; 45
    4ab6:	19 f4       	brne	.+6      	; 0x4abe <Calculate+0x3c2>
    4ab8:	8b e0       	ldi	r24, 0x0B	; 11
    4aba:	89 83       	std	Y+1, r24	; 0x01
    4abc:	0c c0       	rjmp	.+24     	; 0x4ad6 <Calculate+0x3da>
		else if(Operations[0]=='-' && Operations[1] == '%') code=12;
    4abe:	80 91 f0 01 	lds	r24, 0x01F0
    4ac2:	8d 32       	cpi	r24, 0x2D	; 45
    4ac4:	39 f4       	brne	.+14     	; 0x4ad4 <Calculate+0x3d8>
    4ac6:	80 91 f1 01 	lds	r24, 0x01F1
    4aca:	85 32       	cpi	r24, 0x25	; 37
    4acc:	19 f4       	brne	.+6      	; 0x4ad4 <Calculate+0x3d8>
    4ace:	8c e0       	ldi	r24, 0x0C	; 12
    4ad0:	89 83       	std	Y+1, r24	; 0x01
    4ad2:	01 c0       	rjmp	.+2      	; 0x4ad6 <Calculate+0x3da>
		else code =0; 
    4ad4:	19 82       	std	Y+1, r1	; 0x01
		
		switch(code){
    4ad6:	89 81       	ldd	r24, Y+1	; 0x01
    4ad8:	c8 2e       	mov	r12, r24
    4ada:	dd 24       	eor	r13, r13
    4adc:	dd 82       	std	Y+5, r13	; 0x05
    4ade:	cc 82       	std	Y+4, r12	; 0x04
    4ae0:	0c 81       	ldd	r16, Y+4	; 0x04
    4ae2:	1d 81       	ldd	r17, Y+5	; 0x05
    4ae4:	06 30       	cpi	r16, 0x06	; 6
    4ae6:	11 05       	cpc	r17, r1
    4ae8:	09 f4       	brne	.+2      	; 0x4aec <Calculate+0x3f0>
    4aea:	30 c1       	rjmp	.+608    	; 0x4d4c <Calculate+0x650>
    4aec:	2c 81       	ldd	r18, Y+4	; 0x04
    4aee:	3d 81       	ldd	r19, Y+5	; 0x05
    4af0:	27 30       	cpi	r18, 0x07	; 7
    4af2:	31 05       	cpc	r19, r1
    4af4:	2c f5       	brge	.+74     	; 0x4b40 <Calculate+0x444>
    4af6:	4c 81       	ldd	r20, Y+4	; 0x04
    4af8:	5d 81       	ldd	r21, Y+5	; 0x05
    4afa:	43 30       	cpi	r20, 0x03	; 3
    4afc:	51 05       	cpc	r21, r1
    4afe:	09 f4       	brne	.+2      	; 0x4b02 <Calculate+0x406>
    4b00:	a0 c0       	rjmp	.+320    	; 0x4c42 <Calculate+0x546>
    4b02:	8c 81       	ldd	r24, Y+4	; 0x04
    4b04:	9d 81       	ldd	r25, Y+5	; 0x05
    4b06:	84 30       	cpi	r24, 0x04	; 4
    4b08:	91 05       	cpc	r25, r1
    4b0a:	6c f4       	brge	.+26     	; 0x4b26 <Calculate+0x42a>
    4b0c:	0c 81       	ldd	r16, Y+4	; 0x04
    4b0e:	1d 81       	ldd	r17, Y+5	; 0x05
    4b10:	01 30       	cpi	r16, 0x01	; 1
    4b12:	11 05       	cpc	r17, r1
    4b14:	09 f4       	brne	.+2      	; 0x4b18 <Calculate+0x41c>
    4b16:	3f c0       	rjmp	.+126    	; 0x4b96 <Calculate+0x49a>
    4b18:	2c 81       	ldd	r18, Y+4	; 0x04
    4b1a:	3d 81       	ldd	r19, Y+5	; 0x05
    4b1c:	22 30       	cpi	r18, 0x02	; 2
    4b1e:	31 05       	cpc	r19, r1
    4b20:	09 f4       	brne	.+2      	; 0x4b24 <Calculate+0x428>
    4b22:	64 c0       	rjmp	.+200    	; 0x4bec <Calculate+0x4f0>
    4b24:	58 c2       	rjmp	.+1200   	; 0x4fd6 <Calculate+0x8da>
    4b26:	4c 81       	ldd	r20, Y+4	; 0x04
    4b28:	5d 81       	ldd	r21, Y+5	; 0x05
    4b2a:	44 30       	cpi	r20, 0x04	; 4
    4b2c:	51 05       	cpc	r21, r1
    4b2e:	09 f4       	brne	.+2      	; 0x4b32 <Calculate+0x436>
    4b30:	b5 c0       	rjmp	.+362    	; 0x4c9c <Calculate+0x5a0>
    4b32:	8c 81       	ldd	r24, Y+4	; 0x04
    4b34:	9d 81       	ldd	r25, Y+5	; 0x05
    4b36:	85 30       	cpi	r24, 0x05	; 5
    4b38:	91 05       	cpc	r25, r1
    4b3a:	09 f4       	brne	.+2      	; 0x4b3e <Calculate+0x442>
    4b3c:	d8 c0       	rjmp	.+432    	; 0x4cee <Calculate+0x5f2>
    4b3e:	4b c2       	rjmp	.+1174   	; 0x4fd6 <Calculate+0x8da>
    4b40:	0c 81       	ldd	r16, Y+4	; 0x04
    4b42:	1d 81       	ldd	r17, Y+5	; 0x05
    4b44:	09 30       	cpi	r16, 0x09	; 9
    4b46:	11 05       	cpc	r17, r1
    4b48:	09 f4       	brne	.+2      	; 0x4b4c <Calculate+0x450>
    4b4a:	87 c1       	rjmp	.+782    	; 0x4e5a <Calculate+0x75e>
    4b4c:	2c 81       	ldd	r18, Y+4	; 0x04
    4b4e:	3d 81       	ldd	r19, Y+5	; 0x05
    4b50:	2a 30       	cpi	r18, 0x0A	; 10
    4b52:	31 05       	cpc	r19, r1
    4b54:	6c f4       	brge	.+26     	; 0x4b70 <Calculate+0x474>
    4b56:	4c 81       	ldd	r20, Y+4	; 0x04
    4b58:	5d 81       	ldd	r21, Y+5	; 0x05
    4b5a:	47 30       	cpi	r20, 0x07	; 7
    4b5c:	51 05       	cpc	r21, r1
    4b5e:	09 f4       	brne	.+2      	; 0x4b62 <Calculate+0x466>
    4b60:	22 c1       	rjmp	.+580    	; 0x4da6 <Calculate+0x6aa>
    4b62:	8c 81       	ldd	r24, Y+4	; 0x04
    4b64:	9d 81       	ldd	r25, Y+5	; 0x05
    4b66:	88 30       	cpi	r24, 0x08	; 8
    4b68:	91 05       	cpc	r25, r1
    4b6a:	09 f4       	brne	.+2      	; 0x4b6e <Calculate+0x472>
    4b6c:	49 c1       	rjmp	.+658    	; 0x4e00 <Calculate+0x704>
    4b6e:	33 c2       	rjmp	.+1126   	; 0x4fd6 <Calculate+0x8da>
    4b70:	0c 81       	ldd	r16, Y+4	; 0x04
    4b72:	1d 81       	ldd	r17, Y+5	; 0x05
    4b74:	0b 30       	cpi	r16, 0x0B	; 11
    4b76:	11 05       	cpc	r17, r1
    4b78:	09 f4       	brne	.+2      	; 0x4b7c <Calculate+0x480>
    4b7a:	cd c1       	rjmp	.+922    	; 0x4f16 <Calculate+0x81a>
    4b7c:	2c 81       	ldd	r18, Y+4	; 0x04
    4b7e:	3d 81       	ldd	r19, Y+5	; 0x05
    4b80:	2b 30       	cpi	r18, 0x0B	; 11
    4b82:	31 05       	cpc	r19, r1
    4b84:	0c f4       	brge	.+2      	; 0x4b88 <Calculate+0x48c>
    4b86:	98 c1       	rjmp	.+816    	; 0x4eb8 <Calculate+0x7bc>
    4b88:	4c 81       	ldd	r20, Y+4	; 0x04
    4b8a:	5d 81       	ldd	r21, Y+5	; 0x05
    4b8c:	4c 30       	cpi	r20, 0x0C	; 12
    4b8e:	51 05       	cpc	r21, r1
    4b90:	09 f4       	brne	.+2      	; 0x4b94 <Calculate+0x498>
    4b92:	f2 c1       	rjmp	.+996    	; 0x4f78 <Calculate+0x87c>
    4b94:	20 c2       	rjmp	.+1088   	; 0x4fd6 <Calculate+0x8da>
			case 1: Result=(Operands[0]*Operands[1])+Operands[2]; break;
    4b96:	80 91 b0 01 	lds	r24, 0x01B0
    4b9a:	90 91 b1 01 	lds	r25, 0x01B1
    4b9e:	a0 91 b2 01 	lds	r26, 0x01B2
    4ba2:	b0 91 b3 01 	lds	r27, 0x01B3
    4ba6:	20 91 b4 01 	lds	r18, 0x01B4
    4baa:	30 91 b5 01 	lds	r19, 0x01B5
    4bae:	40 91 b6 01 	lds	r20, 0x01B6
    4bb2:	50 91 b7 01 	lds	r21, 0x01B7
    4bb6:	bc 01       	movw	r22, r24
    4bb8:	cd 01       	movw	r24, r26
    4bba:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    4bbe:	9b 01       	movw	r18, r22
    4bc0:	ac 01       	movw	r20, r24
    4bc2:	80 91 b8 01 	lds	r24, 0x01B8
    4bc6:	90 91 b9 01 	lds	r25, 0x01B9
    4bca:	a0 91 ba 01 	lds	r26, 0x01BA
    4bce:	b0 91 bb 01 	lds	r27, 0x01BB
    4bd2:	82 0f       	add	r24, r18
    4bd4:	93 1f       	adc	r25, r19
    4bd6:	a4 1f       	adc	r26, r20
    4bd8:	b5 1f       	adc	r27, r21
    4bda:	80 93 a6 01 	sts	0x01A6, r24
    4bde:	90 93 a7 01 	sts	0x01A7, r25
    4be2:	a0 93 a8 01 	sts	0x01A8, r26
    4be6:	b0 93 a9 01 	sts	0x01A9, r27
    4bea:	fc c1       	rjmp	.+1016   	; 0x4fe4 <Calculate+0x8e8>
			case 2: Result=Operands[0]+(Operands[1]*Operands[2]); break;
    4bec:	e0 90 b0 01 	lds	r14, 0x01B0
    4bf0:	f0 90 b1 01 	lds	r15, 0x01B1
    4bf4:	00 91 b2 01 	lds	r16, 0x01B2
    4bf8:	10 91 b3 01 	lds	r17, 0x01B3
    4bfc:	80 91 b4 01 	lds	r24, 0x01B4
    4c00:	90 91 b5 01 	lds	r25, 0x01B5
    4c04:	a0 91 b6 01 	lds	r26, 0x01B6
    4c08:	b0 91 b7 01 	lds	r27, 0x01B7
    4c0c:	20 91 b8 01 	lds	r18, 0x01B8
    4c10:	30 91 b9 01 	lds	r19, 0x01B9
    4c14:	40 91 ba 01 	lds	r20, 0x01BA
    4c18:	50 91 bb 01 	lds	r21, 0x01BB
    4c1c:	bc 01       	movw	r22, r24
    4c1e:	cd 01       	movw	r24, r26
    4c20:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    4c24:	dc 01       	movw	r26, r24
    4c26:	cb 01       	movw	r24, r22
    4c28:	8e 0d       	add	r24, r14
    4c2a:	9f 1d       	adc	r25, r15
    4c2c:	a0 1f       	adc	r26, r16
    4c2e:	b1 1f       	adc	r27, r17
    4c30:	80 93 a6 01 	sts	0x01A6, r24
    4c34:	90 93 a7 01 	sts	0x01A7, r25
    4c38:	a0 93 a8 01 	sts	0x01A8, r26
    4c3c:	b0 93 a9 01 	sts	0x01A9, r27
    4c40:	d1 c1       	rjmp	.+930    	; 0x4fe4 <Calculate+0x8e8>
			case 3: Result=Operands[0]+(Operands[1]-Operands[2]); break;
    4c42:	e0 90 b0 01 	lds	r14, 0x01B0
    4c46:	f0 90 b1 01 	lds	r15, 0x01B1
    4c4a:	00 91 b2 01 	lds	r16, 0x01B2
    4c4e:	10 91 b3 01 	lds	r17, 0x01B3
    4c52:	20 91 b4 01 	lds	r18, 0x01B4
    4c56:	30 91 b5 01 	lds	r19, 0x01B5
    4c5a:	40 91 b6 01 	lds	r20, 0x01B6
    4c5e:	50 91 b7 01 	lds	r21, 0x01B7
    4c62:	80 91 b8 01 	lds	r24, 0x01B8
    4c66:	90 91 b9 01 	lds	r25, 0x01B9
    4c6a:	a0 91 ba 01 	lds	r26, 0x01BA
    4c6e:	b0 91 bb 01 	lds	r27, 0x01BB
    4c72:	59 01       	movw	r10, r18
    4c74:	6a 01       	movw	r12, r20
    4c76:	a8 1a       	sub	r10, r24
    4c78:	b9 0a       	sbc	r11, r25
    4c7a:	ca 0a       	sbc	r12, r26
    4c7c:	db 0a       	sbc	r13, r27
    4c7e:	d6 01       	movw	r26, r12
    4c80:	c5 01       	movw	r24, r10
    4c82:	8e 0d       	add	r24, r14
    4c84:	9f 1d       	adc	r25, r15
    4c86:	a0 1f       	adc	r26, r16
    4c88:	b1 1f       	adc	r27, r17
    4c8a:	80 93 a6 01 	sts	0x01A6, r24
    4c8e:	90 93 a7 01 	sts	0x01A7, r25
    4c92:	a0 93 a8 01 	sts	0x01A8, r26
    4c96:	b0 93 a9 01 	sts	0x01A9, r27
    4c9a:	a4 c1       	rjmp	.+840    	; 0x4fe4 <Calculate+0x8e8>
			case 4: Result=(Operands[0]-Operands[1])+Operands[2]; break;
    4c9c:	20 91 b0 01 	lds	r18, 0x01B0
    4ca0:	30 91 b1 01 	lds	r19, 0x01B1
    4ca4:	40 91 b2 01 	lds	r20, 0x01B2
    4ca8:	50 91 b3 01 	lds	r21, 0x01B3
    4cac:	80 91 b4 01 	lds	r24, 0x01B4
    4cb0:	90 91 b5 01 	lds	r25, 0x01B5
    4cb4:	a0 91 b6 01 	lds	r26, 0x01B6
    4cb8:	b0 91 b7 01 	lds	r27, 0x01B7
    4cbc:	28 1b       	sub	r18, r24
    4cbe:	39 0b       	sbc	r19, r25
    4cc0:	4a 0b       	sbc	r20, r26
    4cc2:	5b 0b       	sbc	r21, r27
    4cc4:	80 91 b8 01 	lds	r24, 0x01B8
    4cc8:	90 91 b9 01 	lds	r25, 0x01B9
    4ccc:	a0 91 ba 01 	lds	r26, 0x01BA
    4cd0:	b0 91 bb 01 	lds	r27, 0x01BB
    4cd4:	82 0f       	add	r24, r18
    4cd6:	93 1f       	adc	r25, r19
    4cd8:	a4 1f       	adc	r26, r20
    4cda:	b5 1f       	adc	r27, r21
    4cdc:	80 93 a6 01 	sts	0x01A6, r24
    4ce0:	90 93 a7 01 	sts	0x01A7, r25
    4ce4:	a0 93 a8 01 	sts	0x01A8, r26
    4ce8:	b0 93 a9 01 	sts	0x01A9, r27
    4cec:	7b c1       	rjmp	.+758    	; 0x4fe4 <Calculate+0x8e8>
			case 5: Result=Operands[0]*(Operands[1]/Operands[2]); break;
    4cee:	e0 90 b0 01 	lds	r14, 0x01B0
    4cf2:	f0 90 b1 01 	lds	r15, 0x01B1
    4cf6:	00 91 b2 01 	lds	r16, 0x01B2
    4cfa:	10 91 b3 01 	lds	r17, 0x01B3
    4cfe:	80 91 b4 01 	lds	r24, 0x01B4
    4d02:	90 91 b5 01 	lds	r25, 0x01B5
    4d06:	a0 91 b6 01 	lds	r26, 0x01B6
    4d0a:	b0 91 b7 01 	lds	r27, 0x01B7
    4d0e:	20 91 b8 01 	lds	r18, 0x01B8
    4d12:	30 91 b9 01 	lds	r19, 0x01B9
    4d16:	40 91 ba 01 	lds	r20, 0x01BA
    4d1a:	50 91 bb 01 	lds	r21, 0x01BB
    4d1e:	bc 01       	movw	r22, r24
    4d20:	cd 01       	movw	r24, r26
    4d22:	0e 94 29 28 	call	0x5052	; 0x5052 <__divmodsi4>
    4d26:	da 01       	movw	r26, r20
    4d28:	c9 01       	movw	r24, r18
    4d2a:	9c 01       	movw	r18, r24
    4d2c:	ad 01       	movw	r20, r26
    4d2e:	c8 01       	movw	r24, r16
    4d30:	b7 01       	movw	r22, r14
    4d32:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	80 93 a6 01 	sts	0x01A6, r24
    4d3e:	90 93 a7 01 	sts	0x01A7, r25
    4d42:	a0 93 a8 01 	sts	0x01A8, r26
    4d46:	b0 93 a9 01 	sts	0x01A9, r27
    4d4a:	4c c1       	rjmp	.+664    	; 0x4fe4 <Calculate+0x8e8>
			case 6: Result=(Operands[0]/Operands[1])*Operands[2]; break;
    4d4c:	80 91 b0 01 	lds	r24, 0x01B0
    4d50:	90 91 b1 01 	lds	r25, 0x01B1
    4d54:	a0 91 b2 01 	lds	r26, 0x01B2
    4d58:	b0 91 b3 01 	lds	r27, 0x01B3
    4d5c:	20 91 b4 01 	lds	r18, 0x01B4
    4d60:	30 91 b5 01 	lds	r19, 0x01B5
    4d64:	40 91 b6 01 	lds	r20, 0x01B6
    4d68:	50 91 b7 01 	lds	r21, 0x01B7
    4d6c:	bc 01       	movw	r22, r24
    4d6e:	cd 01       	movw	r24, r26
    4d70:	0e 94 29 28 	call	0x5052	; 0x5052 <__divmodsi4>
    4d74:	da 01       	movw	r26, r20
    4d76:	c9 01       	movw	r24, r18
    4d78:	20 91 b8 01 	lds	r18, 0x01B8
    4d7c:	30 91 b9 01 	lds	r19, 0x01B9
    4d80:	40 91 ba 01 	lds	r20, 0x01BA
    4d84:	50 91 bb 01 	lds	r21, 0x01BB
    4d88:	bc 01       	movw	r22, r24
    4d8a:	cd 01       	movw	r24, r26
    4d8c:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    4d90:	dc 01       	movw	r26, r24
    4d92:	cb 01       	movw	r24, r22
    4d94:	80 93 a6 01 	sts	0x01A6, r24
    4d98:	90 93 a7 01 	sts	0x01A7, r25
    4d9c:	a0 93 a8 01 	sts	0x01A8, r26
    4da0:	b0 93 a9 01 	sts	0x01A9, r27
    4da4:	1f c1       	rjmp	.+574    	; 0x4fe4 <Calculate+0x8e8>
			case 7: Result=Operands[0]/Operands[1]+Operands[2]; break;
    4da6:	80 91 b0 01 	lds	r24, 0x01B0
    4daa:	90 91 b1 01 	lds	r25, 0x01B1
    4dae:	a0 91 b2 01 	lds	r26, 0x01B2
    4db2:	b0 91 b3 01 	lds	r27, 0x01B3
    4db6:	20 91 b4 01 	lds	r18, 0x01B4
    4dba:	30 91 b5 01 	lds	r19, 0x01B5
    4dbe:	40 91 b6 01 	lds	r20, 0x01B6
    4dc2:	50 91 b7 01 	lds	r21, 0x01B7
    4dc6:	bc 01       	movw	r22, r24
    4dc8:	cd 01       	movw	r24, r26
    4dca:	0e 94 29 28 	call	0x5052	; 0x5052 <__divmodsi4>
    4dce:	da 01       	movw	r26, r20
    4dd0:	c9 01       	movw	r24, r18
    4dd2:	9c 01       	movw	r18, r24
    4dd4:	ad 01       	movw	r20, r26
    4dd6:	80 91 b8 01 	lds	r24, 0x01B8
    4dda:	90 91 b9 01 	lds	r25, 0x01B9
    4dde:	a0 91 ba 01 	lds	r26, 0x01BA
    4de2:	b0 91 bb 01 	lds	r27, 0x01BB
    4de6:	82 0f       	add	r24, r18
    4de8:	93 1f       	adc	r25, r19
    4dea:	a4 1f       	adc	r26, r20
    4dec:	b5 1f       	adc	r27, r21
    4dee:	80 93 a6 01 	sts	0x01A6, r24
    4df2:	90 93 a7 01 	sts	0x01A7, r25
    4df6:	a0 93 a8 01 	sts	0x01A8, r26
    4dfa:	b0 93 a9 01 	sts	0x01A9, r27
    4dfe:	f2 c0       	rjmp	.+484    	; 0x4fe4 <Calculate+0x8e8>
			case 8: Result=Operands[0]/Operands[1]+Operands[2]; break;
    4e00:	80 91 b0 01 	lds	r24, 0x01B0
    4e04:	90 91 b1 01 	lds	r25, 0x01B1
    4e08:	a0 91 b2 01 	lds	r26, 0x01B2
    4e0c:	b0 91 b3 01 	lds	r27, 0x01B3
    4e10:	20 91 b4 01 	lds	r18, 0x01B4
    4e14:	30 91 b5 01 	lds	r19, 0x01B5
    4e18:	40 91 b6 01 	lds	r20, 0x01B6
    4e1c:	50 91 b7 01 	lds	r21, 0x01B7
    4e20:	bc 01       	movw	r22, r24
    4e22:	cd 01       	movw	r24, r26
    4e24:	0e 94 29 28 	call	0x5052	; 0x5052 <__divmodsi4>
    4e28:	da 01       	movw	r26, r20
    4e2a:	c9 01       	movw	r24, r18
    4e2c:	9c 01       	movw	r18, r24
    4e2e:	ad 01       	movw	r20, r26
    4e30:	80 91 b8 01 	lds	r24, 0x01B8
    4e34:	90 91 b9 01 	lds	r25, 0x01B9
    4e38:	a0 91 ba 01 	lds	r26, 0x01BA
    4e3c:	b0 91 bb 01 	lds	r27, 0x01BB
    4e40:	82 0f       	add	r24, r18
    4e42:	93 1f       	adc	r25, r19
    4e44:	a4 1f       	adc	r26, r20
    4e46:	b5 1f       	adc	r27, r21
    4e48:	80 93 a6 01 	sts	0x01A6, r24
    4e4c:	90 93 a7 01 	sts	0x01A7, r25
    4e50:	a0 93 a8 01 	sts	0x01A8, r26
    4e54:	b0 93 a9 01 	sts	0x01A9, r27
    4e58:	c5 c0       	rjmp	.+394    	; 0x4fe4 <Calculate+0x8e8>
			case 9: Result= Operands[0]*Operands[1]-Operands[2]; break;
    4e5a:	80 91 b0 01 	lds	r24, 0x01B0
    4e5e:	90 91 b1 01 	lds	r25, 0x01B1
    4e62:	a0 91 b2 01 	lds	r26, 0x01B2
    4e66:	b0 91 b3 01 	lds	r27, 0x01B3
    4e6a:	20 91 b4 01 	lds	r18, 0x01B4
    4e6e:	30 91 b5 01 	lds	r19, 0x01B5
    4e72:	40 91 b6 01 	lds	r20, 0x01B6
    4e76:	50 91 b7 01 	lds	r21, 0x01B7
    4e7a:	bc 01       	movw	r22, r24
    4e7c:	cd 01       	movw	r24, r26
    4e7e:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    4e82:	9b 01       	movw	r18, r22
    4e84:	ac 01       	movw	r20, r24
    4e86:	80 91 b8 01 	lds	r24, 0x01B8
    4e8a:	90 91 b9 01 	lds	r25, 0x01B9
    4e8e:	a0 91 ba 01 	lds	r26, 0x01BA
    4e92:	b0 91 bb 01 	lds	r27, 0x01BB
    4e96:	69 01       	movw	r12, r18
    4e98:	7a 01       	movw	r14, r20
    4e9a:	c8 1a       	sub	r12, r24
    4e9c:	d9 0a       	sbc	r13, r25
    4e9e:	ea 0a       	sbc	r14, r26
    4ea0:	fb 0a       	sbc	r15, r27
    4ea2:	d7 01       	movw	r26, r14
    4ea4:	c6 01       	movw	r24, r12
    4ea6:	80 93 a6 01 	sts	0x01A6, r24
    4eaa:	90 93 a7 01 	sts	0x01A7, r25
    4eae:	a0 93 a8 01 	sts	0x01A8, r26
    4eb2:	b0 93 a9 01 	sts	0x01A9, r27
    4eb6:	96 c0       	rjmp	.+300    	; 0x4fe4 <Calculate+0x8e8>
			case 10: Result=Operands[0]-Operands[1]*Operands[2]; break;
    4eb8:	e0 90 b0 01 	lds	r14, 0x01B0
    4ebc:	f0 90 b1 01 	lds	r15, 0x01B1
    4ec0:	00 91 b2 01 	lds	r16, 0x01B2
    4ec4:	10 91 b3 01 	lds	r17, 0x01B3
    4ec8:	80 91 b4 01 	lds	r24, 0x01B4
    4ecc:	90 91 b5 01 	lds	r25, 0x01B5
    4ed0:	a0 91 b6 01 	lds	r26, 0x01B6
    4ed4:	b0 91 b7 01 	lds	r27, 0x01B7
    4ed8:	20 91 b8 01 	lds	r18, 0x01B8
    4edc:	30 91 b9 01 	lds	r19, 0x01B9
    4ee0:	40 91 ba 01 	lds	r20, 0x01BA
    4ee4:	50 91 bb 01 	lds	r21, 0x01BB
    4ee8:	bc 01       	movw	r22, r24
    4eea:	cd 01       	movw	r24, r26
    4eec:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    4ef0:	dc 01       	movw	r26, r24
    4ef2:	cb 01       	movw	r24, r22
    4ef4:	a8 01       	movw	r20, r16
    4ef6:	97 01       	movw	r18, r14
    4ef8:	28 1b       	sub	r18, r24
    4efa:	39 0b       	sbc	r19, r25
    4efc:	4a 0b       	sbc	r20, r26
    4efe:	5b 0b       	sbc	r21, r27
    4f00:	da 01       	movw	r26, r20
    4f02:	c9 01       	movw	r24, r18
    4f04:	80 93 a6 01 	sts	0x01A6, r24
    4f08:	90 93 a7 01 	sts	0x01A7, r25
    4f0c:	a0 93 a8 01 	sts	0x01A8, r26
    4f10:	b0 93 a9 01 	sts	0x01A9, r27
    4f14:	67 c0       	rjmp	.+206    	; 0x4fe4 <Calculate+0x8e8>
			case 11: Result= Operands[0]/Operands[1]-Operands[2];break;
    4f16:	80 91 b0 01 	lds	r24, 0x01B0
    4f1a:	90 91 b1 01 	lds	r25, 0x01B1
    4f1e:	a0 91 b2 01 	lds	r26, 0x01B2
    4f22:	b0 91 b3 01 	lds	r27, 0x01B3
    4f26:	20 91 b4 01 	lds	r18, 0x01B4
    4f2a:	30 91 b5 01 	lds	r19, 0x01B5
    4f2e:	40 91 b6 01 	lds	r20, 0x01B6
    4f32:	50 91 b7 01 	lds	r21, 0x01B7
    4f36:	bc 01       	movw	r22, r24
    4f38:	cd 01       	movw	r24, r26
    4f3a:	0e 94 29 28 	call	0x5052	; 0x5052 <__divmodsi4>
    4f3e:	da 01       	movw	r26, r20
    4f40:	c9 01       	movw	r24, r18
    4f42:	9c 01       	movw	r18, r24
    4f44:	ad 01       	movw	r20, r26
    4f46:	80 91 b8 01 	lds	r24, 0x01B8
    4f4a:	90 91 b9 01 	lds	r25, 0x01B9
    4f4e:	a0 91 ba 01 	lds	r26, 0x01BA
    4f52:	b0 91 bb 01 	lds	r27, 0x01BB
    4f56:	59 01       	movw	r10, r18
    4f58:	6a 01       	movw	r12, r20
    4f5a:	a8 1a       	sub	r10, r24
    4f5c:	b9 0a       	sbc	r11, r25
    4f5e:	ca 0a       	sbc	r12, r26
    4f60:	db 0a       	sbc	r13, r27
    4f62:	d6 01       	movw	r26, r12
    4f64:	c5 01       	movw	r24, r10
    4f66:	80 93 a6 01 	sts	0x01A6, r24
    4f6a:	90 93 a7 01 	sts	0x01A7, r25
    4f6e:	a0 93 a8 01 	sts	0x01A8, r26
    4f72:	b0 93 a9 01 	sts	0x01A9, r27
    4f76:	36 c0       	rjmp	.+108    	; 0x4fe4 <Calculate+0x8e8>
			case 12: Result= Operands[0]-Operands[1]/Operands[2];break;
    4f78:	e0 90 b0 01 	lds	r14, 0x01B0
    4f7c:	f0 90 b1 01 	lds	r15, 0x01B1
    4f80:	00 91 b2 01 	lds	r16, 0x01B2
    4f84:	10 91 b3 01 	lds	r17, 0x01B3
    4f88:	80 91 b4 01 	lds	r24, 0x01B4
    4f8c:	90 91 b5 01 	lds	r25, 0x01B5
    4f90:	a0 91 b6 01 	lds	r26, 0x01B6
    4f94:	b0 91 b7 01 	lds	r27, 0x01B7
    4f98:	20 91 b8 01 	lds	r18, 0x01B8
    4f9c:	30 91 b9 01 	lds	r19, 0x01B9
    4fa0:	40 91 ba 01 	lds	r20, 0x01BA
    4fa4:	50 91 bb 01 	lds	r21, 0x01BB
    4fa8:	bc 01       	movw	r22, r24
    4faa:	cd 01       	movw	r24, r26
    4fac:	0e 94 29 28 	call	0x5052	; 0x5052 <__divmodsi4>
    4fb0:	da 01       	movw	r26, r20
    4fb2:	c9 01       	movw	r24, r18
    4fb4:	a8 01       	movw	r20, r16
    4fb6:	97 01       	movw	r18, r14
    4fb8:	28 1b       	sub	r18, r24
    4fba:	39 0b       	sbc	r19, r25
    4fbc:	4a 0b       	sbc	r20, r26
    4fbe:	5b 0b       	sbc	r21, r27
    4fc0:	da 01       	movw	r26, r20
    4fc2:	c9 01       	movw	r24, r18
    4fc4:	80 93 a6 01 	sts	0x01A6, r24
    4fc8:	90 93 a7 01 	sts	0x01A7, r25
    4fcc:	a0 93 a8 01 	sts	0x01A8, r26
    4fd0:	b0 93 a9 01 	sts	0x01A9, r27
    4fd4:	07 c0       	rjmp	.+14     	; 0x4fe4 <Calculate+0x8e8>
					
			default:
				{
					ThrowException("PiorityError");
    4fd6:	8f e8       	ldi	r24, 0x8F	; 143
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	0e 94 f6 21 	call	0x43ec	; 0x43ec <ThrowException>
					Flag=StartPoint;
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	80 93 a4 01 	sts	0x01A4, r24
					break;
				}
		}	
		Flag=DisplayPoint;
    4fe4:	84 e0       	ldi	r24, 0x04	; 4
    4fe6:	80 93 a4 01 	sts	0x01A4, r24
    4fea:	03 c0       	rjmp	.+6      	; 0x4ff2 <Calculate+0x8f6>
		return;
	}
		}
		
			
	Flag=DisplayPoint;
    4fec:	84 e0       	ldi	r24, 0x04	; 4
    4fee:	80 93 a4 01 	sts	0x01A4, r24
	return;
}
    4ff2:	27 96       	adiw	r28, 0x07	; 7
    4ff4:	0f b6       	in	r0, 0x3f	; 63
    4ff6:	f8 94       	cli
    4ff8:	de bf       	out	0x3e, r29	; 62
    4ffa:	0f be       	out	0x3f, r0	; 63
    4ffc:	cd bf       	out	0x3d, r28	; 61
    4ffe:	cf 91       	pop	r28
    5000:	df 91       	pop	r29
    5002:	1f 91       	pop	r17
    5004:	0f 91       	pop	r16
    5006:	ff 90       	pop	r15
    5008:	ef 90       	pop	r14
    500a:	df 90       	pop	r13
    500c:	cf 90       	pop	r12
    500e:	bf 90       	pop	r11
    5010:	af 90       	pop	r10
    5012:	08 95       	ret

00005014 <__mulsi3>:
    5014:	62 9f       	mul	r22, r18
    5016:	d0 01       	movw	r26, r0
    5018:	73 9f       	mul	r23, r19
    501a:	f0 01       	movw	r30, r0
    501c:	82 9f       	mul	r24, r18
    501e:	e0 0d       	add	r30, r0
    5020:	f1 1d       	adc	r31, r1
    5022:	64 9f       	mul	r22, r20
    5024:	e0 0d       	add	r30, r0
    5026:	f1 1d       	adc	r31, r1
    5028:	92 9f       	mul	r25, r18
    502a:	f0 0d       	add	r31, r0
    502c:	83 9f       	mul	r24, r19
    502e:	f0 0d       	add	r31, r0
    5030:	74 9f       	mul	r23, r20
    5032:	f0 0d       	add	r31, r0
    5034:	65 9f       	mul	r22, r21
    5036:	f0 0d       	add	r31, r0
    5038:	99 27       	eor	r25, r25
    503a:	72 9f       	mul	r23, r18
    503c:	b0 0d       	add	r27, r0
    503e:	e1 1d       	adc	r30, r1
    5040:	f9 1f       	adc	r31, r25
    5042:	63 9f       	mul	r22, r19
    5044:	b0 0d       	add	r27, r0
    5046:	e1 1d       	adc	r30, r1
    5048:	f9 1f       	adc	r31, r25
    504a:	bd 01       	movw	r22, r26
    504c:	cf 01       	movw	r24, r30
    504e:	11 24       	eor	r1, r1
    5050:	08 95       	ret

00005052 <__divmodsi4>:
    5052:	97 fb       	bst	r25, 7
    5054:	09 2e       	mov	r0, r25
    5056:	05 26       	eor	r0, r21
    5058:	0e d0       	rcall	.+28     	; 0x5076 <__divmodsi4_neg1>
    505a:	57 fd       	sbrc	r21, 7
    505c:	04 d0       	rcall	.+8      	; 0x5066 <__divmodsi4_neg2>
    505e:	14 d0       	rcall	.+40     	; 0x5088 <__udivmodsi4>
    5060:	0a d0       	rcall	.+20     	; 0x5076 <__divmodsi4_neg1>
    5062:	00 1c       	adc	r0, r0
    5064:	38 f4       	brcc	.+14     	; 0x5074 <__divmodsi4_exit>

00005066 <__divmodsi4_neg2>:
    5066:	50 95       	com	r21
    5068:	40 95       	com	r20
    506a:	30 95       	com	r19
    506c:	21 95       	neg	r18
    506e:	3f 4f       	sbci	r19, 0xFF	; 255
    5070:	4f 4f       	sbci	r20, 0xFF	; 255
    5072:	5f 4f       	sbci	r21, 0xFF	; 255

00005074 <__divmodsi4_exit>:
    5074:	08 95       	ret

00005076 <__divmodsi4_neg1>:
    5076:	f6 f7       	brtc	.-4      	; 0x5074 <__divmodsi4_exit>
    5078:	90 95       	com	r25
    507a:	80 95       	com	r24
    507c:	70 95       	com	r23
    507e:	61 95       	neg	r22
    5080:	7f 4f       	sbci	r23, 0xFF	; 255
    5082:	8f 4f       	sbci	r24, 0xFF	; 255
    5084:	9f 4f       	sbci	r25, 0xFF	; 255
    5086:	08 95       	ret

00005088 <__udivmodsi4>:
    5088:	a1 e2       	ldi	r26, 0x21	; 33
    508a:	1a 2e       	mov	r1, r26
    508c:	aa 1b       	sub	r26, r26
    508e:	bb 1b       	sub	r27, r27
    5090:	fd 01       	movw	r30, r26
    5092:	0d c0       	rjmp	.+26     	; 0x50ae <__udivmodsi4_ep>

00005094 <__udivmodsi4_loop>:
    5094:	aa 1f       	adc	r26, r26
    5096:	bb 1f       	adc	r27, r27
    5098:	ee 1f       	adc	r30, r30
    509a:	ff 1f       	adc	r31, r31
    509c:	a2 17       	cp	r26, r18
    509e:	b3 07       	cpc	r27, r19
    50a0:	e4 07       	cpc	r30, r20
    50a2:	f5 07       	cpc	r31, r21
    50a4:	20 f0       	brcs	.+8      	; 0x50ae <__udivmodsi4_ep>
    50a6:	a2 1b       	sub	r26, r18
    50a8:	b3 0b       	sbc	r27, r19
    50aa:	e4 0b       	sbc	r30, r20
    50ac:	f5 0b       	sbc	r31, r21

000050ae <__udivmodsi4_ep>:
    50ae:	66 1f       	adc	r22, r22
    50b0:	77 1f       	adc	r23, r23
    50b2:	88 1f       	adc	r24, r24
    50b4:	99 1f       	adc	r25, r25
    50b6:	1a 94       	dec	r1
    50b8:	69 f7       	brne	.-38     	; 0x5094 <__udivmodsi4_loop>
    50ba:	60 95       	com	r22
    50bc:	70 95       	com	r23
    50be:	80 95       	com	r24
    50c0:	90 95       	com	r25
    50c2:	9b 01       	movw	r18, r22
    50c4:	ac 01       	movw	r20, r24
    50c6:	bd 01       	movw	r22, r26
    50c8:	cf 01       	movw	r24, r30
    50ca:	08 95       	ret

000050cc <__prologue_saves__>:
    50cc:	2f 92       	push	r2
    50ce:	3f 92       	push	r3
    50d0:	4f 92       	push	r4
    50d2:	5f 92       	push	r5
    50d4:	6f 92       	push	r6
    50d6:	7f 92       	push	r7
    50d8:	8f 92       	push	r8
    50da:	9f 92       	push	r9
    50dc:	af 92       	push	r10
    50de:	bf 92       	push	r11
    50e0:	cf 92       	push	r12
    50e2:	df 92       	push	r13
    50e4:	ef 92       	push	r14
    50e6:	ff 92       	push	r15
    50e8:	0f 93       	push	r16
    50ea:	1f 93       	push	r17
    50ec:	cf 93       	push	r28
    50ee:	df 93       	push	r29
    50f0:	cd b7       	in	r28, 0x3d	; 61
    50f2:	de b7       	in	r29, 0x3e	; 62
    50f4:	ca 1b       	sub	r28, r26
    50f6:	db 0b       	sbc	r29, r27
    50f8:	0f b6       	in	r0, 0x3f	; 63
    50fa:	f8 94       	cli
    50fc:	de bf       	out	0x3e, r29	; 62
    50fe:	0f be       	out	0x3f, r0	; 63
    5100:	cd bf       	out	0x3d, r28	; 61
    5102:	09 94       	ijmp

00005104 <__epilogue_restores__>:
    5104:	2a 88       	ldd	r2, Y+18	; 0x12
    5106:	39 88       	ldd	r3, Y+17	; 0x11
    5108:	48 88       	ldd	r4, Y+16	; 0x10
    510a:	5f 84       	ldd	r5, Y+15	; 0x0f
    510c:	6e 84       	ldd	r6, Y+14	; 0x0e
    510e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5110:	8c 84       	ldd	r8, Y+12	; 0x0c
    5112:	9b 84       	ldd	r9, Y+11	; 0x0b
    5114:	aa 84       	ldd	r10, Y+10	; 0x0a
    5116:	b9 84       	ldd	r11, Y+9	; 0x09
    5118:	c8 84       	ldd	r12, Y+8	; 0x08
    511a:	df 80       	ldd	r13, Y+7	; 0x07
    511c:	ee 80       	ldd	r14, Y+6	; 0x06
    511e:	fd 80       	ldd	r15, Y+5	; 0x05
    5120:	0c 81       	ldd	r16, Y+4	; 0x04
    5122:	1b 81       	ldd	r17, Y+3	; 0x03
    5124:	aa 81       	ldd	r26, Y+2	; 0x02
    5126:	b9 81       	ldd	r27, Y+1	; 0x01
    5128:	ce 0f       	add	r28, r30
    512a:	d1 1d       	adc	r29, r1
    512c:	0f b6       	in	r0, 0x3f	; 63
    512e:	f8 94       	cli
    5130:	de bf       	out	0x3e, r29	; 62
    5132:	0f be       	out	0x3f, r0	; 63
    5134:	cd bf       	out	0x3d, r28	; 61
    5136:	ed 01       	movw	r28, r26
    5138:	08 95       	ret

0000513a <strrev>:
    513a:	dc 01       	movw	r26, r24
    513c:	fc 01       	movw	r30, r24
    513e:	67 2f       	mov	r22, r23
    5140:	71 91       	ld	r23, Z+
    5142:	77 23       	and	r23, r23
    5144:	e1 f7       	brne	.-8      	; 0x513e <strrev+0x4>
    5146:	32 97       	sbiw	r30, 0x02	; 2
    5148:	04 c0       	rjmp	.+8      	; 0x5152 <strrev+0x18>
    514a:	7c 91       	ld	r23, X
    514c:	6d 93       	st	X+, r22
    514e:	70 83       	st	Z, r23
    5150:	62 91       	ld	r22, -Z
    5152:	ae 17       	cp	r26, r30
    5154:	bf 07       	cpc	r27, r31
    5156:	c8 f3       	brcs	.-14     	; 0x514a <strrev+0x10>
    5158:	08 95       	ret

0000515a <_exit>:
    515a:	f8 94       	cli

0000515c <__stop_program>:
    515c:	ff cf       	rjmp	.-2      	; 0x515c <__stop_program>
