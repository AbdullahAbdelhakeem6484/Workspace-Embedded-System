In archive libCALCULATOR_LCD_KEYPAD.a:

calculator.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000037  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000006b  2**0
                  ALLOC
  3 .stab         000012cc  00000000  00000000  0000006c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002344  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.main    000006cc  00000000  00000000  0000367c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.read_keypad 00000928  00000000  00000000  00003d48  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.lcd_data_write 00000208  00000000  00000000  00004670  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.lcd_command_write 00000206  00000000  00000000  00004878  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.lcd_init 00000026  00000000  00000000  00004a7e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.lcd_string_write 0000003a  00000000  00000000  00004aa4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.main:

00000000 <main>:
void lcd_command_write( char command);
void lcd_init();
void lcd_string_write( char *string);

int main(void)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	c9 54       	subi	r28, 0x49	; 73
   e:	d0 40       	sbci	r29, 0x00	; 0
  10:	0f b6       	in	r0, 0x3f	; 63
  12:	f8 94       	cli
  14:	de bf       	out	0x3e, r29	; 62
  16:	0f be       	out	0x3f, r0	; 63
  18:	cd bf       	out	0x3d, r28	; 61
	DDRB=0xff;
  1a:	e7 e3       	ldi	r30, 0x37	; 55
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	8f ef       	ldi	r24, 0xFF	; 255
  20:	80 83       	st	Z, r24
	/*All the 8 pins of PortB are declared output (data pins of LCD are connected)*/

	DDRD=0x07;
  22:	e1 e3       	ldi	r30, 0x31	; 49
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	87 e0       	ldi	r24, 0x07	; 7
  28:	80 83       	st	Z, r24
	/*PD0, PD1 and PD2 pins of PortD are declared output (control pins of LCD are connected)*/

	DDRC=0x0f;
  2a:	e4 e3       	ldi	r30, 0x34	; 52
  2c:	f0 e0       	ldi	r31, 0x00	; 0
  2e:	8f e0       	ldi	r24, 0x0F	; 15
  30:	80 83       	st	Z, r24
	/*PortC's upper 4 bits are declared input and lower 4 bits are declared output(4x4 Keypad is connected)*/

	PORTC=0xff;
  32:	e5 e3       	ldi	r30, 0x35	; 53
  34:	f0 e0       	ldi	r31, 0x00	; 0
  36:	8f ef       	ldi	r24, 0xFF	; 255
  38:	80 83       	st	Z, r24
	/*PortC's lower 4 bits are given high value and pull-up are enabled for upper 4 bits*/

	unsigned char keypad_value;
	/*Variable declarations*/

	lcd_init();
  3a:	0e 94 00 00 	call	0	; 0x0 <main>
	/*LCD initialization*/

	lcd_string_write("ABLab Solutions");
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <main>
	/*String display in 1st row of LCD*/

	lcd_command_write(0xc0);
  46:	80 ec       	ldi	r24, 0xC0	; 192
  48:	0e 94 00 00 	call	0	; 0x0 <main>
	/*Cursor moves to 2nd row 1st column of LCD*/

	lcd_string_write("www.ablab.in");
  4c:	80 e0       	ldi	r24, 0x00	; 0
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	0e 94 00 00 	call	0	; 0x0 <main>
  54:	fe 01       	movw	r30, r28
  56:	ed 5b       	subi	r30, 0xBD	; 189
  58:	ff 4f       	sbci	r31, 0xFF	; 255
  5a:	80 e0       	ldi	r24, 0x00	; 0
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	aa ef       	ldi	r26, 0xFA	; 250
  60:	b3 e4       	ldi	r27, 0x43	; 67
  62:	80 83       	st	Z, r24
  64:	91 83       	std	Z+1, r25	; 0x01
  66:	a2 83       	std	Z+2, r26	; 0x02
  68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  6a:	8e 01       	movw	r16, r28
  6c:	01 5c       	subi	r16, 0xC1	; 193
  6e:	1f 4f       	sbci	r17, 0xFF	; 255
  70:	fe 01       	movw	r30, r28
  72:	ed 5b       	subi	r30, 0xBD	; 189
  74:	ff 4f       	sbci	r31, 0xFF	; 255
  76:	60 81       	ld	r22, Z
  78:	71 81       	ldd	r23, Z+1	; 0x01
  7a:	82 81       	ldd	r24, Z+2	; 0x02
  7c:	93 81       	ldd	r25, Z+3	; 0x03
  7e:	20 e0       	ldi	r18, 0x00	; 0
  80:	30 e8       	ldi	r19, 0x80	; 128
  82:	4b e3       	ldi	r20, 0x3B	; 59
  84:	55 e4       	ldi	r21, 0x45	; 69
  86:	0e 94 00 00 	call	0	; 0x0 <main>
  8a:	dc 01       	movw	r26, r24
  8c:	cb 01       	movw	r24, r22
  8e:	f8 01       	movw	r30, r16
  90:	80 83       	st	Z, r24
  92:	91 83       	std	Z+1, r25	; 0x01
  94:	a2 83       	std	Z+2, r26	; 0x02
  96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
  98:	fe 01       	movw	r30, r28
  9a:	ff 96       	adiw	r30, 0x3f	; 63
  9c:	60 81       	ld	r22, Z
  9e:	71 81       	ldd	r23, Z+1	; 0x01
  a0:	82 81       	ldd	r24, Z+2	; 0x02
  a2:	93 81       	ldd	r25, Z+3	; 0x03
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	40 e8       	ldi	r20, 0x80	; 128
  aa:	5f e3       	ldi	r21, 0x3F	; 63
  ac:	0e 94 00 00 	call	0	; 0x0 <main>
  b0:	88 23       	and	r24, r24
  b2:	04 f4       	brge	.+0      	; 0xb4 <main+0xb4>
		__ticks = 1;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	9e af       	std	Y+62, r25	; 0x3e
  ba:	8d af       	std	Y+61, r24	; 0x3d
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0xbe>
	else if (__tmp > 65535)
  be:	fe 01       	movw	r30, r28
  c0:	ff 96       	adiw	r30, 0x3f	; 63
  c2:	60 81       	ld	r22, Z
  c4:	71 81       	ldd	r23, Z+1	; 0x01
  c6:	82 81       	ldd	r24, Z+2	; 0x02
  c8:	93 81       	ldd	r25, Z+3	; 0x03
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	3f ef       	ldi	r19, 0xFF	; 255
  ce:	4f e7       	ldi	r20, 0x7F	; 127
  d0:	57 e4       	ldi	r21, 0x47	; 71
  d2:	0e 94 00 00 	call	0	; 0x0 <main>
  d6:	18 16       	cp	r1, r24
  d8:	04 f4       	brge	.+0      	; 0xda <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  da:	fe 01       	movw	r30, r28
  dc:	ed 5b       	subi	r30, 0xBD	; 189
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	60 81       	ld	r22, Z
  e2:	71 81       	ldd	r23, Z+1	; 0x01
  e4:	82 81       	ldd	r24, Z+2	; 0x02
  e6:	93 81       	ldd	r25, Z+3	; 0x03
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	40 e2       	ldi	r20, 0x20	; 32
  ee:	51 e4       	ldi	r21, 0x41	; 65
  f0:	0e 94 00 00 	call	0	; 0x0 <main>
  f4:	dc 01       	movw	r26, r24
  f6:	cb 01       	movw	r24, r22
  f8:	bc 01       	movw	r22, r24
  fa:	cd 01       	movw	r24, r26
  fc:	0e 94 00 00 	call	0	; 0x0 <main>
 100:	dc 01       	movw	r26, r24
 102:	cb 01       	movw	r24, r22
 104:	9e af       	std	Y+62, r25	; 0x3e
 106:	8d af       	std	Y+61, r24	; 0x3d
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x10a>
 10a:	8c e2       	ldi	r24, 0x2C	; 44
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	9c af       	std	Y+60, r25	; 0x3c
 110:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 112:	8b ad       	ldd	r24, Y+59	; 0x3b
 114:	9c ad       	ldd	r25, Y+60	; 0x3c
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	01 f4       	brne	.+0      	; 0x11a <main+0x11a>
 11a:	9c af       	std	Y+60, r25	; 0x3c
 11c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	8d ad       	ldd	r24, Y+61	; 0x3d
 120:	9e ad       	ldd	r25, Y+62	; 0x3e
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	9e af       	std	Y+62, r25	; 0x3e
 126:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 128:	8d ad       	ldd	r24, Y+61	; 0x3d
 12a:	9e ad       	ldd	r25, Y+62	; 0x3e
 12c:	00 97       	sbiw	r24, 0x00	; 0
 12e:	01 f4       	brne	.+0      	; 0x130 <main+0x130>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 132:	fe 01       	movw	r30, r28
 134:	ff 96       	adiw	r30, 0x3f	; 63
 136:	60 81       	ld	r22, Z
 138:	71 81       	ldd	r23, Z+1	; 0x01
 13a:	82 81       	ldd	r24, Z+2	; 0x02
 13c:	93 81       	ldd	r25, Z+3	; 0x03
 13e:	0e 94 00 00 	call	0	; 0x0 <main>
 142:	dc 01       	movw	r26, r24
 144:	cb 01       	movw	r24, r22
 146:	9e af       	std	Y+62, r25	; 0x3e
 148:	8d af       	std	Y+61, r24	; 0x3d
 14a:	8d ad       	ldd	r24, Y+61	; 0x3d
 14c:	9e ad       	ldd	r25, Y+62	; 0x3e
 14e:	9a af       	std	Y+58, r25	; 0x3a
 150:	89 af       	std	Y+57, r24	; 0x39
 152:	89 ad       	ldd	r24, Y+57	; 0x39
 154:	9a ad       	ldd	r25, Y+58	; 0x3a
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	01 f4       	brne	.+0      	; 0x15a <main+0x15a>
 15a:	9a af       	std	Y+58, r25	; 0x3a
 15c:	89 af       	std	Y+57, r24	; 0x39
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	aa ef       	ldi	r26, 0xFA	; 250
 164:	b3 e4       	ldi	r27, 0x43	; 67
 166:	8d ab       	std	Y+53, r24	; 0x35
 168:	9e ab       	std	Y+54, r25	; 0x36
 16a:	af ab       	std	Y+55, r26	; 0x37
 16c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 16e:	6d a9       	ldd	r22, Y+53	; 0x35
 170:	7e a9       	ldd	r23, Y+54	; 0x36
 172:	8f a9       	ldd	r24, Y+55	; 0x37
 174:	98 ad       	ldd	r25, Y+56	; 0x38
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e8       	ldi	r19, 0x80	; 128
 17a:	4b e3       	ldi	r20, 0x3B	; 59
 17c:	55 e4       	ldi	r21, 0x45	; 69
 17e:	0e 94 00 00 	call	0	; 0x0 <main>
 182:	dc 01       	movw	r26, r24
 184:	cb 01       	movw	r24, r22
 186:	89 ab       	std	Y+49, r24	; 0x31
 188:	9a ab       	std	Y+50, r25	; 0x32
 18a:	ab ab       	std	Y+51, r26	; 0x33
 18c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
 18e:	69 a9       	ldd	r22, Y+49	; 0x31
 190:	7a a9       	ldd	r23, Y+50	; 0x32
 192:	8b a9       	ldd	r24, Y+51	; 0x33
 194:	9c a9       	ldd	r25, Y+52	; 0x34
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	40 e8       	ldi	r20, 0x80	; 128
 19c:	5f e3       	ldi	r21, 0x3F	; 63
 19e:	0e 94 00 00 	call	0	; 0x0 <main>
 1a2:	88 23       	and	r24, r24
 1a4:	04 f4       	brge	.+0      	; 0x1a6 <main+0x1a6>
		__ticks = 1;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	98 ab       	std	Y+48, r25	; 0x30
 1ac:	8f a7       	std	Y+47, r24	; 0x2f
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x1b0>
	else if (__tmp > 65535)
 1b0:	69 a9       	ldd	r22, Y+49	; 0x31
 1b2:	7a a9       	ldd	r23, Y+50	; 0x32
 1b4:	8b a9       	ldd	r24, Y+51	; 0x33
 1b6:	9c a9       	ldd	r25, Y+52	; 0x34
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	3f ef       	ldi	r19, 0xFF	; 255
 1bc:	4f e7       	ldi	r20, 0x7F	; 127
 1be:	57 e4       	ldi	r21, 0x47	; 71
 1c0:	0e 94 00 00 	call	0	; 0x0 <main>
 1c4:	18 16       	cp	r1, r24
 1c6:	04 f4       	brge	.+0      	; 0x1c8 <main+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1c8:	6d a9       	ldd	r22, Y+53	; 0x35
 1ca:	7e a9       	ldd	r23, Y+54	; 0x36
 1cc:	8f a9       	ldd	r24, Y+55	; 0x37
 1ce:	98 ad       	ldd	r25, Y+56	; 0x38
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e2       	ldi	r20, 0x20	; 32
 1d6:	51 e4       	ldi	r21, 0x41	; 65
 1d8:	0e 94 00 00 	call	0	; 0x0 <main>
 1dc:	dc 01       	movw	r26, r24
 1de:	cb 01       	movw	r24, r22
 1e0:	bc 01       	movw	r22, r24
 1e2:	cd 01       	movw	r24, r26
 1e4:	0e 94 00 00 	call	0	; 0x0 <main>
 1e8:	dc 01       	movw	r26, r24
 1ea:	cb 01       	movw	r24, r22
 1ec:	98 ab       	std	Y+48, r25	; 0x30
 1ee:	8f a7       	std	Y+47, r24	; 0x2f
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x1f2>
 1f2:	8c e2       	ldi	r24, 0x2C	; 44
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	9e a7       	std	Y+46, r25	; 0x2e
 1f8:	8d a7       	std	Y+45, r24	; 0x2d
 1fa:	8d a5       	ldd	r24, Y+45	; 0x2d
 1fc:	9e a5       	ldd	r25, Y+46	; 0x2e
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	01 f4       	brne	.+0      	; 0x202 <main+0x202>
 202:	9e a7       	std	Y+46, r25	; 0x2e
 204:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 206:	8f a5       	ldd	r24, Y+47	; 0x2f
 208:	98 a9       	ldd	r25, Y+48	; 0x30
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	98 ab       	std	Y+48, r25	; 0x30
 20e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 210:	8f a5       	ldd	r24, Y+47	; 0x2f
 212:	98 a9       	ldd	r25, Y+48	; 0x30
 214:	00 97       	sbiw	r24, 0x00	; 0
 216:	01 f4       	brne	.+0      	; 0x218 <main+0x218>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 21a:	69 a9       	ldd	r22, Y+49	; 0x31
 21c:	7a a9       	ldd	r23, Y+50	; 0x32
 21e:	8b a9       	ldd	r24, Y+51	; 0x33
 220:	9c a9       	ldd	r25, Y+52	; 0x34
 222:	0e 94 00 00 	call	0	; 0x0 <main>
 226:	dc 01       	movw	r26, r24
 228:	cb 01       	movw	r24, r22
 22a:	98 ab       	std	Y+48, r25	; 0x30
 22c:	8f a7       	std	Y+47, r24	; 0x2f
 22e:	8f a5       	ldd	r24, Y+47	; 0x2f
 230:	98 a9       	ldd	r25, Y+48	; 0x30
 232:	9c a7       	std	Y+44, r25	; 0x2c
 234:	8b a7       	std	Y+43, r24	; 0x2b
 236:	8b a5       	ldd	r24, Y+43	; 0x2b
 238:	9c a5       	ldd	r25, Y+44	; 0x2c
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	01 f4       	brne	.+0      	; 0x23e <main+0x23e>
 23e:	9c a7       	std	Y+44, r25	; 0x2c
 240:	8b a7       	std	Y+43, r24	; 0x2b
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	aa ef       	ldi	r26, 0xFA	; 250
 248:	b3 e4       	ldi	r27, 0x43	; 67
 24a:	8f a3       	std	Y+39, r24	; 0x27
 24c:	98 a7       	std	Y+40, r25	; 0x28
 24e:	a9 a7       	std	Y+41, r26	; 0x29
 250:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 252:	6f a1       	ldd	r22, Y+39	; 0x27
 254:	78 a5       	ldd	r23, Y+40	; 0x28
 256:	89 a5       	ldd	r24, Y+41	; 0x29
 258:	9a a5       	ldd	r25, Y+42	; 0x2a
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e8       	ldi	r19, 0x80	; 128
 25e:	4b e3       	ldi	r20, 0x3B	; 59
 260:	55 e4       	ldi	r21, 0x45	; 69
 262:	0e 94 00 00 	call	0	; 0x0 <main>
 266:	dc 01       	movw	r26, r24
 268:	cb 01       	movw	r24, r22
 26a:	8b a3       	std	Y+35, r24	; 0x23
 26c:	9c a3       	std	Y+36, r25	; 0x24
 26e:	ad a3       	std	Y+37, r26	; 0x25
 270:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
 272:	6b a1       	ldd	r22, Y+35	; 0x23
 274:	7c a1       	ldd	r23, Y+36	; 0x24
 276:	8d a1       	ldd	r24, Y+37	; 0x25
 278:	9e a1       	ldd	r25, Y+38	; 0x26
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 e8       	ldi	r20, 0x80	; 128
 280:	5f e3       	ldi	r21, 0x3F	; 63
 282:	0e 94 00 00 	call	0	; 0x0 <main>
 286:	88 23       	and	r24, r24
 288:	04 f4       	brge	.+0      	; 0x28a <main+0x28a>
		__ticks = 1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	9a a3       	std	Y+34, r25	; 0x22
 290:	89 a3       	std	Y+33, r24	; 0x21
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x294>
	else if (__tmp > 65535)
 294:	6b a1       	ldd	r22, Y+35	; 0x23
 296:	7c a1       	ldd	r23, Y+36	; 0x24
 298:	8d a1       	ldd	r24, Y+37	; 0x25
 29a:	9e a1       	ldd	r25, Y+38	; 0x26
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	3f ef       	ldi	r19, 0xFF	; 255
 2a0:	4f e7       	ldi	r20, 0x7F	; 127
 2a2:	57 e4       	ldi	r21, 0x47	; 71
 2a4:	0e 94 00 00 	call	0	; 0x0 <main>
 2a8:	18 16       	cp	r1, r24
 2aa:	04 f4       	brge	.+0      	; 0x2ac <main+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2ac:	6f a1       	ldd	r22, Y+39	; 0x27
 2ae:	78 a5       	ldd	r23, Y+40	; 0x28
 2b0:	89 a5       	ldd	r24, Y+41	; 0x29
 2b2:	9a a5       	ldd	r25, Y+42	; 0x2a
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e2       	ldi	r20, 0x20	; 32
 2ba:	51 e4       	ldi	r21, 0x41	; 65
 2bc:	0e 94 00 00 	call	0	; 0x0 <main>
 2c0:	dc 01       	movw	r26, r24
 2c2:	cb 01       	movw	r24, r22
 2c4:	bc 01       	movw	r22, r24
 2c6:	cd 01       	movw	r24, r26
 2c8:	0e 94 00 00 	call	0	; 0x0 <main>
 2cc:	dc 01       	movw	r26, r24
 2ce:	cb 01       	movw	r24, r22
 2d0:	9a a3       	std	Y+34, r25	; 0x22
 2d2:	89 a3       	std	Y+33, r24	; 0x21
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x2d6>
 2d6:	8c e2       	ldi	r24, 0x2C	; 44
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	98 a3       	std	Y+32, r25	; 0x20
 2dc:	8f 8f       	std	Y+31, r24	; 0x1f
 2de:	8f 8d       	ldd	r24, Y+31	; 0x1f
 2e0:	98 a1       	ldd	r25, Y+32	; 0x20
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	01 f4       	brne	.+0      	; 0x2e6 <main+0x2e6>
 2e6:	98 a3       	std	Y+32, r25	; 0x20
 2e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ea:	89 a1       	ldd	r24, Y+33	; 0x21
 2ec:	9a a1       	ldd	r25, Y+34	; 0x22
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	9a a3       	std	Y+34, r25	; 0x22
 2f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f4:	89 a1       	ldd	r24, Y+33	; 0x21
 2f6:	9a a1       	ldd	r25, Y+34	; 0x22
 2f8:	00 97       	sbiw	r24, 0x00	; 0
 2fa:	01 f4       	brne	.+0      	; 0x2fc <main+0x2fc>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2fe:	6b a1       	ldd	r22, Y+35	; 0x23
 300:	7c a1       	ldd	r23, Y+36	; 0x24
 302:	8d a1       	ldd	r24, Y+37	; 0x25
 304:	9e a1       	ldd	r25, Y+38	; 0x26
 306:	0e 94 00 00 	call	0	; 0x0 <main>
 30a:	dc 01       	movw	r26, r24
 30c:	cb 01       	movw	r24, r22
 30e:	9a a3       	std	Y+34, r25	; 0x22
 310:	89 a3       	std	Y+33, r24	; 0x21
 312:	89 a1       	ldd	r24, Y+33	; 0x21
 314:	9a a1       	ldd	r25, Y+34	; 0x22
 316:	9e 8f       	std	Y+30, r25	; 0x1e
 318:	8d 8f       	std	Y+29, r24	; 0x1d
 31a:	8d 8d       	ldd	r24, Y+29	; 0x1d
 31c:	9e 8d       	ldd	r25, Y+30	; 0x1e
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	01 f4       	brne	.+0      	; 0x322 <main+0x322>
 322:	9e 8f       	std	Y+30, r25	; 0x1e
 324:	8d 8f       	std	Y+29, r24	; 0x1d
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	aa ef       	ldi	r26, 0xFA	; 250
 32c:	b3 e4       	ldi	r27, 0x43	; 67
 32e:	89 8f       	std	Y+25, r24	; 0x19
 330:	9a 8f       	std	Y+26, r25	; 0x1a
 332:	ab 8f       	std	Y+27, r26	; 0x1b
 334:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 336:	69 8d       	ldd	r22, Y+25	; 0x19
 338:	7a 8d       	ldd	r23, Y+26	; 0x1a
 33a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 33c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e8       	ldi	r19, 0x80	; 128
 342:	4b e3       	ldi	r20, 0x3B	; 59
 344:	55 e4       	ldi	r21, 0x45	; 69
 346:	0e 94 00 00 	call	0	; 0x0 <main>
 34a:	dc 01       	movw	r26, r24
 34c:	cb 01       	movw	r24, r22
 34e:	8d 8b       	std	Y+21, r24	; 0x15
 350:	9e 8b       	std	Y+22, r25	; 0x16
 352:	af 8b       	std	Y+23, r26	; 0x17
 354:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 356:	6d 89       	ldd	r22, Y+21	; 0x15
 358:	7e 89       	ldd	r23, Y+22	; 0x16
 35a:	8f 89       	ldd	r24, Y+23	; 0x17
 35c:	98 8d       	ldd	r25, Y+24	; 0x18
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	40 e8       	ldi	r20, 0x80	; 128
 364:	5f e3       	ldi	r21, 0x3F	; 63
 366:	0e 94 00 00 	call	0	; 0x0 <main>
 36a:	88 23       	and	r24, r24
 36c:	04 f4       	brge	.+0      	; 0x36e <main+0x36e>
		__ticks = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	9c 8b       	std	Y+20, r25	; 0x14
 374:	8b 8b       	std	Y+19, r24	; 0x13
 376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x378>
	else if (__tmp > 65535)
 378:	6d 89       	ldd	r22, Y+21	; 0x15
 37a:	7e 89       	ldd	r23, Y+22	; 0x16
 37c:	8f 89       	ldd	r24, Y+23	; 0x17
 37e:	98 8d       	ldd	r25, Y+24	; 0x18
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	3f ef       	ldi	r19, 0xFF	; 255
 384:	4f e7       	ldi	r20, 0x7F	; 127
 386:	57 e4       	ldi	r21, 0x47	; 71
 388:	0e 94 00 00 	call	0	; 0x0 <main>
 38c:	18 16       	cp	r1, r24
 38e:	04 f4       	brge	.+0      	; 0x390 <main+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 390:	69 8d       	ldd	r22, Y+25	; 0x19
 392:	7a 8d       	ldd	r23, Y+26	; 0x1a
 394:	8b 8d       	ldd	r24, Y+27	; 0x1b
 396:	9c 8d       	ldd	r25, Y+28	; 0x1c
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	40 e2       	ldi	r20, 0x20	; 32
 39e:	51 e4       	ldi	r21, 0x41	; 65
 3a0:	0e 94 00 00 	call	0	; 0x0 <main>
 3a4:	dc 01       	movw	r26, r24
 3a6:	cb 01       	movw	r24, r22
 3a8:	bc 01       	movw	r22, r24
 3aa:	cd 01       	movw	r24, r26
 3ac:	0e 94 00 00 	call	0	; 0x0 <main>
 3b0:	dc 01       	movw	r26, r24
 3b2:	cb 01       	movw	r24, r22
 3b4:	9c 8b       	std	Y+20, r25	; 0x14
 3b6:	8b 8b       	std	Y+19, r24	; 0x13
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0x3ba>
 3ba:	8c e2       	ldi	r24, 0x2C	; 44
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	9a 8b       	std	Y+18, r25	; 0x12
 3c0:	89 8b       	std	Y+17, r24	; 0x11
 3c2:	89 89       	ldd	r24, Y+17	; 0x11
 3c4:	9a 89       	ldd	r25, Y+18	; 0x12
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	01 f4       	brne	.+0      	; 0x3ca <main+0x3ca>
 3ca:	9a 8b       	std	Y+18, r25	; 0x12
 3cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ce:	8b 89       	ldd	r24, Y+19	; 0x13
 3d0:	9c 89       	ldd	r25, Y+20	; 0x14
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	9c 8b       	std	Y+20, r25	; 0x14
 3d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3d8:	8b 89       	ldd	r24, Y+19	; 0x13
 3da:	9c 89       	ldd	r25, Y+20	; 0x14
 3dc:	00 97       	sbiw	r24, 0x00	; 0
 3de:	01 f4       	brne	.+0      	; 0x3e0 <main+0x3e0>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3e2:	6d 89       	ldd	r22, Y+21	; 0x15
 3e4:	7e 89       	ldd	r23, Y+22	; 0x16
 3e6:	8f 89       	ldd	r24, Y+23	; 0x17
 3e8:	98 8d       	ldd	r25, Y+24	; 0x18
 3ea:	0e 94 00 00 	call	0	; 0x0 <main>
 3ee:	dc 01       	movw	r26, r24
 3f0:	cb 01       	movw	r24, r22
 3f2:	9c 8b       	std	Y+20, r25	; 0x14
 3f4:	8b 8b       	std	Y+19, r24	; 0x13
 3f6:	8b 89       	ldd	r24, Y+19	; 0x13
 3f8:	9c 89       	ldd	r25, Y+20	; 0x14
 3fa:	98 8b       	std	Y+16, r25	; 0x10
 3fc:	8f 87       	std	Y+15, r24	; 0x0f
 3fe:	8f 85       	ldd	r24, Y+15	; 0x0f
 400:	98 89       	ldd	r25, Y+16	; 0x10
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	01 f4       	brne	.+0      	; 0x406 <main+0x406>
 406:	98 8b       	std	Y+16, r25	; 0x10
 408:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	_delay_ms(500);
	_delay_ms(500);
	/*Display stays for 2 second*/

	lcd_command_write(0x01);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 00 00 	call	0	; 0x0 <main>
	/*Clear Screen*/

	/*Start of infinite loop*/
	while(1)
	{
		lcd_command_write(0x80);
 410:	80 e8       	ldi	r24, 0x80	; 128
 412:	0e 94 00 00 	call	0	; 0x0 <main>
		/*Cursor moves to 1st row 1st column of LCD*/

		lcd_string_write("Press any Key");
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 00 00 	call	0	; 0x0 <main>
		/*String display in 1st row of LCD*/

		lcd_command_write(0xc0);
 41e:	80 ec       	ldi	r24, 0xC0	; 192
 420:	0e 94 00 00 	call	0	; 0x0 <main>
		/*Cursor moves to 2nd row 1st column of LCD*/

		lcd_string_write("Key Value: ");
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 00 00 	call	0	; 0x0 <main>
		/*String display in 2nd row of LCD*/

		keypad_value=read_keypad();
 42c:	0e 94 00 00 	call	0	; 0x0 <main>
 430:	fe 01       	movw	r30, r28
 432:	e9 5b       	subi	r30, 0xB9	; 185
 434:	ff 4f       	sbci	r31, 0xFF	; 255
 436:	80 83       	st	Z, r24
		/*Scan's 4X4 keypad and returns pressed key value or default value*/

		/*Checking if any key is pressed or not*/
		if(keypad_value!=0xff)
 438:	fe 01       	movw	r30, r28
 43a:	e9 5b       	subi	r30, 0xB9	; 185
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	80 81       	ld	r24, Z
 440:	8f 3f       	cpi	r24, 0xFF	; 255
 442:	01 f4       	brne	.+0      	; 0x444 <main+0x444>
 444:	00 c0       	rjmp	.+0      	; 0x446 <main+0x446>
		{
			switch(keypad_value)
 446:	fe 01       	movw	r30, r28
 448:	e9 5b       	subi	r30, 0xB9	; 185
 44a:	ff 4f       	sbci	r31, 0xFF	; 255
 44c:	80 81       	ld	r24, Z
 44e:	28 2f       	mov	r18, r24
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	2a 96       	adiw	r28, 0x0a	; 10
 454:	3f af       	std	Y+63, r19	; 0x3f
 456:	2e af       	std	Y+62, r18	; 0x3e
 458:	2a 97       	sbiw	r28, 0x0a	; 10
 45a:	2a 96       	adiw	r28, 0x0a	; 10
 45c:	8e ad       	ldd	r24, Y+62	; 0x3e
 45e:	9f ad       	ldd	r25, Y+63	; 0x3f
 460:	2a 97       	sbiw	r28, 0x0a	; 10
 462:	87 30       	cpi	r24, 0x07	; 7
 464:	91 05       	cpc	r25, r1
 466:	01 f4       	brne	.+0      	; 0x468 <main+0x468>
 468:	00 c0       	rjmp	.+0      	; 0x46a <main+0x46a>
 46a:	2a 96       	adiw	r28, 0x0a	; 10
 46c:	ee ad       	ldd	r30, Y+62	; 0x3e
 46e:	ff ad       	ldd	r31, Y+63	; 0x3f
 470:	2a 97       	sbiw	r28, 0x0a	; 10
 472:	e8 30       	cpi	r30, 0x08	; 8
 474:	f1 05       	cpc	r31, r1
 476:	04 f4       	brge	.+0      	; 0x478 <main+0x478>
 478:	2a 96       	adiw	r28, 0x0a	; 10
 47a:	2e ad       	ldd	r18, Y+62	; 0x3e
 47c:	3f ad       	ldd	r19, Y+63	; 0x3f
 47e:	2a 97       	sbiw	r28, 0x0a	; 10
 480:	23 30       	cpi	r18, 0x03	; 3
 482:	31 05       	cpc	r19, r1
 484:	01 f4       	brne	.+0      	; 0x486 <main+0x486>
 486:	00 c0       	rjmp	.+0      	; 0x488 <main+0x488>
 488:	2a 96       	adiw	r28, 0x0a	; 10
 48a:	8e ad       	ldd	r24, Y+62	; 0x3e
 48c:	9f ad       	ldd	r25, Y+63	; 0x3f
 48e:	2a 97       	sbiw	r28, 0x0a	; 10
 490:	84 30       	cpi	r24, 0x04	; 4
 492:	91 05       	cpc	r25, r1
 494:	04 f4       	brge	.+0      	; 0x496 <main+0x496>
 496:	2a 96       	adiw	r28, 0x0a	; 10
 498:	ee ad       	ldd	r30, Y+62	; 0x3e
 49a:	ff ad       	ldd	r31, Y+63	; 0x3f
 49c:	2a 97       	sbiw	r28, 0x0a	; 10
 49e:	e1 30       	cpi	r30, 0x01	; 1
 4a0:	f1 05       	cpc	r31, r1
 4a2:	01 f4       	brne	.+0      	; 0x4a4 <main+0x4a4>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <main+0x4a6>
 4a6:	2a 96       	adiw	r28, 0x0a	; 10
 4a8:	2e ad       	ldd	r18, Y+62	; 0x3e
 4aa:	3f ad       	ldd	r19, Y+63	; 0x3f
 4ac:	2a 97       	sbiw	r28, 0x0a	; 10
 4ae:	22 30       	cpi	r18, 0x02	; 2
 4b0:	31 05       	cpc	r19, r1
 4b2:	04 f0       	brlt	.+0      	; 0x4b4 <main+0x4b4>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <main+0x4b6>
 4b6:	2a 96       	adiw	r28, 0x0a	; 10
 4b8:	8e ad       	ldd	r24, Y+62	; 0x3e
 4ba:	9f ad       	ldd	r25, Y+63	; 0x3f
 4bc:	2a 97       	sbiw	r28, 0x0a	; 10
 4be:	00 97       	sbiw	r24, 0x00	; 0
 4c0:	01 f4       	brne	.+0      	; 0x4c2 <main+0x4c2>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <main+0x4c4>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <main+0x4c6>
 4c6:	2a 96       	adiw	r28, 0x0a	; 10
 4c8:	ee ad       	ldd	r30, Y+62	; 0x3e
 4ca:	ff ad       	ldd	r31, Y+63	; 0x3f
 4cc:	2a 97       	sbiw	r28, 0x0a	; 10
 4ce:	e5 30       	cpi	r30, 0x05	; 5
 4d0:	f1 05       	cpc	r31, r1
 4d2:	01 f4       	brne	.+0      	; 0x4d4 <main+0x4d4>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <main+0x4d6>
 4d6:	2a 96       	adiw	r28, 0x0a	; 10
 4d8:	2e ad       	ldd	r18, Y+62	; 0x3e
 4da:	3f ad       	ldd	r19, Y+63	; 0x3f
 4dc:	2a 97       	sbiw	r28, 0x0a	; 10
 4de:	26 30       	cpi	r18, 0x06	; 6
 4e0:	31 05       	cpc	r19, r1
 4e2:	04 f0       	brlt	.+0      	; 0x4e4 <main+0x4e4>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <main+0x4e6>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <main+0x4e8>
 4e8:	2a 96       	adiw	r28, 0x0a	; 10
 4ea:	8e ad       	ldd	r24, Y+62	; 0x3e
 4ec:	9f ad       	ldd	r25, Y+63	; 0x3f
 4ee:	2a 97       	sbiw	r28, 0x0a	; 10
 4f0:	8b 30       	cpi	r24, 0x0B	; 11
 4f2:	91 05       	cpc	r25, r1
 4f4:	01 f4       	brne	.+0      	; 0x4f6 <main+0x4f6>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <main+0x4f8>
 4f8:	2a 96       	adiw	r28, 0x0a	; 10
 4fa:	ee ad       	ldd	r30, Y+62	; 0x3e
 4fc:	ff ad       	ldd	r31, Y+63	; 0x3f
 4fe:	2a 97       	sbiw	r28, 0x0a	; 10
 500:	ec 30       	cpi	r30, 0x0C	; 12
 502:	f1 05       	cpc	r31, r1
 504:	04 f4       	brge	.+0      	; 0x506 <main+0x506>
 506:	2a 96       	adiw	r28, 0x0a	; 10
 508:	2e ad       	ldd	r18, Y+62	; 0x3e
 50a:	3f ad       	ldd	r19, Y+63	; 0x3f
 50c:	2a 97       	sbiw	r28, 0x0a	; 10
 50e:	29 30       	cpi	r18, 0x09	; 9
 510:	31 05       	cpc	r19, r1
 512:	01 f4       	brne	.+0      	; 0x514 <main+0x514>
 514:	00 c0       	rjmp	.+0      	; 0x516 <main+0x516>
 516:	2a 96       	adiw	r28, 0x0a	; 10
 518:	8e ad       	ldd	r24, Y+62	; 0x3e
 51a:	9f ad       	ldd	r25, Y+63	; 0x3f
 51c:	2a 97       	sbiw	r28, 0x0a	; 10
 51e:	8a 30       	cpi	r24, 0x0A	; 10
 520:	91 05       	cpc	r25, r1
 522:	04 f0       	brlt	.+0      	; 0x524 <main+0x524>
 524:	00 c0       	rjmp	.+0      	; 0x526 <main+0x526>
 526:	00 c0       	rjmp	.+0      	; 0x528 <main+0x528>
 528:	2a 96       	adiw	r28, 0x0a	; 10
 52a:	ee ad       	ldd	r30, Y+62	; 0x3e
 52c:	ff ad       	ldd	r31, Y+63	; 0x3f
 52e:	2a 97       	sbiw	r28, 0x0a	; 10
 530:	ed 30       	cpi	r30, 0x0D	; 13
 532:	f1 05       	cpc	r31, r1
 534:	01 f4       	brne	.+0      	; 0x536 <main+0x536>
 536:	00 c0       	rjmp	.+0      	; 0x538 <main+0x538>
 538:	2a 96       	adiw	r28, 0x0a	; 10
 53a:	2e ad       	ldd	r18, Y+62	; 0x3e
 53c:	3f ad       	ldd	r19, Y+63	; 0x3f
 53e:	2a 97       	sbiw	r28, 0x0a	; 10
 540:	2d 30       	cpi	r18, 0x0D	; 13
 542:	31 05       	cpc	r19, r1
 544:	04 f4       	brge	.+0      	; 0x546 <main+0x546>
 546:	00 c0       	rjmp	.+0      	; 0x548 <main+0x548>
 548:	2a 96       	adiw	r28, 0x0a	; 10
 54a:	8e ad       	ldd	r24, Y+62	; 0x3e
 54c:	9f ad       	ldd	r25, Y+63	; 0x3f
 54e:	2a 97       	sbiw	r28, 0x0a	; 10
 550:	8e 30       	cpi	r24, 0x0E	; 14
 552:	91 05       	cpc	r25, r1
 554:	01 f4       	brne	.+0      	; 0x556 <main+0x556>
 556:	00 c0       	rjmp	.+0      	; 0x558 <main+0x558>
 558:	2a 96       	adiw	r28, 0x0a	; 10
 55a:	ee ad       	ldd	r30, Y+62	; 0x3e
 55c:	ff ad       	ldd	r31, Y+63	; 0x3f
 55e:	2a 97       	sbiw	r28, 0x0a	; 10
 560:	ef 30       	cpi	r30, 0x0F	; 15
 562:	f1 05       	cpc	r31, r1
 564:	01 f0       	breq	.+0      	; 0x566 <main+0x566>
 566:	00 c0       	rjmp	.+0      	; 0x568 <main+0x568>
			{
			    case 0:
					lcd_data_write('0');
 568:	80 e3       	ldi	r24, 0x30	; 48
 56a:	0e 94 00 00 	call	0	; 0x0 <main>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0x570>

			    	break;
					/*Break statement*/

			    case 1:
					lcd_data_write('1');
 570:	81 e3       	ldi	r24, 0x31	; 49
 572:	0e 94 00 00 	call	0	; 0x0 <main>
 576:	00 c0       	rjmp	.+0      	; 0x578 <main+0x578>

			    	break;
					/*Break statement*/

			    case 2:
					lcd_data_write('2');
 578:	82 e3       	ldi	r24, 0x32	; 50
 57a:	0e 94 00 00 	call	0	; 0x0 <main>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <main+0x580>

			    	break;
					/*Break statement*/

				case 3:
					lcd_data_write('3');
 580:	83 e3       	ldi	r24, 0x33	; 51
 582:	0e 94 00 00 	call	0	; 0x0 <main>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0x588>

			    	break;
					/*Break statement*/

			    case 4:
					lcd_data_write('4');
 588:	84 e3       	ldi	r24, 0x34	; 52
 58a:	0e 94 00 00 	call	0	; 0x0 <main>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <main+0x590>

			    	break;
					/*Break statement*/

			    case 5:
					lcd_data_write('5');
 590:	85 e3       	ldi	r24, 0x35	; 53
 592:	0e 94 00 00 	call	0	; 0x0 <main>
 596:	00 c0       	rjmp	.+0      	; 0x598 <main+0x598>

			    	break;
					/*Break statement*/

			    case 6:
					lcd_data_write('6');
 598:	86 e3       	ldi	r24, 0x36	; 54
 59a:	0e 94 00 00 	call	0	; 0x0 <main>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <main+0x5a0>

			    	break;
					/*Break statement*/

			    case 7:
					lcd_data_write('7');
 5a0:	87 e3       	ldi	r24, 0x37	; 55
 5a2:	0e 94 00 00 	call	0	; 0x0 <main>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <main+0x5a8>

			    	break;
					/*Break statement*/

			    case 8:
					lcd_data_write('8');
 5a8:	88 e3       	ldi	r24, 0x38	; 56
 5aa:	0e 94 00 00 	call	0	; 0x0 <main>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <main+0x5b0>

			    	break;
					/*Break statement*/

			    case 9:
					lcd_data_write('9');
 5b0:	89 e3       	ldi	r24, 0x39	; 57
 5b2:	0e 94 00 00 	call	0	; 0x0 <main>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0x5b8>

			    	break;
					/*Break statement*/

				case 10:
					lcd_data_write('*');
 5b8:	8a e2       	ldi	r24, 0x2A	; 42
 5ba:	0e 94 00 00 	call	0	; 0x0 <main>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <main+0x5c0>

			    	break;
					/*Break statement*/

				case 11:
					lcd_data_write('#');
 5c0:	83 e2       	ldi	r24, 0x23	; 35
 5c2:	0e 94 00 00 	call	0	; 0x0 <main>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <main+0x5c8>

			    	break;
					/*Break statement*/

				case 12:
					lcd_data_write('A');
 5c8:	81 e4       	ldi	r24, 0x41	; 65
 5ca:	0e 94 00 00 	call	0	; 0x0 <main>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <main+0x5d0>

			    	break;
					/*Break statement*/

				case 13:
					lcd_data_write('B');
 5d0:	82 e4       	ldi	r24, 0x42	; 66
 5d2:	0e 94 00 00 	call	0	; 0x0 <main>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <main+0x5d8>

			    	break;
					/*Break statement*/

				case 14:
					lcd_data_write('C');
 5d8:	83 e4       	ldi	r24, 0x43	; 67
 5da:	0e 94 00 00 	call	0	; 0x0 <main>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <main+0x5e0>

			    	break;
					/*Break statement*/;

				case 15:
					lcd_data_write('D');
 5e0:	84 e4       	ldi	r24, 0x44	; 68
 5e2:	0e 94 00 00 	call	0	; 0x0 <main>
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	a8 e4       	ldi	r26, 0x48	; 72
 5ec:	b3 e4       	ldi	r27, 0x43	; 67
 5ee:	8b 87       	std	Y+11, r24	; 0x0b
 5f0:	9c 87       	std	Y+12, r25	; 0x0c
 5f2:	ad 87       	std	Y+13, r26	; 0x0d
 5f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 5f6:	6b 85       	ldd	r22, Y+11	; 0x0b
 5f8:	7c 85       	ldd	r23, Y+12	; 0x0c
 5fa:	8d 85       	ldd	r24, Y+13	; 0x0d
 5fc:	9e 85       	ldd	r25, Y+14	; 0x0e
 5fe:	20 e0       	ldi	r18, 0x00	; 0
 600:	30 e8       	ldi	r19, 0x80	; 128
 602:	4b e3       	ldi	r20, 0x3B	; 59
 604:	55 e4       	ldi	r21, 0x45	; 69
 606:	0e 94 00 00 	call	0	; 0x0 <main>
 60a:	dc 01       	movw	r26, r24
 60c:	cb 01       	movw	r24, r22
 60e:	8f 83       	std	Y+7, r24	; 0x07
 610:	98 87       	std	Y+8, r25	; 0x08
 612:	a9 87       	std	Y+9, r26	; 0x09
 614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 616:	6f 81       	ldd	r22, Y+7	; 0x07
 618:	78 85       	ldd	r23, Y+8	; 0x08
 61a:	89 85       	ldd	r24, Y+9	; 0x09
 61c:	9a 85       	ldd	r25, Y+10	; 0x0a
 61e:	20 e0       	ldi	r18, 0x00	; 0
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	40 e8       	ldi	r20, 0x80	; 128
 624:	5f e3       	ldi	r21, 0x3F	; 63
 626:	0e 94 00 00 	call	0	; 0x0 <main>
 62a:	88 23       	and	r24, r24
 62c:	04 f4       	brge	.+0      	; 0x62e <main+0x62e>
		__ticks = 1;
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	9e 83       	std	Y+6, r25	; 0x06
 634:	8d 83       	std	Y+5, r24	; 0x05
 636:	00 c0       	rjmp	.+0      	; 0x638 <main+0x638>
	else if (__tmp > 65535)
 638:	6f 81       	ldd	r22, Y+7	; 0x07
 63a:	78 85       	ldd	r23, Y+8	; 0x08
 63c:	89 85       	ldd	r24, Y+9	; 0x09
 63e:	9a 85       	ldd	r25, Y+10	; 0x0a
 640:	20 e0       	ldi	r18, 0x00	; 0
 642:	3f ef       	ldi	r19, 0xFF	; 255
 644:	4f e7       	ldi	r20, 0x7F	; 127
 646:	57 e4       	ldi	r21, 0x47	; 71
 648:	0e 94 00 00 	call	0	; 0x0 <main>
 64c:	18 16       	cp	r1, r24
 64e:	04 f4       	brge	.+0      	; 0x650 <main+0x650>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 650:	6b 85       	ldd	r22, Y+11	; 0x0b
 652:	7c 85       	ldd	r23, Y+12	; 0x0c
 654:	8d 85       	ldd	r24, Y+13	; 0x0d
 656:	9e 85       	ldd	r25, Y+14	; 0x0e
 658:	20 e0       	ldi	r18, 0x00	; 0
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	40 e2       	ldi	r20, 0x20	; 32
 65e:	51 e4       	ldi	r21, 0x41	; 65
 660:	0e 94 00 00 	call	0	; 0x0 <main>
 664:	dc 01       	movw	r26, r24
 666:	cb 01       	movw	r24, r22
 668:	bc 01       	movw	r22, r24
 66a:	cd 01       	movw	r24, r26
 66c:	0e 94 00 00 	call	0	; 0x0 <main>
 670:	dc 01       	movw	r26, r24
 672:	cb 01       	movw	r24, r22
 674:	9e 83       	std	Y+6, r25	; 0x06
 676:	8d 83       	std	Y+5, r24	; 0x05
 678:	00 c0       	rjmp	.+0      	; 0x67a <main+0x67a>
 67a:	8c e2       	ldi	r24, 0x2C	; 44
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	9c 83       	std	Y+4, r25	; 0x04
 680:	8b 83       	std	Y+3, r24	; 0x03
 682:	8b 81       	ldd	r24, Y+3	; 0x03
 684:	9c 81       	ldd	r25, Y+4	; 0x04
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	01 f4       	brne	.+0      	; 0x68a <main+0x68a>
 68a:	9c 83       	std	Y+4, r25	; 0x04
 68c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 68e:	8d 81       	ldd	r24, Y+5	; 0x05
 690:	9e 81       	ldd	r25, Y+6	; 0x06
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	9e 83       	std	Y+6, r25	; 0x06
 696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 698:	8d 81       	ldd	r24, Y+5	; 0x05
 69a:	9e 81       	ldd	r25, Y+6	; 0x06
 69c:	00 97       	sbiw	r24, 0x00	; 0
 69e:	01 f4       	brne	.+0      	; 0x6a0 <main+0x6a0>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <main+0x6a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6a2:	6f 81       	ldd	r22, Y+7	; 0x07
 6a4:	78 85       	ldd	r23, Y+8	; 0x08
 6a6:	89 85       	ldd	r24, Y+9	; 0x09
 6a8:	9a 85       	ldd	r25, Y+10	; 0x0a
 6aa:	0e 94 00 00 	call	0	; 0x0 <main>
 6ae:	dc 01       	movw	r26, r24
 6b0:	cb 01       	movw	r24, r22
 6b2:	9e 83       	std	Y+6, r25	; 0x06
 6b4:	8d 83       	std	Y+5, r24	; 0x05
 6b6:	8d 81       	ldd	r24, Y+5	; 0x05
 6b8:	9e 81       	ldd	r25, Y+6	; 0x06
 6ba:	9a 83       	std	Y+2, r25	; 0x02
 6bc:	89 83       	std	Y+1, r24	; 0x01
 6be:	89 81       	ldd	r24, Y+1	; 0x01
 6c0:	9a 81       	ldd	r25, Y+2	; 0x02
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	01 f4       	brne	.+0      	; 0x6c6 <main+0x6c6>
 6c6:	9a 83       	std	Y+2, r25	; 0x02
 6c8:	89 83       	std	Y+1, r24	; 0x01
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <__SREG__+0x68d>

Disassembly of section .text.read_keypad:

00000000 <read_keypad>:
void lcd_command_write( char command);
void lcd_init();
void lcd_string_write( char *string);

int main(void)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	c2 56       	subi	r28, 0x62	; 98
   e:	d0 40       	sbci	r29, 0x00	; 0
  10:	0f b6       	in	r0, 0x3f	; 63
  12:	f8 94       	cli
  14:	de bf       	out	0x3e, r29	; 62
  16:	0f be       	out	0x3f, r0	; 63
  18:	cd bf       	out	0x3d, r28	; 61
	DDRB=0xff;
  1a:	fe 01       	movw	r30, r28
  1c:	ee 59       	subi	r30, 0x9E	; 158
  1e:	ff 4f       	sbci	r31, 0xFF	; 255
  20:	8f ef       	ldi	r24, 0xFF	; 255
	/*All the 8 pins of PortB are declared output (data pins of LCD are connected)*/

	DDRD=0x07;
  22:	80 83       	st	Z, r24
  24:	fe 01       	movw	r30, r28
  26:	ef 59       	subi	r30, 0x9F	; 159
  28:	ff 4f       	sbci	r31, 0xFF	; 255
	/*PD0, PD1 and PD2 pins of PortD are declared output (control pins of LCD are connected)*/

	DDRC=0x0f;
  2a:	8f ef       	ldi	r24, 0xFF	; 255
  2c:	80 83       	st	Z, r24
  2e:	e5 e3       	ldi	r30, 0x35	; 53
  30:	f0 e0       	ldi	r31, 0x00	; 0
	/*PortC's upper 4 bits are declared input and lower 4 bits are declared output(4x4 Keypad is connected)*/

	PORTC=0xff;
  32:	8e ef       	ldi	r24, 0xFE	; 254
  34:	80 83       	st	Z, r24
  36:	fe 01       	movw	r30, r28
  38:	e3 5a       	subi	r30, 0xA3	; 163
	/*PortC's lower 4 bits are given high value and pull-up are enabled for upper 4 bits*/

	unsigned char keypad_value;
	/*Variable declarations*/

	lcd_init();
  3a:	ff 4f       	sbci	r31, 0xFF	; 255
  3c:	80 e0       	ldi	r24, 0x00	; 0
	/*LCD initialization*/

	lcd_string_write("ABLab Solutions");
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	a0 e0       	ldi	r26, 0x00	; 0
  42:	b0 e4       	ldi	r27, 0x40	; 64
  44:	80 83       	st	Z, r24
	/*String display in 1st row of LCD*/

	lcd_command_write(0xc0);
  46:	91 83       	std	Z+1, r25	; 0x01
  48:	a2 83       	std	Z+2, r26	; 0x02
  4a:	b3 83       	std	Z+3, r27	; 0x03
	/*Cursor moves to 2nd row 1st column of LCD*/

	lcd_string_write("www.ablab.in");
  4c:	8e 01       	movw	r16, r28
  4e:	07 5a       	subi	r16, 0xA7	; 167
  50:	1f 4f       	sbci	r17, 0xFF	; 255
  52:	fe 01       	movw	r30, r28
  54:	e3 5a       	subi	r30, 0xA3	; 163
  56:	ff 4f       	sbci	r31, 0xFF	; 255
  58:	60 81       	ld	r22, Z
  5a:	71 81       	ldd	r23, Z+1	; 0x01
  5c:	82 81       	ldd	r24, Z+2	; 0x02
  5e:	93 81       	ldd	r25, Z+3	; 0x03
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	30 e0       	ldi	r19, 0x00	; 0
  64:	40 e8       	ldi	r20, 0x80	; 128
  66:	50 e4       	ldi	r21, 0x40	; 64
  68:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  6c:	dc 01       	movw	r26, r24
  6e:	cb 01       	movw	r24, r22
  70:	f8 01       	movw	r30, r16
  72:	80 83       	st	Z, r24
  74:	91 83       	std	Z+1, r25	; 0x01
  76:	a2 83       	std	Z+2, r26	; 0x02
  78:	b3 83       	std	Z+3, r27	; 0x03
  7a:	fe 01       	movw	r30, r28
  7c:	e7 5a       	subi	r30, 0xA7	; 167
  7e:	ff 4f       	sbci	r31, 0xFF	; 255
  80:	60 81       	ld	r22, Z
  82:	71 81       	ldd	r23, Z+1	; 0x01
  84:	82 81       	ldd	r24, Z+2	; 0x02
  86:	93 81       	ldd	r25, Z+3	; 0x03
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	40 e8       	ldi	r20, 0x80	; 128
  8e:	5f e3       	ldi	r21, 0x3F	; 63
  90:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
  94:	88 23       	and	r24, r24
  96:	04 f4       	brge	.+0      	; 0x98 <read_keypad+0x98>
	if (__tmp < 1.0)
  98:	fe 01       	movw	r30, r28
  9a:	e8 5a       	subi	r30, 0xA8	; 168
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 83       	st	Z, r24
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <read_keypad+0xa4>
  a4:	fe 01       	movw	r30, r28
  a6:	e7 5a       	subi	r30, 0xA7	; 167
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	60 81       	ld	r22, Z
  ac:	71 81       	ldd	r23, Z+1	; 0x01
  ae:	82 81       	ldd	r24, Z+2	; 0x02
  b0:	93 81       	ldd	r25, Z+3	; 0x03
  b2:	20 e0       	ldi	r18, 0x00	; 0
		__ticks = 1;
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	4f e7       	ldi	r20, 0x7F	; 127
  b8:	53 e4       	ldi	r21, 0x43	; 67
  ba:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
	else if (__tmp > 65535)
  be:	18 16       	cp	r1, r24
  c0:	04 f0       	brlt	.+0      	; 0xc2 <read_keypad+0xc2>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <read_keypad+0xc4>
  c4:	fe 01       	movw	r30, r28
  c6:	e3 5a       	subi	r30, 0xA3	; 163
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	60 81       	ld	r22, Z
  cc:	71 81       	ldd	r23, Z+1	; 0x01
  ce:	82 81       	ldd	r24, Z+2	; 0x02
  d0:	93 81       	ldd	r25, Z+3	; 0x03
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	4a e7       	ldi	r20, 0x7A	; 122
  d8:	54 e4       	ldi	r21, 0x44	; 68
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  da:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
  de:	dc 01       	movw	r26, r24
  e0:	cb 01       	movw	r24, r22
  e2:	fe 01       	movw	r30, r28
  e4:	ec 5a       	subi	r30, 0xAC	; 172
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	80 83       	st	Z, r24
  ea:	91 83       	std	Z+1, r25	; 0x01
  ec:	a2 83       	std	Z+2, r26	; 0x02
  ee:	b3 83       	std	Z+3, r27	; 0x03
  f0:	8e 01       	movw	r16, r28
  f2:	00 5b       	subi	r16, 0xB0	; 176
  f4:	1f 4f       	sbci	r17, 0xFF	; 255
  f6:	fe 01       	movw	r30, r28
  f8:	ec 5a       	subi	r30, 0xAC	; 172
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	60 81       	ld	r22, Z
  fe:	71 81       	ldd	r23, Z+1	; 0x01
 100:	82 81       	ldd	r24, Z+2	; 0x02
 102:	93 81       	ldd	r25, Z+3	; 0x03
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e8       	ldi	r19, 0x80	; 128
 108:	4b e3       	ldi	r20, 0x3B	; 59
 10a:	55 e4       	ldi	r21, 0x45	; 69
 10c:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 110:	dc 01       	movw	r26, r24
 112:	cb 01       	movw	r24, r22
 114:	f8 01       	movw	r30, r16
 116:	80 83       	st	Z, r24
 118:	91 83       	std	Z+1, r25	; 0x01
 11a:	a2 83       	std	Z+2, r26	; 0x02
 11c:	b3 83       	std	Z+3, r27	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	fe 01       	movw	r30, r28
 120:	e0 5b       	subi	r30, 0xB0	; 176
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	60 81       	ld	r22, Z
 126:	71 81       	ldd	r23, Z+1	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 128:	82 81       	ldd	r24, Z+2	; 0x02
 12a:	93 81       	ldd	r25, Z+3	; 0x03
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	40 e8       	ldi	r20, 0x80	; 128
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 132:	5f e3       	ldi	r21, 0x3F	; 63
 134:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 138:	88 23       	and	r24, r24
 13a:	04 f4       	brge	.+0      	; 0x13c <read_keypad+0x13c>
 13c:	fe 01       	movw	r30, r28
 13e:	e2 5b       	subi	r30, 0xB2	; 178
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	91 83       	std	Z+1, r25	; 0x01
 148:	80 83       	st	Z, r24
 14a:	00 c0       	rjmp	.+0      	; 0x14c <read_keypad+0x14c>
 14c:	fe 01       	movw	r30, r28
 14e:	e0 5b       	subi	r30, 0xB0	; 176
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	60 81       	ld	r22, Z
 154:	71 81       	ldd	r23, Z+1	; 0x01
 156:	82 81       	ldd	r24, Z+2	; 0x02
 158:	93 81       	ldd	r25, Z+3	; 0x03
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	3f ef       	ldi	r19, 0xFF	; 255
 15e:	4f e7       	ldi	r20, 0x7F	; 127
 160:	57 e4       	ldi	r21, 0x47	; 71
 162:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 166:	18 16       	cp	r1, r24
 168:	04 f0       	brlt	.+0      	; 0x16a <read_keypad+0x16a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <read_keypad+0x16c>
 16c:	fe 01       	movw	r30, r28
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 16e:	ec 5a       	subi	r30, 0xAC	; 172
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	60 81       	ld	r22, Z
 174:	71 81       	ldd	r23, Z+1	; 0x01
 176:	82 81       	ldd	r24, Z+2	; 0x02
 178:	93 81       	ldd	r25, Z+3	; 0x03
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	40 e2       	ldi	r20, 0x20	; 32
 180:	51 e4       	ldi	r21, 0x41	; 65
 182:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 186:	dc 01       	movw	r26, r24
 188:	cb 01       	movw	r24, r22
 18a:	8e 01       	movw	r16, r28
 18c:	02 5b       	subi	r16, 0xB2	; 178
	if (__tmp < 1.0)
 18e:	1f 4f       	sbci	r17, 0xFF	; 255
 190:	bc 01       	movw	r22, r24
 192:	cd 01       	movw	r24, r26
 194:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 198:	dc 01       	movw	r26, r24
 19a:	cb 01       	movw	r24, r22
 19c:	f8 01       	movw	r30, r16
 19e:	91 83       	std	Z+1, r25	; 0x01
 1a0:	80 83       	st	Z, r24
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <read_keypad+0x1a4>
 1a4:	fe 01       	movw	r30, r28
		__ticks = 1;
 1a6:	e4 5b       	subi	r30, 0xB4	; 180
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	8c e2       	ldi	r24, 0x2C	; 44
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	91 83       	std	Z+1, r25	; 0x01
	else if (__tmp > 65535)
 1b0:	80 83       	st	Z, r24
 1b2:	fe 01       	movw	r30, r28
 1b4:	e4 5b       	subi	r30, 0xB4	; 180
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	80 81       	ld	r24, Z
 1ba:	91 81       	ldd	r25, Z+1	; 0x01
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	01 f4       	brne	.+0      	; 0x1c0 <read_keypad+0x1c0>
 1c0:	fe 01       	movw	r30, r28
 1c2:	e4 5b       	subi	r30, 0xB4	; 180
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	91 83       	std	Z+1, r25	; 0x01
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1c8:	80 83       	st	Z, r24
 1ca:	de 01       	movw	r26, r28
 1cc:	a2 5b       	subi	r26, 0xB2	; 178
 1ce:	bf 4f       	sbci	r27, 0xFF	; 255
 1d0:	fe 01       	movw	r30, r28
 1d2:	e2 5b       	subi	r30, 0xB2	; 178
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	80 81       	ld	r24, Z
 1d8:	91 81       	ldd	r25, Z+1	; 0x01
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	11 96       	adiw	r26, 0x01	; 1
 1de:	9c 93       	st	X, r25
 1e0:	8e 93       	st	-X, r24
 1e2:	fe 01       	movw	r30, r28
 1e4:	e2 5b       	subi	r30, 0xB2	; 178
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	80 81       	ld	r24, Z
 1ea:	91 81       	ldd	r25, Z+1	; 0x01
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	01 f4       	brne	.+0      	; 0x1f0 <read_keypad+0x1f0>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <read_keypad+0x1f2>
 1f2:	8e 01       	movw	r16, r28
 1f4:	02 5b       	subi	r16, 0xB2	; 178
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
 1f8:	fe 01       	movw	r30, r28
 1fa:	e0 5b       	subi	r30, 0xB0	; 176
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	60 81       	ld	r22, Z
 200:	71 81       	ldd	r23, Z+1	; 0x01
 202:	82 81       	ldd	r24, Z+2	; 0x02
 204:	93 81       	ldd	r25, Z+3	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 206:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 20a:	dc 01       	movw	r26, r24
 20c:	cb 01       	movw	r24, r22
 20e:	f8 01       	movw	r30, r16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 210:	91 83       	std	Z+1, r25	; 0x01
 212:	80 83       	st	Z, r24
 214:	de 01       	movw	r26, r28
 216:	a6 5b       	subi	r26, 0xB6	; 182
 218:	bf 4f       	sbci	r27, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 21a:	fe 01       	movw	r30, r28
 21c:	e2 5b       	subi	r30, 0xB2	; 178
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	80 81       	ld	r24, Z
 222:	91 81       	ldd	r25, Z+1	; 0x01
 224:	11 96       	adiw	r26, 0x01	; 1
 226:	9c 93       	st	X, r25
 228:	8e 93       	st	-X, r24
 22a:	fe 01       	movw	r30, r28
 22c:	e6 5b       	subi	r30, 0xB6	; 182
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	80 81       	ld	r24, Z
 232:	91 81       	ldd	r25, Z+1	; 0x01
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	01 f4       	brne	.+0      	; 0x238 <read_keypad+0x238>
 238:	fe 01       	movw	r30, r28
 23a:	e6 5b       	subi	r30, 0xB6	; 182
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	91 83       	std	Z+1, r25	; 0x01
 240:	80 83       	st	Z, r24
 242:	00 c0       	rjmp	.+0      	; 0x244 <read_keypad+0x244>
 244:	8e 01       	movw	r16, r28
 246:	08 5a       	subi	r16, 0xA8	; 168
 248:	1f 4f       	sbci	r17, 0xFF	; 255
 24a:	fe 01       	movw	r30, r28
 24c:	e7 5a       	subi	r30, 0xA7	; 167
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	60 81       	ld	r22, Z
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 252:	71 81       	ldd	r23, Z+1	; 0x01
 254:	82 81       	ldd	r24, Z+2	; 0x02
 256:	93 81       	ldd	r25, Z+3	; 0x03
 258:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
 260:	f8 01       	movw	r30, r16
 262:	80 83       	st	Z, r24
 264:	de 01       	movw	r26, r28
 266:	a7 5b       	subi	r26, 0xB7	; 183
 268:	bf 4f       	sbci	r27, 0xFF	; 255
 26a:	fe 01       	movw	r30, r28
 26c:	e8 5a       	subi	r30, 0xA8	; 168
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	80 81       	ld	r24, Z
	if (__tmp < 1.0)
 272:	8c 93       	st	X, r24
 274:	fe 01       	movw	r30, r28
 276:	e7 5b       	subi	r30, 0xB7	; 183
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	80 81       	ld	r24, Z
 27c:	8a 95       	dec	r24
 27e:	01 f4       	brne	.+0      	; 0x280 <read_keypad+0x280>
 280:	fe 01       	movw	r30, r28
 282:	e7 5b       	subi	r30, 0xB7	; 183
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	80 83       	st	Z, r24
 288:	e3 e3       	ldi	r30, 0x33	; 51
		__ticks = 1;
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	fe 01       	movw	r30, r28
 290:	ee 59       	subi	r30, 0x9E	; 158
 292:	ff 4f       	sbci	r31, 0xFF	; 255
	else if (__tmp > 65535)
 294:	80 7f       	andi	r24, 0xF0	; 240
 296:	80 83       	st	Z, r24
 298:	fe 01       	movw	r30, r28
 29a:	ee 59       	subi	r30, 0x9E	; 158
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	80 81       	ld	r24, Z
 2a0:	80 3e       	cpi	r24, 0xE0	; 224
 2a2:	01 f4       	brne	.+0      	; 0x2a4 <read_keypad+0x2a4>
 2a4:	fe 01       	movw	r30, r28
 2a6:	ef 59       	subi	r30, 0x9F	; 159
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	81 e0       	ldi	r24, 0x01	; 1
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2ac:	80 83       	st	Z, r24
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <read_keypad+0x2b0>
 2b0:	fe 01       	movw	r30, r28
 2b2:	ee 59       	subi	r30, 0x9E	; 158
 2b4:	ff 4f       	sbci	r31, 0xFF	; 255
 2b6:	80 81       	ld	r24, Z
 2b8:	80 3d       	cpi	r24, 0xD0	; 208
 2ba:	01 f4       	brne	.+0      	; 0x2bc <read_keypad+0x2bc>
 2bc:	fe 01       	movw	r30, r28
 2be:	ef 59       	subi	r30, 0x9F	; 159
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	80 83       	st	Z, r24
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <read_keypad+0x2c8>
 2c8:	fe 01       	movw	r30, r28
 2ca:	ee 59       	subi	r30, 0x9E	; 158
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	80 81       	ld	r24, Z
 2d0:	80 3b       	cpi	r24, 0xB0	; 176
 2d2:	01 f4       	brne	.+0      	; 0x2d4 <read_keypad+0x2d4>
 2d4:	fe 01       	movw	r30, r28
 2d6:	ef 59       	subi	r30, 0x9F	; 159
 2d8:	ff 4f       	sbci	r31, 0xFF	; 255
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	80 83       	st	Z, r24
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <read_keypad+0x2e0>
 2e0:	fe 01       	movw	r30, r28
 2e2:	ee 59       	subi	r30, 0x9E	; 158
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	80 81       	ld	r24, Z
 2e8:	80 37       	cpi	r24, 0x70	; 112
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ea:	01 f4       	brne	.+0      	; 0x2ec <read_keypad+0x2ec>
 2ec:	fe 01       	movw	r30, r28
 2ee:	ef 59       	subi	r30, 0x9F	; 159
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	8c e0       	ldi	r24, 0x0C	; 12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f4:	80 83       	st	Z, r24
 2f6:	e5 e3       	ldi	r30, 0x35	; 53
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	8d ef       	ldi	r24, 0xFD	; 253
 2fc:	80 83       	st	Z, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2fe:	fe 01       	movw	r30, r28
 300:	eb 5b       	subi	r30, 0xBB	; 187
 302:	ff 4f       	sbci	r31, 0xFF	; 255
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	a0 e0       	ldi	r26, 0x00	; 0
 30a:	b0 e4       	ldi	r27, 0x40	; 64
 30c:	80 83       	st	Z, r24
 30e:	91 83       	std	Z+1, r25	; 0x01
 310:	a2 83       	std	Z+2, r26	; 0x02
 312:	b3 83       	std	Z+3, r27	; 0x03
 314:	8e 01       	movw	r16, r28
 316:	0f 5b       	subi	r16, 0xBF	; 191
 318:	1f 4f       	sbci	r17, 0xFF	; 255
 31a:	fe 01       	movw	r30, r28
 31c:	eb 5b       	subi	r30, 0xBB	; 187
 31e:	ff 4f       	sbci	r31, 0xFF	; 255
 320:	60 81       	ld	r22, Z
 322:	71 81       	ldd	r23, Z+1	; 0x01
 324:	82 81       	ldd	r24, Z+2	; 0x02
 326:	93 81       	ldd	r25, Z+3	; 0x03
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	40 e8       	ldi	r20, 0x80	; 128
 32e:	50 e4       	ldi	r21, 0x40	; 64
 330:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 334:	dc 01       	movw	r26, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 336:	cb 01       	movw	r24, r22
 338:	f8 01       	movw	r30, r16
 33a:	80 83       	st	Z, r24
 33c:	91 83       	std	Z+1, r25	; 0x01
 33e:	a2 83       	std	Z+2, r26	; 0x02
 340:	b3 83       	std	Z+3, r27	; 0x03
 342:	fe 01       	movw	r30, r28
 344:	ef 5b       	subi	r30, 0xBF	; 191
 346:	ff 4f       	sbci	r31, 0xFF	; 255
 348:	60 81       	ld	r22, Z
 34a:	71 81       	ldd	r23, Z+1	; 0x01
 34c:	82 81       	ldd	r24, Z+2	; 0x02
 34e:	93 81       	ldd	r25, Z+3	; 0x03
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
 356:	5f e3       	ldi	r21, 0x3F	; 63
 358:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 35c:	88 23       	and	r24, r24
 35e:	04 f4       	brge	.+0      	; 0x360 <read_keypad+0x360>
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	fe 01       	movw	r30, r28
 364:	e0 5c       	subi	r30, 0xC0	; 192
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	80 83       	st	Z, r24
 36a:	00 c0       	rjmp	.+0      	; 0x36c <read_keypad+0x36c>
 36c:	fe 01       	movw	r30, r28
		__ticks = 1;
 36e:	ef 5b       	subi	r30, 0xBF	; 191
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	60 81       	ld	r22, Z
 374:	71 81       	ldd	r23, Z+1	; 0x01
 376:	82 81       	ldd	r24, Z+2	; 0x02
	else if (__tmp > 65535)
 378:	93 81       	ldd	r25, Z+3	; 0x03
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	4f e7       	ldi	r20, 0x7F	; 127
 380:	53 e4       	ldi	r21, 0x43	; 67
 382:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 386:	18 16       	cp	r1, r24
 388:	04 f0       	brlt	.+0      	; 0x38a <read_keypad+0x38a>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <read_keypad+0x38c>
 38c:	fe 01       	movw	r30, r28
 38e:	eb 5b       	subi	r30, 0xBB	; 187
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 390:	ff 4f       	sbci	r31, 0xFF	; 255
 392:	60 81       	ld	r22, Z
 394:	71 81       	ldd	r23, Z+1	; 0x01
 396:	82 81       	ldd	r24, Z+2	; 0x02
 398:	93 81       	ldd	r25, Z+3	; 0x03
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	4a e7       	ldi	r20, 0x7A	; 122
 3a0:	54 e4       	ldi	r21, 0x44	; 68
 3a2:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 3a6:	dc 01       	movw	r26, r24
 3a8:	cb 01       	movw	r24, r22
 3aa:	8c af       	std	Y+60, r24	; 0x3c
 3ac:	9d af       	std	Y+61, r25	; 0x3d
 3ae:	ae af       	std	Y+62, r26	; 0x3e
 3b0:	bf af       	std	Y+63, r27	; 0x3f
 3b2:	6c ad       	ldd	r22, Y+60	; 0x3c
 3b4:	7d ad       	ldd	r23, Y+61	; 0x3d
 3b6:	8e ad       	ldd	r24, Y+62	; 0x3e
 3b8:	9f ad       	ldd	r25, Y+63	; 0x3f
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e8       	ldi	r19, 0x80	; 128
 3be:	4b e3       	ldi	r20, 0x3B	; 59
 3c0:	55 e4       	ldi	r21, 0x45	; 69
 3c2:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 3c6:	dc 01       	movw	r26, r24
 3c8:	cb 01       	movw	r24, r22
 3ca:	88 af       	std	Y+56, r24	; 0x38
 3cc:	99 af       	std	Y+57, r25	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ce:	aa af       	std	Y+58, r26	; 0x3a
 3d0:	bb af       	std	Y+59, r27	; 0x3b
 3d2:	68 ad       	ldd	r22, Y+56	; 0x38
 3d4:	79 ad       	ldd	r23, Y+57	; 0x39
 3d6:	8a ad       	ldd	r24, Y+58	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3d8:	9b ad       	ldd	r25, Y+59	; 0x3b
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	40 e8       	ldi	r20, 0x80	; 128
 3e0:	5f e3       	ldi	r21, 0x3F	; 63
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3e2:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 3e6:	88 23       	and	r24, r24
 3e8:	04 f4       	brge	.+0      	; 0x3ea <read_keypad+0x3ea>
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	9f ab       	std	Y+55, r25	; 0x37
 3f0:	8e ab       	std	Y+54, r24	; 0x36
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <read_keypad+0x3f4>
 3f4:	68 ad       	ldd	r22, Y+56	; 0x38
 3f6:	79 ad       	ldd	r23, Y+57	; 0x39
 3f8:	8a ad       	ldd	r24, Y+58	; 0x3a
 3fa:	9b ad       	ldd	r25, Y+59	; 0x3b
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	3f ef       	ldi	r19, 0xFF	; 255
 400:	4f e7       	ldi	r20, 0x7F	; 127
 402:	57 e4       	ldi	r21, 0x47	; 71
 404:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 408:	18 16       	cp	r1, r24
	_delay_ms(500);
	_delay_ms(500);
	_delay_ms(500);
	/*Display stays for 2 second*/

	lcd_command_write(0x01);
 40a:	04 f4       	brge	.+0      	; 0x40c <read_keypad+0x40c>
 40c:	6c ad       	ldd	r22, Y+60	; 0x3c
 40e:	7d ad       	ldd	r23, Y+61	; 0x3d
	/*Clear Screen*/

	/*Start of infinite loop*/
	while(1)
	{
		lcd_command_write(0x80);
 410:	8e ad       	ldd	r24, Y+62	; 0x3e
 412:	9f ad       	ldd	r25, Y+63	; 0x3f
 414:	20 e0       	ldi	r18, 0x00	; 0
		/*Cursor moves to 1st row 1st column of LCD*/

		lcd_string_write("Press any Key");
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	40 e2       	ldi	r20, 0x20	; 32
 41a:	51 e4       	ldi	r21, 0x41	; 65
 41c:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
		/*String display in 1st row of LCD*/

		lcd_command_write(0xc0);
 420:	dc 01       	movw	r26, r24
 422:	cb 01       	movw	r24, r22
		/*Cursor moves to 2nd row 1st column of LCD*/

		lcd_string_write("Key Value: ");
 424:	bc 01       	movw	r22, r24
 426:	cd 01       	movw	r24, r26
 428:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
		/*String display in 2nd row of LCD*/

		keypad_value=read_keypad();
 42c:	dc 01       	movw	r26, r24
 42e:	cb 01       	movw	r24, r22
 430:	9f ab       	std	Y+55, r25	; 0x37
 432:	8e ab       	std	Y+54, r24	; 0x36
 434:	00 c0       	rjmp	.+0      	; 0x436 <read_keypad+0x436>
 436:	8c e2       	ldi	r24, 0x2C	; 44
		/*Scan's 4X4 keypad and returns pressed key value or default value*/

		/*Checking if any key is pressed or not*/
		if(keypad_value!=0xff)
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	9d ab       	std	Y+53, r25	; 0x35
 43c:	8c ab       	std	Y+52, r24	; 0x34
 43e:	8c a9       	ldd	r24, Y+52	; 0x34
 440:	9d a9       	ldd	r25, Y+53	; 0x35
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	01 f4       	brne	.+0      	; 0x446 <read_keypad+0x446>
		{
			switch(keypad_value)
 446:	9d ab       	std	Y+53, r25	; 0x35
 448:	8c ab       	std	Y+52, r24	; 0x34
 44a:	8e a9       	ldd	r24, Y+54	; 0x36
 44c:	9f a9       	ldd	r25, Y+55	; 0x37
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	9f ab       	std	Y+55, r25	; 0x37
 452:	8e ab       	std	Y+54, r24	; 0x36
 454:	8e a9       	ldd	r24, Y+54	; 0x36
 456:	9f a9       	ldd	r25, Y+55	; 0x37
 458:	00 97       	sbiw	r24, 0x00	; 0
 45a:	01 f4       	brne	.+0      	; 0x45c <read_keypad+0x45c>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <read_keypad+0x45e>
 45e:	68 ad       	ldd	r22, Y+56	; 0x38
 460:	79 ad       	ldd	r23, Y+57	; 0x39
 462:	8a ad       	ldd	r24, Y+58	; 0x3a
 464:	9b ad       	ldd	r25, Y+59	; 0x3b
 466:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 46a:	dc 01       	movw	r26, r24
 46c:	cb 01       	movw	r24, r22
 46e:	9f ab       	std	Y+55, r25	; 0x37
 470:	8e ab       	std	Y+54, r24	; 0x36
 472:	8e a9       	ldd	r24, Y+54	; 0x36
 474:	9f a9       	ldd	r25, Y+55	; 0x37
 476:	9b ab       	std	Y+51, r25	; 0x33
 478:	8a ab       	std	Y+50, r24	; 0x32
 47a:	8a a9       	ldd	r24, Y+50	; 0x32
 47c:	9b a9       	ldd	r25, Y+51	; 0x33
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	01 f4       	brne	.+0      	; 0x482 <read_keypad+0x482>
 482:	9b ab       	std	Y+51, r25	; 0x33
 484:	8a ab       	std	Y+50, r24	; 0x32
 486:	00 c0       	rjmp	.+0      	; 0x488 <read_keypad+0x488>
 488:	fe 01       	movw	r30, r28
 48a:	ef 5b       	subi	r30, 0xBF	; 191
 48c:	ff 4f       	sbci	r31, 0xFF	; 255
 48e:	60 81       	ld	r22, Z
 490:	71 81       	ldd	r23, Z+1	; 0x01
 492:	82 81       	ldd	r24, Z+2	; 0x02
 494:	93 81       	ldd	r25, Z+3	; 0x03
 496:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 49a:	dc 01       	movw	r26, r24
 49c:	cb 01       	movw	r24, r22
 49e:	fe 01       	movw	r30, r28
 4a0:	e0 5c       	subi	r30, 0xC0	; 192
 4a2:	ff 4f       	sbci	r31, 0xFF	; 255
 4a4:	80 83       	st	Z, r24
 4a6:	fe 01       	movw	r30, r28
 4a8:	e0 5c       	subi	r30, 0xC0	; 192
 4aa:	ff 4f       	sbci	r31, 0xFF	; 255
 4ac:	80 81       	ld	r24, Z
 4ae:	89 ab       	std	Y+49, r24	; 0x31
 4b0:	89 a9       	ldd	r24, Y+49	; 0x31
 4b2:	8a 95       	dec	r24
 4b4:	01 f4       	brne	.+0      	; 0x4b6 <read_keypad+0x4b6>
 4b6:	89 ab       	std	Y+49, r24	; 0x31
 4b8:	e3 e3       	ldi	r30, 0x33	; 51
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	fe 01       	movw	r30, r28
 4c0:	ee 59       	subi	r30, 0x9E	; 158
 4c2:	ff 4f       	sbci	r31, 0xFF	; 255
 4c4:	80 7f       	andi	r24, 0xF0	; 240
 4c6:	80 83       	st	Z, r24
 4c8:	fe 01       	movw	r30, r28
 4ca:	ee 59       	subi	r30, 0x9E	; 158
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	80 81       	ld	r24, Z
 4d0:	80 3e       	cpi	r24, 0xE0	; 224
 4d2:	01 f4       	brne	.+0      	; 0x4d4 <read_keypad+0x4d4>
 4d4:	fe 01       	movw	r30, r28
 4d6:	ef 59       	subi	r30, 0x9F	; 159
 4d8:	ff 4f       	sbci	r31, 0xFF	; 255
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	80 83       	st	Z, r24
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <read_keypad+0x4e0>
 4e0:	fe 01       	movw	r30, r28
 4e2:	ee 59       	subi	r30, 0x9E	; 158
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	80 81       	ld	r24, Z
 4e8:	80 3d       	cpi	r24, 0xD0	; 208
 4ea:	01 f4       	brne	.+0      	; 0x4ec <read_keypad+0x4ec>
 4ec:	fe 01       	movw	r30, r28
 4ee:	ef 59       	subi	r30, 0x9F	; 159
 4f0:	ff 4f       	sbci	r31, 0xFF	; 255
 4f2:	85 e0       	ldi	r24, 0x05	; 5
 4f4:	80 83       	st	Z, r24
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <read_keypad+0x4f8>
 4f8:	fe 01       	movw	r30, r28
 4fa:	ee 59       	subi	r30, 0x9E	; 158
 4fc:	ff 4f       	sbci	r31, 0xFF	; 255
 4fe:	80 81       	ld	r24, Z
 500:	80 3b       	cpi	r24, 0xB0	; 176
 502:	01 f4       	brne	.+0      	; 0x504 <read_keypad+0x504>
 504:	fe 01       	movw	r30, r28
 506:	ef 59       	subi	r30, 0x9F	; 159
 508:	ff 4f       	sbci	r31, 0xFF	; 255
 50a:	86 e0       	ldi	r24, 0x06	; 6
 50c:	80 83       	st	Z, r24
 50e:	00 c0       	rjmp	.+0      	; 0x510 <read_keypad+0x510>
 510:	fe 01       	movw	r30, r28
 512:	ee 59       	subi	r30, 0x9E	; 158
 514:	ff 4f       	sbci	r31, 0xFF	; 255
 516:	80 81       	ld	r24, Z
 518:	80 37       	cpi	r24, 0x70	; 112
 51a:	01 f4       	brne	.+0      	; 0x51c <read_keypad+0x51c>
 51c:	fe 01       	movw	r30, r28
 51e:	ef 59       	subi	r30, 0x9F	; 159
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	8d e0       	ldi	r24, 0x0D	; 13
 524:	80 83       	st	Z, r24
 526:	e5 e3       	ldi	r30, 0x35	; 53
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	8b ef       	ldi	r24, 0xFB	; 251
 52c:	80 83       	st	Z, r24
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	a0 e0       	ldi	r26, 0x00	; 0
 534:	b0 e4       	ldi	r27, 0x40	; 64
 536:	8d a7       	std	Y+45, r24	; 0x2d
 538:	9e a7       	std	Y+46, r25	; 0x2e
 53a:	af a7       	std	Y+47, r26	; 0x2f
 53c:	b8 ab       	std	Y+48, r27	; 0x30
 53e:	6d a5       	ldd	r22, Y+45	; 0x2d
 540:	7e a5       	ldd	r23, Y+46	; 0x2e
 542:	8f a5       	ldd	r24, Y+47	; 0x2f
 544:	98 a9       	ldd	r25, Y+48	; 0x30
 546:	20 e0       	ldi	r18, 0x00	; 0
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	40 e8       	ldi	r20, 0x80	; 128
 54c:	50 e4       	ldi	r21, 0x40	; 64
 54e:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 552:	dc 01       	movw	r26, r24
 554:	cb 01       	movw	r24, r22
 556:	89 a7       	std	Y+41, r24	; 0x29
 558:	9a a7       	std	Y+42, r25	; 0x2a
 55a:	ab a7       	std	Y+43, r26	; 0x2b
 55c:	bc a7       	std	Y+44, r27	; 0x2c
 55e:	69 a5       	ldd	r22, Y+41	; 0x29
 560:	7a a5       	ldd	r23, Y+42	; 0x2a
 562:	8b a5       	ldd	r24, Y+43	; 0x2b
 564:	9c a5       	ldd	r25, Y+44	; 0x2c
 566:	20 e0       	ldi	r18, 0x00	; 0
			{
			    case 0:
					lcd_data_write('0');
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	40 e8       	ldi	r20, 0x80	; 128
 56c:	5f e3       	ldi	r21, 0x3F	; 63
 56e:	0e 94 00 00 	call	0	; 0x0 <read_keypad>

			    	break;
					/*Break statement*/

			    case 1:
					lcd_data_write('1');
 572:	88 23       	and	r24, r24
 574:	04 f4       	brge	.+0      	; 0x576 <read_keypad+0x576>
 576:	81 e0       	ldi	r24, 0x01	; 1

			    	break;
					/*Break statement*/

			    case 2:
					lcd_data_write('2');
 578:	88 a7       	std	Y+40, r24	; 0x28
 57a:	00 c0       	rjmp	.+0      	; 0x57c <read_keypad+0x57c>
 57c:	69 a5       	ldd	r22, Y+41	; 0x29
 57e:	7a a5       	ldd	r23, Y+42	; 0x2a

			    	break;
					/*Break statement*/

				case 3:
					lcd_data_write('3');
 580:	8b a5       	ldd	r24, Y+43	; 0x2b
 582:	9c a5       	ldd	r25, Y+44	; 0x2c
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	30 e0       	ldi	r19, 0x00	; 0

			    	break;
					/*Break statement*/

			    case 4:
					lcd_data_write('4');
 588:	4f e7       	ldi	r20, 0x7F	; 127
 58a:	53 e4       	ldi	r21, 0x43	; 67
 58c:	0e 94 00 00 	call	0	; 0x0 <read_keypad>

			    	break;
					/*Break statement*/

			    case 5:
					lcd_data_write('5');
 590:	18 16       	cp	r1, r24
 592:	04 f0       	brlt	.+0      	; 0x594 <read_keypad+0x594>
 594:	00 c0       	rjmp	.+0      	; 0x596 <read_keypad+0x596>
 596:	6d a5       	ldd	r22, Y+45	; 0x2d

			    	break;
					/*Break statement*/

			    case 6:
					lcd_data_write('6');
 598:	7e a5       	ldd	r23, Y+46	; 0x2e
 59a:	8f a5       	ldd	r24, Y+47	; 0x2f
 59c:	98 a9       	ldd	r25, Y+48	; 0x30
 59e:	20 e0       	ldi	r18, 0x00	; 0

			    	break;
					/*Break statement*/

			    case 7:
					lcd_data_write('7');
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	4a e7       	ldi	r20, 0x7A	; 122
 5a4:	54 e4       	ldi	r21, 0x44	; 68
 5a6:	0e 94 00 00 	call	0	; 0x0 <read_keypad>

			    	break;
					/*Break statement*/

			    case 8:
					lcd_data_write('8');
 5aa:	dc 01       	movw	r26, r24
 5ac:	cb 01       	movw	r24, r22
 5ae:	8c a3       	std	Y+36, r24	; 0x24

			    	break;
					/*Break statement*/

			    case 9:
					lcd_data_write('9');
 5b0:	9d a3       	std	Y+37, r25	; 0x25
 5b2:	ae a3       	std	Y+38, r26	; 0x26
 5b4:	bf a3       	std	Y+39, r27	; 0x27
 5b6:	6c a1       	ldd	r22, Y+36	; 0x24

			    	break;
					/*Break statement*/

				case 10:
					lcd_data_write('*');
 5b8:	7d a1       	ldd	r23, Y+37	; 0x25
 5ba:	8e a1       	ldd	r24, Y+38	; 0x26
 5bc:	9f a1       	ldd	r25, Y+39	; 0x27
 5be:	20 e0       	ldi	r18, 0x00	; 0

			    	break;
					/*Break statement*/

				case 11:
					lcd_data_write('#');
 5c0:	30 e8       	ldi	r19, 0x80	; 128
 5c2:	4b e3       	ldi	r20, 0x3B	; 59
 5c4:	55 e4       	ldi	r21, 0x45	; 69
 5c6:	0e 94 00 00 	call	0	; 0x0 <read_keypad>

			    	break;
					/*Break statement*/

				case 12:
					lcd_data_write('A');
 5ca:	dc 01       	movw	r26, r24
 5cc:	cb 01       	movw	r24, r22
 5ce:	88 a3       	std	Y+32, r24	; 0x20

			    	break;
					/*Break statement*/

				case 13:
					lcd_data_write('B');
 5d0:	99 a3       	std	Y+33, r25	; 0x21
 5d2:	aa a3       	std	Y+34, r26	; 0x22
 5d4:	bb a3       	std	Y+35, r27	; 0x23
 5d6:	68 a1       	ldd	r22, Y+32	; 0x20

			    	break;
					/*Break statement*/

				case 14:
					lcd_data_write('C');
 5d8:	79 a1       	ldd	r23, Y+33	; 0x21
 5da:	8a a1       	ldd	r24, Y+34	; 0x22
 5dc:	9b a1       	ldd	r25, Y+35	; 0x23
 5de:	20 e0       	ldi	r18, 0x00	; 0

			    	break;
					/*Break statement*/;

				case 15:
					lcd_data_write('D');
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	40 e8       	ldi	r20, 0x80	; 128
 5e4:	5f e3       	ldi	r21, 0x3F	; 63
 5e6:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 5ea:	88 23       	and	r24, r24
 5ec:	04 f4       	brge	.+0      	; 0x5ee <read_keypad+0x5ee>
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	9f 8f       	std	Y+31, r25	; 0x1f
 5f4:	8e 8f       	std	Y+30, r24	; 0x1e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <read_keypad+0x5f8>
 5f8:	68 a1       	ldd	r22, Y+32	; 0x20
 5fa:	79 a1       	ldd	r23, Y+33	; 0x21
 5fc:	8a a1       	ldd	r24, Y+34	; 0x22
 5fe:	9b a1       	ldd	r25, Y+35	; 0x23
 600:	20 e0       	ldi	r18, 0x00	; 0
 602:	3f ef       	ldi	r19, 0xFF	; 255
 604:	4f e7       	ldi	r20, 0x7F	; 127
 606:	57 e4       	ldi	r21, 0x47	; 71
 608:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 60c:	18 16       	cp	r1, r24
 60e:	04 f4       	brge	.+0      	; 0x610 <read_keypad+0x610>
 610:	6c a1       	ldd	r22, Y+36	; 0x24
 612:	7d a1       	ldd	r23, Y+37	; 0x25
 614:	8e a1       	ldd	r24, Y+38	; 0x26
	if (__tmp < 1.0)
 616:	9f a1       	ldd	r25, Y+39	; 0x27
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	40 e2       	ldi	r20, 0x20	; 32
 61e:	51 e4       	ldi	r21, 0x41	; 65
 620:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 624:	dc 01       	movw	r26, r24
 626:	cb 01       	movw	r24, r22
 628:	bc 01       	movw	r22, r24
 62a:	cd 01       	movw	r24, r26
 62c:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
		__ticks = 1;
 630:	dc 01       	movw	r26, r24
 632:	cb 01       	movw	r24, r22
 634:	9f 8f       	std	Y+31, r25	; 0x1f
 636:	8e 8f       	std	Y+30, r24	; 0x1e
	else if (__tmp > 65535)
 638:	00 c0       	rjmp	.+0      	; 0x63a <read_keypad+0x63a>
 63a:	8c e2       	ldi	r24, 0x2C	; 44
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	9d 8f       	std	Y+29, r25	; 0x1d
 640:	8c 8f       	std	Y+28, r24	; 0x1c
 642:	8c 8d       	ldd	r24, Y+28	; 0x1c
 644:	9d 8d       	ldd	r25, Y+29	; 0x1d
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	01 f4       	brne	.+0      	; 0x64a <read_keypad+0x64a>
 64a:	9d 8f       	std	Y+29, r25	; 0x1d
 64c:	8c 8f       	std	Y+28, r24	; 0x1c
 64e:	8e 8d       	ldd	r24, Y+30	; 0x1e
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 650:	9f 8d       	ldd	r25, Y+31	; 0x1f
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	9f 8f       	std	Y+31, r25	; 0x1f
 656:	8e 8f       	std	Y+30, r24	; 0x1e
 658:	8e 8d       	ldd	r24, Y+30	; 0x1e
 65a:	9f 8d       	ldd	r25, Y+31	; 0x1f
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	01 f4       	brne	.+0      	; 0x660 <read_keypad+0x660>
 660:	00 c0       	rjmp	.+0      	; 0x662 <read_keypad+0x662>
 662:	68 a1       	ldd	r22, Y+32	; 0x20
 664:	79 a1       	ldd	r23, Y+33	; 0x21
 666:	8a a1       	ldd	r24, Y+34	; 0x22
 668:	9b a1       	ldd	r25, Y+35	; 0x23
 66a:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 66e:	dc 01       	movw	r26, r24
 670:	cb 01       	movw	r24, r22
 672:	9f 8f       	std	Y+31, r25	; 0x1f
 674:	8e 8f       	std	Y+30, r24	; 0x1e
 676:	8e 8d       	ldd	r24, Y+30	; 0x1e
 678:	9f 8d       	ldd	r25, Y+31	; 0x1f
 67a:	9b 8f       	std	Y+27, r25	; 0x1b
 67c:	8a 8f       	std	Y+26, r24	; 0x1a
 67e:	8a 8d       	ldd	r24, Y+26	; 0x1a
 680:	9b 8d       	ldd	r25, Y+27	; 0x1b
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	01 f4       	brne	.+0      	; 0x686 <read_keypad+0x686>
 686:	9b 8f       	std	Y+27, r25	; 0x1b
 688:	8a 8f       	std	Y+26, r24	; 0x1a
 68a:	00 c0       	rjmp	.+0      	; 0x68c <read_keypad+0x68c>
 68c:	69 a5       	ldd	r22, Y+41	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 68e:	7a a5       	ldd	r23, Y+42	; 0x2a
 690:	8b a5       	ldd	r24, Y+43	; 0x2b
 692:	9c a5       	ldd	r25, Y+44	; 0x2c
 694:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 698:	dc 01       	movw	r26, r24
 69a:	cb 01       	movw	r24, r22
 69c:	88 a7       	std	Y+40, r24	; 0x28
 69e:	88 a5       	ldd	r24, Y+40	; 0x28
 6a0:	89 8f       	std	Y+25, r24	; 0x19
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6a2:	89 8d       	ldd	r24, Y+25	; 0x19
 6a4:	8a 95       	dec	r24
 6a6:	01 f4       	brne	.+0      	; 0x6a8 <read_keypad+0x6a8>
 6a8:	89 8f       	std	Y+25, r24	; 0x19
 6aa:	e3 e3       	ldi	r30, 0x33	; 51
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	80 81       	ld	r24, Z
 6b0:	fe 01       	movw	r30, r28
 6b2:	ee 59       	subi	r30, 0x9E	; 158
 6b4:	ff 4f       	sbci	r31, 0xFF	; 255
 6b6:	80 7f       	andi	r24, 0xF0	; 240
 6b8:	80 83       	st	Z, r24
 6ba:	fe 01       	movw	r30, r28
 6bc:	ee 59       	subi	r30, 0x9E	; 158
 6be:	ff 4f       	sbci	r31, 0xFF	; 255
 6c0:	80 81       	ld	r24, Z
 6c2:	80 3e       	cpi	r24, 0xE0	; 224
 6c4:	01 f4       	brne	.+0      	; 0x6c6 <read_keypad+0x6c6>
 6c6:	fe 01       	movw	r30, r28
 6c8:	ef 59       	subi	r30, 0x9F	; 159
 6ca:	ff 4f       	sbci	r31, 0xFF	; 255
 6cc:	87 e0       	ldi	r24, 0x07	; 7
 6ce:	80 83       	st	Z, r24
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <read_keypad+0x6d2>
 6d2:	fe 01       	movw	r30, r28
 6d4:	ee 59       	subi	r30, 0x9E	; 158
 6d6:	ff 4f       	sbci	r31, 0xFF	; 255
 6d8:	80 81       	ld	r24, Z
 6da:	80 3d       	cpi	r24, 0xD0	; 208
 6dc:	01 f4       	brne	.+0      	; 0x6de <read_keypad+0x6de>
 6de:	fe 01       	movw	r30, r28
 6e0:	ef 59       	subi	r30, 0x9F	; 159
 6e2:	ff 4f       	sbci	r31, 0xFF	; 255
 6e4:	88 e0       	ldi	r24, 0x08	; 8
 6e6:	80 83       	st	Z, r24
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <read_keypad+0x6ea>
 6ea:	fe 01       	movw	r30, r28
 6ec:	ee 59       	subi	r30, 0x9E	; 158
 6ee:	ff 4f       	sbci	r31, 0xFF	; 255
 6f0:	80 81       	ld	r24, Z
 6f2:	80 3b       	cpi	r24, 0xB0	; 176
 6f4:	01 f4       	brne	.+0      	; 0x6f6 <read_keypad+0x6f6>
 6f6:	fe 01       	movw	r30, r28
 6f8:	ef 59       	subi	r30, 0x9F	; 159
 6fa:	ff 4f       	sbci	r31, 0xFF	; 255
 6fc:	89 e0       	ldi	r24, 0x09	; 9
 6fe:	80 83       	st	Z, r24
 700:	00 c0       	rjmp	.+0      	; 0x702 <read_keypad+0x702>
 702:	fe 01       	movw	r30, r28
 704:	ee 59       	subi	r30, 0x9E	; 158
 706:	ff 4f       	sbci	r31, 0xFF	; 255
 708:	80 81       	ld	r24, Z
 70a:	80 37       	cpi	r24, 0x70	; 112
 70c:	01 f4       	brne	.+0      	; 0x70e <read_keypad+0x70e>
 70e:	fe 01       	movw	r30, r28
 710:	ef 59       	subi	r30, 0x9F	; 159
 712:	ff 4f       	sbci	r31, 0xFF	; 255
 714:	8e e0       	ldi	r24, 0x0E	; 14
 716:	80 83       	st	Z, r24
 718:	e5 e3       	ldi	r30, 0x35	; 53
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	87 ef       	ldi	r24, 0xF7	; 247
 71e:	80 83       	st	Z, r24
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	a0 e0       	ldi	r26, 0x00	; 0
 726:	b0 e4       	ldi	r27, 0x40	; 64
 728:	8d 8b       	std	Y+21, r24	; 0x15
 72a:	9e 8b       	std	Y+22, r25	; 0x16
 72c:	af 8b       	std	Y+23, r26	; 0x17
 72e:	b8 8f       	std	Y+24, r27	; 0x18
 730:	6d 89       	ldd	r22, Y+21	; 0x15
 732:	7e 89       	ldd	r23, Y+22	; 0x16
 734:	8f 89       	ldd	r24, Y+23	; 0x17
 736:	98 8d       	ldd	r25, Y+24	; 0x18
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	40 e8       	ldi	r20, 0x80	; 128
 73e:	50 e4       	ldi	r21, 0x40	; 64
 740:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 744:	dc 01       	movw	r26, r24
 746:	cb 01       	movw	r24, r22
 748:	89 8b       	std	Y+17, r24	; 0x11
 74a:	9a 8b       	std	Y+18, r25	; 0x12
 74c:	ab 8b       	std	Y+19, r26	; 0x13
 74e:	bc 8b       	std	Y+20, r27	; 0x14
 750:	69 89       	ldd	r22, Y+17	; 0x11
 752:	7a 89       	ldd	r23, Y+18	; 0x12
 754:	8b 89       	ldd	r24, Y+19	; 0x13
 756:	9c 89       	ldd	r25, Y+20	; 0x14
 758:	20 e0       	ldi	r18, 0x00	; 0
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	40 e8       	ldi	r20, 0x80	; 128
 75e:	5f e3       	ldi	r21, 0x3F	; 63
 760:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 764:	88 23       	and	r24, r24
 766:	04 f4       	brge	.+0      	; 0x768 <read_keypad+0x768>
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	88 8b       	std	Y+16, r24	; 0x10
 76c:	00 c0       	rjmp	.+0      	; 0x76e <read_keypad+0x76e>
 76e:	69 89       	ldd	r22, Y+17	; 0x11
 770:	7a 89       	ldd	r23, Y+18	; 0x12
 772:	8b 89       	ldd	r24, Y+19	; 0x13
 774:	9c 89       	ldd	r25, Y+20	; 0x14
 776:	20 e0       	ldi	r18, 0x00	; 0
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	4f e7       	ldi	r20, 0x7F	; 127
 77c:	53 e4       	ldi	r21, 0x43	; 67
 77e:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 782:	18 16       	cp	r1, r24
 784:	04 f0       	brlt	.+0      	; 0x786 <read_keypad+0x786>
 786:	00 c0       	rjmp	.+0      	; 0x788 <read_keypad+0x788>
 788:	6d 89       	ldd	r22, Y+21	; 0x15
 78a:	7e 89       	ldd	r23, Y+22	; 0x16
 78c:	8f 89       	ldd	r24, Y+23	; 0x17
 78e:	98 8d       	ldd	r25, Y+24	; 0x18
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	4a e7       	ldi	r20, 0x7A	; 122
 796:	54 e4       	ldi	r21, 0x44	; 68
 798:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 79c:	dc 01       	movw	r26, r24
 79e:	cb 01       	movw	r24, r22
 7a0:	8c 87       	std	Y+12, r24	; 0x0c
 7a2:	9d 87       	std	Y+13, r25	; 0x0d
 7a4:	ae 87       	std	Y+14, r26	; 0x0e
 7a6:	bf 87       	std	Y+15, r27	; 0x0f
 7a8:	6c 85       	ldd	r22, Y+12	; 0x0c
 7aa:	7d 85       	ldd	r23, Y+13	; 0x0d
 7ac:	8e 85       	ldd	r24, Y+14	; 0x0e
 7ae:	9f 85       	ldd	r25, Y+15	; 0x0f
 7b0:	20 e0       	ldi	r18, 0x00	; 0
 7b2:	30 e8       	ldi	r19, 0x80	; 128
 7b4:	4b e3       	ldi	r20, 0x3B	; 59
 7b6:	55 e4       	ldi	r21, 0x45	; 69
 7b8:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 7bc:	dc 01       	movw	r26, r24
 7be:	cb 01       	movw	r24, r22
 7c0:	88 87       	std	Y+8, r24	; 0x08
 7c2:	99 87       	std	Y+9, r25	; 0x09
 7c4:	aa 87       	std	Y+10, r26	; 0x0a
 7c6:	bb 87       	std	Y+11, r27	; 0x0b
 7c8:	68 85       	ldd	r22, Y+8	; 0x08
 7ca:	79 85       	ldd	r23, Y+9	; 0x09
 7cc:	8a 85       	ldd	r24, Y+10	; 0x0a
 7ce:	9b 85       	ldd	r25, Y+11	; 0x0b
 7d0:	20 e0       	ldi	r18, 0x00	; 0
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	40 e8       	ldi	r20, 0x80	; 128
 7d6:	5f e3       	ldi	r21, 0x3F	; 63
 7d8:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 7dc:	88 23       	and	r24, r24
 7de:	04 f4       	brge	.+0      	; 0x7e0 <read_keypad+0x7e0>
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	9f 83       	std	Y+7, r25	; 0x07
 7e6:	8e 83       	std	Y+6, r24	; 0x06
 7e8:	00 c0       	rjmp	.+0      	; 0x7ea <read_keypad+0x7ea>
 7ea:	68 85       	ldd	r22, Y+8	; 0x08
 7ec:	79 85       	ldd	r23, Y+9	; 0x09
 7ee:	8a 85       	ldd	r24, Y+10	; 0x0a
 7f0:	9b 85       	ldd	r25, Y+11	; 0x0b
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	3f ef       	ldi	r19, 0xFF	; 255
 7f6:	4f e7       	ldi	r20, 0x7F	; 127
 7f8:	57 e4       	ldi	r21, 0x47	; 71
 7fa:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 7fe:	18 16       	cp	r1, r24
 800:	04 f4       	brge	.+0      	; 0x802 <read_keypad+0x802>
 802:	6c 85       	ldd	r22, Y+12	; 0x0c
 804:	7d 85       	ldd	r23, Y+13	; 0x0d
 806:	8e 85       	ldd	r24, Y+14	; 0x0e
 808:	9f 85       	ldd	r25, Y+15	; 0x0f
 80a:	20 e0       	ldi	r18, 0x00	; 0
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	40 e2       	ldi	r20, 0x20	; 32
 810:	51 e4       	ldi	r21, 0x41	; 65
 812:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 816:	dc 01       	movw	r26, r24
 818:	cb 01       	movw	r24, r22
 81a:	bc 01       	movw	r22, r24
 81c:	cd 01       	movw	r24, r26
 81e:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 822:	dc 01       	movw	r26, r24
 824:	cb 01       	movw	r24, r22
 826:	9f 83       	std	Y+7, r25	; 0x07
 828:	8e 83       	std	Y+6, r24	; 0x06
 82a:	00 c0       	rjmp	.+0      	; 0x82c <read_keypad+0x82c>
 82c:	8c e2       	ldi	r24, 0x2C	; 44
 82e:	91 e0       	ldi	r25, 0x01	; 1
 830:	9d 83       	std	Y+5, r25	; 0x05
 832:	8c 83       	std	Y+4, r24	; 0x04
 834:	8c 81       	ldd	r24, Y+4	; 0x04
 836:	9d 81       	ldd	r25, Y+5	; 0x05
 838:	01 97       	sbiw	r24, 0x01	; 1
 83a:	01 f4       	brne	.+0      	; 0x83c <read_keypad+0x83c>
 83c:	9d 83       	std	Y+5, r25	; 0x05
 83e:	8c 83       	std	Y+4, r24	; 0x04
 840:	8e 81       	ldd	r24, Y+6	; 0x06
 842:	9f 81       	ldd	r25, Y+7	; 0x07
 844:	01 97       	sbiw	r24, 0x01	; 1
 846:	9f 83       	std	Y+7, r25	; 0x07
 848:	8e 83       	std	Y+6, r24	; 0x06
 84a:	8e 81       	ldd	r24, Y+6	; 0x06
 84c:	9f 81       	ldd	r25, Y+7	; 0x07
 84e:	00 97       	sbiw	r24, 0x00	; 0
 850:	01 f4       	brne	.+0      	; 0x852 <read_keypad+0x852>
 852:	00 c0       	rjmp	.+0      	; 0x854 <read_keypad+0x854>
 854:	68 85       	ldd	r22, Y+8	; 0x08
 856:	79 85       	ldd	r23, Y+9	; 0x09
 858:	8a 85       	ldd	r24, Y+10	; 0x0a
 85a:	9b 85       	ldd	r25, Y+11	; 0x0b
 85c:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 860:	dc 01       	movw	r26, r24
 862:	cb 01       	movw	r24, r22
 864:	9f 83       	std	Y+7, r25	; 0x07
 866:	8e 83       	std	Y+6, r24	; 0x06
 868:	8e 81       	ldd	r24, Y+6	; 0x06
 86a:	9f 81       	ldd	r25, Y+7	; 0x07
 86c:	9b 83       	std	Y+3, r25	; 0x03
 86e:	8a 83       	std	Y+2, r24	; 0x02
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	9b 81       	ldd	r25, Y+3	; 0x03
 874:	01 97       	sbiw	r24, 0x01	; 1
 876:	01 f4       	brne	.+0      	; 0x878 <read_keypad+0x878>
 878:	9b 83       	std	Y+3, r25	; 0x03
 87a:	8a 83       	std	Y+2, r24	; 0x02
 87c:	00 c0       	rjmp	.+0      	; 0x87e <read_keypad+0x87e>
 87e:	69 89       	ldd	r22, Y+17	; 0x11
 880:	7a 89       	ldd	r23, Y+18	; 0x12
 882:	8b 89       	ldd	r24, Y+19	; 0x13
 884:	9c 89       	ldd	r25, Y+20	; 0x14
 886:	0e 94 00 00 	call	0	; 0x0 <read_keypad>
 88a:	dc 01       	movw	r26, r24
 88c:	cb 01       	movw	r24, r22
 88e:	88 8b       	std	Y+16, r24	; 0x10
 890:	88 89       	ldd	r24, Y+16	; 0x10
 892:	89 83       	std	Y+1, r24	; 0x01
 894:	89 81       	ldd	r24, Y+1	; 0x01
 896:	8a 95       	dec	r24
 898:	01 f4       	brne	.+0      	; 0x89a <read_keypad+0x89a>
 89a:	89 83       	std	Y+1, r24	; 0x01
 89c:	e3 e3       	ldi	r30, 0x33	; 51
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	fe 01       	movw	r30, r28
 8a4:	ee 59       	subi	r30, 0x9E	; 158
 8a6:	ff 4f       	sbci	r31, 0xFF	; 255
 8a8:	80 7f       	andi	r24, 0xF0	; 240
 8aa:	80 83       	st	Z, r24
 8ac:	fe 01       	movw	r30, r28
 8ae:	ee 59       	subi	r30, 0x9E	; 158
 8b0:	ff 4f       	sbci	r31, 0xFF	; 255
 8b2:	80 81       	ld	r24, Z
 8b4:	80 3e       	cpi	r24, 0xE0	; 224
 8b6:	01 f4       	brne	.+0      	; 0x8b8 <read_keypad+0x8b8>
 8b8:	fe 01       	movw	r30, r28
 8ba:	ef 59       	subi	r30, 0x9F	; 159
 8bc:	ff 4f       	sbci	r31, 0xFF	; 255
 8be:	8a e0       	ldi	r24, 0x0A	; 10
 8c0:	80 83       	st	Z, r24
 8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <read_keypad+0x8c4>
 8c4:	fe 01       	movw	r30, r28
 8c6:	ee 59       	subi	r30, 0x9E	; 158
 8c8:	ff 4f       	sbci	r31, 0xFF	; 255
 8ca:	80 81       	ld	r24, Z
 8cc:	80 3d       	cpi	r24, 0xD0	; 208
 8ce:	01 f4       	brne	.+0      	; 0x8d0 <read_keypad+0x8d0>
 8d0:	fe 01       	movw	r30, r28
 8d2:	ef 59       	subi	r30, 0x9F	; 159
 8d4:	ff 4f       	sbci	r31, 0xFF	; 255
 8d6:	10 82       	st	Z, r1
 8d8:	00 c0       	rjmp	.+0      	; 0x8da <read_keypad+0x8da>
 8da:	fe 01       	movw	r30, r28
 8dc:	ee 59       	subi	r30, 0x9E	; 158
 8de:	ff 4f       	sbci	r31, 0xFF	; 255
 8e0:	80 81       	ld	r24, Z
 8e2:	80 3b       	cpi	r24, 0xB0	; 176
 8e4:	01 f4       	brne	.+0      	; 0x8e6 <read_keypad+0x8e6>
 8e6:	fe 01       	movw	r30, r28
 8e8:	ef 59       	subi	r30, 0x9F	; 159
 8ea:	ff 4f       	sbci	r31, 0xFF	; 255
 8ec:	8b e0       	ldi	r24, 0x0B	; 11
 8ee:	80 83       	st	Z, r24
 8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <read_keypad+0x8f2>
 8f2:	fe 01       	movw	r30, r28
 8f4:	ee 59       	subi	r30, 0x9E	; 158
 8f6:	ff 4f       	sbci	r31, 0xFF	; 255
 8f8:	80 81       	ld	r24, Z
 8fa:	80 37       	cpi	r24, 0x70	; 112
 8fc:	01 f4       	brne	.+0      	; 0x8fe <read_keypad+0x8fe>
 8fe:	fe 01       	movw	r30, r28
 900:	ef 59       	subi	r30, 0x9F	; 159
 902:	ff 4f       	sbci	r31, 0xFF	; 255
 904:	8f e0       	ldi	r24, 0x0F	; 15
 906:	80 83       	st	Z, r24
 908:	fe 01       	movw	r30, r28
 90a:	ef 59       	subi	r30, 0x9F	; 159
 90c:	ff 4f       	sbci	r31, 0xFF	; 255
 90e:	80 81       	ld	r24, Z
 910:	ce 59       	subi	r28, 0x9E	; 158
 912:	df 4f       	sbci	r29, 0xFF	; 255
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	f8 94       	cli
 918:	de bf       	out	0x3e, r29	; 62
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	cd bf       	out	0x3d, r28	; 61
 91e:	cf 91       	pop	r28
 920:	df 91       	pop	r29
 922:	1f 91       	pop	r17
 924:	0f 91       	pop	r16
 926:	08 95       	ret

Disassembly of section .text.lcd_data_write:

00000000 <lcd_data_write>:
void lcd_command_write( char command);
void lcd_init();
void lcd_string_write( char *string);

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	6d 97       	sbiw	r28, 0x1d	; 29
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8d 8f       	std	Y+29, r24	; 0x1d
  16:	e2 e3       	ldi	r30, 0x32	; 50
  18:	f0 e0       	ldi	r31, 0x00	; 0
	DDRB=0xff;
  1a:	85 e0       	ldi	r24, 0x05	; 5
  1c:	80 83       	st	Z, r24
  1e:	e8 e3       	ldi	r30, 0x38	; 56
  20:	f0 e0       	ldi	r31, 0x00	; 0
	/*All the 8 pins of PortB are declared output (data pins of LCD are connected)*/

	DDRD=0x07;
  22:	8d 8d       	ldd	r24, Y+29	; 0x1d
  24:	80 83       	st	Z, r24
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0
	/*PD0, PD1 and PD2 pins of PortD are declared output (control pins of LCD are connected)*/

	DDRC=0x0f;
  2a:	a0 e8       	ldi	r26, 0x80	; 128
  2c:	bf e3       	ldi	r27, 0x3F	; 63
  2e:	89 8f       	std	Y+25, r24	; 0x19
  30:	9a 8f       	std	Y+26, r25	; 0x1a
	/*PortC's upper 4 bits are declared input and lower 4 bits are declared output(4x4 Keypad is connected)*/

	PORTC=0xff;
  32:	ab 8f       	std	Y+27, r26	; 0x1b
  34:	bc 8f       	std	Y+28, r27	; 0x1c
  36:	69 8d       	ldd	r22, Y+25	; 0x19
  38:	7a 8d       	ldd	r23, Y+26	; 0x1a
	/*PortC's lower 4 bits are given high value and pull-up are enabled for upper 4 bits*/

	unsigned char keypad_value;
	/*Variable declarations*/

	lcd_init();
  3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
  3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
	/*LCD initialization*/

	lcd_string_write("ABLab Solutions");
  3e:	20 e0       	ldi	r18, 0x00	; 0
  40:	30 e8       	ldi	r19, 0x80	; 128
  42:	4b e3       	ldi	r20, 0x3B	; 59
  44:	55 e4       	ldi	r21, 0x45	; 69
	/*String display in 1st row of LCD*/

	lcd_command_write(0xc0);
  46:	0e 94 00 00 	call	0	; 0x0 <lcd_data_write>
  4a:	dc 01       	movw	r26, r24
	/*Cursor moves to 2nd row 1st column of LCD*/

	lcd_string_write("www.ablab.in");
  4c:	cb 01       	movw	r24, r22
  4e:	8d 8b       	std	Y+21, r24	; 0x15
  50:	9e 8b       	std	Y+22, r25	; 0x16
  52:	af 8b       	std	Y+23, r26	; 0x17
  54:	b8 8f       	std	Y+24, r27	; 0x18
  56:	6d 89       	ldd	r22, Y+21	; 0x15
  58:	7e 89       	ldd	r23, Y+22	; 0x16
  5a:	8f 89       	ldd	r24, Y+23	; 0x17
  5c:	98 8d       	ldd	r25, Y+24	; 0x18
  5e:	20 e0       	ldi	r18, 0x00	; 0
  60:	30 e0       	ldi	r19, 0x00	; 0
  62:	40 e8       	ldi	r20, 0x80	; 128
  64:	5f e3       	ldi	r21, 0x3F	; 63
  66:	0e 94 00 00 	call	0	; 0x0 <lcd_data_write>
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  6a:	88 23       	and	r24, r24
  6c:	04 f4       	brge	.+0      	; 0x6e <lcd_data_write+0x6e>
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	9c 8b       	std	Y+20, r25	; 0x14
  74:	8b 8b       	std	Y+19, r24	; 0x13
  76:	00 c0       	rjmp	.+0      	; 0x78 <lcd_data_write+0x78>
  78:	6d 89       	ldd	r22, Y+21	; 0x15
  7a:	7e 89       	ldd	r23, Y+22	; 0x16
  7c:	8f 89       	ldd	r24, Y+23	; 0x17
  7e:	98 8d       	ldd	r25, Y+24	; 0x18
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	3f ef       	ldi	r19, 0xFF	; 255
  84:	4f e7       	ldi	r20, 0x7F	; 127
  86:	57 e4       	ldi	r21, 0x47	; 71
  88:	0e 94 00 00 	call	0	; 0x0 <lcd_data_write>
  8c:	18 16       	cp	r1, r24
  8e:	04 f4       	brge	.+0      	; 0x90 <lcd_data_write+0x90>
  90:	69 8d       	ldd	r22, Y+25	; 0x19
  92:	7a 8d       	ldd	r23, Y+26	; 0x1a
  94:	8b 8d       	ldd	r24, Y+27	; 0x1b
  96:	9c 8d       	ldd	r25, Y+28	; 0x1c
	if (__tmp < 1.0)
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	40 e2       	ldi	r20, 0x20	; 32
  9e:	51 e4       	ldi	r21, 0x41	; 65
  a0:	0e 94 00 00 	call	0	; 0x0 <lcd_data_write>
  a4:	dc 01       	movw	r26, r24
  a6:	cb 01       	movw	r24, r22
  a8:	bc 01       	movw	r22, r24
  aa:	cd 01       	movw	r24, r26
  ac:	0e 94 00 00 	call	0	; 0x0 <lcd_data_write>
  b0:	dc 01       	movw	r26, r24
  b2:	cb 01       	movw	r24, r22
		__ticks = 1;
  b4:	9c 8b       	std	Y+20, r25	; 0x14
  b6:	8b 8b       	std	Y+19, r24	; 0x13
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_data_write+0xba>
  ba:	8c e2       	ldi	r24, 0x2C	; 44
  bc:	91 e0       	ldi	r25, 0x01	; 1
	else if (__tmp > 65535)
  be:	9a 8b       	std	Y+18, r25	; 0x12
  c0:	89 8b       	std	Y+17, r24	; 0x11
  c2:	89 89       	ldd	r24, Y+17	; 0x11
  c4:	9a 89       	ldd	r25, Y+18	; 0x12
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	01 f4       	brne	.+0      	; 0xca <lcd_data_write+0xca>
  ca:	9a 8b       	std	Y+18, r25	; 0x12
  cc:	89 8b       	std	Y+17, r24	; 0x11
  ce:	8b 89       	ldd	r24, Y+19	; 0x13
  d0:	9c 89       	ldd	r25, Y+20	; 0x14
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	9c 8b       	std	Y+20, r25	; 0x14
  d6:	8b 8b       	std	Y+19, r24	; 0x13
  d8:	8b 89       	ldd	r24, Y+19	; 0x13
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  da:	9c 89       	ldd	r25, Y+20	; 0x14
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	01 f4       	brne	.+0      	; 0xe0 <lcd_data_write+0xe0>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_data_write+0xe2>
  e2:	6d 89       	ldd	r22, Y+21	; 0x15
  e4:	7e 89       	ldd	r23, Y+22	; 0x16
  e6:	8f 89       	ldd	r24, Y+23	; 0x17
  e8:	98 8d       	ldd	r25, Y+24	; 0x18
  ea:	0e 94 00 00 	call	0	; 0x0 <lcd_data_write>
  ee:	dc 01       	movw	r26, r24
  f0:	cb 01       	movw	r24, r22
  f2:	9c 8b       	std	Y+20, r25	; 0x14
  f4:	8b 8b       	std	Y+19, r24	; 0x13
  f6:	8b 89       	ldd	r24, Y+19	; 0x13
  f8:	9c 89       	ldd	r25, Y+20	; 0x14
  fa:	98 8b       	std	Y+16, r25	; 0x10
  fc:	8f 87       	std	Y+15, r24	; 0x0f
  fe:	8f 85       	ldd	r24, Y+15	; 0x0f
 100:	98 89       	ldd	r25, Y+16	; 0x10
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	01 f4       	brne	.+0      	; 0x106 <lcd_data_write+0x106>
 106:	98 8b       	std	Y+16, r25	; 0x10
 108:	8f 87       	std	Y+15, r24	; 0x0f
 10a:	e2 e3       	ldi	r30, 0x32	; 50
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 83       	st	Z, r24
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	a0 e8       	ldi	r26, 0x80	; 128
 118:	bf e3       	ldi	r27, 0x3F	; 63
 11a:	8b 87       	std	Y+11, r24	; 0x0b
 11c:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	ad 87       	std	Y+13, r26	; 0x0d
 120:	be 87       	std	Y+14, r27	; 0x0e
 122:	6b 85       	ldd	r22, Y+11	; 0x0b
 124:	7c 85       	ldd	r23, Y+12	; 0x0c
 126:	8d 85       	ldd	r24, Y+13	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 128:	9e 85       	ldd	r25, Y+14	; 0x0e
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e8       	ldi	r19, 0x80	; 128
 12e:	4b e3       	ldi	r20, 0x3B	; 59
 130:	55 e4       	ldi	r21, 0x45	; 69
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 132:	0e 94 00 00 	call	0	; 0x0 <lcd_data_write>
 136:	dc 01       	movw	r26, r24
 138:	cb 01       	movw	r24, r22
 13a:	8f 83       	std	Y+7, r24	; 0x07
 13c:	98 87       	std	Y+8, r25	; 0x08
 13e:	a9 87       	std	Y+9, r26	; 0x09
 140:	ba 87       	std	Y+10, r27	; 0x0a
 142:	6f 81       	ldd	r22, Y+7	; 0x07
 144:	78 85       	ldd	r23, Y+8	; 0x08
 146:	89 85       	ldd	r24, Y+9	; 0x09
 148:	9a 85       	ldd	r25, Y+10	; 0x0a
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e8       	ldi	r20, 0x80	; 128
 150:	5f e3       	ldi	r21, 0x3F	; 63
 152:	0e 94 00 00 	call	0	; 0x0 <lcd_data_write>
 156:	88 23       	and	r24, r24
 158:	04 f4       	brge	.+0      	; 0x15a <lcd_data_write+0x15a>
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	9e 83       	std	Y+6, r25	; 0x06
 160:	8d 83       	std	Y+5, r24	; 0x05
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_data_write+0x164>
 164:	6f 81       	ldd	r22, Y+7	; 0x07
 166:	78 85       	ldd	r23, Y+8	; 0x08
 168:	89 85       	ldd	r24, Y+9	; 0x09
 16a:	9a 85       	ldd	r25, Y+10	; 0x0a
 16c:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 16e:	3f ef       	ldi	r19, 0xFF	; 255
 170:	4f e7       	ldi	r20, 0x7F	; 127
 172:	57 e4       	ldi	r21, 0x47	; 71
 174:	0e 94 00 00 	call	0	; 0x0 <lcd_data_write>
 178:	18 16       	cp	r1, r24
 17a:	04 f4       	brge	.+0      	; 0x17c <lcd_data_write+0x17c>
 17c:	6b 85       	ldd	r22, Y+11	; 0x0b
 17e:	7c 85       	ldd	r23, Y+12	; 0x0c
 180:	8d 85       	ldd	r24, Y+13	; 0x0d
 182:	9e 85       	ldd	r25, Y+14	; 0x0e
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e2       	ldi	r20, 0x20	; 32
 18a:	51 e4       	ldi	r21, 0x41	; 65
 18c:	0e 94 00 00 	call	0	; 0x0 <lcd_data_write>
	if (__tmp < 1.0)
 190:	dc 01       	movw	r26, r24
 192:	cb 01       	movw	r24, r22
 194:	bc 01       	movw	r22, r24
 196:	cd 01       	movw	r24, r26
 198:	0e 94 00 00 	call	0	; 0x0 <lcd_data_write>
 19c:	dc 01       	movw	r26, r24
 19e:	cb 01       	movw	r24, r22
 1a0:	9e 83       	std	Y+6, r25	; 0x06
 1a2:	8d 83       	std	Y+5, r24	; 0x05
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_data_write+0x1a6>
		__ticks = 1;
 1a6:	8c e2       	ldi	r24, 0x2C	; 44
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	9c 83       	std	Y+4, r25	; 0x04
 1ac:	8b 83       	std	Y+3, r24	; 0x03
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
	else if (__tmp > 65535)
 1b0:	9c 81       	ldd	r25, Y+4	; 0x04
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	01 f4       	brne	.+0      	; 0x1b6 <lcd_data_write+0x1b6>
 1b6:	9c 83       	std	Y+4, r25	; 0x04
 1b8:	8b 83       	std	Y+3, r24	; 0x03
 1ba:	8d 81       	ldd	r24, Y+5	; 0x05
 1bc:	9e 81       	ldd	r25, Y+6	; 0x06
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	9e 83       	std	Y+6, r25	; 0x06
 1c2:	8d 83       	std	Y+5, r24	; 0x05
 1c4:	8d 81       	ldd	r24, Y+5	; 0x05
 1c6:	9e 81       	ldd	r25, Y+6	; 0x06
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1c8:	00 97       	sbiw	r24, 0x00	; 0
 1ca:	01 f4       	brne	.+0      	; 0x1cc <lcd_data_write+0x1cc>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_data_write+0x1ce>
 1ce:	6f 81       	ldd	r22, Y+7	; 0x07
 1d0:	78 85       	ldd	r23, Y+8	; 0x08
 1d2:	89 85       	ldd	r24, Y+9	; 0x09
 1d4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d6:	0e 94 00 00 	call	0	; 0x0 <lcd_data_write>
 1da:	dc 01       	movw	r26, r24
 1dc:	cb 01       	movw	r24, r22
 1de:	9e 83       	std	Y+6, r25	; 0x06
 1e0:	8d 83       	std	Y+5, r24	; 0x05
 1e2:	8d 81       	ldd	r24, Y+5	; 0x05
 1e4:	9e 81       	ldd	r25, Y+6	; 0x06
 1e6:	9a 83       	std	Y+2, r25	; 0x02
 1e8:	89 83       	std	Y+1, r24	; 0x01
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	9a 81       	ldd	r25, Y+2	; 0x02
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	01 f4       	brne	.+0      	; 0x1f2 <lcd_data_write+0x1f2>
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	6d 96       	adiw	r28, 0x1d	; 29
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	cf 91       	pop	r28
 204:	df 91       	pop	r29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 206:	08 95       	ret

Disassembly of section .text.lcd_command_write:

00000000 <lcd_command_write>:
void lcd_command_write( char command);
void lcd_init();
void lcd_string_write( char *string);

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	6d 97       	sbiw	r28, 0x1d	; 29
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8d 8f       	std	Y+29, r24	; 0x1d
  16:	e2 e3       	ldi	r30, 0x32	; 50
  18:	f0 e0       	ldi	r31, 0x00	; 0
	DDRB=0xff;
  1a:	84 e0       	ldi	r24, 0x04	; 4
  1c:	80 83       	st	Z, r24
  1e:	e8 e3       	ldi	r30, 0x38	; 56
  20:	f0 e0       	ldi	r31, 0x00	; 0
	/*All the 8 pins of PortB are declared output (data pins of LCD are connected)*/

	DDRD=0x07;
  22:	8d 8d       	ldd	r24, Y+29	; 0x1d
  24:	80 83       	st	Z, r24
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0
	/*PD0, PD1 and PD2 pins of PortD are declared output (control pins of LCD are connected)*/

	DDRC=0x0f;
  2a:	a0 e8       	ldi	r26, 0x80	; 128
  2c:	bf e3       	ldi	r27, 0x3F	; 63
  2e:	89 8f       	std	Y+25, r24	; 0x19
  30:	9a 8f       	std	Y+26, r25	; 0x1a
	/*PortC's upper 4 bits are declared input and lower 4 bits are declared output(4x4 Keypad is connected)*/

	PORTC=0xff;
  32:	ab 8f       	std	Y+27, r26	; 0x1b
  34:	bc 8f       	std	Y+28, r27	; 0x1c
  36:	69 8d       	ldd	r22, Y+25	; 0x19
  38:	7a 8d       	ldd	r23, Y+26	; 0x1a
	/*PortC's lower 4 bits are given high value and pull-up are enabled for upper 4 bits*/

	unsigned char keypad_value;
	/*Variable declarations*/

	lcd_init();
  3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
  3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
	/*LCD initialization*/

	lcd_string_write("ABLab Solutions");
  3e:	20 e0       	ldi	r18, 0x00	; 0
  40:	30 e8       	ldi	r19, 0x80	; 128
  42:	4b e3       	ldi	r20, 0x3B	; 59
  44:	55 e4       	ldi	r21, 0x45	; 69
	/*String display in 1st row of LCD*/

	lcd_command_write(0xc0);
  46:	0e 94 00 00 	call	0	; 0x0 <lcd_command_write>
  4a:	dc 01       	movw	r26, r24
	/*Cursor moves to 2nd row 1st column of LCD*/

	lcd_string_write("www.ablab.in");
  4c:	cb 01       	movw	r24, r22
  4e:	8d 8b       	std	Y+21, r24	; 0x15
  50:	9e 8b       	std	Y+22, r25	; 0x16
  52:	af 8b       	std	Y+23, r26	; 0x17
  54:	b8 8f       	std	Y+24, r27	; 0x18
  56:	6d 89       	ldd	r22, Y+21	; 0x15
  58:	7e 89       	ldd	r23, Y+22	; 0x16
  5a:	8f 89       	ldd	r24, Y+23	; 0x17
  5c:	98 8d       	ldd	r25, Y+24	; 0x18
  5e:	20 e0       	ldi	r18, 0x00	; 0
  60:	30 e0       	ldi	r19, 0x00	; 0
  62:	40 e8       	ldi	r20, 0x80	; 128
  64:	5f e3       	ldi	r21, 0x3F	; 63
  66:	0e 94 00 00 	call	0	; 0x0 <lcd_command_write>
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  6a:	88 23       	and	r24, r24
  6c:	04 f4       	brge	.+0      	; 0x6e <lcd_command_write+0x6e>
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	9c 8b       	std	Y+20, r25	; 0x14
  74:	8b 8b       	std	Y+19, r24	; 0x13
  76:	00 c0       	rjmp	.+0      	; 0x78 <lcd_command_write+0x78>
  78:	6d 89       	ldd	r22, Y+21	; 0x15
  7a:	7e 89       	ldd	r23, Y+22	; 0x16
  7c:	8f 89       	ldd	r24, Y+23	; 0x17
  7e:	98 8d       	ldd	r25, Y+24	; 0x18
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	3f ef       	ldi	r19, 0xFF	; 255
  84:	4f e7       	ldi	r20, 0x7F	; 127
  86:	57 e4       	ldi	r21, 0x47	; 71
  88:	0e 94 00 00 	call	0	; 0x0 <lcd_command_write>
  8c:	18 16       	cp	r1, r24
  8e:	04 f4       	brge	.+0      	; 0x90 <lcd_command_write+0x90>
  90:	69 8d       	ldd	r22, Y+25	; 0x19
  92:	7a 8d       	ldd	r23, Y+26	; 0x1a
  94:	8b 8d       	ldd	r24, Y+27	; 0x1b
  96:	9c 8d       	ldd	r25, Y+28	; 0x1c
	if (__tmp < 1.0)
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	40 e2       	ldi	r20, 0x20	; 32
  9e:	51 e4       	ldi	r21, 0x41	; 65
  a0:	0e 94 00 00 	call	0	; 0x0 <lcd_command_write>
  a4:	dc 01       	movw	r26, r24
  a6:	cb 01       	movw	r24, r22
  a8:	bc 01       	movw	r22, r24
  aa:	cd 01       	movw	r24, r26
  ac:	0e 94 00 00 	call	0	; 0x0 <lcd_command_write>
  b0:	dc 01       	movw	r26, r24
  b2:	cb 01       	movw	r24, r22
		__ticks = 1;
  b4:	9c 8b       	std	Y+20, r25	; 0x14
  b6:	8b 8b       	std	Y+19, r24	; 0x13
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_command_write+0xba>
  ba:	8c e2       	ldi	r24, 0x2C	; 44
  bc:	91 e0       	ldi	r25, 0x01	; 1
	else if (__tmp > 65535)
  be:	9a 8b       	std	Y+18, r25	; 0x12
  c0:	89 8b       	std	Y+17, r24	; 0x11
  c2:	89 89       	ldd	r24, Y+17	; 0x11
  c4:	9a 89       	ldd	r25, Y+18	; 0x12
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	01 f4       	brne	.+0      	; 0xca <lcd_command_write+0xca>
  ca:	9a 8b       	std	Y+18, r25	; 0x12
  cc:	89 8b       	std	Y+17, r24	; 0x11
  ce:	8b 89       	ldd	r24, Y+19	; 0x13
  d0:	9c 89       	ldd	r25, Y+20	; 0x14
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	9c 8b       	std	Y+20, r25	; 0x14
  d6:	8b 8b       	std	Y+19, r24	; 0x13
  d8:	8b 89       	ldd	r24, Y+19	; 0x13
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  da:	9c 89       	ldd	r25, Y+20	; 0x14
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	01 f4       	brne	.+0      	; 0xe0 <lcd_command_write+0xe0>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_command_write+0xe2>
  e2:	6d 89       	ldd	r22, Y+21	; 0x15
  e4:	7e 89       	ldd	r23, Y+22	; 0x16
  e6:	8f 89       	ldd	r24, Y+23	; 0x17
  e8:	98 8d       	ldd	r25, Y+24	; 0x18
  ea:	0e 94 00 00 	call	0	; 0x0 <lcd_command_write>
  ee:	dc 01       	movw	r26, r24
  f0:	cb 01       	movw	r24, r22
  f2:	9c 8b       	std	Y+20, r25	; 0x14
  f4:	8b 8b       	std	Y+19, r24	; 0x13
  f6:	8b 89       	ldd	r24, Y+19	; 0x13
  f8:	9c 89       	ldd	r25, Y+20	; 0x14
  fa:	98 8b       	std	Y+16, r25	; 0x10
  fc:	8f 87       	std	Y+15, r24	; 0x0f
  fe:	8f 85       	ldd	r24, Y+15	; 0x0f
 100:	98 89       	ldd	r25, Y+16	; 0x10
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	01 f4       	brne	.+0      	; 0x106 <lcd_command_write+0x106>
 106:	98 8b       	std	Y+16, r25	; 0x10
 108:	8f 87       	std	Y+15, r24	; 0x0f
 10a:	e2 e3       	ldi	r30, 0x32	; 50
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	10 82       	st	Z, r1
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	a0 e8       	ldi	r26, 0x80	; 128
 116:	bf e3       	ldi	r27, 0x3F	; 63
 118:	8b 87       	std	Y+11, r24	; 0x0b
 11a:	9c 87       	std	Y+12, r25	; 0x0c
 11c:	ad 87       	std	Y+13, r26	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	be 87       	std	Y+14, r27	; 0x0e
 120:	6b 85       	ldd	r22, Y+11	; 0x0b
 122:	7c 85       	ldd	r23, Y+12	; 0x0c
 124:	8d 85       	ldd	r24, Y+13	; 0x0d
 126:	9e 85       	ldd	r25, Y+14	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e8       	ldi	r19, 0x80	; 128
 12c:	4b e3       	ldi	r20, 0x3B	; 59
 12e:	55 e4       	ldi	r21, 0x45	; 69
 130:	0e 94 00 00 	call	0	; 0x0 <lcd_command_write>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 134:	dc 01       	movw	r26, r24
 136:	cb 01       	movw	r24, r22
 138:	8f 83       	std	Y+7, r24	; 0x07
 13a:	98 87       	std	Y+8, r25	; 0x08
 13c:	a9 87       	std	Y+9, r26	; 0x09
 13e:	ba 87       	std	Y+10, r27	; 0x0a
 140:	6f 81       	ldd	r22, Y+7	; 0x07
 142:	78 85       	ldd	r23, Y+8	; 0x08
 144:	89 85       	ldd	r24, Y+9	; 0x09
 146:	9a 85       	ldd	r25, Y+10	; 0x0a
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	40 e8       	ldi	r20, 0x80	; 128
 14e:	5f e3       	ldi	r21, 0x3F	; 63
 150:	0e 94 00 00 	call	0	; 0x0 <lcd_command_write>
 154:	88 23       	and	r24, r24
 156:	04 f4       	brge	.+0      	; 0x158 <lcd_command_write+0x158>
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	9e 83       	std	Y+6, r25	; 0x06
 15e:	8d 83       	std	Y+5, r24	; 0x05
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_command_write+0x162>
 162:	6f 81       	ldd	r22, Y+7	; 0x07
 164:	78 85       	ldd	r23, Y+8	; 0x08
 166:	89 85       	ldd	r24, Y+9	; 0x09
 168:	9a 85       	ldd	r25, Y+10	; 0x0a
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	3f ef       	ldi	r19, 0xFF	; 255
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 16e:	4f e7       	ldi	r20, 0x7F	; 127
 170:	57 e4       	ldi	r21, 0x47	; 71
 172:	0e 94 00 00 	call	0	; 0x0 <lcd_command_write>
 176:	18 16       	cp	r1, r24
 178:	04 f4       	brge	.+0      	; 0x17a <lcd_command_write+0x17a>
 17a:	6b 85       	ldd	r22, Y+11	; 0x0b
 17c:	7c 85       	ldd	r23, Y+12	; 0x0c
 17e:	8d 85       	ldd	r24, Y+13	; 0x0d
 180:	9e 85       	ldd	r25, Y+14	; 0x0e
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e2       	ldi	r20, 0x20	; 32
 188:	51 e4       	ldi	r21, 0x41	; 65
 18a:	0e 94 00 00 	call	0	; 0x0 <lcd_command_write>
	if (__tmp < 1.0)
 18e:	dc 01       	movw	r26, r24
 190:	cb 01       	movw	r24, r22
 192:	bc 01       	movw	r22, r24
 194:	cd 01       	movw	r24, r26
 196:	0e 94 00 00 	call	0	; 0x0 <lcd_command_write>
 19a:	dc 01       	movw	r26, r24
 19c:	cb 01       	movw	r24, r22
 19e:	9e 83       	std	Y+6, r25	; 0x06
 1a0:	8d 83       	std	Y+5, r24	; 0x05
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_command_write+0x1a4>
 1a4:	8c e2       	ldi	r24, 0x2C	; 44
		__ticks = 1;
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	9c 83       	std	Y+4, r25	; 0x04
 1aa:	8b 83       	std	Y+3, r24	; 0x03
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	9c 81       	ldd	r25, Y+4	; 0x04
	else if (__tmp > 65535)
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	01 f4       	brne	.+0      	; 0x1b4 <lcd_command_write+0x1b4>
 1b4:	9c 83       	std	Y+4, r25	; 0x04
 1b6:	8b 83       	std	Y+3, r24	; 0x03
 1b8:	8d 81       	ldd	r24, Y+5	; 0x05
 1ba:	9e 81       	ldd	r25, Y+6	; 0x06
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	9e 83       	std	Y+6, r25	; 0x06
 1c0:	8d 83       	std	Y+5, r24	; 0x05
 1c2:	8d 81       	ldd	r24, Y+5	; 0x05
 1c4:	9e 81       	ldd	r25, Y+6	; 0x06
 1c6:	00 97       	sbiw	r24, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1c8:	01 f4       	brne	.+0      	; 0x1ca <lcd_command_write+0x1ca>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_command_write+0x1cc>
 1cc:	6f 81       	ldd	r22, Y+7	; 0x07
 1ce:	78 85       	ldd	r23, Y+8	; 0x08
 1d0:	89 85       	ldd	r24, Y+9	; 0x09
 1d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d4:	0e 94 00 00 	call	0	; 0x0 <lcd_command_write>
 1d8:	dc 01       	movw	r26, r24
 1da:	cb 01       	movw	r24, r22
 1dc:	9e 83       	std	Y+6, r25	; 0x06
 1de:	8d 83       	std	Y+5, r24	; 0x05
 1e0:	8d 81       	ldd	r24, Y+5	; 0x05
 1e2:	9e 81       	ldd	r25, Y+6	; 0x06
 1e4:	9a 83       	std	Y+2, r25	; 0x02
 1e6:	89 83       	std	Y+1, r24	; 0x01
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	9a 81       	ldd	r25, Y+2	; 0x02
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	01 f4       	brne	.+0      	; 0x1f0 <lcd_command_write+0x1f0>
 1f0:	9a 83       	std	Y+2, r25	; 0x02
 1f2:	89 83       	std	Y+1, r24	; 0x01
 1f4:	6d 96       	adiw	r28, 0x1d	; 29
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	cf 91       	pop	r28
 202:	df 91       	pop	r29
 204:	08 95       	ret

Disassembly of section .text.lcd_init:

00000000 <lcd_init>:
void lcd_command_write( char command);
void lcd_init();
void lcd_string_write( char *string);

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	88 e3       	ldi	r24, 0x38	; 56
   a:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
   e:	81 e0       	ldi	r24, 0x01	; 1
  10:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
  14:	86 e0       	ldi	r24, 0x06	; 6
  16:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
	DDRB=0xff;
  1a:	8e e0       	ldi	r24, 0x0E	; 14
  1c:	0e 94 00 00 	call	0	; 0x0 <lcd_init>
  20:	cf 91       	pop	r28
	/*All the 8 pins of PortB are declared output (data pins of LCD are connected)*/

	DDRD=0x07;
  22:	df 91       	pop	r29
  24:	08 95       	ret

Disassembly of section .text.lcd_string_write:

00000000 <lcd_string_write>:
void lcd_command_write( char command);
void lcd_init();
void lcd_string_write( char *string);

int main(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <lcd_string_write+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	00 c0       	rjmp	.+0      	; 0x10 <lcd_string_write+0x10>
  10:	e9 81       	ldd	r30, Y+1	; 0x01
  12:	fa 81       	ldd	r31, Y+2	; 0x02
  14:	20 81       	ld	r18, Z
  16:	89 81       	ldd	r24, Y+1	; 0x01
  18:	9a 81       	ldd	r25, Y+2	; 0x02
	DDRB=0xff;
  1a:	01 96       	adiw	r24, 0x01	; 1
  1c:	9a 83       	std	Y+2, r25	; 0x02
  1e:	89 83       	std	Y+1, r24	; 0x01
  20:	82 2f       	mov	r24, r18
	/*All the 8 pins of PortB are declared output (data pins of LCD are connected)*/

	DDRD=0x07;
  22:	0e 94 00 00 	call	0	; 0x0 <lcd_string_write>
  26:	e9 81       	ldd	r30, Y+1	; 0x01
  28:	fa 81       	ldd	r31, Y+2	; 0x02
	/*PD0, PD1 and PD2 pins of PortD are declared output (control pins of LCD are connected)*/

	DDRC=0x0f;
  2a:	80 81       	ld	r24, Z
  2c:	88 23       	and	r24, r24
  2e:	01 f4       	brne	.+0      	; 0x30 <lcd_string_write+0x30>
  30:	0f 90       	pop	r0
	/*PortC's upper 4 bits are declared input and lower 4 bits are declared output(4x4 Keypad is connected)*/

	PORTC=0xff;
  32:	0f 90       	pop	r0
  34:	cf 91       	pop	r28
  36:	df 91       	pop	r29
  38:	08 95       	ret
