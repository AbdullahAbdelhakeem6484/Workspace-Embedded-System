
keypad_opt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000008a8  0000091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000009fc  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000098a  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 08 04 	call	0x810	; 0x810 <main>
  7a:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidSetPinDir>:




void DIO_voidSetPinDir(u8 Port,u8 Pin,u8 Dir)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <DIO_voidSetPinDir+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <DIO_voidSetPinDir+0x8>
  8a:	0f 92       	push	r0
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	89 83       	std	Y+1, r24	; 0x01
  92:	6a 83       	std	Y+2, r22	; 0x02
  94:	4b 83       	std	Y+3, r20	; 0x03

switch(Port)
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	28 2f       	mov	r18, r24
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	3d 83       	std	Y+5, r19	; 0x05
  9e:	2c 83       	std	Y+4, r18	; 0x04
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	9d 81       	ldd	r25, Y+5	; 0x05
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	91 05       	cpc	r25, r1
  a8:	09 f4       	brne	.+2      	; 0xac <DIO_voidSetPinDir+0x2a>
  aa:	43 c0       	rjmp	.+134    	; 0x132 <DIO_voidSetPinDir+0xb0>
  ac:	2c 81       	ldd	r18, Y+4	; 0x04
  ae:	3d 81       	ldd	r19, Y+5	; 0x05
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	31 05       	cpc	r19, r1
  b4:	2c f4       	brge	.+10     	; 0xc0 <DIO_voidSetPinDir+0x3e>
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	9d 81       	ldd	r25, Y+5	; 0x05
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	71 f0       	breq	.+28     	; 0xda <DIO_voidSetPinDir+0x58>
  be:	bc c0       	rjmp	.+376    	; 0x238 <DIO_voidSetPinDir+0x1b6>
  c0:	2c 81       	ldd	r18, Y+4	; 0x04
  c2:	3d 81       	ldd	r19, Y+5	; 0x05
  c4:	22 30       	cpi	r18, 0x02	; 2
  c6:	31 05       	cpc	r19, r1
  c8:	09 f4       	brne	.+2      	; 0xcc <DIO_voidSetPinDir+0x4a>
  ca:	5f c0       	rjmp	.+190    	; 0x18a <DIO_voidSetPinDir+0x108>
  cc:	8c 81       	ldd	r24, Y+4	; 0x04
  ce:	9d 81       	ldd	r25, Y+5	; 0x05
  d0:	83 30       	cpi	r24, 0x03	; 3
  d2:	91 05       	cpc	r25, r1
  d4:	09 f4       	brne	.+2      	; 0xd8 <DIO_voidSetPinDir+0x56>
  d6:	85 c0       	rjmp	.+266    	; 0x1e2 <DIO_voidSetPinDir+0x160>
  d8:	af c0       	rjmp	.+350    	; 0x238 <DIO_voidSetPinDir+0x1b6>
{
	case 0:
		if(Dir==0)
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	88 23       	and	r24, r24
  de:	a9 f4       	brne	.+42     	; 0x10a <DIO_voidSetPinDir+0x88>
		{
			CLEAR_BIT(DDRA,Pin);
  e0:	aa e3       	ldi	r26, 0x3A	; 58
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	ea e3       	ldi	r30, 0x3A	; 58
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	48 2f       	mov	r20, r24
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	28 2f       	mov	r18, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 2e       	mov	r0, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_voidSetPinDir+0x7c>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_voidSetPinDir+0x78>
 102:	80 95       	com	r24
 104:	84 23       	and	r24, r20
 106:	8c 93       	st	X, r24
 108:	97 c0       	rjmp	.+302    	; 0x238 <DIO_voidSetPinDir+0x1b6>

		}
		else
		{
			SET_BIT(DDRA,Pin);
 10a:	aa e3       	ldi	r26, 0x3A	; 58
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	ea e3       	ldi	r30, 0x3A	; 58
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	48 2f       	mov	r20, r24
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_voidSetPinDir+0xa6>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_voidSetPinDir+0xa2>
 12c:	84 2b       	or	r24, r20
 12e:	8c 93       	st	X, r24
 130:	83 c0       	rjmp	.+262    	; 0x238 <DIO_voidSetPinDir+0x1b6>



		break;
	case 1:
		if(Dir==0)
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	88 23       	and	r24, r24
 136:	a9 f4       	brne	.+42     	; 0x162 <DIO_voidSetPinDir+0xe0>
				{
					CLEAR_BIT(DDRB,Pin);
 138:	a7 e3       	ldi	r26, 0x37	; 55
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e7 e3       	ldi	r30, 0x37	; 55
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	48 2f       	mov	r20, r24
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	28 2f       	mov	r18, r24
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 2e       	mov	r0, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_voidSetPinDir+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_voidSetPinDir+0xd0>
 15a:	80 95       	com	r24
 15c:	84 23       	and	r24, r20
 15e:	8c 93       	st	X, r24
 160:	6b c0       	rjmp	.+214    	; 0x238 <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRB,Pin);
 162:	a7 e3       	ldi	r26, 0x37	; 55
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e7 e3       	ldi	r30, 0x37	; 55
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	48 2f       	mov	r20, r24
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	28 2f       	mov	r18, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 2e       	mov	r0, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_voidSetPinDir+0xfe>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_voidSetPinDir+0xfa>
 184:	84 2b       	or	r24, r20
 186:	8c 93       	st	X, r24
 188:	57 c0       	rjmp	.+174    	; 0x238 <DIO_voidSetPinDir+0x1b6>
				}


		break;
	case 2:
		if(Dir==0)
 18a:	8b 81       	ldd	r24, Y+3	; 0x03
 18c:	88 23       	and	r24, r24
 18e:	a9 f4       	brne	.+42     	; 0x1ba <DIO_voidSetPinDir+0x138>
				{
					CLEAR_BIT(DDRC,Pin);
 190:	a4 e3       	ldi	r26, 0x34	; 52
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	e4 e3       	ldi	r30, 0x34	; 52
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	48 2f       	mov	r20, r24
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 2e       	mov	r0, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_voidSetPinDir+0x12c>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_voidSetPinDir+0x128>
 1b2:	80 95       	com	r24
 1b4:	84 23       	and	r24, r20
 1b6:	8c 93       	st	X, r24
 1b8:	3f c0       	rjmp	.+126    	; 0x238 <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRC,Pin);
 1ba:	a4 e3       	ldi	r26, 0x34	; 52
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	e4 e3       	ldi	r30, 0x34	; 52
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	48 2f       	mov	r20, r24
 1c6:	8a 81       	ldd	r24, Y+2	; 0x02
 1c8:	28 2f       	mov	r18, r24
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 2e       	mov	r0, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_voidSetPinDir+0x156>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	0a 94       	dec	r0
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_voidSetPinDir+0x152>
 1dc:	84 2b       	or	r24, r20
 1de:	8c 93       	st	X, r24
 1e0:	2b c0       	rjmp	.+86     	; 0x238 <DIO_voidSetPinDir+0x1b6>


		break;

	case 3:
		if(Dir==0)
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	88 23       	and	r24, r24
 1e6:	a9 f4       	brne	.+42     	; 0x212 <DIO_voidSetPinDir+0x190>
				{
					CLEAR_BIT(DDRD,Pin);
 1e8:	a1 e3       	ldi	r26, 0x31	; 49
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	e1 e3       	ldi	r30, 0x31	; 49
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	48 2f       	mov	r20, r24
 1f4:	8a 81       	ldd	r24, Y+2	; 0x02
 1f6:	28 2f       	mov	r18, r24
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 2e       	mov	r0, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPinDir+0x184>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPinDir+0x180>
 20a:	80 95       	com	r24
 20c:	84 23       	and	r24, r20
 20e:	8c 93       	st	X, r24
 210:	13 c0       	rjmp	.+38     	; 0x238 <DIO_voidSetPinDir+0x1b6>

				}
				else
				{
					SET_BIT(DDRD,Pin);
 212:	a1 e3       	ldi	r26, 0x31	; 49
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e1 e3       	ldi	r30, 0x31	; 49
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinDir+0x1ae>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinDir+0x1aa>
 234:	84 2b       	or	r24, r20
 236:	8c 93       	st	X, r24

		break;
}


}
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	cf 91       	pop	r28
 244:	df 91       	pop	r29
 246:	08 95       	ret

00000248 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Port,u8 Pin,u8 Value)
{
 248:	df 93       	push	r29
 24a:	cf 93       	push	r28
 24c:	00 d0       	rcall	.+0      	; 0x24e <DIO_voidSetPinValue+0x6>
 24e:	00 d0       	rcall	.+0      	; 0x250 <DIO_voidSetPinValue+0x8>
 250:	0f 92       	push	r0
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	89 83       	std	Y+1, r24	; 0x01
 258:	6a 83       	std	Y+2, r22	; 0x02
 25a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	3d 83       	std	Y+5, r19	; 0x05
 264:	2c 83       	std	Y+4, r18	; 0x04
 266:	8c 81       	ldd	r24, Y+4	; 0x04
 268:	9d 81       	ldd	r25, Y+5	; 0x05
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	91 05       	cpc	r25, r1
 26e:	09 f4       	brne	.+2      	; 0x272 <DIO_voidSetPinValue+0x2a>
 270:	43 c0       	rjmp	.+134    	; 0x2f8 <DIO_voidSetPinValue+0xb0>
 272:	2c 81       	ldd	r18, Y+4	; 0x04
 274:	3d 81       	ldd	r19, Y+5	; 0x05
 276:	22 30       	cpi	r18, 0x02	; 2
 278:	31 05       	cpc	r19, r1
 27a:	2c f4       	brge	.+10     	; 0x286 <DIO_voidSetPinValue+0x3e>
 27c:	8c 81       	ldd	r24, Y+4	; 0x04
 27e:	9d 81       	ldd	r25, Y+5	; 0x05
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	71 f0       	breq	.+28     	; 0x2a0 <DIO_voidSetPinValue+0x58>
 284:	bc c0       	rjmp	.+376    	; 0x3fe <DIO_voidSetPinValue+0x1b6>
 286:	2c 81       	ldd	r18, Y+4	; 0x04
 288:	3d 81       	ldd	r19, Y+5	; 0x05
 28a:	22 30       	cpi	r18, 0x02	; 2
 28c:	31 05       	cpc	r19, r1
 28e:	09 f4       	brne	.+2      	; 0x292 <DIO_voidSetPinValue+0x4a>
 290:	5f c0       	rjmp	.+190    	; 0x350 <DIO_voidSetPinValue+0x108>
 292:	8c 81       	ldd	r24, Y+4	; 0x04
 294:	9d 81       	ldd	r25, Y+5	; 0x05
 296:	83 30       	cpi	r24, 0x03	; 3
 298:	91 05       	cpc	r25, r1
 29a:	09 f4       	brne	.+2      	; 0x29e <DIO_voidSetPinValue+0x56>
 29c:	85 c0       	rjmp	.+266    	; 0x3a8 <DIO_voidSetPinValue+0x160>
 29e:	af c0       	rjmp	.+350    	; 0x3fe <DIO_voidSetPinValue+0x1b6>
	{
		case 0:
			if(Value==0)
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	88 23       	and	r24, r24
 2a4:	a9 f4       	brne	.+42     	; 0x2d0 <DIO_voidSetPinValue+0x88>
					{
						CLEAR_BIT(PORTA,Pin);
 2a6:	ab e3       	ldi	r26, 0x3B	; 59
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	eb e3       	ldi	r30, 0x3B	; 59
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	48 2f       	mov	r20, r24
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	28 2f       	mov	r18, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 2e       	mov	r0, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_voidSetPinValue+0x7c>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_voidSetPinValue+0x78>
 2c8:	80 95       	com	r24
 2ca:	84 23       	and	r24, r20
 2cc:	8c 93       	st	X, r24
 2ce:	97 c0       	rjmp	.+302    	; 0x3fe <DIO_voidSetPinValue+0x1b6>

					}
					else
					{
						SET_BIT(PORTA,Pin);
 2d0:	ab e3       	ldi	r26, 0x3B	; 59
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	eb e3       	ldi	r30, 0x3B	; 59
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	48 2f       	mov	r20, r24
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	28 2f       	mov	r18, r24
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 2e       	mov	r0, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_voidSetPinValue+0xa6>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_voidSetPinValue+0xa2>
 2f2:	84 2b       	or	r24, r20
 2f4:	8c 93       	st	X, r24
 2f6:	83 c0       	rjmp	.+262    	; 0x3fe <DIO_voidSetPinValue+0x1b6>
					}


			break;
		case 1:
			if(Value==0)
 2f8:	8b 81       	ldd	r24, Y+3	; 0x03
 2fa:	88 23       	and	r24, r24
 2fc:	a9 f4       	brne	.+42     	; 0x328 <DIO_voidSetPinValue+0xe0>
				{
				CLEAR_BIT(PORTB,Pin);
 2fe:	a8 e3       	ldi	r26, 0x38	; 56
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	e8 e3       	ldi	r30, 0x38	; 56
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	48 2f       	mov	r20, r24
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 2e       	mov	r0, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_voidSetPinValue+0xd4>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_voidSetPinValue+0xd0>
 320:	80 95       	com	r24
 322:	84 23       	and	r24, r20
 324:	8c 93       	st	X, r24
 326:	6b c0       	rjmp	.+214    	; 0x3fe <DIO_voidSetPinValue+0x1b6>

				}
				else
				{
				SET_BIT(PORTB,Pin);
 328:	a8 e3       	ldi	r26, 0x38	; 56
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	e8 e3       	ldi	r30, 0x38	; 56
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	48 2f       	mov	r20, r24
 334:	8a 81       	ldd	r24, Y+2	; 0x02
 336:	28 2f       	mov	r18, r24
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 2e       	mov	r0, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_voidSetPinValue+0xfe>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_voidSetPinValue+0xfa>
 34a:	84 2b       	or	r24, r20
 34c:	8c 93       	st	X, r24
 34e:	57 c0       	rjmp	.+174    	; 0x3fe <DIO_voidSetPinValue+0x1b6>
				}

			break;
		case 2:
			if(Value==0)
 350:	8b 81       	ldd	r24, Y+3	; 0x03
 352:	88 23       	and	r24, r24
 354:	a9 f4       	brne	.+42     	; 0x380 <DIO_voidSetPinValue+0x138>
				{
				CLEAR_BIT(PORTC,Pin);
 356:	a5 e3       	ldi	r26, 0x35	; 53
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	e5 e3       	ldi	r30, 0x35	; 53
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	48 2f       	mov	r20, r24
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	28 2f       	mov	r18, r24
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 2e       	mov	r0, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_voidSetPinValue+0x12c>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_voidSetPinValue+0x128>
 378:	80 95       	com	r24
 37a:	84 23       	and	r24, r20
 37c:	8c 93       	st	X, r24
 37e:	3f c0       	rjmp	.+126    	; 0x3fe <DIO_voidSetPinValue+0x1b6>

				}
				else
				{
					SET_BIT(PORTC,Pin);
 380:	a5 e3       	ldi	r26, 0x35	; 53
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	e5 e3       	ldi	r30, 0x35	; 53
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	48 2f       	mov	r20, r24
 38c:	8a 81       	ldd	r24, Y+2	; 0x02
 38e:	28 2f       	mov	r18, r24
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 2e       	mov	r0, r18
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_voidSetPinValue+0x156>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_voidSetPinValue+0x152>
 3a2:	84 2b       	or	r24, r20
 3a4:	8c 93       	st	X, r24
 3a6:	2b c0       	rjmp	.+86     	; 0x3fe <DIO_voidSetPinValue+0x1b6>
				}
			break;

		case 3:
			if(Value==0)
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	88 23       	and	r24, r24
 3ac:	a9 f4       	brne	.+42     	; 0x3d8 <DIO_voidSetPinValue+0x190>
					{
					CLEAR_BIT(PORTD,Pin);
 3ae:	a2 e3       	ldi	r26, 0x32	; 50
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	e2 e3       	ldi	r30, 0x32	; 50
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	48 2f       	mov	r20, r24
 3ba:	8a 81       	ldd	r24, Y+2	; 0x02
 3bc:	28 2f       	mov	r18, r24
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 2e       	mov	r0, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_voidSetPinValue+0x184>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_voidSetPinValue+0x180>
 3d0:	80 95       	com	r24
 3d2:	84 23       	and	r24, r20
 3d4:	8c 93       	st	X, r24
 3d6:	13 c0       	rjmp	.+38     	; 0x3fe <DIO_voidSetPinValue+0x1b6>

					}
					else
					{
						SET_BIT(PORTD,Pin);
 3d8:	a2 e3       	ldi	r26, 0x32	; 50
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	e2 e3       	ldi	r30, 0x32	; 50
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	48 2f       	mov	r20, r24
 3e4:	8a 81       	ldd	r24, Y+2	; 0x02
 3e6:	28 2f       	mov	r18, r24
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 2e       	mov	r0, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_voidSetPinValue+0x1ae>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	0a 94       	dec	r0
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_voidSetPinValue+0x1aa>
 3fa:	84 2b       	or	r24, r20
 3fc:	8c 93       	st	X, r24

			break;
	}


}
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	cf 91       	pop	r28
 40a:	df 91       	pop	r29
 40c:	08 95       	ret

0000040e <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue(u8 Port,u8 Pin)
{
 40e:	df 93       	push	r29
 410:	cf 93       	push	r28
 412:	00 d0       	rcall	.+0      	; 0x414 <DIO_voidTogglePinValue+0x6>
 414:	00 d0       	rcall	.+0      	; 0x416 <DIO_voidTogglePinValue+0x8>
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
 41a:	89 83       	std	Y+1, r24	; 0x01
 41c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	3c 83       	std	Y+4, r19	; 0x04
 426:	2b 83       	std	Y+3, r18	; 0x03
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	9c 81       	ldd	r25, Y+4	; 0x04
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	91 05       	cpc	r25, r1
 430:	49 f1       	breq	.+82     	; 0x484 <DIO_voidTogglePinValue+0x76>
 432:	2b 81       	ldd	r18, Y+3	; 0x03
 434:	3c 81       	ldd	r19, Y+4	; 0x04
 436:	22 30       	cpi	r18, 0x02	; 2
 438:	31 05       	cpc	r19, r1
 43a:	2c f4       	brge	.+10     	; 0x446 <DIO_voidTogglePinValue+0x38>
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	9c 81       	ldd	r25, Y+4	; 0x04
 440:	00 97       	sbiw	r24, 0x00	; 0
 442:	61 f0       	breq	.+24     	; 0x45c <DIO_voidTogglePinValue+0x4e>
 444:	5a c0       	rjmp	.+180    	; 0x4fa <DIO_voidTogglePinValue+0xec>
 446:	2b 81       	ldd	r18, Y+3	; 0x03
 448:	3c 81       	ldd	r19, Y+4	; 0x04
 44a:	22 30       	cpi	r18, 0x02	; 2
 44c:	31 05       	cpc	r19, r1
 44e:	71 f1       	breq	.+92     	; 0x4ac <DIO_voidTogglePinValue+0x9e>
 450:	8b 81       	ldd	r24, Y+3	; 0x03
 452:	9c 81       	ldd	r25, Y+4	; 0x04
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	91 05       	cpc	r25, r1
 458:	e9 f1       	breq	.+122    	; 0x4d4 <DIO_voidTogglePinValue+0xc6>
 45a:	4f c0       	rjmp	.+158    	; 0x4fa <DIO_voidTogglePinValue+0xec>
	{
	case 0:
		TOGGLE_BIT(PORTA,Pin);
 45c:	ab e3       	ldi	r26, 0x3B	; 59
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	eb e3       	ldi	r30, 0x3B	; 59
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	48 2f       	mov	r20, r24
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 2e       	mov	r0, r18
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_voidTogglePinValue+0x6c>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_voidTogglePinValue+0x68>
 47e:	84 27       	eor	r24, r20
 480:	8c 93       	st	X, r24
 482:	3b c0       	rjmp	.+118    	; 0x4fa <DIO_voidTogglePinValue+0xec>

		break;
	case 1:
		TOGGLE_BIT(PORTB,Pin);
 484:	a8 e3       	ldi	r26, 0x38	; 56
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	e8 e3       	ldi	r30, 0x38	; 56
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	48 2f       	mov	r20, r24
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	28 2f       	mov	r18, r24
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 2e       	mov	r0, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_voidTogglePinValue+0x94>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_voidTogglePinValue+0x90>
 4a6:	84 27       	eor	r24, r20
 4a8:	8c 93       	st	X, r24
 4aa:	27 c0       	rjmp	.+78     	; 0x4fa <DIO_voidTogglePinValue+0xec>

		break;
	case 2:
		TOGGLE_BIT(PORTC,Pin);
 4ac:	a5 e3       	ldi	r26, 0x35	; 53
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	e5 e3       	ldi	r30, 0x35	; 53
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	48 2f       	mov	r20, r24
 4b8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ba:	28 2f       	mov	r18, r24
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 2e       	mov	r0, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_voidTogglePinValue+0xbc>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	0a 94       	dec	r0
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_voidTogglePinValue+0xb8>
 4ce:	84 27       	eor	r24, r20
 4d0:	8c 93       	st	X, r24
 4d2:	13 c0       	rjmp	.+38     	; 0x4fa <DIO_voidTogglePinValue+0xec>

		break;

	case 3:
		TOGGLE_BIT(PORTD,Pin);
 4d4:	a2 e3       	ldi	r26, 0x32	; 50
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	e2 e3       	ldi	r30, 0x32	; 50
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	48 2f       	mov	r20, r24
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	28 2f       	mov	r18, r24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 2e       	mov	r0, r18
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_voidTogglePinValue+0xe4>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_voidTogglePinValue+0xe0>
 4f6:	84 27       	eor	r24, r20
 4f8:	8c 93       	st	X, r24

		break;

	}

}
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	cf 91       	pop	r28
 504:	df 91       	pop	r29
 506:	08 95       	ret

00000508 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 PORT,u8 Pin)
{
 508:	df 93       	push	r29
 50a:	cf 93       	push	r28
 50c:	00 d0       	rcall	.+0      	; 0x50e <DIO_u8GetPinValue+0x6>
 50e:	00 d0       	rcall	.+0      	; 0x510 <DIO_u8GetPinValue+0x8>
 510:	00 d0       	rcall	.+0      	; 0x512 <DIO_u8GetPinValue+0xa>
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	89 83       	std	Y+1, r24	; 0x01
 518:	6a 83       	std	Y+2, r22	; 0x02
switch(PORT)
 51a:	89 81       	ldd	r24, Y+1	; 0x01
 51c:	28 2f       	mov	r18, r24
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	3d 83       	std	Y+5, r19	; 0x05
 522:	2c 83       	std	Y+4, r18	; 0x04
 524:	4c 81       	ldd	r20, Y+4	; 0x04
 526:	5d 81       	ldd	r21, Y+5	; 0x05
 528:	41 30       	cpi	r20, 0x01	; 1
 52a:	51 05       	cpc	r21, r1
 52c:	49 f1       	breq	.+82     	; 0x580 <DIO_u8GetPinValue+0x78>
 52e:	8c 81       	ldd	r24, Y+4	; 0x04
 530:	9d 81       	ldd	r25, Y+5	; 0x05
 532:	82 30       	cpi	r24, 0x02	; 2
 534:	91 05       	cpc	r25, r1
 536:	34 f4       	brge	.+12     	; 0x544 <DIO_u8GetPinValue+0x3c>
 538:	2c 81       	ldd	r18, Y+4	; 0x04
 53a:	3d 81       	ldd	r19, Y+5	; 0x05
 53c:	21 15       	cp	r18, r1
 53e:	31 05       	cpc	r19, r1
 540:	61 f0       	breq	.+24     	; 0x55a <DIO_u8GetPinValue+0x52>
 542:	57 c0       	rjmp	.+174    	; 0x5f2 <DIO_u8GetPinValue+0xea>
 544:	4c 81       	ldd	r20, Y+4	; 0x04
 546:	5d 81       	ldd	r21, Y+5	; 0x05
 548:	42 30       	cpi	r20, 0x02	; 2
 54a:	51 05       	cpc	r21, r1
 54c:	61 f1       	breq	.+88     	; 0x5a6 <DIO_u8GetPinValue+0x9e>
 54e:	8c 81       	ldd	r24, Y+4	; 0x04
 550:	9d 81       	ldd	r25, Y+5	; 0x05
 552:	83 30       	cpi	r24, 0x03	; 3
 554:	91 05       	cpc	r25, r1
 556:	d1 f1       	breq	.+116    	; 0x5cc <DIO_u8GetPinValue+0xc4>
 558:	4c c0       	rjmp	.+152    	; 0x5f2 <DIO_u8GetPinValue+0xea>
{
case 0:
	return  GET_BIT(PINA,Pin);
 55a:	e9 e3       	ldi	r30, 0x39	; 57
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	28 2f       	mov	r18, r24
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	8a 81       	ldd	r24, Y+2	; 0x02
 566:	88 2f       	mov	r24, r24
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	a9 01       	movw	r20, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_u8GetPinValue+0x6a>
 56e:	55 95       	asr	r21
 570:	47 95       	ror	r20
 572:	8a 95       	dec	r24
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_u8GetPinValue+0x66>
 576:	ca 01       	movw	r24, r20
 578:	58 2f       	mov	r21, r24
 57a:	51 70       	andi	r21, 0x01	; 1
 57c:	5b 83       	std	Y+3, r21	; 0x03
 57e:	3a c0       	rjmp	.+116    	; 0x5f4 <DIO_u8GetPinValue+0xec>

case 1:
	return GET_BIT(PINB,Pin);
 580:	e6 e3       	ldi	r30, 0x36	; 54
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	28 2f       	mov	r18, r24
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	8a 81       	ldd	r24, Y+2	; 0x02
 58c:	88 2f       	mov	r24, r24
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	a9 01       	movw	r20, r18
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_u8GetPinValue+0x90>
 594:	55 95       	asr	r21
 596:	47 95       	ror	r20
 598:	8a 95       	dec	r24
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_u8GetPinValue+0x8c>
 59c:	ca 01       	movw	r24, r20
 59e:	58 2f       	mov	r21, r24
 5a0:	51 70       	andi	r21, 0x01	; 1
 5a2:	5b 83       	std	Y+3, r21	; 0x03
 5a4:	27 c0       	rjmp	.+78     	; 0x5f4 <DIO_u8GetPinValue+0xec>
case 2:
	return GET_BIT(PINC,Pin);
 5a6:	e3 e3       	ldi	r30, 0x33	; 51
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 81       	ld	r24, Z
 5ac:	28 2f       	mov	r18, r24
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	8a 81       	ldd	r24, Y+2	; 0x02
 5b2:	88 2f       	mov	r24, r24
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	a9 01       	movw	r20, r18
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <DIO_u8GetPinValue+0xb6>
 5ba:	55 95       	asr	r21
 5bc:	47 95       	ror	r20
 5be:	8a 95       	dec	r24
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DIO_u8GetPinValue+0xb2>
 5c2:	ca 01       	movw	r24, r20
 5c4:	58 2f       	mov	r21, r24
 5c6:	51 70       	andi	r21, 0x01	; 1
 5c8:	5b 83       	std	Y+3, r21	; 0x03
 5ca:	14 c0       	rjmp	.+40     	; 0x5f4 <DIO_u8GetPinValue+0xec>
case 3:
	return GET_BIT(PIND,Pin);
 5cc:	e0 e3       	ldi	r30, 0x30	; 48
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	28 2f       	mov	r18, r24
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	88 2f       	mov	r24, r24
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	a9 01       	movw	r20, r18
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_u8GetPinValue+0xdc>
 5e0:	55 95       	asr	r21
 5e2:	47 95       	ror	r20
 5e4:	8a 95       	dec	r24
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_u8GetPinValue+0xd8>
 5e8:	ca 01       	movw	r24, r20
 5ea:	58 2f       	mov	r21, r24
 5ec:	51 70       	andi	r21, 0x01	; 1
 5ee:	5b 83       	std	Y+3, r21	; 0x03
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <DIO_u8GetPinValue+0xec>
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_u8GetPinValue+0xf0>


}


}
 5f4:	8b 81       	ldd	r24, Y+3	; 0x03
 5f6:	8e 83       	std	Y+6, r24	; 0x06
 5f8:	8e 81       	ldd	r24, Y+6	; 0x06
 5fa:	26 96       	adiw	r28, 0x06	; 6
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
 606:	cf 91       	pop	r28
 608:	df 91       	pop	r29
 60a:	08 95       	ret

0000060c <KeyPad_getPressedKey>:
#include<avr/io.h>
#define F_CPU 12000000
#include<util/delay.h>
u8 KeyPad_4x4_adjustKeyNumber(u8 button_number);
u8 KeyPad_getPressedKey(void);
u8 KeyPad_getPressedKey(void){
 60c:	df 93       	push	r29
 60e:	cf 93       	push	r28
 610:	00 d0       	rcall	.+0      	; 0x612 <KeyPad_getPressedKey+0x6>
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
	u8 col,row;
	while(1)
	{
		for(col=0;col<4;col++)
 616:	1a 82       	std	Y+2, r1	; 0x02
 618:	50 c0       	rjmp	.+160    	; 0x6ba <KeyPad_getPressedKey+0xae>
		{
			DDRA = (0b00010000<<col);
 61a:	ea e3       	ldi	r30, 0x3A	; 58
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	8a 81       	ldd	r24, Y+2	; 0x02
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	80 e1       	ldi	r24, 0x10	; 16
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <KeyPad_getPressedKey+0x22>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	2a 95       	dec	r18
 630:	e2 f7       	brpl	.-8      	; 0x62a <KeyPad_getPressedKey+0x1e>
 632:	80 83       	st	Z, r24
			PORTA = (~(0b00010000<<col));
 634:	eb e3       	ldi	r30, 0x3B	; 59
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	8a 81       	ldd	r24, Y+2	; 0x02
 63a:	28 2f       	mov	r18, r24
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	80 e1       	ldi	r24, 0x10	; 16
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 2e       	mov	r0, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <KeyPad_getPressedKey+0x3e>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	0a 94       	dec	r0
 64c:	e2 f7       	brpl	.-8      	; 0x646 <KeyPad_getPressedKey+0x3a>
 64e:	80 95       	com	r24
 650:	80 83       	st	Z, r24
			for(row=0;row<4;row++)
 652:	19 82       	std	Y+1, r1	; 0x01
 654:	2c c0       	rjmp	.+88     	; 0x6ae <KeyPad_getPressedKey+0xa2>
			{
				if(CLEAR_BIT(PINA,row))
 656:	a9 e3       	ldi	r26, 0x39	; 57
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	e9 e3       	ldi	r30, 0x39	; 57
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	48 2f       	mov	r20, r24
 662:	89 81       	ldd	r24, Y+1	; 0x01
 664:	28 2f       	mov	r18, r24
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 2e       	mov	r0, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <KeyPad_getPressedKey+0x68>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	0a 94       	dec	r0
 676:	e2 f7       	brpl	.-8      	; 0x670 <KeyPad_getPressedKey+0x64>
 678:	80 95       	com	r24
 67a:	84 23       	and	r24, r20
 67c:	8c 93       	st	X, r24
 67e:	8c 91       	ld	r24, X
 680:	88 23       	and	r24, r24
 682:	91 f0       	breq	.+36     	; 0x6a8 <KeyPad_getPressedKey+0x9c>
				{
					return KeyPad_4x4_adjustKeyNumber((row*4)+col+1);
 684:	89 81       	ldd	r24, Y+1	; 0x01
 686:	88 2f       	mov	r24, r24
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	98 2f       	mov	r25, r24
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	89 0f       	add	r24, r25
 698:	8f 5f       	subi	r24, 0xFF	; 255
 69a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <KeyPad_4x4_adjustKeyNumber>
				}
			}
		}
	}

}
 69e:	0f 90       	pop	r0
 6a0:	0f 90       	pop	r0
 6a2:	cf 91       	pop	r28
 6a4:	df 91       	pop	r29
 6a6:	08 95       	ret
	{
		for(col=0;col<4;col++)
		{
			DDRA = (0b00010000<<col);
			PORTA = (~(0b00010000<<col));
			for(row=0;row<4;row++)
 6a8:	89 81       	ldd	r24, Y+1	; 0x01
 6aa:	8f 5f       	subi	r24, 0xFF	; 255
 6ac:	89 83       	std	Y+1, r24	; 0x01
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
 6b0:	84 30       	cpi	r24, 0x04	; 4
 6b2:	88 f2       	brcs	.-94     	; 0x656 <KeyPad_getPressedKey+0x4a>
u8 KeyPad_getPressedKey(void);
u8 KeyPad_getPressedKey(void){
	u8 col,row;
	while(1)
	{
		for(col=0;col<4;col++)
 6b4:	8a 81       	ldd	r24, Y+2	; 0x02
 6b6:	8f 5f       	subi	r24, 0xFF	; 255
 6b8:	8a 83       	std	Y+2, r24	; 0x02
 6ba:	8a 81       	ldd	r24, Y+2	; 0x02
 6bc:	84 30       	cpi	r24, 0x04	; 4
 6be:	08 f4       	brcc	.+2      	; 0x6c2 <KeyPad_getPressedKey+0xb6>
 6c0:	ac cf       	rjmp	.-168    	; 0x61a <KeyPad_getPressedKey+0xe>
 6c2:	a9 cf       	rjmp	.-174    	; 0x616 <KeyPad_getPressedKey+0xa>

000006c4 <KeyPad_4x4_adjustKeyNumber>:
		}
	}

}
u8 KeyPad_4x4_adjustKeyNumber(u8 button_number)
{
 6c4:	df 93       	push	r29
 6c6:	cf 93       	push	r28
 6c8:	00 d0       	rcall	.+0      	; 0x6ca <KeyPad_4x4_adjustKeyNumber+0x6>
 6ca:	00 d0       	rcall	.+0      	; 0x6cc <KeyPad_4x4_adjustKeyNumber+0x8>
 6cc:	cd b7       	in	r28, 0x3d	; 61
 6ce:	de b7       	in	r29, 0x3e	; 62
 6d0:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
 6d2:	89 81       	ldd	r24, Y+1	; 0x01
 6d4:	28 2f       	mov	r18, r24
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	3c 83       	std	Y+4, r19	; 0x04
 6da:	2b 83       	std	Y+3, r18	; 0x03
 6dc:	8b 81       	ldd	r24, Y+3	; 0x03
 6de:	9c 81       	ldd	r25, Y+4	; 0x04
 6e0:	88 30       	cpi	r24, 0x08	; 8
 6e2:	91 05       	cpc	r25, r1
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <KeyPad_4x4_adjustKeyNumber+0x24>
 6e6:	70 c0       	rjmp	.+224    	; 0x7c8 <KeyPad_4x4_adjustKeyNumber+0x104>
 6e8:	2b 81       	ldd	r18, Y+3	; 0x03
 6ea:	3c 81       	ldd	r19, Y+4	; 0x04
 6ec:	29 30       	cpi	r18, 0x09	; 9
 6ee:	31 05       	cpc	r19, r1
 6f0:	5c f5       	brge	.+86     	; 0x748 <KeyPad_4x4_adjustKeyNumber+0x84>
 6f2:	8b 81       	ldd	r24, Y+3	; 0x03
 6f4:	9c 81       	ldd	r25, Y+4	; 0x04
 6f6:	84 30       	cpi	r24, 0x04	; 4
 6f8:	91 05       	cpc	r25, r1
 6fa:	09 f4       	brne	.+2      	; 0x6fe <KeyPad_4x4_adjustKeyNumber+0x3a>
 6fc:	59 c0       	rjmp	.+178    	; 0x7b0 <KeyPad_4x4_adjustKeyNumber+0xec>
 6fe:	2b 81       	ldd	r18, Y+3	; 0x03
 700:	3c 81       	ldd	r19, Y+4	; 0x04
 702:	25 30       	cpi	r18, 0x05	; 5
 704:	31 05       	cpc	r19, r1
 706:	9c f4       	brge	.+38     	; 0x72e <KeyPad_4x4_adjustKeyNumber+0x6a>
 708:	8b 81       	ldd	r24, Y+3	; 0x03
 70a:	9c 81       	ldd	r25, Y+4	; 0x04
 70c:	82 30       	cpi	r24, 0x02	; 2
 70e:	91 05       	cpc	r25, r1
 710:	09 f4       	brne	.+2      	; 0x714 <KeyPad_4x4_adjustKeyNumber+0x50>
 712:	48 c0       	rjmp	.+144    	; 0x7a4 <KeyPad_4x4_adjustKeyNumber+0xe0>
 714:	2b 81       	ldd	r18, Y+3	; 0x03
 716:	3c 81       	ldd	r19, Y+4	; 0x04
 718:	23 30       	cpi	r18, 0x03	; 3
 71a:	31 05       	cpc	r19, r1
 71c:	0c f0       	brlt	.+2      	; 0x720 <KeyPad_4x4_adjustKeyNumber+0x5c>
 71e:	45 c0       	rjmp	.+138    	; 0x7aa <KeyPad_4x4_adjustKeyNumber+0xe6>
 720:	8b 81       	ldd	r24, Y+3	; 0x03
 722:	9c 81       	ldd	r25, Y+4	; 0x04
 724:	81 30       	cpi	r24, 0x01	; 1
 726:	91 05       	cpc	r25, r1
 728:	09 f4       	brne	.+2      	; 0x72c <KeyPad_4x4_adjustKeyNumber+0x68>
 72a:	39 c0       	rjmp	.+114    	; 0x79e <KeyPad_4x4_adjustKeyNumber+0xda>
 72c:	67 c0       	rjmp	.+206    	; 0x7fc <KeyPad_4x4_adjustKeyNumber+0x138>
 72e:	2b 81       	ldd	r18, Y+3	; 0x03
 730:	3c 81       	ldd	r19, Y+4	; 0x04
 732:	26 30       	cpi	r18, 0x06	; 6
 734:	31 05       	cpc	r19, r1
 736:	09 f4       	brne	.+2      	; 0x73a <KeyPad_4x4_adjustKeyNumber+0x76>
 738:	41 c0       	rjmp	.+130    	; 0x7bc <KeyPad_4x4_adjustKeyNumber+0xf8>
 73a:	8b 81       	ldd	r24, Y+3	; 0x03
 73c:	9c 81       	ldd	r25, Y+4	; 0x04
 73e:	87 30       	cpi	r24, 0x07	; 7
 740:	91 05       	cpc	r25, r1
 742:	0c f0       	brlt	.+2      	; 0x746 <KeyPad_4x4_adjustKeyNumber+0x82>
 744:	3e c0       	rjmp	.+124    	; 0x7c2 <KeyPad_4x4_adjustKeyNumber+0xfe>
 746:	37 c0       	rjmp	.+110    	; 0x7b6 <KeyPad_4x4_adjustKeyNumber+0xf2>
 748:	2b 81       	ldd	r18, Y+3	; 0x03
 74a:	3c 81       	ldd	r19, Y+4	; 0x04
 74c:	2c 30       	cpi	r18, 0x0C	; 12
 74e:	31 05       	cpc	r19, r1
 750:	09 f4       	brne	.+2      	; 0x754 <KeyPad_4x4_adjustKeyNumber+0x90>
 752:	46 c0       	rjmp	.+140    	; 0x7e0 <KeyPad_4x4_adjustKeyNumber+0x11c>
 754:	8b 81       	ldd	r24, Y+3	; 0x03
 756:	9c 81       	ldd	r25, Y+4	; 0x04
 758:	8d 30       	cpi	r24, 0x0D	; 13
 75a:	91 05       	cpc	r25, r1
 75c:	5c f4       	brge	.+22     	; 0x774 <KeyPad_4x4_adjustKeyNumber+0xb0>
 75e:	2b 81       	ldd	r18, Y+3	; 0x03
 760:	3c 81       	ldd	r19, Y+4	; 0x04
 762:	2a 30       	cpi	r18, 0x0A	; 10
 764:	31 05       	cpc	r19, r1
 766:	b1 f1       	breq	.+108    	; 0x7d4 <KeyPad_4x4_adjustKeyNumber+0x110>
 768:	8b 81       	ldd	r24, Y+3	; 0x03
 76a:	9c 81       	ldd	r25, Y+4	; 0x04
 76c:	8b 30       	cpi	r24, 0x0B	; 11
 76e:	91 05       	cpc	r25, r1
 770:	a4 f5       	brge	.+104    	; 0x7da <KeyPad_4x4_adjustKeyNumber+0x116>
 772:	2d c0       	rjmp	.+90     	; 0x7ce <KeyPad_4x4_adjustKeyNumber+0x10a>
 774:	2b 81       	ldd	r18, Y+3	; 0x03
 776:	3c 81       	ldd	r19, Y+4	; 0x04
 778:	2e 30       	cpi	r18, 0x0E	; 14
 77a:	31 05       	cpc	r19, r1
 77c:	b9 f1       	breq	.+110    	; 0x7ec <KeyPad_4x4_adjustKeyNumber+0x128>
 77e:	8b 81       	ldd	r24, Y+3	; 0x03
 780:	9c 81       	ldd	r25, Y+4	; 0x04
 782:	8e 30       	cpi	r24, 0x0E	; 14
 784:	91 05       	cpc	r25, r1
 786:	7c f1       	brlt	.+94     	; 0x7e6 <KeyPad_4x4_adjustKeyNumber+0x122>
 788:	2b 81       	ldd	r18, Y+3	; 0x03
 78a:	3c 81       	ldd	r19, Y+4	; 0x04
 78c:	2f 30       	cpi	r18, 0x0F	; 15
 78e:	31 05       	cpc	r19, r1
 790:	79 f1       	breq	.+94     	; 0x7f0 <KeyPad_4x4_adjustKeyNumber+0x12c>
 792:	8b 81       	ldd	r24, Y+3	; 0x03
 794:	9c 81       	ldd	r25, Y+4	; 0x04
 796:	80 31       	cpi	r24, 0x10	; 16
 798:	91 05       	cpc	r25, r1
 79a:	69 f1       	breq	.+90     	; 0x7f6 <KeyPad_4x4_adjustKeyNumber+0x132>
 79c:	2f c0       	rjmp	.+94     	; 0x7fc <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
 79e:	97 e0       	ldi	r25, 0x07	; 7
 7a0:	9a 83       	std	Y+2, r25	; 0x02
 7a2:	2e c0       	rjmp	.+92     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
 7a4:	28 e0       	ldi	r18, 0x08	; 8
 7a6:	2a 83       	std	Y+2, r18	; 0x02
 7a8:	2b c0       	rjmp	.+86     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
 7aa:	39 e0       	ldi	r19, 0x09	; 9
 7ac:	3a 83       	std	Y+2, r19	; 0x02
 7ae:	28 c0       	rjmp	.+80     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
 7b0:	85 e2       	ldi	r24, 0x25	; 37
 7b2:	8a 83       	std	Y+2, r24	; 0x02
 7b4:	25 c0       	rjmp	.+74     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
 7b6:	94 e0       	ldi	r25, 0x04	; 4
 7b8:	9a 83       	std	Y+2, r25	; 0x02
 7ba:	22 c0       	rjmp	.+68     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
 7bc:	25 e0       	ldi	r18, 0x05	; 5
 7be:	2a 83       	std	Y+2, r18	; 0x02
 7c0:	1f c0       	rjmp	.+62     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
 7c2:	36 e0       	ldi	r19, 0x06	; 6
 7c4:	3a 83       	std	Y+2, r19	; 0x02
 7c6:	1c c0       	rjmp	.+56     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
 7c8:	8a e2       	ldi	r24, 0x2A	; 42
 7ca:	8a 83       	std	Y+2, r24	; 0x02
 7cc:	19 c0       	rjmp	.+50     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	9a 83       	std	Y+2, r25	; 0x02
 7d2:	16 c0       	rjmp	.+44     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
 7d4:	22 e0       	ldi	r18, 0x02	; 2
 7d6:	2a 83       	std	Y+2, r18	; 0x02
 7d8:	13 c0       	rjmp	.+38     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
 7da:	33 e0       	ldi	r19, 0x03	; 3
 7dc:	3a 83       	std	Y+2, r19	; 0x02
 7de:	10 c0       	rjmp	.+32     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
 7e0:	8d e2       	ldi	r24, 0x2D	; 45
 7e2:	8a 83       	std	Y+2, r24	; 0x02
 7e4:	0d c0       	rjmp	.+26     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
 7e6:	9d e0       	ldi	r25, 0x0D	; 13
 7e8:	9a 83       	std	Y+2, r25	; 0x02
 7ea:	0a c0       	rjmp	.+20     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
 7ec:	1a 82       	std	Y+2, r1	; 0x02
 7ee:	08 c0       	rjmp	.+16     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
 7f0:	2d e3       	ldi	r18, 0x3D	; 61
 7f2:	2a 83       	std	Y+2, r18	; 0x02
 7f4:	05 c0       	rjmp	.+10     	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
 7f6:	3b e2       	ldi	r19, 0x2B	; 43
 7f8:	3a 83       	std	Y+2, r19	; 0x02
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	8a 83       	std	Y+2, r24	; 0x02
 800:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
 802:	0f 90       	pop	r0
 804:	0f 90       	pop	r0
 806:	0f 90       	pop	r0
 808:	0f 90       	pop	r0
 80a:	cf 91       	pop	r28
 80c:	df 91       	pop	r29
 80e:	08 95       	ret

00000810 <main>:
 *      Author: Fly labs
 */


int main(void)
{
 810:	0f 93       	push	r16
 812:	1f 93       	push	r17
 814:	df 93       	push	r29
 816:	cf 93       	push	r28
 818:	cd b7       	in	r28, 0x3d	; 61
 81a:	de b7       	in	r29, 0x3e	; 62
 81c:	61 97       	sbiw	r28, 0x11	; 17
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	f8 94       	cli
 822:	de bf       	out	0x3e, r29	; 62
 824:	0f be       	out	0x3f, r0	; 63
 826:	cd bf       	out	0x3d, r28	; 61
	u8 seg[]={0b01011111,0b00000110,0b00111011,0b00101111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
 828:	ce 01       	movw	r24, r28
 82a:	03 96       	adiw	r24, 0x03	; 3
 82c:	9e 87       	std	Y+14, r25	; 0x0e
 82e:	8d 87       	std	Y+13, r24	; 0x0d
 830:	e0 e6       	ldi	r30, 0x60	; 96
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	f8 8b       	std	Y+16, r31	; 0x10
 836:	ef 87       	std	Y+15, r30	; 0x0f
 838:	fa e0       	ldi	r31, 0x0A	; 10
 83a:	f9 8b       	std	Y+17, r31	; 0x11
 83c:	ef 85       	ldd	r30, Y+15	; 0x0f
 83e:	f8 89       	ldd	r31, Y+16	; 0x10
 840:	00 80       	ld	r0, Z
 842:	8f 85       	ldd	r24, Y+15	; 0x0f
 844:	98 89       	ldd	r25, Y+16	; 0x10
 846:	01 96       	adiw	r24, 0x01	; 1
 848:	98 8b       	std	Y+16, r25	; 0x10
 84a:	8f 87       	std	Y+15, r24	; 0x0f
 84c:	ed 85       	ldd	r30, Y+13	; 0x0d
 84e:	fe 85       	ldd	r31, Y+14	; 0x0e
 850:	00 82       	st	Z, r0
 852:	8d 85       	ldd	r24, Y+13	; 0x0d
 854:	9e 85       	ldd	r25, Y+14	; 0x0e
 856:	01 96       	adiw	r24, 0x01	; 1
 858:	9e 87       	std	Y+14, r25	; 0x0e
 85a:	8d 87       	std	Y+13, r24	; 0x0d
 85c:	99 89       	ldd	r25, Y+17	; 0x11
 85e:	91 50       	subi	r25, 0x01	; 1
 860:	99 8b       	std	Y+17, r25	; 0x11
 862:	e9 89       	ldd	r30, Y+17	; 0x11
 864:	ee 23       	and	r30, r30
 866:	51 f7       	brne	.-44     	; 0x83c <main+0x2c>

	DDRB=0xFF;
 868:	e7 e3       	ldi	r30, 0x37	; 55
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	8f ef       	ldi	r24, 0xFF	; 255
 86e:	80 83       	st	Z, r24
	u8 x;
	u8 i;
	while(1)
	{
			x=KeyPad_getPressedKey();
 870:	0e 94 06 03 	call	0x60c	; 0x60c <KeyPad_getPressedKey>
 874:	8a 83       	std	Y+2, r24	; 0x02

			if(x!=0xff)
 876:	8a 81       	ldd	r24, Y+2	; 0x02
 878:	8f 3f       	cpi	r24, 0xFF	; 255
 87a:	81 f0       	breq	.+32     	; 0x89c <__stack+0x3d>
				{
				for(i=0;i<=9;i++){
 87c:	19 82       	std	Y+1, r1	; 0x01
 87e:	0a c0       	rjmp	.+20     	; 0x894 <__stack+0x35>
					PORTB=KeyPad_4x4_adjustKeyNumber(i);}
 880:	08 e3       	ldi	r16, 0x38	; 56
 882:	10 e0       	ldi	r17, 0x00	; 0
 884:	89 81       	ldd	r24, Y+1	; 0x01
 886:	0e 94 62 03 	call	0x6c4	; 0x6c4 <KeyPad_4x4_adjustKeyNumber>
 88a:	f8 01       	movw	r30, r16
 88c:	80 83       	st	Z, r24
	{
			x=KeyPad_getPressedKey();

			if(x!=0xff)
				{
				for(i=0;i<=9;i++){
 88e:	89 81       	ldd	r24, Y+1	; 0x01
 890:	8f 5f       	subi	r24, 0xFF	; 255
 892:	89 83       	std	Y+1, r24	; 0x01
 894:	89 81       	ldd	r24, Y+1	; 0x01
 896:	8a 30       	cpi	r24, 0x0A	; 10
 898:	98 f3       	brcs	.-26     	; 0x880 <__stack+0x21>
 89a:	ea cf       	rjmp	.-44     	; 0x870 <__stack+0x11>
					PORTB=KeyPad_4x4_adjustKeyNumber(i);}
				}
			else
				{
					PORTB=0;
 89c:	e8 e3       	ldi	r30, 0x38	; 56
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	10 82       	st	Z, r1
 8a2:	e6 cf       	rjmp	.-52     	; 0x870 <__stack+0x11>

000008a4 <_exit>:
 8a4:	f8 94       	cli

000008a6 <__stop_program>:
 8a6:	ff cf       	rjmp	.-2      	; 0x8a6 <__stop_program>
